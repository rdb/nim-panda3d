
import ./private

when defined(vcc):
  when defined(pandaDir):
    {.passL: "\"" & pandaDir & "/lib/libpandaexpress.lib\"".}
    {.passL: "\"" & pandaDir & "/lib/libpanda.lib\"".}
    {.passL: "\"" & pandaDir & "/lib/libp3dtoolconfig.lib\"".}
    {.passL: "\"" & pandaDir & "/lib/libp3dtool.lib\"".}
  else:
    {.passL: "libpandaexpress.lib libpanda.lib libp3dtoolconfig.lib libp3dtool.lib".}

else:
  {.passL: "-lpandaexpress -lpanda -lp3dtoolconfig -lp3dtool".}

const wrappedVec2Code = """
#include "lvecBase2.h"
#include "lvector2.h"
#include "lpoint2.h"

template<class T>
struct alignas(T) WrappedVBase2 {
  typename T::numeric_type x;
  typename T::numeric_type y;

  constexpr WrappedVBase2() = default;
  WrappedVBase2(typename T::numeric_type v0, typename T::numeric_type v1) : x(v0), y(v1) { }
  WrappedVBase2(const T &v) : x(v[0]), y(v[1]) { }
  operator const T &() const { return *(const T *)this; }
  operator T &() { return *(T *)this; }
};

template<class T, class B>
struct alignas(T) WrappedVec2 : public WrappedVBase2<B> {
  constexpr WrappedVec2() = default;
  WrappedVec2(typename T::numeric_type v0, typename T::numeric_type v1) : WrappedVBase2<B>(v0, v1) { }
  WrappedVec2(const T &v) : WrappedVBase2<B>(v[0], v[1]) { }
  operator const T &() const { return *(const T *)this; }
  operator T &() { return *(T *)this; }
};

typedef WrappedVBase2<LVecBase2f> WrappedLVecBase2f;
typedef WrappedVBase2<LVecBase2d> WrappedLVecBase2d;
typedef WrappedVBase2<LVecBase2i> WrappedLVecBase2i;
typedef WrappedVec2<LVector2f, LVecBase2f> WrappedLVector2f;
typedef WrappedVec2<LVector2f, LVecBase2d> WrappedLVector2d;
typedef WrappedVec2<LVector2f, LVecBase2i> WrappedLVector2i;
typedef WrappedVec2<LPoint2f, LVecBase2f> WrappedLPoint2f;
typedef WrappedVec2<LPoint2f, LVecBase2d> WrappedLPoint2d;
typedef WrappedVec2<LPoint2f, LVecBase2i> WrappedLPoint2i;
""";

const wrappedVec3Code = """
#include "lvecBase3.h"
#include "lvector3.h"
#include "lpoint3.h"

template<class T>
struct alignas(T) WrappedVBase3 {
  typename T::numeric_type x = 0;
  typename T::numeric_type y = 0;
  typename T::numeric_type z = 0;

  constexpr WrappedVBase3() = default;
  WrappedVBase3(typename T::numeric_type v0, typename T::numeric_type v1, typename T::numeric_type v2) : x(v0), y(v1), z(v2) { }
  WrappedVBase3(const T &v) : x(v[0]), y(v[1]), z(v[2]) { }
  operator const T &() const { return *(const T *)this; }
  operator T &() { return *(T *)this; }
};

template<class T, class B>
struct alignas(T) WrappedVec3 : public WrappedVBase3<B> {
  constexpr WrappedVec3() = default;
  WrappedVec3(typename T::numeric_type v0, typename T::numeric_type v1, typename T::numeric_type v2) : WrappedVBase3<B>(v0, v1, v2) { }
  WrappedVec3(const T &v) : WrappedVBase3<B>(v[0], v[1], v[2]) { }
  operator const T &() const { return *(const T *)this; }
  operator T &() { return *(T *)this; }
};

typedef WrappedVBase3<LVecBase3f> WrappedLVecBase3f;
typedef WrappedVBase3<LVecBase3d> WrappedLVecBase3d;
typedef WrappedVBase3<LVecBase3i> WrappedLVecBase3i;
typedef WrappedVec3<LVector3f, LVecBase3f> WrappedLVector3f;
typedef WrappedVec3<LVector3f, LVecBase3d> WrappedLVector3d;
typedef WrappedVec3<LVector3f, LVecBase3i> WrappedLVector3i;
typedef WrappedVec3<LPoint3f, LVecBase3f> WrappedLPoint3f;
typedef WrappedVec3<LPoint3f, LVecBase3d> WrappedLPoint3d;
typedef WrappedVec3<LPoint3f, LVecBase3i> WrappedLPoint3i;
""";

const wrappedVec4Code = """
#include "lvecBase4.h"
#include "lvector4.h"
#include "lpoint4.h"

template<class T>
struct alignas(T) WrappedVBase4 {
  typename T::numeric_type x = 0;
  typename T::numeric_type y = 0;
  typename T::numeric_type z = 0;
  typename T::numeric_type w = 0;

  constexpr WrappedVBase4() = default;
  WrappedVBase4(typename T::numeric_type v0, typename T::numeric_type v1, typename T::numeric_type v2, typename T::numeric_type v3) : x(v0), y(v1), z(v2), w(v3) { }
  WrappedVBase4(const T &v) : x(v[0]), y(v[1]), z(v[2]), w(v[3]) { }
  operator const T &() const { return *(const T *)this; }
  operator T &() { return *(T *)this; }
};

template<class T, class B>
struct alignas(T) WrappedVec4 : public WrappedVBase4<B> {
  constexpr WrappedVec4() = default;
  WrappedVec4(typename T::numeric_type v0, typename T::numeric_type v1, typename T::numeric_type v2, typename T::numeric_type v3) : WrappedVBase4<B>(v0, v1, v2, v3) { }
  WrappedVec4(const T &v) : WrappedVBase4<B>(v[0], v[1], v[2], v[3]) { }
  operator const T &() const { return *(const T *)this; }
  operator T &() { return *(T *)this; }
};

typedef WrappedVBase4<LVecBase4f> WrappedLVecBase4f;
typedef WrappedVBase4<LVecBase4d> WrappedLVecBase4d;
typedef WrappedVBase4<LVecBase4i> WrappedLVecBase4i;
typedef WrappedVec4<LVector4f, LVecBase4f> WrappedLVector4f;
typedef WrappedVec4<LVector4f, LVecBase4d> WrappedLVector4d;
typedef WrappedVec4<LVector4f, LVecBase4i> WrappedLVector4i;
typedef WrappedVec4<LPoint4f, LVecBase4f> WrappedLPoint4f;
typedef WrappedVec4<LPoint4f, LVecBase4d> WrappedLPoint4d;
typedef WrappedVec4<LPoint4f, LVecBase4i> WrappedLPoint4i;
""";

const nimCallbackObjectCode = """
#include "callbackObject.h"

N_LIB_PRIVATE N_NIMCALL(void, unrefEnv)(void *envp);

class NimCallbackObject final : public CallbackObject {
public:
  typedef void Function(CallbackData *cbdata, void *env);

  NimCallbackObject(Function *function, void *env) :
    _proc(function), _env(env) {}

  virtual ~NimCallbackObject() {
    if (_env != nullptr) {
      unrefEnv(_env);
    }
  }

  ALLOC_DELETED_CHAIN(NimCallbackObject);

  virtual void do_callback(CallbackData *cbdata) override {
    _proc(cbdata, _env);
  }

private:
  Function *_proc;
  void *_env;
};
""";

type NeverFreeMemory* {.importcpp: "NeverFreeMemory", pure, inheritable, header: "neverFreeMemory.h".} = object

type TypeHandle* {.importcpp: "TypeHandle", pure, header: "typeHandle.h".} = object

type TypeHandle_MemoryClass {.importcpp: "TypeHandle::MemoryClass", pure, header: "typeHandle.h".} = enum
  MC_singleton = 0
  MC_array = 1
  MC_deletedChainActive = 2
  MC_deletedChainInactive = 3
  MC_limit = 4

template MemoryClass*(_: typedesc[TypeHandle]): typedesc[TypeHandle_MemoryClass] = typedesc[TypeHandle_MemoryClass]
template MemoryClass*(_: typedesc[TypeHandle], value: untyped): TypeHandle_MemoryClass = TypeHandle_MemoryClass(value)

template MC_singleton*(_: typedesc[TypeHandle]): TypeHandle_MemoryClass = TypeHandle_MemoryClass.MC_singleton
template MC_array*(_: typedesc[TypeHandle]): TypeHandle_MemoryClass = TypeHandle_MemoryClass.MC_array
template MC_deletedChainActive*(_: typedesc[TypeHandle]): TypeHandle_MemoryClass = TypeHandle_MemoryClass.MC_deletedChainActive
template MC_deletedChainInactive*(_: typedesc[TypeHandle]): TypeHandle_MemoryClass = TypeHandle_MemoryClass.MC_deletedChainInactive
template MC_limit*(_: typedesc[TypeHandle]): TypeHandle_MemoryClass = TypeHandle_MemoryClass.MC_limit

type TypeRegistry* {.importcpp: "TypeRegistry", pure, inheritable, header: "typeRegistry.h".} = object

type TypedObject* {.importcpp: "TypedObject*", bycopy, pure, inheritable, header: "typedObject.h".} = object

proc toTypedObject*(_: type(nil)): TypedObject {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TypedObject], obj: TypedObject): TypedObject {.importcpp: "(@)".}

type ios_base* {.importcpp: "ios_base", pure, inheritable, header: "<ios>".} = object

type ios_base_seekdir {.importcpp: "std::ios_base::seekdir", pure, header: "<ios>".} = enum
  beg = 0
  cur = 1
  `end` = 2

template seekdir*(_: typedesc[ios_base]): typedesc[ios_base_seekdir] = typedesc[ios_base_seekdir]
template seekdir*(_: typedesc[ios_base], value: untyped): ios_base_seekdir = ios_base_seekdir(value)

template beg*(_: typedesc[ios_base]): ios_base_seekdir = ios_base_seekdir.beg
template cur*(_: typedesc[ios_base]): ios_base_seekdir = ios_base_seekdir.cur
template `end`*(_: typedesc[ios_base]): ios_base_seekdir = ios_base_seekdir.`end`

type istream* {.importcpp: "istream", pure, inheritable, header: "<istream>".} = object

type ostream* {.importcpp: "ostream", pure, inheritable, header: "<ostream>".} = object

type iostream* {.importcpp: "iostream", pure, inheritable, header: "<iostream>".} = object of istream

proc upcastToostream*(_: typedesc[iostream]): typedesc[ostream] = typedesc[ostream]

type fstream* {.importcpp: "fstream", pure, inheritable, header: "<fstream>".} = object of iostream

type ifstream* {.importcpp: "ifstream", pure, inheritable, header: "<fstream>".} = object of istream

type ofstream* {.importcpp: "ofstream", pure, inheritable, header: "<fstream>".} = object of ostream

type IFileStream* {.importcpp: "IFileStream", pure, inheritable, header: "pandaFileStream.h".} = object of istream

type OFileStream* {.importcpp: "OFileStream", pure, inheritable, header: "pandaFileStream.h".} = object of ostream

type FileStream* {.importcpp: "FileStream", pure, inheritable, header: "pandaFileStream.h".} = object of iostream

type pifstream* = IFileStream

type pofstream* = OFileStream

type pfstream* = FileStream

type TextEncoder* {.importcpp: "TextEncoder*", bycopy, pure, inheritable, header: "textEncoder.h".} = object

proc toTextEncoder*(_: type(nil)): TextEncoder {.importcpp: "(nullptr)".}

type TextEncoder_Encoding {.importcpp: "TextEncoder::Encoding", pure, header: "textEncoder.h".} = enum
  E_iso8859 = 0
  E_utf8 = 1
  E_unicode = 2

template Encoding*(_: typedesc[TextEncoder]): typedesc[TextEncoder_Encoding] = typedesc[TextEncoder_Encoding]
template Encoding*(_: typedesc[TextEncoder], value: untyped): TextEncoder_Encoding = TextEncoder_Encoding(value)

template E_iso8859*(_: typedesc[TextEncoder]): TextEncoder_Encoding = TextEncoder_Encoding.E_iso8859
template E_utf8*(_: typedesc[TextEncoder]): TextEncoder_Encoding = TextEncoder_Encoding.E_utf8
template E_utf16be*(_: typedesc[TextEncoder]): TextEncoder_Encoding = TextEncoder_Encoding.E_utf16be
template E_unicode*(_: typedesc[TextEncoder]): TextEncoder_Encoding = TextEncoder_Encoding.E_unicode

type Filename* {.importcpp: "Filename", pure, inheritable, header: "filename.h".} = object

type Filename_Type {.importcpp: "Filename::Type", pure, header: "filename.h".} = enum
  T_general = 0
  T_dso = 1
  T_executable = 2

template Type*(_: typedesc[Filename]): typedesc[Filename_Type] = typedesc[Filename_Type]
template Type*(_: typedesc[Filename], value: untyped): Filename_Type = Filename_Type(value)

template T_general*(_: typedesc[Filename]): Filename_Type = Filename_Type.T_general
template T_dso*(_: typedesc[Filename]): Filename_Type = Filename_Type.T_dso
template T_executable*(_: typedesc[Filename]): Filename_Type = Filename_Type.T_executable

type PandaSystem* {.importcpp: "PandaSystem*", bycopy, pure, inheritable, header: "pandaSystem.h".} = object

proc toPandaSystem*(_: type(nil)): PandaSystem {.importcpp: "(nullptr)".}

type DSearchPath* {.importcpp: "DSearchPath", pure, inheritable, header: "dSearchPath.h".} = object

type ExecutionEnvironment* {.importcpp: "ExecutionEnvironment", pure, inheritable, header: "executionEnvironment.h".} = object

type GlobPattern* {.importcpp: "GlobPattern", pure, inheritable, header: "globPattern.h".} = object

type LineStream* {.importcpp: "LineStream", pure, inheritable, header: "lineStream.h".} = object of ostream

type ConfigFlags* {.importcpp: "ConfigFlags", pure, inheritable, header: "configFlags.h".} = object

type ConfigFlags_ValueType {.importcpp: "ConfigFlags::ValueType", pure, header: "configFlags.h".} = enum
  VT_undefined = 0
  VT_list = 1
  VT_string = 2
  VT_filename = 3
  VT_bool = 4
  VT_int = 5
  VT_double = 6
  VT_enum = 7
  VT_searchPath = 8
  VT_int64 = 9
  VT_color = 10

template ValueType*(_: typedesc[ConfigFlags]): typedesc[ConfigFlags_ValueType] = typedesc[ConfigFlags_ValueType]
template ValueType*(_: typedesc[ConfigFlags], value: untyped): ConfigFlags_ValueType = ConfigFlags_ValueType(value)

template VT_undefined*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_undefined
template VT_list*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_list
template VT_string*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_string
template VT_filename*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_filename
template VT_bool*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_bool
template VT_int*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_int
template VT_double*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_double
template VT_enum*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_enum
template VT_searchPath*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_searchPath
template VT_int64*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_int64
template VT_color*(_: typedesc[ConfigFlags]): ConfigFlags_ValueType = ConfigFlags_ValueType.VT_color

type ConfigFlags_VariableFlags {.importcpp: "ConfigFlags::VariableFlags", pure, header: "configFlags.h".} = enum
  F_trustLevelMask = 4095
  F_open = 4096
  F_closed = 8192
  F_dynamic = 16384
  F_dconfig = 32768

template VariableFlags*(_: typedesc[ConfigFlags]): typedesc[ConfigFlags_VariableFlags] = typedesc[ConfigFlags_VariableFlags]
template VariableFlags*(_: typedesc[ConfigFlags], value: untyped): ConfigFlags_VariableFlags = ConfigFlags_VariableFlags(value)

template F_trustLevelMask*(_: typedesc[ConfigFlags]): ConfigFlags_VariableFlags = ConfigFlags_VariableFlags.F_trustLevelMask
template F_open*(_: typedesc[ConfigFlags]): ConfigFlags_VariableFlags = ConfigFlags_VariableFlags.F_open
template F_closed*(_: typedesc[ConfigFlags]): ConfigFlags_VariableFlags = ConfigFlags_VariableFlags.F_closed
template F_dynamic*(_: typedesc[ConfigFlags]): ConfigFlags_VariableFlags = ConfigFlags_VariableFlags.F_dynamic
template F_dconfig*(_: typedesc[ConfigFlags]): ConfigFlags_VariableFlags = ConfigFlags_VariableFlags.F_dconfig

type ConfigPage* {.importcpp: "ConfigPage", pure, inheritable, header: "configPage.h".} = object

type ConfigDeclaration* {.importcpp: "ConfigDeclaration", pure, inheritable, header: "configDeclaration.h".} = object of ConfigFlags

type ConfigVariableCore* {.importcpp: "ConfigVariableCore", pure, inheritable, header: "configVariableCore.h".} = object of ConfigFlags

type NotifySeverity* {.importcpp: "NotifySeverity", header: "notifySeverity.h".} = enum
  NS_unspecified = 0
  NS_spam = 1
  NS_debug = 2
  NS_info = 3
  NS_warning = 4
  NS_error = 5
  NS_fatal = 6

type Notify* {.importcpp: "Notify", pure, inheritable, header: "pnotify.h".} = object

type ConfigPageManager* {.importcpp: "ConfigPageManager", pure, inheritable, header: "configPageManager.h".} = object of ConfigFlags

type ConfigVariableManager* {.importcpp: "ConfigVariableManager", pure, inheritable, header: "configVariableManager.h".} = object

type ConfigVariableBase* {.importcpp: "ConfigVariableBase", pure, inheritable, header: "configVariableBase.h".} = object of ConfigFlags

type ConfigVariable* {.importcpp: "ConfigVariable", pure, inheritable, header: "configVariable.h".} = object of ConfigVariableBase

type ConfigVariableBool* {.importcpp: "ConfigVariableBool", pure, inheritable, header: "configVariableBool.h".} = object of ConfigVariable

type ConfigVariableDouble* {.importcpp: "ConfigVariableDouble", pure, inheritable, header: "configVariableDouble.h".} = object of ConfigVariable

type ConfigVariableFilename* {.importcpp: "ConfigVariableFilename", pure, inheritable, header: "configVariableFilename.h".} = object of ConfigVariable

type ConfigVariableInt* {.importcpp: "ConfigVariableInt", pure, inheritable, header: "configVariableInt.h".} = object of ConfigVariable

type ConfigVariableInt64* {.importcpp: "ConfigVariableInt64", pure, inheritable, header: "configVariableInt64.h".} = object of ConfigVariable

type ConfigVariableList* {.importcpp: "ConfigVariableList", pure, inheritable, header: "configVariableList.h".} = object of ConfigVariableBase

type ConfigVariableSearchPath* {.importcpp: "ConfigVariableSearchPath", pure, inheritable, header: "configVariableSearchPath.h".} = object of ConfigVariableBase

type ConfigVariableString* {.importcpp: "ConfigVariableString", pure, inheritable, header: "configVariableString.h".} = object of ConfigVariable

type NotifyCategory* {.importcpp: "NotifyCategory", pure, inheritable, header: "notifyCategory.h".} = object of ConfigFlags

type IDecryptStream* {.importcpp: "IDecryptStream", pure, inheritable, header: "encryptStream.h".} = object of istream

type OEncryptStream* {.importcpp: "OEncryptStream", pure, inheritable, header: "encryptStream.h".} = object of ostream

type StreamReader* {.importcpp: "StreamReader", pure, inheritable, header: "streamReader.h".} = object

type StreamWriter* {.importcpp: "StreamWriter", pure, inheritable, header: "streamWriter.h".} = object

type StreamWrapperBase* {.importcpp: "StreamWrapperBase", pure, inheritable, header: "streamWrapper.h".} = object

type IStreamWrapper* {.importcpp: "IStreamWrapper", pure, inheritable, header: "streamWrapper.h".} = object of StreamWrapperBase

type OStreamWrapper* {.importcpp: "OStreamWrapper", pure, inheritable, header: "streamWrapper.h".} = object of StreamWrapperBase

type StreamWrapper* {.importcpp: "StreamWrapper", pure, inheritable, header: "streamWrapper.h".} = object of IStreamWrapper

proc upcastToOStreamWrapper*(_: typedesc[StreamWrapper]): typedesc[OStreamWrapper] = typedesc[OStreamWrapper]

type SSReader* {.importcpp: "SSReader*", bycopy, pure, inheritable, header: "socketStream.h".} = object

proc toSSReader*(_: type(nil)): SSReader {.importcpp: "(nullptr)".}

type SSWriter* {.importcpp: "SSWriter*", bycopy, pure, inheritable, header: "socketStream.h".} = object

proc toSSWriter*(_: type(nil)): SSWriter {.importcpp: "(nullptr)".}

type ISocketStream* {.importcpp: "ISocketStream*", bycopy, pure, inheritable, header: "socketStream.h".} = object of istream

proc upcastToSSReader*(_: typedesc[ISocketStream]): typedesc[SSReader] = typedesc[SSReader]

proc toISocketStream*(_: type(nil)): ISocketStream {.importcpp: "(nullptr)".}

type ISocketStream_ReadState {.importcpp: "ISocketStream::ReadState", pure, header: "socketStream.h".} = enum
  RS_initial = 0
  RS_reading = 1
  RS_complete = 2
  RS_error = 3

template ReadState*(_: typedesc[ISocketStream]): typedesc[ISocketStream_ReadState] = typedesc[ISocketStream_ReadState]
template ReadState*(_: typedesc[ISocketStream], value: untyped): ISocketStream_ReadState = ISocketStream_ReadState(value)

template RS_initial*(_: typedesc[ISocketStream]): ISocketStream_ReadState = ISocketStream_ReadState.RS_initial
template RS_reading*(_: typedesc[ISocketStream]): ISocketStream_ReadState = ISocketStream_ReadState.RS_reading
template RS_complete*(_: typedesc[ISocketStream]): ISocketStream_ReadState = ISocketStream_ReadState.RS_complete
template RS_error*(_: typedesc[ISocketStream]): ISocketStream_ReadState = ISocketStream_ReadState.RS_error

type OSocketStream* {.importcpp: "OSocketStream", pure, inheritable, header: "socketStream.h".} = object of ostream

proc upcastToSSWriter*(_: typedesc[OSocketStream]): typedesc[SSWriter] = typedesc[SSWriter]

type SocketStream* {.importcpp: "SocketStream", pure, inheritable, header: "socketStream.h".} = object of iostream

proc upcastToSSReader*(_: typedesc[SocketStream]): typedesc[SSReader] = typedesc[SSReader]
proc upcastToSSWriter*(_: typedesc[SocketStream]): typedesc[SSWriter] = typedesc[SSWriter]

type URLSpec* {.importcpp: "URLSpec", pure, inheritable, header: "urlSpec.h".} = object

type HTTPEnum* {.importcpp: "HTTPEnum", pure, inheritable, header: "httpEnum.h".} = object

type HTTPEnum_HTTPVersion {.importcpp: "HTTPEnum::HTTPVersion", pure, header: "httpEnum.h".} = enum
  HV_09 = 0
  HV_10 = 1
  HV_11 = 2
  HV_other = 3

template HTTPVersion*(_: typedesc[HTTPEnum]): typedesc[HTTPEnum_HTTPVersion] = typedesc[HTTPEnum_HTTPVersion]
template HTTPVersion*(_: typedesc[HTTPEnum], value: untyped): HTTPEnum_HTTPVersion = HTTPEnum_HTTPVersion(value)

template HV_09*(_: typedesc[HTTPEnum]): HTTPEnum_HTTPVersion = HTTPEnum_HTTPVersion.HV_09
template HV_10*(_: typedesc[HTTPEnum]): HTTPEnum_HTTPVersion = HTTPEnum_HTTPVersion.HV_10
template HV_11*(_: typedesc[HTTPEnum]): HTTPEnum_HTTPVersion = HTTPEnum_HTTPVersion.HV_11
template HV_other*(_: typedesc[HTTPEnum]): HTTPEnum_HTTPVersion = HTTPEnum_HTTPVersion.HV_other

type HTTPEnum_Method {.importcpp: "HTTPEnum::Method", pure, header: "httpEnum.h".} = enum
  M_options = 0
  M_get = 1
  M_head = 2
  M_post = 3
  M_put = 4
  M_delete = 5
  M_trace = 6
  M_connect = 7

template Method*(_: typedesc[HTTPEnum]): typedesc[HTTPEnum_Method] = typedesc[HTTPEnum_Method]
template Method*(_: typedesc[HTTPEnum], value: untyped): HTTPEnum_Method = HTTPEnum_Method(value)

template M_options*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_options
template M_get*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_get
template M_head*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_head
template M_post*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_post
template M_put*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_put
template M_delete*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_delete
template M_trace*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_trace
template M_connect*(_: typedesc[HTTPEnum]): HTTPEnum_Method = HTTPEnum_Method.M_connect

type HTTPDate* {.importcpp: "HTTPDate", pure, inheritable, header: "httpDate.h".} = object

type HTTPCookie* {.importcpp: "HTTPCookie", pure, inheritable, header: "httpCookie.h".} = object

type ReferenceCount* {.importcpp: "PT(ReferenceCount)", bycopy, pure, inheritable, header: "referenceCount.h".} = object

proc toReferenceCount*(_: type(nil)): ReferenceCount {.importcpp: "(nullptr)".}

type HTTPClient* {.importcpp: "PT(HTTPClient)", bycopy, pure, inheritable, header: "httpClient.h".} = object of ReferenceCount

proc toHTTPClient*(_: type(nil)): HTTPClient {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[HTTPClient], obj: TypedObject): HTTPClient {.importcpp: "DCAST(HTTPClient, @)".}

type HTTPClient_VerifySSL {.importcpp: "HTTPClient::VerifySSL", pure, header: "httpClient.h".} = enum
  VS_noVerify = 0
  VS_noDateCheck = 1
  VS_normal = 2

template VerifySSL*(_: typedesc[HTTPClient]): typedesc[HTTPClient_VerifySSL] = typedesc[HTTPClient_VerifySSL]
template VerifySSL*(_: typedesc[HTTPClient], value: untyped): HTTPClient_VerifySSL = HTTPClient_VerifySSL(value)

template VS_noVerify*(_: typedesc[HTTPClient]): HTTPClient_VerifySSL = HTTPClient_VerifySSL.VS_noVerify
template VS_noDateCheck*(_: typedesc[HTTPClient]): HTTPClient_VerifySSL = HTTPClient_VerifySSL.VS_noDateCheck
template VS_normal*(_: typedesc[HTTPClient]): HTTPClient_VerifySSL = HTTPClient_VerifySSL.VS_normal

type HTTPEntityTag* {.importcpp: "HTTPEntityTag", pure, inheritable, header: "httpEntityTag.h".} = object

type DocumentSpec* {.importcpp: "DocumentSpec", pure, inheritable, header: "documentSpec.h".} = object

type DocumentSpec_RequestMode {.importcpp: "DocumentSpec::RequestMode", pure, header: "documentSpec.h".} = enum
  RM_any = 0
  RM_equal = 1
  RM_newer = 2
  RM_equalOrNewer = 3

template RequestMode*(_: typedesc[DocumentSpec]): typedesc[DocumentSpec_RequestMode] = typedesc[DocumentSpec_RequestMode]
template RequestMode*(_: typedesc[DocumentSpec], value: untyped): DocumentSpec_RequestMode = DocumentSpec_RequestMode(value)

template RM_any*(_: typedesc[DocumentSpec]): DocumentSpec_RequestMode = DocumentSpec_RequestMode.RM_any
template RM_equal*(_: typedesc[DocumentSpec]): DocumentSpec_RequestMode = DocumentSpec_RequestMode.RM_equal
template RM_newer*(_: typedesc[DocumentSpec]): DocumentSpec_RequestMode = DocumentSpec_RequestMode.RM_newer
template RM_equalOrNewer*(_: typedesc[DocumentSpec]): DocumentSpec_RequestMode = DocumentSpec_RequestMode.RM_equalOrNewer

type DocumentSpec_CacheControl {.importcpp: "DocumentSpec::CacheControl", pure, header: "documentSpec.h".} = enum
  CC_allowCache = 0
  CC_revalidate = 1
  CC_noCache = 2

template CacheControl*(_: typedesc[DocumentSpec]): typedesc[DocumentSpec_CacheControl] = typedesc[DocumentSpec_CacheControl]
template CacheControl*(_: typedesc[DocumentSpec], value: untyped): DocumentSpec_CacheControl = DocumentSpec_CacheControl(value)

template CC_allowCache*(_: typedesc[DocumentSpec]): DocumentSpec_CacheControl = DocumentSpec_CacheControl.CC_allowCache
template CC_revalidate*(_: typedesc[DocumentSpec]): DocumentSpec_CacheControl = DocumentSpec_CacheControl.CC_revalidate
template CC_noCache*(_: typedesc[DocumentSpec]): DocumentSpec_CacheControl = DocumentSpec_CacheControl.CC_noCache

type TypedReferenceCount* {.importcpp: "PT(TypedReferenceCount)", bycopy, pure, inheritable, header: "typedReferenceCount.h".} = object of TypedObject

proc upcastToReferenceCount*(_: typedesc[TypedReferenceCount]): typedesc[ReferenceCount] = typedesc[ReferenceCount]

proc toTypedReferenceCount*(_: type(nil)): TypedReferenceCount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TypedReferenceCount], obj: TypedObject): TypedReferenceCount {.importcpp: "DCAST(TypedReferenceCount, @)".}

type HTTPChannel* {.importcpp: "PT(HTTPChannel)", bycopy, pure, inheritable, header: "httpChannel.h".} = object of TypedReferenceCount

proc toHTTPChannel*(_: type(nil)): HTTPChannel {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[HTTPChannel], obj: TypedObject): HTTPChannel {.importcpp: "DCAST(HTTPChannel, @)".}

type HTTPChannel_StatusCode {.importcpp: "HTTPChannel::StatusCode", pure, header: "httpChannel.h".} = enum
  SC_incomplete = 0
  SC_internalError = 1
  SC_noConnection = 2
  SC_timeout = 3
  SC_lostConnection = 4
  SC_nonHttpResponse = 5
  SC_invalidHttp = 6
  SC_socksInvalidVersion = 7
  SC_socksNoAcceptableLoginMethod = 8
  SC_socksRefused = 9
  SC_socksNoConnection = 10
  SC_sslInternalFailure = 11
  SC_sslNoHandshake = 12
  SC_httpErrorWatermark = 13
  SC_sslInvalidServerCertificate = 14
  SC_sslSelfSignedServerCertificate = 15
  SC_sslUnexpectedServer = 16
  SC_downloadOpenError = 17
  SC_downloadWriteError = 18
  SC_downloadInvalidRange = 19

template StatusCode*(_: typedesc[HTTPChannel]): typedesc[HTTPChannel_StatusCode] = typedesc[HTTPChannel_StatusCode]
template StatusCode*(_: typedesc[HTTPChannel], value: untyped): HTTPChannel_StatusCode = HTTPChannel_StatusCode(value)

template SC_incomplete*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_incomplete
template SC_internalError*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_internalError
template SC_noConnection*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_noConnection
template SC_timeout*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_timeout
template SC_lostConnection*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_lostConnection
template SC_nonHttpResponse*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_nonHttpResponse
template SC_invalidHttp*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_invalidHttp
template SC_socksInvalidVersion*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_socksInvalidVersion
template SC_socksNoAcceptableLoginMethod*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_socksNoAcceptableLoginMethod
template SC_socksRefused*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_socksRefused
template SC_socksNoConnection*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_socksNoConnection
template SC_sslInternalFailure*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_sslInternalFailure
template SC_sslNoHandshake*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_sslNoHandshake
template SC_httpErrorWatermark*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_httpErrorWatermark
template SC_sslInvalidServerCertificate*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_sslInvalidServerCertificate
template SC_sslSelfSignedServerCertificate*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_sslSelfSignedServerCertificate
template SC_sslUnexpectedServer*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_sslUnexpectedServer
template SC_downloadOpenError*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_downloadOpenError
template SC_downloadWriteError*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_downloadWriteError
template SC_downloadInvalidRange*(_: typedesc[HTTPChannel]): HTTPChannel_StatusCode = HTTPChannel_StatusCode.SC_downloadInvalidRange

type Decompressor* {.importcpp: "Decompressor", pure, inheritable, header: "decompressor.h".} = object

type DownloadDb* {.importcpp: "DownloadDb", pure, inheritable, header: "downloadDb.h".} = object

type DownloadDb_Status {.importcpp: "DownloadDb::Status", pure, header: "downloadDb.h".} = enum
  StatusIncomplete = 0
  StatusComplete = 1
  StatusDecompressed = 2
  StatusExtracted = 3

template Status*(_: typedesc[DownloadDb]): typedesc[DownloadDb_Status] = typedesc[DownloadDb_Status]
template Status*(_: typedesc[DownloadDb], value: untyped): DownloadDb_Status = DownloadDb_Status(value)

template StatusIncomplete*(_: typedesc[DownloadDb]): DownloadDb_Status = DownloadDb_Status.StatusIncomplete
template StatusComplete*(_: typedesc[DownloadDb]): DownloadDb_Status = DownloadDb_Status.StatusComplete
template StatusDecompressed*(_: typedesc[DownloadDb]): DownloadDb_Status = DownloadDb_Status.StatusDecompressed
template StatusExtracted*(_: typedesc[DownloadDb]): DownloadDb_Status = DownloadDb_Status.StatusExtracted

type Extractor* {.importcpp: "Extractor", pure, inheritable, header: "extractor.h".} = object

type MultiplexStream* {.importcpp: "MultiplexStream", pure, inheritable, header: "multiplexStream.h".} = object of ostream

type VirtualFile* {.importcpp: "PT(VirtualFile)", bycopy, pure, inheritable, header: "virtualFile.h".} = object of TypedReferenceCount

proc toVirtualFile*(_: type(nil)): VirtualFile {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFile], obj: TypedObject): VirtualFile {.importcpp: "DCAST(VirtualFile, @)".}

type VirtualFileHTTP* {.importcpp: "PT(VirtualFileHTTP)", bycopy, pure, inheritable, header: "virtualFileHTTP.h".} = object of VirtualFile

proc toVirtualFileHTTP*(_: type(nil)): VirtualFileHTTP {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileHTTP], obj: TypedObject): VirtualFileHTTP {.importcpp: "DCAST(VirtualFileHTTP, @)".}

type VirtualFileMount* {.importcpp: "PT(VirtualFileMount)", bycopy, pure, inheritable, header: "virtualFileMount.h".} = object of TypedReferenceCount

proc toVirtualFileMount*(_: type(nil)): VirtualFileMount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileMount], obj: TypedObject): VirtualFileMount {.importcpp: "DCAST(VirtualFileMount, @)".}

type VirtualFileMountHTTP* {.importcpp: "PT(VirtualFileMountHTTP)", bycopy, pure, inheritable, header: "virtualFileMountHTTP.h".} = object of VirtualFileMount

proc toVirtualFileMountHTTP*(_: type(nil)): VirtualFileMountHTTP {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileMountHTTP], obj: TypedObject): VirtualFileMountHTTP {.importcpp: "DCAST(VirtualFileMountHTTP, @)".}

type Patcher* {.importcpp: "Patcher*", bycopy, pure, inheritable, header: "patcher.h".} = object

proc toPatcher*(_: type(nil)): Patcher {.importcpp: "(nullptr)".}

type StringStream* {.importcpp: "StringStream", pure, inheritable, header: "stringStream.h".} = object of iostream

func data*(this: StringStream): string {.importcpp: "nimStringFromStdString(#.get_data())", header: stringConversionCode.}
func `data=`*(this: StringStream, data: string) {.importcpp: "#.set_data(nimStringToStdString(#))", header: stringConversionCode.}

type PointerToVoid* {.importcpp: "PointerToVoid", pure, inheritable, header: "pointerToVoid.h".} = object

type MemoryUsage* {.importcpp: "MemoryUsage", pure, inheritable, header: "memoryUsage.h".} = object

type Buffer* {.importcpp: "PT(Buffer)", bycopy, pure, inheritable, header: "buffer.h".} = object of ReferenceCount

proc toBuffer*(_: type(nil)): Buffer {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Buffer], obj: TypedObject): Buffer {.importcpp: "DCAST(Buffer, @)".}

type PStatCollectorForwardBase* {.importcpp: "PT(PStatCollectorForwardBase)", bycopy, pure, inheritable, header: "pStatCollectorForwardBase.h".} = object of ReferenceCount

proc toPStatCollectorForwardBase*(_: type(nil)): PStatCollectorForwardBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PStatCollectorForwardBase], obj: TypedObject): PStatCollectorForwardBase {.importcpp: "DCAST(PStatCollectorForwardBase, @)".}

type NodeReferenceCount* {.importcpp: "PT(NodeReferenceCount)", bycopy, pure, inheritable, header: "nodeReferenceCount.h".} = object of ReferenceCount

proc toNodeReferenceCount*(_: type(nil)): NodeReferenceCount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NodeReferenceCount], obj: TypedObject): NodeReferenceCount {.importcpp: "DCAST(NodeReferenceCount, @)".}

type Datagram* {.importcpp: "Datagram", pure, inheritable, header: "datagram.h".} = object of TypedObject

type DatagramGenerator* {.importcpp: "DatagramGenerator*", bycopy, pure, inheritable, header: "datagramGenerator.h".} = object

proc toDatagramGenerator*(_: type(nil)): DatagramGenerator {.importcpp: "(nullptr)".}

type DatagramIterator* {.importcpp: "DatagramIterator", pure, inheritable, header: "datagramIterator.h".} = object

type DatagramSink* {.importcpp: "DatagramSink*", bycopy, pure, inheritable, header: "datagramSink.h".} = object

proc toDatagramSink*(_: type(nil)): DatagramSink {.importcpp: "(nullptr)".}

type FileReference* {.importcpp: "PT(FileReference)", bycopy, pure, inheritable, header: "fileReference.h".} = object of TypedReferenceCount

proc toFileReference*(_: type(nil)): FileReference {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FileReference], obj: TypedObject): FileReference {.importcpp: "DCAST(FileReference, @)".}

type ErrorUtilCode* {.importcpp: "ErrorUtilCode", header: "error_utils.h".} = enum
  EU_errorZlib = -80
  EU_errorHttpProxyAuthentication = -73
  EU_errorHttpServiceUnavailable = -72
  EU_errorHttpGatewayTimeout = -71
  EU_errorHttpServerTimeout = -70
  EU_errorWriteFileRename = -67
  EU_errorWriteDiskFault = -66
  EU_errorWriteDiskSectorNotFound = -65
  EU_errorWriteDiskNotFound = -64
  EU_errorWriteDiskFull = -63
  EU_errorWriteSharingViolation = -62
  EU_errorWriteOutOfMemory = -61
  EU_errorWriteOutOfFiles = -60
  EU_errorNetworkRemoteHostNoResponse = -54
  EU_errorNetworkRemoteHostNotFound = -53
  EU_errorNetworkRemoteHostUnreachable = -52
  EU_errorNetworkRemoteHostDown = -51
  EU_errorNetworkRemoteHostDisconnected = -50
  EU_errorNetworkDiskQuotaExceeded = -42
  EU_errorNetworkBufferOverflow = -41
  EU_errorNetworkDisconnectedLocally = -40
  EU_errorNetworkNoData = -34
  EU_errorNetworkTimeout = -33
  EU_errorNetworkDisconnected = -32
  EU_errorNetworkUnreachable = -31
  EU_errorNetworkDead = -30
  EU_errorInvalidChecksum = -4
  EU_errorFileInvalid = -3
  EU_errorFileEmpty = -2
  EU_errorAbort = -1
  EU_success = 1
  EU_ok = 2
  EU_write = 3
  EU_writeRam = 4
  EU_networkNoData = 5
  EU_eof = 6
  EU_httpRedirect = 7

type Ramfile* {.importcpp: "Ramfile", pure, inheritable, header: "ramfile.h".} = object

type HashVal* {.importcpp: "HashVal", pure, inheritable, header: "hashVal.h".} = object

type MemoryUsagePointers* {.importcpp: "MemoryUsagePointers", pure, inheritable, header: "memoryUsagePointers.h".} = object

type ISubStream* {.importcpp: "ISubStream", pure, inheritable, header: "subStream.h".} = object of istream

type OSubStream* {.importcpp: "OSubStream", pure, inheritable, header: "subStream.h".} = object of ostream

type SubStream* {.importcpp: "SubStream", pure, inheritable, header: "subStream.h".} = object of iostream

type Multifile* {.importcpp: "PT(Multifile)", bycopy, pure, inheritable, header: "multifile.h".} = object of ReferenceCount

proc toMultifile*(_: type(nil)): Multifile {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Multifile], obj: TypedObject): Multifile {.importcpp: "DCAST(Multifile, @)".}

type Namable* {.importcpp: "Namable*", bycopy, pure, inheritable, header: "namable.h".} = object

proc toNamable*(_: type(nil)): Namable {.importcpp: "(nullptr)".}

type OpenSSLWrapper* {.importcpp: "OpenSSLWrapper", pure, inheritable, header: "openSSLWrapper.h".} = object

type SubfileInfo* {.importcpp: "SubfileInfo", pure, inheritable, header: "subfileInfo.h".} = object

type VirtualFileComposite* {.importcpp: "PT(VirtualFileComposite)", bycopy, pure, inheritable, header: "virtualFileComposite.h".} = object of VirtualFile

proc toVirtualFileComposite*(_: type(nil)): VirtualFileComposite {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileComposite], obj: TypedObject): VirtualFileComposite {.importcpp: "DCAST(VirtualFileComposite, @)".}

type VirtualFileMountMultifile* {.importcpp: "PT(VirtualFileMountMultifile)", bycopy, pure, inheritable, header: "virtualFileMountMultifile.h".} = object of VirtualFileMount

proc toVirtualFileMountMultifile*(_: type(nil)): VirtualFileMountMultifile {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileMountMultifile], obj: TypedObject): VirtualFileMountMultifile {.importcpp: "DCAST(VirtualFileMountMultifile, @)".}

type VirtualFileMountRamdisk* {.importcpp: "PT(VirtualFileMountRamdisk)", bycopy, pure, inheritable, header: "virtualFileMountRamdisk.h".} = object of VirtualFileMount

proc toVirtualFileMountRamdisk*(_: type(nil)): VirtualFileMountRamdisk {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileMountRamdisk], obj: TypedObject): VirtualFileMountRamdisk {.importcpp: "DCAST(VirtualFileMountRamdisk, @)".}

type VirtualFileMountSystem* {.importcpp: "PT(VirtualFileMountSystem)", bycopy, pure, inheritable, header: "virtualFileMountSystem.h".} = object of VirtualFileMount

proc toVirtualFileMountSystem*(_: type(nil)): VirtualFileMountSystem {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileMountSystem], obj: TypedObject): VirtualFileMountSystem {.importcpp: "DCAST(VirtualFileMountSystem, @)".}

type VirtualFileSimple* {.importcpp: "PT(VirtualFileSimple)", bycopy, pure, inheritable, header: "virtualFileSimple.h".} = object of VirtualFile

proc toVirtualFileSimple*(_: type(nil)): VirtualFileSimple {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileSimple], obj: TypedObject): VirtualFileSimple {.importcpp: "DCAST(VirtualFileSimple, @)".}

type TemporaryFile* {.importcpp: "PT(TemporaryFile)", bycopy, pure, inheritable, header: "temporaryFile.h".} = object of FileReference

proc toTemporaryFile*(_: type(nil)): TemporaryFile {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TemporaryFile], obj: TypedObject): TemporaryFile {.importcpp: "DCAST(TemporaryFile, @)".}

type IDecompressStream* {.importcpp: "IDecompressStream", pure, inheritable, header: "zStream.h".} = object of istream

type OCompressStream* {.importcpp: "OCompressStream", pure, inheritable, header: "zStream.h".} = object of ostream

type VirtualFileList* {.importcpp: "PT(VirtualFileList)", bycopy, pure, inheritable, header: "virtualFileList.h".} = object of ReferenceCount

proc toVirtualFileList*(_: type(nil)): VirtualFileList {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualFileList], obj: TypedObject): VirtualFileList {.importcpp: "DCAST(VirtualFileList, @)".}

type VirtualFileSystem* {.importcpp: "VirtualFileSystem", pure, inheritable, header: "virtualFileSystem.h".} = object

type VirtualFileSystem_MountFlags {.importcpp: "VirtualFileSystem::MountFlags", pure, header: "virtualFileSystem.h".} = enum
  MF_readOnly = 2

template MountFlags*(_: typedesc[VirtualFileSystem]): typedesc[VirtualFileSystem_MountFlags] = typedesc[VirtualFileSystem_MountFlags]
template MountFlags*(_: typedesc[VirtualFileSystem], value: untyped): VirtualFileSystem_MountFlags = VirtualFileSystem_MountFlags(value)

template MF_readOnly*(_: typedesc[VirtualFileSystem]): VirtualFileSystem_MountFlags = VirtualFileSystem_MountFlags.MF_readOnly

type TrueClock* {.importcpp: "TrueClock", pure, inheritable, header: "trueClock.h".} = object

type Patchfile* {.importcpp: "Patchfile", pure, inheritable, header: "patchfile.h".} = object

type ProfileTimer* {.importcpp: "ProfileTimer", pure, inheritable, header: "profileTimer.h".} = object

type WeakPointerToVoid* {.importcpp: "WeakPointerToVoid", pure, inheritable, header: "weakPointerToVoid.h".} = object of PointerToVoid

type RecorderBase* {.importcpp: "RecorderBase*", bycopy, pure, inheritable, header: "recorderBase.h".} = object

proc toRecorderBase*(_: type(nil)): RecorderBase {.importcpp: "(nullptr)".}

type TypedWritable* {.importcpp: "TypedWritable*", bycopy, pure, inheritable, header: "typedWritable.h".} = object of TypedObject

proc toTypedWritable*(_: type(nil)): TypedWritable {.importcpp: "(nullptr)".}

type TypedWritableReferenceCount* {.importcpp: "PT(TypedWritableReferenceCount)", bycopy, pure, inheritable, header: "typedWritableReferenceCount.h".} = object of TypedWritable

proc upcastToReferenceCount*(_: typedesc[TypedWritableReferenceCount]): typedesc[ReferenceCount] = typedesc[ReferenceCount]

proc toTypedWritableReferenceCount*(_: type(nil)): TypedWritableReferenceCount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TypedWritableReferenceCount], obj: TypedObject): TypedWritableReferenceCount {.importcpp: "DCAST(TypedWritableReferenceCount, @)".}

type PandaNode* {.importcpp: "PT(PandaNode)", bycopy, pure, inheritable, header: "pandaNode.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[PandaNode]): typedesc[Namable] = typedesc[Namable]

proc toPandaNode*(_: type(nil)): PandaNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PandaNode], obj: TypedObject): PandaNode {.importcpp: "DCAST(PandaNode, @)".}

type PandaNode_UnexpectedChange {.importcpp: "PandaNode::UnexpectedChange", pure, header: "pandaNode.h".} = enum
  UC_parents = 1
  UC_children = 2
  UC_transform = 4
  UC_state = 8
  UC_drawMask = 16

template UnexpectedChange*(_: typedesc[PandaNode]): typedesc[PandaNode_UnexpectedChange] = typedesc[PandaNode_UnexpectedChange]
template UnexpectedChange*(_: typedesc[PandaNode], value: untyped): PandaNode_UnexpectedChange = PandaNode_UnexpectedChange(value)

template UC_parents*(_: typedesc[PandaNode]): PandaNode_UnexpectedChange = PandaNode_UnexpectedChange.UC_parents
template UC_children*(_: typedesc[PandaNode]): PandaNode_UnexpectedChange = PandaNode_UnexpectedChange.UC_children
template UC_transform*(_: typedesc[PandaNode]): PandaNode_UnexpectedChange = PandaNode_UnexpectedChange.UC_transform
template UC_state*(_: typedesc[PandaNode]): PandaNode_UnexpectedChange = PandaNode_UnexpectedChange.UC_state
template UC_drawMask*(_: typedesc[PandaNode]): PandaNode_UnexpectedChange = PandaNode_UnexpectedChange.UC_drawMask

type PandaNode_FancyBits {.importcpp: "PandaNode::FancyBits", pure, header: "pandaNode.h".} = enum
  FB_transform = 1
  FB_state = 2
  FB_effects = 4
  FB_tag = 16
  FB_drawMask = 32
  FB_cullCallback = 64

template FancyBits*(_: typedesc[PandaNode]): typedesc[PandaNode_FancyBits] = typedesc[PandaNode_FancyBits]
template FancyBits*(_: typedesc[PandaNode], value: untyped): PandaNode_FancyBits = PandaNode_FancyBits(value)

template FB_transform*(_: typedesc[PandaNode]): PandaNode_FancyBits = PandaNode_FancyBits.FB_transform
template FB_state*(_: typedesc[PandaNode]): PandaNode_FancyBits = PandaNode_FancyBits.FB_state
template FB_effects*(_: typedesc[PandaNode]): PandaNode_FancyBits = PandaNode_FancyBits.FB_effects
template FB_tag*(_: typedesc[PandaNode]): PandaNode_FancyBits = PandaNode_FancyBits.FB_tag
template FB_drawMask*(_: typedesc[PandaNode]): PandaNode_FancyBits = PandaNode_FancyBits.FB_drawMask
template FB_cullCallback*(_: typedesc[PandaNode]): PandaNode_FancyBits = PandaNode_FancyBits.FB_cullCallback

type DataNode* {.importcpp: "PT(DataNode)", bycopy, pure, inheritable, header: "dataNode.h".} = object of PandaNode

proc toDataNode*(_: type(nil)): DataNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DataNode], obj: TypedObject): DataNode {.importcpp: "DCAST(DataNode, @)".}

type MouseRecorder* {.importcpp: "PT(MouseRecorder)", bycopy, pure, inheritable, header: "mouseRecorder.h".} = object of DataNode

proc upcastToRecorderBase*(_: typedesc[MouseRecorder]): typedesc[RecorderBase] = typedesc[RecorderBase]

proc toMouseRecorder*(_: type(nil)): MouseRecorder {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseRecorder], obj: TypedObject): MouseRecorder {.importcpp: "DCAST(MouseRecorder, @)".}

type RecorderController* {.importcpp: "PT(RecorderController)", bycopy, pure, inheritable, header: "recorderController.h".} = object of TypedReferenceCount

proc toRecorderController*(_: type(nil)): RecorderController {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RecorderController], obj: TypedObject): RecorderController {.importcpp: "DCAST(RecorderController, @)".}

type SocketStreamRecorder* {.importcpp: "PT(SocketStreamRecorder)", bycopy, pure, inheritable, header: "socketStreamRecorder.h".} = object of RecorderBase

proc upcastToReferenceCount*(_: typedesc[SocketStreamRecorder]): typedesc[ReferenceCount] = typedesc[ReferenceCount]

proc toSocketStreamRecorder*(_: type(nil)): SocketStreamRecorder {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SocketStreamRecorder], obj: TypedObject): SocketStreamRecorder {.importcpp: "DCAST(SocketStreamRecorder, @)".}

type Light* {.importcpp: "Light*", bycopy, pure, inheritable, header: "light.h".} = object

proc toLight*(_: type(nil)): Light {.importcpp: "(nullptr)".}

type LightNode* {.importcpp: "PT(LightNode)", bycopy, pure, inheritable, header: "lightNode.h".} = object of PandaNode

proc upcastToLight*(_: typedesc[LightNode]): typedesc[Light] = typedesc[Light]

proc toLightNode*(_: type(nil)): LightNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LightNode], obj: TypedObject): LightNode {.importcpp: "DCAST(LightNode, @)".}

type AmbientLight* {.importcpp: "PT(AmbientLight)", bycopy, pure, inheritable, header: "ambientLight.h".} = object of LightNode

proc toAmbientLight*(_: type(nil)): AmbientLight {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AmbientLight], obj: TypedObject): AmbientLight {.importcpp: "DCAST(AmbientLight, @)".}

type CallbackNode* {.importcpp: "PT(CallbackNode)", bycopy, pure, inheritable, header: "callbackNode.h".} = object of PandaNode

proc toCallbackNode*(_: type(nil)): CallbackNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CallbackNode], obj: TypedObject): CallbackNode {.importcpp: "DCAST(CallbackNode, @)".}

type ComputeNode* {.importcpp: "PT(ComputeNode)", bycopy, pure, inheritable, header: "computeNode.h".} = object of PandaNode

proc toComputeNode*(_: type(nil)): ComputeNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ComputeNode], obj: TypedObject): ComputeNode {.importcpp: "DCAST(ComputeNode, @)".}

type LODNodeType* {.importcpp: "LODNodeType", header: "lodNodeType.h".} = enum
  LNT_pop = 0
  LNT_fade = 1

type LensNode* {.importcpp: "PT(LensNode)", bycopy, pure, inheritable, header: "lensNode.h".} = object of PandaNode

proc toLensNode*(_: type(nil)): LensNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LensNode], obj: TypedObject): LensNode {.importcpp: "DCAST(LensNode, @)".}

type Camera* {.importcpp: "PT(Camera)", bycopy, pure, inheritable, header: "camera.h".} = object of LensNode

proc toCamera*(_: type(nil)): Camera {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Camera], obj: TypedObject): Camera {.importcpp: "DCAST(Camera, @)".}

type LightLensNode* {.importcpp: "PT(LightLensNode)", bycopy, pure, inheritable, header: "lightLensNode.h".} = object of Camera

proc upcastToLight*(_: typedesc[LightLensNode]): typedesc[Light] = typedesc[Light]

proc toLightLensNode*(_: type(nil)): LightLensNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LightLensNode], obj: TypedObject): LightLensNode {.importcpp: "DCAST(LightLensNode, @)".}

type DirectionalLight* {.importcpp: "PT(DirectionalLight)", bycopy, pure, inheritable, header: "directionalLight.h".} = object of LightLensNode

proc toDirectionalLight*(_: type(nil)): DirectionalLight {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DirectionalLight], obj: TypedObject): DirectionalLight {.importcpp: "DCAST(DirectionalLight, @)".}

type LODNode* {.importcpp: "PT(LODNode)", bycopy, pure, inheritable, header: "lodNode.h".} = object of PandaNode

proc toLODNode*(_: type(nil)): LODNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LODNode], obj: TypedObject): LODNode {.importcpp: "DCAST(LODNode, @)".}

type FadeLODNode* {.importcpp: "PT(FadeLODNode)", bycopy, pure, inheritable, header: "fadeLodNode.h".} = object of LODNode

proc toFadeLODNode*(_: type(nil)): FadeLODNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FadeLODNode], obj: TypedObject): FadeLODNode {.importcpp: "DCAST(FadeLODNode, @)".}

type CallbackData* {.importcpp: "CallbackData*", bycopy, pure, inheritable, header: "callbackData.h".} = object of TypedObject

proc toCallbackData*(_: type(nil)): CallbackData {.importcpp: "(nullptr)".}

type NodeCullCallbackData* {.importcpp: "NodeCullCallbackData", pure, inheritable, header: "nodeCullCallbackData.h".} = object of CallbackData

type PointLight* {.importcpp: "PT(PointLight)", bycopy, pure, inheritable, header: "pointLight.h".} = object of LightLensNode

proc toPointLight*(_: type(nil)): PointLight {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PointLight], obj: TypedObject): PointLight {.importcpp: "DCAST(PointLight, @)".}

type RectangleLight* {.importcpp: "PT(RectangleLight)", bycopy, pure, inheritable, header: "rectangleLight.h".} = object of LightLensNode

proc toRectangleLight*(_: type(nil)): RectangleLight {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RectangleLight], obj: TypedObject): RectangleLight {.importcpp: "DCAST(RectangleLight, @)".}

type SelectiveChildNode* {.importcpp: "PT(SelectiveChildNode)", bycopy, pure, inheritable, header: "selectiveChildNode.h".} = object of PandaNode

proc toSelectiveChildNode*(_: type(nil)): SelectiveChildNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SelectiveChildNode], obj: TypedObject): SelectiveChildNode {.importcpp: "DCAST(SelectiveChildNode, @)".}

type AnimInterface* {.importcpp: "AnimInterface*", bycopy, pure, inheritable, header: "animInterface.h".} = object

proc toAnimInterface*(_: type(nil)): AnimInterface {.importcpp: "(nullptr)".}

type SequenceNode* {.importcpp: "PT(SequenceNode)", bycopy, pure, inheritable, header: "sequenceNode.h".} = object of SelectiveChildNode

proc upcastToAnimInterface*(_: typedesc[SequenceNode]): typedesc[AnimInterface] = typedesc[AnimInterface]

proc toSequenceNode*(_: type(nil)): SequenceNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SequenceNode], obj: TypedObject): SequenceNode {.importcpp: "DCAST(SequenceNode, @)".}

type ShaderGenerator* {.importcpp: "PT(ShaderGenerator)", bycopy, pure, inheritable, header: "shaderGenerator.h".} = object of TypedReferenceCount

proc toShaderGenerator*(_: type(nil)): ShaderGenerator {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ShaderGenerator], obj: TypedObject): ShaderGenerator {.importcpp: "DCAST(ShaderGenerator, @)".}

type SphereLight* {.importcpp: "PT(SphereLight)", bycopy, pure, inheritable, header: "sphereLight.h".} = object of PointLight

proc toSphereLight*(_: type(nil)): SphereLight {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SphereLight], obj: TypedObject): SphereLight {.importcpp: "DCAST(SphereLight, @)".}

type Spotlight* {.importcpp: "PT(Spotlight)", bycopy, pure, inheritable, header: "spotlight.h".} = object of LightLensNode

proc toSpotlight*(_: type(nil)): Spotlight {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Spotlight], obj: TypedObject): Spotlight {.importcpp: "DCAST(Spotlight, @)".}

type SwitchNode* {.importcpp: "PT(SwitchNode)", bycopy, pure, inheritable, header: "switchNode.h".} = object of SelectiveChildNode

proc toSwitchNode*(_: type(nil)): SwitchNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SwitchNode], obj: TypedObject): SwitchNode {.importcpp: "DCAST(SwitchNode, @)".}

type UvScrollNode* {.importcpp: "PT(UvScrollNode)", bycopy, pure, inheritable, header: "uvScrollNode.h".} = object of PandaNode

proc toUvScrollNode*(_: type(nil)): UvScrollNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[UvScrollNode], obj: TypedObject): UvScrollNode {.importcpp: "DCAST(UvScrollNode, @)".}

type SceneGraphAnalyzer* {.importcpp: "SceneGraphAnalyzer", pure, inheritable, header: "sceneGraphAnalyzer.h".} = object

type SceneGraphAnalyzer_LodMode {.importcpp: "SceneGraphAnalyzer::LodMode", pure, header: "sceneGraphAnalyzer.h".} = enum
  LM_lowest = 0
  LM_highest = 1
  LM_all = 2
  LM_none = 3

template LodMode*(_: typedesc[SceneGraphAnalyzer]): typedesc[SceneGraphAnalyzer_LodMode] = typedesc[SceneGraphAnalyzer_LodMode]
template LodMode*(_: typedesc[SceneGraphAnalyzer], value: untyped): SceneGraphAnalyzer_LodMode = SceneGraphAnalyzer_LodMode(value)

template LM_lowest*(_: typedesc[SceneGraphAnalyzer]): SceneGraphAnalyzer_LodMode = SceneGraphAnalyzer_LodMode.LM_lowest
template LM_highest*(_: typedesc[SceneGraphAnalyzer]): SceneGraphAnalyzer_LodMode = SceneGraphAnalyzer_LodMode.LM_highest
template LM_all*(_: typedesc[SceneGraphAnalyzer]): SceneGraphAnalyzer_LodMode = SceneGraphAnalyzer_LodMode.LM_all
template LM_none*(_: typedesc[SceneGraphAnalyzer]): SceneGraphAnalyzer_LodMode = SceneGraphAnalyzer_LodMode.LM_none

type CachedTypedWritableReferenceCount* {.importcpp: "PT(CachedTypedWritableReferenceCount)", bycopy, pure, inheritable, header: "cachedTypedWritableReferenceCount.h".} = object of TypedWritableReferenceCount

proc toCachedTypedWritableReferenceCount*(_: type(nil)): CachedTypedWritableReferenceCount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CachedTypedWritableReferenceCount], obj: TypedObject): CachedTypedWritableReferenceCount {.importcpp: "DCAST(CachedTypedWritableReferenceCount, @)".}

type NodeCachedReferenceCount* {.importcpp: "PT(NodeCachedReferenceCount)", bycopy, pure, inheritable, header: "nodeCachedReferenceCount.h".} = object of CachedTypedWritableReferenceCount

proc toNodeCachedReferenceCount*(_: type(nil)): NodeCachedReferenceCount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NodeCachedReferenceCount], obj: TypedObject): NodeCachedReferenceCount {.importcpp: "DCAST(NodeCachedReferenceCount, @)".}

type NodeCachedReferenceCount_Referenced {.importcpp: "NodeCachedReferenceCount::Referenced", pure, header: "nodeCachedReferenceCount.h".} = enum
  R_node = 1
  R_cache = 2

template Referenced*(_: typedesc[NodeCachedReferenceCount]): typedesc[NodeCachedReferenceCount_Referenced] = typedesc[NodeCachedReferenceCount_Referenced]
template Referenced*(_: typedesc[NodeCachedReferenceCount], value: untyped): NodeCachedReferenceCount_Referenced = NodeCachedReferenceCount_Referenced(value)

template R_node*(_: typedesc[NodeCachedReferenceCount]): NodeCachedReferenceCount_Referenced = NodeCachedReferenceCount_Referenced.R_node
template R_cache*(_: typedesc[NodeCachedReferenceCount]): NodeCachedReferenceCount_Referenced = NodeCachedReferenceCount_Referenced.R_cache

type TransformState* {.importcpp: "PT(TransformState)", bycopy, pure, header: "transformState.h".} = object of NodeCachedReferenceCount

proc toTransformState*(_: type(nil)): TransformState {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TransformState], obj: TypedObject): TransformState {.importcpp: "DCAST(TransformState, @)".}

type RenderAttribRegistry* {.importcpp: "RenderAttribRegistry", pure, inheritable, header: "renderAttribRegistry.h".} = object

type RenderAttrib* {.importcpp: "PT(RenderAttrib)", bycopy, pure, inheritable, header: "renderAttrib.h".} = object of TypedWritableReferenceCount

proc toRenderAttrib*(_: type(nil)): RenderAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RenderAttrib], obj: TypedObject): RenderAttrib {.importcpp: "DCAST(RenderAttrib, @)".}

type RenderAttrib_PandaCompareFunc {.importcpp: "RenderAttrib::PandaCompareFunc", pure, header: "renderAttrib.h".} = enum
  M_none = 0
  M_never = 1
  M_less = 2
  M_equal = 3
  M_lessEqual = 4
  M_greater = 5
  M_notEqual = 6
  M_greaterEqual = 7
  M_always = 8

template PandaCompareFunc*(_: typedesc[RenderAttrib]): typedesc[RenderAttrib_PandaCompareFunc] = typedesc[RenderAttrib_PandaCompareFunc]
template PandaCompareFunc*(_: typedesc[RenderAttrib], value: untyped): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc(value)

template M_none*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_none
template M_never*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_never
template M_less*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_less
template M_equal*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_equal
template M_lessEqual*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_lessEqual
template M_greater*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_greater
template M_notEqual*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_notEqual
template M_greaterEqual*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_greaterEqual
template M_always*(_: typedesc[RenderAttrib]): RenderAttrib_PandaCompareFunc = RenderAttrib_PandaCompareFunc.M_always

type RenderAttrib_TexGenMode {.importcpp: "RenderAttrib::TexGenMode", pure, header: "renderAttrib.h".} = enum
  M_off = 0
  M_eyeSphereMap = 1
  M_worldCubeMap = 2
  M_eyeCubeMap = 3
  M_worldNormal = 4
  M_eyeNormal = 5
  M_worldPosition = 6
  M_unused = 7
  M_eyePosition = 8
  M_pointSprite = 9
  M_unused2 = 10
  M_constant = 11

template TexGenMode*(_: typedesc[RenderAttrib]): typedesc[RenderAttrib_TexGenMode] = typedesc[RenderAttrib_TexGenMode]
template TexGenMode*(_: typedesc[RenderAttrib], value: untyped): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode(value)

template M_off*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_off
template M_eyeSphereMap*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_eyeSphereMap
template M_worldCubeMap*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_worldCubeMap
template M_eyeCubeMap*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_eyeCubeMap
template M_worldNormal*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_worldNormal
template M_eyeNormal*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_eyeNormal
template M_worldPosition*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_worldPosition
template M_unused*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_unused
template M_eyePosition*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_eyePosition
template M_pointSprite*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_pointSprite
template M_unused2*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_unused2
template M_constant*(_: typedesc[RenderAttrib]): RenderAttrib_TexGenMode = RenderAttrib_TexGenMode.M_constant

type RenderModeAttrib* {.importcpp: "PT(RenderModeAttrib)", bycopy, pure, inheritable, header: "renderModeAttrib.h".} = object of RenderAttrib

proc toRenderModeAttrib*(_: type(nil)): RenderModeAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RenderModeAttrib], obj: TypedObject): RenderModeAttrib {.importcpp: "DCAST(RenderModeAttrib, @)".}

type RenderModeAttrib_Mode {.importcpp: "RenderModeAttrib::Mode", pure, header: "renderModeAttrib.h".} = enum
  M_unchanged = 0
  M_filled = 1
  M_wireframe = 2
  M_point = 3
  M_filledFlat = 4
  M_filledWireframe = 5

template Mode*(_: typedesc[RenderModeAttrib]): typedesc[RenderModeAttrib_Mode] = typedesc[RenderModeAttrib_Mode]
template Mode*(_: typedesc[RenderModeAttrib], value: untyped): RenderModeAttrib_Mode = RenderModeAttrib_Mode(value)

template M_unchanged*(_: typedesc[RenderModeAttrib]): RenderModeAttrib_Mode = RenderModeAttrib_Mode.M_unchanged
template M_filled*(_: typedesc[RenderModeAttrib]): RenderModeAttrib_Mode = RenderModeAttrib_Mode.M_filled
template M_wireframe*(_: typedesc[RenderModeAttrib]): RenderModeAttrib_Mode = RenderModeAttrib_Mode.M_wireframe
template M_point*(_: typedesc[RenderModeAttrib]): RenderModeAttrib_Mode = RenderModeAttrib_Mode.M_point
template M_filledFlat*(_: typedesc[RenderModeAttrib]): RenderModeAttrib_Mode = RenderModeAttrib_Mode.M_filledFlat
template M_filledWireframe*(_: typedesc[RenderModeAttrib]): RenderModeAttrib_Mode = RenderModeAttrib_Mode.M_filledWireframe

type TexMatrixAttrib* {.importcpp: "PT(TexMatrixAttrib)", bycopy, pure, inheritable, header: "texMatrixAttrib.h".} = object of RenderAttrib

proc toTexMatrixAttrib*(_: type(nil)): TexMatrixAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TexMatrixAttrib], obj: TypedObject): TexMatrixAttrib {.importcpp: "DCAST(TexMatrixAttrib, @)".}

type RenderState* {.importcpp: "PT(RenderState)", bycopy, pure, inheritable, header: "renderState.h".} = object of NodeCachedReferenceCount

proc toRenderState*(_: type(nil)): RenderState {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RenderState], obj: TypedObject): RenderState {.importcpp: "DCAST(RenderState, @)".}

type AlphaTestAttrib* {.importcpp: "PT(AlphaTestAttrib)", bycopy, pure, inheritable, header: "alphaTestAttrib.h".} = object of RenderAttrib

proc toAlphaTestAttrib*(_: type(nil)): AlphaTestAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AlphaTestAttrib], obj: TypedObject): AlphaTestAttrib {.importcpp: "DCAST(AlphaTestAttrib, @)".}

type AntialiasAttrib* {.importcpp: "PT(AntialiasAttrib)", bycopy, pure, inheritable, header: "antialiasAttrib.h".} = object of RenderAttrib

proc toAntialiasAttrib*(_: type(nil)): AntialiasAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AntialiasAttrib], obj: TypedObject): AntialiasAttrib {.importcpp: "DCAST(AntialiasAttrib, @)".}

type AntialiasAttrib_Mode {.importcpp: "AntialiasAttrib::Mode", pure, header: "antialiasAttrib.h".} = enum
  M_none = 0
  M_point = 1
  M_line = 2
  M_polygon = 4
  M_multisample = 8
  M_typeMask = 31
  M_faster = 32
  M_better = 64
  M_dontCare = 96

template Mode*(_: typedesc[AntialiasAttrib]): typedesc[AntialiasAttrib_Mode] = typedesc[AntialiasAttrib_Mode]
template Mode*(_: typedesc[AntialiasAttrib], value: untyped): AntialiasAttrib_Mode = AntialiasAttrib_Mode(value)

template M_none*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_none
template M_point*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_point
template M_line*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_line
template M_polygon*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_polygon
template M_multisample*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_multisample
template M_auto*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_auto
template M_typeMask*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_typeMask
template M_faster*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_faster
template M_better*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_better
template M_dontCare*(_: typedesc[AntialiasAttrib]): AntialiasAttrib_Mode = AntialiasAttrib_Mode.M_dontCare

type RenderEffect* {.importcpp: "PT(RenderEffect)", bycopy, pure, inheritable, header: "renderEffect.h".} = object of TypedWritableReferenceCount

proc toRenderEffect*(_: type(nil)): RenderEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RenderEffect], obj: TypedObject): RenderEffect {.importcpp: "DCAST(RenderEffect, @)".}

type RenderEffects* {.importcpp: "PT(RenderEffects)", bycopy, pure, inheritable, header: "renderEffects.h".} = object of TypedWritableReferenceCount

proc toRenderEffects*(_: type(nil)): RenderEffects {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RenderEffects], obj: TypedObject): RenderEffects {.importcpp: "DCAST(RenderEffects, @)".}

type TransparencyAttrib* {.importcpp: "PT(TransparencyAttrib)", bycopy, pure, inheritable, header: "transparencyAttrib.h".} = object of RenderAttrib

proc toTransparencyAttrib*(_: type(nil)): TransparencyAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TransparencyAttrib], obj: TypedObject): TransparencyAttrib {.importcpp: "DCAST(TransparencyAttrib, @)".}

type TransparencyAttrib_Mode {.importcpp: "TransparencyAttrib::Mode", pure, header: "transparencyAttrib.h".} = enum
  M_none = 0
  M_alpha = 1
  M_premultipliedAlpha = 2
  M_multisample = 3
  M_multisampleMask = 4
  M_binary = 5
  M_dual = 6

template Mode*(_: typedesc[TransparencyAttrib]): typedesc[TransparencyAttrib_Mode] = typedesc[TransparencyAttrib_Mode]
template Mode*(_: typedesc[TransparencyAttrib], value: untyped): TransparencyAttrib_Mode = TransparencyAttrib_Mode(value)

template M_none*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_none
template M_alpha*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_alpha
template M_premultipliedAlpha*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_premultipliedAlpha
template M_multisample*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_multisample
template M_multisampleMask*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_multisampleMask
template M_binary*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_binary
template M_dual*(_: typedesc[TransparencyAttrib]): TransparencyAttrib_Mode = TransparencyAttrib_Mode.M_dual

type LogicOpAttrib* {.importcpp: "PT(LogicOpAttrib)", bycopy, pure, inheritable, header: "logicOpAttrib.h".} = object of RenderAttrib

proc toLogicOpAttrib*(_: type(nil)): LogicOpAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LogicOpAttrib], obj: TypedObject): LogicOpAttrib {.importcpp: "DCAST(LogicOpAttrib, @)".}

type LogicOpAttrib_Operation {.importcpp: "LogicOpAttrib::Operation", pure, header: "logicOpAttrib.h".} = enum
  O_none = 0
  O_clear = 1
  O_and = 2
  O_andReverse = 3
  O_copy = 4
  O_andInverted = 5
  O_noop = 6
  O_xor = 7
  O_or = 8
  O_nor = 9
  O_equivalent = 10
  O_invert = 11
  O_orReverse = 12
  O_copyInverted = 13
  O_orInverted = 14
  O_nand = 15
  O_set = 16

template Operation*(_: typedesc[LogicOpAttrib]): typedesc[LogicOpAttrib_Operation] = typedesc[LogicOpAttrib_Operation]
template Operation*(_: typedesc[LogicOpAttrib], value: untyped): LogicOpAttrib_Operation = LogicOpAttrib_Operation(value)

template O_none*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_none
template O_clear*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_clear
template O_and*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_and
template O_andReverse*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_andReverse
template O_copy*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_copy
template O_andInverted*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_andInverted
template O_noop*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_noop
template O_xor*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_xor
template O_or*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_or
template O_nor*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_nor
template O_equivalent*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_equivalent
template O_invert*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_invert
template O_orReverse*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_orReverse
template O_copyInverted*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_copyInverted
template O_orInverted*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_orInverted
template O_nand*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_nand
template O_set*(_: typedesc[LogicOpAttrib]): LogicOpAttrib_Operation = LogicOpAttrib_Operation.O_set

type ShaderInput* {.importcpp: "ShaderInput", pure, inheritable, header: "shaderInput.h".} = object

type ShaderInput_AccessFlags {.importcpp: "ShaderInput::AccessFlags", pure, header: "shaderInput.h".} = enum
  A_read = 1
  A_write = 2
  A_layered = 4

template AccessFlags*(_: typedesc[ShaderInput]): typedesc[ShaderInput_AccessFlags] = typedesc[ShaderInput_AccessFlags]
template AccessFlags*(_: typedesc[ShaderInput], value: untyped): ShaderInput_AccessFlags = ShaderInput_AccessFlags(value)

template A_read*(_: typedesc[ShaderInput]): ShaderInput_AccessFlags = ShaderInput_AccessFlags.A_read
template A_write*(_: typedesc[ShaderInput]): ShaderInput_AccessFlags = ShaderInput_AccessFlags.A_write
template A_layered*(_: typedesc[ShaderInput]): ShaderInput_AccessFlags = ShaderInput_AccessFlags.A_layered

type ShaderInput_ShaderInputType {.importcpp: "ShaderInput::ShaderInputType", pure, header: "shaderInput.h".} = enum
  M_invalid = 0
  M_texture = 1
  M_nodepath = 2
  M_vector = 3
  M_numeric = 4
  M_textureSampler = 5
  M_param = 6
  M_textureImage = 7
  M_buffer = 8

template ShaderInputType*(_: typedesc[ShaderInput]): typedesc[ShaderInput_ShaderInputType] = typedesc[ShaderInput_ShaderInputType]
template ShaderInputType*(_: typedesc[ShaderInput], value: untyped): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType(value)

template M_invalid*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_invalid
template M_texture*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_texture
template M_nodepath*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_nodepath
template M_vector*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_vector
template M_numeric*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_numeric
template M_textureSampler*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_textureSampler
template M_param*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_param
template M_textureImage*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_textureImage
template M_buffer*(_: typedesc[ShaderInput]): ShaderInput_ShaderInputType = ShaderInput_ShaderInputType.M_buffer

type InternalNameCollection* {.importcpp: "InternalNameCollection", pure, inheritable, header: "internalNameCollection.h".} = object

type MaterialCollection* {.importcpp: "MaterialCollection", pure, inheritable, header: "materialCollection.h".} = object

type TextureStageCollection* {.importcpp: "TextureStageCollection", pure, inheritable, header: "textureStageCollection.h".} = object

type NodePath* {.importcpp: "NodePath", pure, inheritable, header: "nodePath.h".} = object

type NodePath_ErrorType {.importcpp: "NodePath::ErrorType", pure, header: "nodePath.h".} = enum
  ET_ok = 0
  ET_notFound = 1
  ET_removed = 2
  ET_fail = 3

template ErrorType*(_: typedesc[NodePath]): typedesc[NodePath_ErrorType] = typedesc[NodePath_ErrorType]
template ErrorType*(_: typedesc[NodePath], value: untyped): NodePath_ErrorType = NodePath_ErrorType(value)

template ET_ok*(_: typedesc[NodePath]): NodePath_ErrorType = NodePath_ErrorType.ET_ok
template ET_notFound*(_: typedesc[NodePath]): NodePath_ErrorType = NodePath_ErrorType.ET_notFound
template ET_removed*(_: typedesc[NodePath]): NodePath_ErrorType = NodePath_ErrorType.ET_removed
template ET_fail*(_: typedesc[NodePath]): NodePath_ErrorType = NodePath_ErrorType.ET_fail

type NodePathCollection* {.importcpp: "NodePathCollection", pure, inheritable, header: "nodePathCollection.h".} = object

type AttribNodeRegistry* {.importcpp: "AttribNodeRegistry", pure, inheritable, header: "attribNodeRegistry.h".} = object

type AudioVolumeAttrib* {.importcpp: "PT(AudioVolumeAttrib)", bycopy, pure, inheritable, header: "audioVolumeAttrib.h".} = object of RenderAttrib

proc toAudioVolumeAttrib*(_: type(nil)): AudioVolumeAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AudioVolumeAttrib], obj: TypedObject): AudioVolumeAttrib {.importcpp: "DCAST(AudioVolumeAttrib, @)".}

type AuxBitplaneAttrib* {.importcpp: "PT(AuxBitplaneAttrib)", bycopy, pure, inheritable, header: "auxBitplaneAttrib.h".} = object of RenderAttrib

proc toAuxBitplaneAttrib*(_: type(nil)): AuxBitplaneAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AuxBitplaneAttrib], obj: TypedObject): AuxBitplaneAttrib {.importcpp: "DCAST(AuxBitplaneAttrib, @)".}

type AuxBitplaneAttrib_AuxBitplaneOutput {.importcpp: "AuxBitplaneAttrib::AuxBitplaneOutput", pure, header: "auxBitplaneAttrib.h".} = enum
  ABO_glow = 1
  ABO_auxNormal = 2
  ABO_auxGlow = 4

template AuxBitplaneOutput*(_: typedesc[AuxBitplaneAttrib]): typedesc[AuxBitplaneAttrib_AuxBitplaneOutput] = typedesc[AuxBitplaneAttrib_AuxBitplaneOutput]
template AuxBitplaneOutput*(_: typedesc[AuxBitplaneAttrib], value: untyped): AuxBitplaneAttrib_AuxBitplaneOutput = AuxBitplaneAttrib_AuxBitplaneOutput(value)

template ABO_glow*(_: typedesc[AuxBitplaneAttrib]): AuxBitplaneAttrib_AuxBitplaneOutput = AuxBitplaneAttrib_AuxBitplaneOutput.ABO_glow
template ABO_auxNormal*(_: typedesc[AuxBitplaneAttrib]): AuxBitplaneAttrib_AuxBitplaneOutput = AuxBitplaneAttrib_AuxBitplaneOutput.ABO_auxNormal
template ABO_auxGlow*(_: typedesc[AuxBitplaneAttrib]): AuxBitplaneAttrib_AuxBitplaneOutput = AuxBitplaneAttrib_AuxBitplaneOutput.ABO_auxGlow

type AuxSceneData* {.importcpp: "PT(AuxSceneData)", bycopy, pure, inheritable, header: "auxSceneData.h".} = object of TypedReferenceCount

proc toAuxSceneData*(_: type(nil)): AuxSceneData {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AuxSceneData], obj: TypedObject): AuxSceneData {.importcpp: "DCAST(AuxSceneData, @)".}

type BamEnums* {.importcpp: "BamEnums", pure, inheritable, header: "bamEnums.h".} = object

type BamEnums_BamEndian {.importcpp: "BamEnums::BamEndian", pure, header: "bamEnums.h".} = enum
  BE_bigendian = 0
  BE_native = 1

template BamEndian*(_: typedesc[BamEnums]): typedesc[BamEnums_BamEndian] = typedesc[BamEnums_BamEndian]
template BamEndian*(_: typedesc[BamEnums], value: untyped): BamEnums_BamEndian = BamEnums_BamEndian(value)

template BE_bigendian*(_: typedesc[BamEnums]): BamEnums_BamEndian = BamEnums_BamEndian.BE_bigendian
template BE_littleendian*(_: typedesc[BamEnums]): BamEnums_BamEndian = BamEnums_BamEndian.BE_littleendian
template BE_native*(_: typedesc[BamEnums]): BamEnums_BamEndian = BamEnums_BamEndian.BE_native

type BamEnums_BamObjectCode {.importcpp: "BamEnums::BamObjectCode", pure, header: "bamEnums.h".} = enum
  BOC_push = 0
  BOC_pop = 1
  BOC_adjunct = 2
  BOC_remove = 3
  BOC_fileData = 4

template BamObjectCode*(_: typedesc[BamEnums]): typedesc[BamEnums_BamObjectCode] = typedesc[BamEnums_BamObjectCode]
template BamObjectCode*(_: typedesc[BamEnums], value: untyped): BamEnums_BamObjectCode = BamEnums_BamObjectCode(value)

template BOC_push*(_: typedesc[BamEnums]): BamEnums_BamObjectCode = BamEnums_BamObjectCode.BOC_push
template BOC_pop*(_: typedesc[BamEnums]): BamEnums_BamObjectCode = BamEnums_BamObjectCode.BOC_pop
template BOC_adjunct*(_: typedesc[BamEnums]): BamEnums_BamObjectCode = BamEnums_BamObjectCode.BOC_adjunct
template BOC_remove*(_: typedesc[BamEnums]): BamEnums_BamObjectCode = BamEnums_BamObjectCode.BOC_remove
template BOC_fileData*(_: typedesc[BamEnums]): BamEnums_BamObjectCode = BamEnums_BamObjectCode.BOC_fileData

type BamEnums_BamTextureMode {.importcpp: "BamEnums::BamTextureMode", pure, header: "bamEnums.h".} = enum
  BTM_unchanged = 0
  BTM_fullpath = 1
  BTM_relative = 2
  BTM_basename = 3
  BTM_rawdata = 4

template BamTextureMode*(_: typedesc[BamEnums]): typedesc[BamEnums_BamTextureMode] = typedesc[BamEnums_BamTextureMode]
template BamTextureMode*(_: typedesc[BamEnums], value: untyped): BamEnums_BamTextureMode = BamEnums_BamTextureMode(value)

template BTM_unchanged*(_: typedesc[BamEnums]): BamEnums_BamTextureMode = BamEnums_BamTextureMode.BTM_unchanged
template BTM_fullpath*(_: typedesc[BamEnums]): BamEnums_BamTextureMode = BamEnums_BamTextureMode.BTM_fullpath
template BTM_relative*(_: typedesc[BamEnums]): BamEnums_BamTextureMode = BamEnums_BamTextureMode.BTM_relative
template BTM_basename*(_: typedesc[BamEnums]): BamEnums_BamTextureMode = BamEnums_BamTextureMode.BTM_basename
template BTM_rawdata*(_: typedesc[BamEnums]): BamEnums_BamTextureMode = BamEnums_BamTextureMode.BTM_rawdata

type BamFile* {.importcpp: "BamFile", pure, inheritable, header: "bamFile.h".} = object of BamEnums

type BillboardEffect* {.importcpp: "PT(BillboardEffect)", bycopy, pure, inheritable, header: "billboardEffect.h".} = object of RenderEffect

proc toBillboardEffect*(_: type(nil)): BillboardEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BillboardEffect], obj: TypedObject): BillboardEffect {.importcpp: "DCAST(BillboardEffect, @)".}

type WeakNodePath* {.importcpp: "WeakNodePath", pure, inheritable, header: "weakNodePath.h".} = object

type PlaneNode* {.importcpp: "PT(PlaneNode)", bycopy, pure, inheritable, header: "planeNode.h".} = object of PandaNode

proc toPlaneNode*(_: type(nil)): PlaneNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PlaneNode], obj: TypedObject): PlaneNode {.importcpp: "DCAST(PlaneNode, @)".}

type PlaneNode_ClipEffect {.importcpp: "PlaneNode::ClipEffect", pure, header: "planeNode.h".} = enum
  CE_visible = 1
  CE_collision = 2

template ClipEffect*(_: typedesc[PlaneNode]): typedesc[PlaneNode_ClipEffect] = typedesc[PlaneNode_ClipEffect]
template ClipEffect*(_: typedesc[PlaneNode], value: untyped): PlaneNode_ClipEffect = PlaneNode_ClipEffect(value)

template CE_visible*(_: typedesc[PlaneNode]): PlaneNode_ClipEffect = PlaneNode_ClipEffect.CE_visible
template CE_collision*(_: typedesc[PlaneNode]): PlaneNode_ClipEffect = PlaneNode_ClipEffect.CE_collision

type ClipPlaneAttrib* {.importcpp: "PT(ClipPlaneAttrib)", bycopy, pure, inheritable, header: "clipPlaneAttrib.h".} = object of RenderAttrib

proc toClipPlaneAttrib*(_: type(nil)): ClipPlaneAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ClipPlaneAttrib], obj: TypedObject): ClipPlaneAttrib {.importcpp: "DCAST(ClipPlaneAttrib, @)".}

type ClipPlaneAttrib_Operation {.importcpp: "ClipPlaneAttrib::Operation", pure, header: "clipPlaneAttrib.h".} = enum
  O_set = 0
  O_add = 1
  O_remove = 2

template Operation*(_: typedesc[ClipPlaneAttrib]): typedesc[ClipPlaneAttrib_Operation] = typedesc[ClipPlaneAttrib_Operation]
template Operation*(_: typedesc[ClipPlaneAttrib], value: untyped): ClipPlaneAttrib_Operation = ClipPlaneAttrib_Operation(value)

template O_set*(_: typedesc[ClipPlaneAttrib]): ClipPlaneAttrib_Operation = ClipPlaneAttrib_Operation.O_set
template O_add*(_: typedesc[ClipPlaneAttrib]): ClipPlaneAttrib_Operation = ClipPlaneAttrib_Operation.O_add
template O_remove*(_: typedesc[ClipPlaneAttrib]): ClipPlaneAttrib_Operation = ClipPlaneAttrib_Operation.O_remove

type ColorAttrib* {.importcpp: "PT(ColorAttrib)", bycopy, pure, inheritable, header: "colorAttrib.h".} = object of RenderAttrib

proc toColorAttrib*(_: type(nil)): ColorAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ColorAttrib], obj: TypedObject): ColorAttrib {.importcpp: "DCAST(ColorAttrib, @)".}

type ColorAttrib_Type {.importcpp: "ColorAttrib::Type", pure, header: "colorAttrib.h".} = enum
  T_vertex = 0
  T_flat = 1
  T_off = 2

template Type*(_: typedesc[ColorAttrib]): typedesc[ColorAttrib_Type] = typedesc[ColorAttrib_Type]
template Type*(_: typedesc[ColorAttrib], value: untyped): ColorAttrib_Type = ColorAttrib_Type(value)

template T_vertex*(_: typedesc[ColorAttrib]): ColorAttrib_Type = ColorAttrib_Type.T_vertex
template T_flat*(_: typedesc[ColorAttrib]): ColorAttrib_Type = ColorAttrib_Type.T_flat
template T_off*(_: typedesc[ColorAttrib]): ColorAttrib_Type = ColorAttrib_Type.T_off

type ColorBlendAttrib* {.importcpp: "PT(ColorBlendAttrib)", bycopy, pure, inheritable, header: "colorBlendAttrib.h".} = object of RenderAttrib

proc toColorBlendAttrib*(_: type(nil)): ColorBlendAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ColorBlendAttrib], obj: TypedObject): ColorBlendAttrib {.importcpp: "DCAST(ColorBlendAttrib, @)".}

type ColorBlendAttrib_Mode {.importcpp: "ColorBlendAttrib::Mode", pure, header: "colorBlendAttrib.h".} = enum
  M_none = 0
  M_add = 1
  M_subtract = 2
  M_invSubtract = 3
  M_min = 4
  M_max = 5

template Mode*(_: typedesc[ColorBlendAttrib]): typedesc[ColorBlendAttrib_Mode] = typedesc[ColorBlendAttrib_Mode]
template Mode*(_: typedesc[ColorBlendAttrib], value: untyped): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode(value)

template M_none*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode.M_none
template M_add*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode.M_add
template M_subtract*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode.M_subtract
template M_invSubtract*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode.M_invSubtract
template M_min*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode.M_min
template M_max*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Mode = ColorBlendAttrib_Mode.M_max

type ColorBlendAttrib_Operand {.importcpp: "ColorBlendAttrib::Operand", pure, header: "colorBlendAttrib.h".} = enum
  O_zero = 0
  O_one = 1
  O_incomingColor = 2
  O_oneMinusIncomingColor = 3
  O_fbufferColor = 4
  O_oneMinusFbufferColor = 5
  O_incomingAlpha = 6
  O_oneMinusIncomingAlpha = 7
  O_fbufferAlpha = 8
  O_oneMinusFbufferAlpha = 9
  O_constantColor = 10
  O_oneMinusConstantColor = 11
  O_constantAlpha = 12
  O_oneMinusConstantAlpha = 13
  O_incomingColorSaturate = 14
  O_incoming1Color = 15
  O_oneMinusIncoming1Color = 16
  O_incoming1Alpha = 17
  O_oneMinusIncoming1Alpha = 18
  O_colorScale = 19
  O_oneMinusColorScale = 20
  O_alphaScale = 21
  O_oneMinusAlphaScale = 22

template Operand*(_: typedesc[ColorBlendAttrib]): typedesc[ColorBlendAttrib_Operand] = typedesc[ColorBlendAttrib_Operand]
template Operand*(_: typedesc[ColorBlendAttrib], value: untyped): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand(value)

template O_zero*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_zero
template O_one*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_one
template O_incomingColor*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_incomingColor
template O_oneMinusIncomingColor*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusIncomingColor
template O_fbufferColor*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_fbufferColor
template O_oneMinusFbufferColor*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusFbufferColor
template O_incomingAlpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_incomingAlpha
template O_oneMinusIncomingAlpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusIncomingAlpha
template O_fbufferAlpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_fbufferAlpha
template O_oneMinusFbufferAlpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusFbufferAlpha
template O_constantColor*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_constantColor
template O_oneMinusConstantColor*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusConstantColor
template O_constantAlpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_constantAlpha
template O_oneMinusConstantAlpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusConstantAlpha
template O_incomingColorSaturate*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_incomingColorSaturate
template O_incoming1Color*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_incoming1Color
template O_oneMinusIncoming1Color*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusIncoming1Color
template O_incoming1Alpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_incoming1Alpha
template O_oneMinusIncoming1Alpha*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusIncoming1Alpha
template O_colorScale*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_colorScale
template O_oneMinusColorScale*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusColorScale
template O_alphaScale*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_alphaScale
template O_oneMinusAlphaScale*(_: typedesc[ColorBlendAttrib]): ColorBlendAttrib_Operand = ColorBlendAttrib_Operand.O_oneMinusAlphaScale

type ColorScaleAttrib* {.importcpp: "PT(ColorScaleAttrib)", bycopy, pure, inheritable, header: "colorScaleAttrib.h".} = object of RenderAttrib

proc toColorScaleAttrib*(_: type(nil)): ColorScaleAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ColorScaleAttrib], obj: TypedObject): ColorScaleAttrib {.importcpp: "DCAST(ColorScaleAttrib, @)".}

type ColorWriteAttrib* {.importcpp: "PT(ColorWriteAttrib)", bycopy, pure, inheritable, header: "colorWriteAttrib.h".} = object of RenderAttrib

proc toColorWriteAttrib*(_: type(nil)): ColorWriteAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ColorWriteAttrib], obj: TypedObject): ColorWriteAttrib {.importcpp: "DCAST(ColorWriteAttrib, @)".}

type ColorWriteAttrib_Channels {.importcpp: "ColorWriteAttrib::Channels", pure, header: "colorWriteAttrib.h".} = enum
  C_off = 0
  C_red = 1
  C_green = 2
  C_blue = 4
  C_rgb = 7
  C_alpha = 8
  C_all = 15

template Channels*(_: typedesc[ColorWriteAttrib]): typedesc[ColorWriteAttrib_Channels] = typedesc[ColorWriteAttrib_Channels]
template Channels*(_: typedesc[ColorWriteAttrib], value: untyped): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels(value)

template C_off*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_off
template C_red*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_red
template C_green*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_green
template C_blue*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_blue
template C_rgb*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_rgb
template C_alpha*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_alpha
template C_all*(_: typedesc[ColorWriteAttrib]): ColorWriteAttrib_Channels = ColorWriteAttrib_Channels.C_all

type CompassEffect* {.importcpp: "PT(CompassEffect)", bycopy, pure, inheritable, header: "compassEffect.h".} = object of RenderEffect

proc toCompassEffect*(_: type(nil)): CompassEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CompassEffect], obj: TypedObject): CompassEffect {.importcpp: "DCAST(CompassEffect, @)".}

type CompassEffect_Properties {.importcpp: "CompassEffect::Properties", pure, header: "compassEffect.h".} = enum
  P_x = 1
  P_y = 2
  P_z = 4
  P_pos = 7
  P_rot = 8
  P_sx = 16
  P_sy = 32
  P_sz = 64
  P_scale = 112
  P_all = 127

template Properties*(_: typedesc[CompassEffect]): typedesc[CompassEffect_Properties] = typedesc[CompassEffect_Properties]
template Properties*(_: typedesc[CompassEffect], value: untyped): CompassEffect_Properties = CompassEffect_Properties(value)

template P_x*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_x
template P_y*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_y
template P_z*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_z
template P_pos*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_pos
template P_rot*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_rot
template P_sx*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_sx
template P_sy*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_sy
template P_sz*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_sz
template P_scale*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_scale
template P_all*(_: typedesc[CompassEffect]): CompassEffect_Properties = CompassEffect_Properties.P_all

type CullBinEnums* {.importcpp: "CullBinEnums", pure, inheritable, header: "cullBinEnums.h".} = object

type CullBinEnums_BinType {.importcpp: "CullBinEnums::BinType", pure, header: "cullBinEnums.h".} = enum
  BT_invalid = 0
  BT_unsorted = 1
  BT_stateSorted = 2
  BT_backToFront = 3
  BT_frontToBack = 4
  BT_fixed = 5

template BinType*(_: typedesc[CullBinEnums]): typedesc[CullBinEnums_BinType] = typedesc[CullBinEnums_BinType]
template BinType*(_: typedesc[CullBinEnums], value: untyped): CullBinEnums_BinType = CullBinEnums_BinType(value)

template BT_invalid*(_: typedesc[CullBinEnums]): CullBinEnums_BinType = CullBinEnums_BinType.BT_invalid
template BT_unsorted*(_: typedesc[CullBinEnums]): CullBinEnums_BinType = CullBinEnums_BinType.BT_unsorted
template BT_stateSorted*(_: typedesc[CullBinEnums]): CullBinEnums_BinType = CullBinEnums_BinType.BT_stateSorted
template BT_backToFront*(_: typedesc[CullBinEnums]): CullBinEnums_BinType = CullBinEnums_BinType.BT_backToFront
template BT_frontToBack*(_: typedesc[CullBinEnums]): CullBinEnums_BinType = CullBinEnums_BinType.BT_frontToBack
template BT_fixed*(_: typedesc[CullBinEnums]): CullBinEnums_BinType = CullBinEnums_BinType.BT_fixed

type GeomNode* {.importcpp: "PT(GeomNode)", bycopy, pure, inheritable, header: "geomNode.h".} = object of PandaNode

proc toGeomNode*(_: type(nil)): GeomNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomNode], obj: TypedObject): GeomNode {.importcpp: "DCAST(GeomNode, @)".}

type CullBinAttrib* {.importcpp: "PT(CullBinAttrib)", bycopy, pure, inheritable, header: "cullBinAttrib.h".} = object of RenderAttrib

proc toCullBinAttrib*(_: type(nil)): CullBinAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CullBinAttrib], obj: TypedObject): CullBinAttrib {.importcpp: "DCAST(CullBinAttrib, @)".}

type CullBinManager* {.importcpp: "CullBinManager", pure, inheritable, header: "cullBinManager.h".} = object of CullBinEnums

type CullFaceAttrib* {.importcpp: "PT(CullFaceAttrib)", bycopy, pure, inheritable, header: "cullFaceAttrib.h".} = object of RenderAttrib

proc toCullFaceAttrib*(_: type(nil)): CullFaceAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CullFaceAttrib], obj: TypedObject): CullFaceAttrib {.importcpp: "DCAST(CullFaceAttrib, @)".}

type CullFaceAttrib_Mode {.importcpp: "CullFaceAttrib::Mode", pure, header: "cullFaceAttrib.h".} = enum
  M_cullNone = 0
  M_cullClockwise = 1
  M_cullCounterClockwise = 2
  M_cullUnchanged = 3

template Mode*(_: typedesc[CullFaceAttrib]): typedesc[CullFaceAttrib_Mode] = typedesc[CullFaceAttrib_Mode]
template Mode*(_: typedesc[CullFaceAttrib], value: untyped): CullFaceAttrib_Mode = CullFaceAttrib_Mode(value)

template M_cullNone*(_: typedesc[CullFaceAttrib]): CullFaceAttrib_Mode = CullFaceAttrib_Mode.M_cullNone
template M_cullClockwise*(_: typedesc[CullFaceAttrib]): CullFaceAttrib_Mode = CullFaceAttrib_Mode.M_cullClockwise
template M_cullCounterClockwise*(_: typedesc[CullFaceAttrib]): CullFaceAttrib_Mode = CullFaceAttrib_Mode.M_cullCounterClockwise
template M_cullUnchanged*(_: typedesc[CullFaceAttrib]): CullFaceAttrib_Mode = CullFaceAttrib_Mode.M_cullUnchanged

type WorkingNodePath* {.importcpp: "WorkingNodePath", pure, inheritable, header: "workingNodePath.h".} = object

type CullTraverserData* {.importcpp: "CullTraverserData", pure, inheritable, header: "cullTraverserData.h".} = object

type SceneSetup* {.importcpp: "PT(SceneSetup)", bycopy, pure, inheritable, header: "sceneSetup.h".} = object of TypedReferenceCount

proc toSceneSetup*(_: type(nil)): SceneSetup {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SceneSetup], obj: TypedObject): SceneSetup {.importcpp: "DCAST(SceneSetup, @)".}

type Fog* {.importcpp: "PT(Fog)", bycopy, pure, inheritable, header: "fog.h".} = object of PandaNode

proc toFog*(_: type(nil)): Fog {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Fog], obj: TypedObject): Fog {.importcpp: "DCAST(Fog, @)".}

type Fog_Mode {.importcpp: "Fog::Mode", pure, header: "fog.h".} = enum
  M_linear = 0
  M_exponential = 1
  M_exponentialSquared = 2

template Mode*(_: typedesc[Fog]): typedesc[Fog_Mode] = typedesc[Fog_Mode]
template Mode*(_: typedesc[Fog], value: untyped): Fog_Mode = Fog_Mode(value)

template M_linear*(_: typedesc[Fog]): Fog_Mode = Fog_Mode.M_linear
template M_exponential*(_: typedesc[Fog]): Fog_Mode = Fog_Mode.M_exponential
template M_exponentialSquared*(_: typedesc[Fog]): Fog_Mode = Fog_Mode.M_exponentialSquared

type FogAttrib* {.importcpp: "PT(FogAttrib)", bycopy, pure, inheritable, header: "fogAttrib.h".} = object of RenderAttrib

proc toFogAttrib*(_: type(nil)): FogAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FogAttrib], obj: TypedObject): FogAttrib {.importcpp: "DCAST(FogAttrib, @)".}

type CullTraverser* {.importcpp: "PT(CullTraverser)", bycopy, pure, inheritable, header: "cullTraverser.h".} = object of TypedReferenceCount

proc toCullTraverser*(_: type(nil)): CullTraverser {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CullTraverser], obj: TypedObject): CullTraverser {.importcpp: "DCAST(CullTraverser, @)".}

type GeomDrawCallbackData* {.importcpp: "GeomDrawCallbackData", pure, inheritable, header: "geomDrawCallbackData.h".} = object of CallbackData

type RescaleNormalAttrib* {.importcpp: "PT(RescaleNormalAttrib)", bycopy, pure, inheritable, header: "rescaleNormalAttrib.h".} = object of RenderAttrib

proc toRescaleNormalAttrib*(_: type(nil)): RescaleNormalAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RescaleNormalAttrib], obj: TypedObject): RescaleNormalAttrib {.importcpp: "DCAST(RescaleNormalAttrib, @)".}

type RescaleNormalAttrib_Mode {.importcpp: "RescaleNormalAttrib::Mode", pure, header: "rescaleNormalAttrib.h".} = enum
  M_none = 0
  M_rescale = 1
  M_normalize = 2
  M_auto = 3

template Mode*(_: typedesc[RescaleNormalAttrib]): typedesc[RescaleNormalAttrib_Mode] = typedesc[RescaleNormalAttrib_Mode]
template Mode*(_: typedesc[RescaleNormalAttrib], value: untyped): RescaleNormalAttrib_Mode = RescaleNormalAttrib_Mode(value)

template M_none*(_: typedesc[RescaleNormalAttrib]): RescaleNormalAttrib_Mode = RescaleNormalAttrib_Mode.M_none
template M_rescale*(_: typedesc[RescaleNormalAttrib]): RescaleNormalAttrib_Mode = RescaleNormalAttrib_Mode.M_rescale
template M_normalize*(_: typedesc[RescaleNormalAttrib]): RescaleNormalAttrib_Mode = RescaleNormalAttrib_Mode.M_normalize
template M_auto*(_: typedesc[RescaleNormalAttrib]): RescaleNormalAttrib_Mode = RescaleNormalAttrib_Mode.M_auto

type CullResult* {.importcpp: "PT(CullResult)", bycopy, pure, inheritable, header: "cullResult.h".} = object of ReferenceCount

proc toCullResult*(_: type(nil)): CullResult {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CullResult], obj: TypedObject): CullResult {.importcpp: "DCAST(CullResult, @)".}

type DecalEffect* {.importcpp: "PT(DecalEffect)", bycopy, pure, inheritable, header: "decalEffect.h".} = object of RenderEffect

proc toDecalEffect*(_: type(nil)): DecalEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DecalEffect], obj: TypedObject): DecalEffect {.importcpp: "DCAST(DecalEffect, @)".}

type DepthOffsetAttrib* {.importcpp: "PT(DepthOffsetAttrib)", bycopy, pure, inheritable, header: "depthOffsetAttrib.h".} = object of RenderAttrib

proc toDepthOffsetAttrib*(_: type(nil)): DepthOffsetAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DepthOffsetAttrib], obj: TypedObject): DepthOffsetAttrib {.importcpp: "DCAST(DepthOffsetAttrib, @)".}

type DepthTestAttrib* {.importcpp: "PT(DepthTestAttrib)", bycopy, pure, inheritable, header: "depthTestAttrib.h".} = object of RenderAttrib

proc toDepthTestAttrib*(_: type(nil)): DepthTestAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DepthTestAttrib], obj: TypedObject): DepthTestAttrib {.importcpp: "DCAST(DepthTestAttrib, @)".}

type DepthWriteAttrib* {.importcpp: "PT(DepthWriteAttrib)", bycopy, pure, inheritable, header: "depthWriteAttrib.h".} = object of RenderAttrib

proc toDepthWriteAttrib*(_: type(nil)): DepthWriteAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DepthWriteAttrib], obj: TypedObject): DepthWriteAttrib {.importcpp: "DCAST(DepthWriteAttrib, @)".}

type DepthWriteAttrib_Mode {.importcpp: "DepthWriteAttrib::Mode", pure, header: "depthWriteAttrib.h".} = enum
  M_off = 0
  M_on = 1

template Mode*(_: typedesc[DepthWriteAttrib]): typedesc[DepthWriteAttrib_Mode] = typedesc[DepthWriteAttrib_Mode]
template Mode*(_: typedesc[DepthWriteAttrib], value: untyped): DepthWriteAttrib_Mode = DepthWriteAttrib_Mode(value)

template M_off*(_: typedesc[DepthWriteAttrib]): DepthWriteAttrib_Mode = DepthWriteAttrib_Mode.M_off
template M_on*(_: typedesc[DepthWriteAttrib]): DepthWriteAttrib_Mode = DepthWriteAttrib_Mode.M_on

type LightAttrib* {.importcpp: "PT(LightAttrib)", bycopy, pure, inheritable, header: "lightAttrib.h".} = object of RenderAttrib

proc toLightAttrib*(_: type(nil)): LightAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LightAttrib], obj: TypedObject): LightAttrib {.importcpp: "DCAST(LightAttrib, @)".}

type LightAttrib_Operation {.importcpp: "LightAttrib::Operation", pure, header: "lightAttrib.h".} = enum
  O_set = 0
  O_add = 1
  O_remove = 2

template Operation*(_: typedesc[LightAttrib]): typedesc[LightAttrib_Operation] = typedesc[LightAttrib_Operation]
template Operation*(_: typedesc[LightAttrib], value: untyped): LightAttrib_Operation = LightAttrib_Operation(value)

template O_set*(_: typedesc[LightAttrib]): LightAttrib_Operation = LightAttrib_Operation.O_set
template O_add*(_: typedesc[LightAttrib]): LightAttrib_Operation = LightAttrib_Operation.O_add
template O_remove*(_: typedesc[LightAttrib]): LightAttrib_Operation = LightAttrib_Operation.O_remove

type LightRampAttrib* {.importcpp: "PT(LightRampAttrib)", bycopy, pure, inheritable, header: "lightRampAttrib.h".} = object of RenderAttrib

proc toLightRampAttrib*(_: type(nil)): LightRampAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LightRampAttrib], obj: TypedObject): LightRampAttrib {.importcpp: "DCAST(LightRampAttrib, @)".}

type LightRampAttrib_LightRampMode {.importcpp: "LightRampAttrib::LightRampMode", pure, header: "lightRampAttrib.h".} = enum
  LRT_default = 0
  LRT_identity = 1
  LRT_singleThreshold = 2
  LRT_doubleThreshold = 3
  LRT_hdr0 = 4
  LRT_hdr1 = 5
  LRT_hdr2 = 6

template LightRampMode*(_: typedesc[LightRampAttrib]): typedesc[LightRampAttrib_LightRampMode] = typedesc[LightRampAttrib_LightRampMode]
template LightRampMode*(_: typedesc[LightRampAttrib], value: untyped): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode(value)

template LRT_default*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_default
template LRT_identity*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_identity
template LRT_singleThreshold*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_singleThreshold
template LRT_doubleThreshold*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_doubleThreshold
template LRT_hdr0*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_hdr0
template LRT_hdr1*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_hdr1
template LRT_hdr2*(_: typedesc[LightRampAttrib]): LightRampAttrib_LightRampMode = LightRampAttrib_LightRampMode.LRT_hdr2

type Loader* {.importcpp: "PT(Loader)", bycopy, pure, inheritable, header: "loader.h".} = object of TypedReferenceCount

proc upcastToNamable*(_: typedesc[Loader]): typedesc[Namable] = typedesc[Namable]

proc toLoader*(_: type(nil)): Loader {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Loader], obj: TypedObject): Loader {.importcpp: "DCAST(Loader, @)".}

type LoaderFileType* {.importcpp: "LoaderFileType", pure, inheritable, header: "loaderFileType.h".} = object of TypedObject

type LoaderFileTypeRegistry* {.importcpp: "LoaderFileTypeRegistry", pure, inheritable, header: "loaderFileTypeRegistry.h".} = object

type MaterialAttrib* {.importcpp: "PT(MaterialAttrib)", bycopy, pure, inheritable, header: "materialAttrib.h".} = object of RenderAttrib

proc toMaterialAttrib*(_: type(nil)): MaterialAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MaterialAttrib], obj: TypedObject): MaterialAttrib {.importcpp: "DCAST(MaterialAttrib, @)".}

type AsyncFuture* {.importcpp: "PT(AsyncFuture)", bycopy, pure, inheritable, header: "asyncFuture.h".} = object of TypedReferenceCount

proc toAsyncFuture*(_: type(nil)): AsyncFuture {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AsyncFuture], obj: TypedObject): AsyncFuture {.importcpp: "DCAST(AsyncFuture, @)".}

type AsyncTask* {.importcpp: "PT(AsyncTask)", bycopy, pure, inheritable, header: "asyncTask.h".} = object of AsyncFuture

proc upcastToNamable*(_: typedesc[AsyncTask]): typedesc[Namable] = typedesc[Namable]

proc toAsyncTask*(_: type(nil)): AsyncTask {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AsyncTask], obj: TypedObject): AsyncTask {.importcpp: "DCAST(AsyncTask, @)".}

type AsyncTask_DoneStatus {.importcpp: "AsyncTask::DoneStatus", pure, header: "asyncTask.h".} = enum
  DS_done = 0
  DS_cont = 1
  DS_again = 2
  DS_pickup = 3
  DS_exit = 4
  DS_pause = 5
  DS_interrupt = 6
  DS_await = 7

template DoneStatus*(_: typedesc[AsyncTask]): typedesc[AsyncTask_DoneStatus] = typedesc[AsyncTask_DoneStatus]
template DoneStatus*(_: typedesc[AsyncTask], value: untyped): AsyncTask_DoneStatus = AsyncTask_DoneStatus(value)

template DS_done*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_done
template DS_cont*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_cont
template DS_again*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_again
template DS_pickup*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_pickup
template DS_exit*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_exit
template DS_pause*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_pause
template DS_interrupt*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_interrupt
template DS_await*(_: typedesc[AsyncTask]): AsyncTask_DoneStatus = AsyncTask_DoneStatus.DS_await

type AsyncTask_State {.importcpp: "AsyncTask::State", pure, header: "asyncTask.h".} = enum
  S_inactive = 0
  S_active = 1
  S_servicing = 2
  S_servicingRemoved = 3
  S_sleeping = 4
  S_activeNested = 5
  S_awaiting = 6

template State*(_: typedesc[AsyncTask]): typedesc[AsyncTask_State] = typedesc[AsyncTask_State]
template State*(_: typedesc[AsyncTask], value: untyped): AsyncTask_State = AsyncTask_State(value)

template S_inactive*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_inactive
template S_active*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_active
template S_servicing*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_servicing
template S_servicingRemoved*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_servicingRemoved
template S_sleeping*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_sleeping
template S_activeNested*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_activeNested
template S_awaiting*(_: typedesc[AsyncTask]): AsyncTask_State = AsyncTask_State.S_awaiting

type ModelFlattenRequest* {.importcpp: "PT(ModelFlattenRequest)", bycopy, pure, inheritable, header: "modelFlattenRequest.h".} = object of AsyncTask

proc toModelFlattenRequest*(_: type(nil)): ModelFlattenRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ModelFlattenRequest], obj: TypedObject): ModelFlattenRequest {.importcpp: "DCAST(ModelFlattenRequest, @)".}

type ModelLoadRequest* {.importcpp: "PT(ModelLoadRequest)", bycopy, pure, inheritable, header: "modelLoadRequest.h".} = object of AsyncTask

proc toModelLoadRequest*(_: type(nil)): ModelLoadRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ModelLoadRequest], obj: TypedObject): ModelLoadRequest {.importcpp: "DCAST(ModelLoadRequest, @)".}

type ModelNode* {.importcpp: "PT(ModelNode)", bycopy, pure, inheritable, header: "modelNode.h".} = object of PandaNode

proc toModelNode*(_: type(nil)): ModelNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ModelNode], obj: TypedObject): ModelNode {.importcpp: "DCAST(ModelNode, @)".}

type ModelNode_PreserveTransform {.importcpp: "ModelNode::PreserveTransform", pure, header: "modelNode.h".} = enum
  PT_none = 0
  PT_local = 1
  PT_net = 2
  PT_dropNode = 3
  PT_noTouch = 4

template PreserveTransform*(_: typedesc[ModelNode]): typedesc[ModelNode_PreserveTransform] = typedesc[ModelNode_PreserveTransform]
template PreserveTransform*(_: typedesc[ModelNode], value: untyped): ModelNode_PreserveTransform = ModelNode_PreserveTransform(value)

template PT_none*(_: typedesc[ModelNode]): ModelNode_PreserveTransform = ModelNode_PreserveTransform.PT_none
template PT_local*(_: typedesc[ModelNode]): ModelNode_PreserveTransform = ModelNode_PreserveTransform.PT_local
template PT_net*(_: typedesc[ModelNode]): ModelNode_PreserveTransform = ModelNode_PreserveTransform.PT_net
template PT_dropNode*(_: typedesc[ModelNode]): ModelNode_PreserveTransform = ModelNode_PreserveTransform.PT_dropNode
template PT_noTouch*(_: typedesc[ModelNode]): ModelNode_PreserveTransform = ModelNode_PreserveTransform.PT_noTouch

type ModelRoot* {.importcpp: "PT(ModelRoot)", bycopy, pure, inheritable, header: "modelRoot.h".} = object of ModelNode

proc toModelRoot*(_: type(nil)): ModelRoot {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ModelRoot], obj: TypedObject): ModelRoot {.importcpp: "DCAST(ModelRoot, @)".}

type ModelPool* {.importcpp: "ModelPool", pure, inheritable, header: "modelPool.h".} = object

type ModelSaveRequest* {.importcpp: "PT(ModelSaveRequest)", bycopy, pure, inheritable, header: "modelSaveRequest.h".} = object of AsyncTask

proc toModelSaveRequest*(_: type(nil)): ModelSaveRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ModelSaveRequest], obj: TypedObject): ModelSaveRequest {.importcpp: "DCAST(ModelSaveRequest, @)".}

type TextureAttrib* {.importcpp: "PT(TextureAttrib)", bycopy, pure, inheritable, header: "textureAttrib.h".} = object of RenderAttrib

proc toTextureAttrib*(_: type(nil)): TextureAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TextureAttrib], obj: TypedObject): TextureAttrib {.importcpp: "DCAST(TextureAttrib, @)".}

type TexGenAttrib* {.importcpp: "PT(TexGenAttrib)", bycopy, pure, inheritable, header: "texGenAttrib.h".} = object of RenderAttrib

proc toTexGenAttrib*(_: type(nil)): TexGenAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TexGenAttrib], obj: TypedObject): TexGenAttrib {.importcpp: "DCAST(TexGenAttrib, @)".}

type OccluderNode* {.importcpp: "PT(OccluderNode)", bycopy, pure, inheritable, header: "occluderNode.h".} = object of PandaNode

proc toOccluderNode*(_: type(nil)): OccluderNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[OccluderNode], obj: TypedObject): OccluderNode {.importcpp: "DCAST(OccluderNode, @)".}

type OccluderEffect* {.importcpp: "PT(OccluderEffect)", bycopy, pure, inheritable, header: "occluderEffect.h".} = object of RenderEffect

proc toOccluderEffect*(_: type(nil)): OccluderEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[OccluderEffect], obj: TypedObject): OccluderEffect {.importcpp: "DCAST(OccluderEffect, @)".}

type PolylightNode* {.importcpp: "PT(PolylightNode)", bycopy, pure, inheritable, header: "polylightNode.h".} = object of PandaNode

proc toPolylightNode*(_: type(nil)): PolylightNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PolylightNode], obj: TypedObject): PolylightNode {.importcpp: "DCAST(PolylightNode, @)".}

type PolylightNode_Flicker_Type {.importcpp: "PolylightNode::Flicker_Type", pure, header: "polylightNode.h".} = enum
  FRANDOM = 0
  FSIN = 1
  FCUSTOM = 2

template Flicker_Type*(_: typedesc[PolylightNode]): typedesc[PolylightNode_Flicker_Type] = typedesc[PolylightNode_Flicker_Type]
template Flicker_Type*(_: typedesc[PolylightNode], value: untyped): PolylightNode_Flicker_Type = PolylightNode_Flicker_Type(value)

template FRANDOM*(_: typedesc[PolylightNode]): PolylightNode_Flicker_Type = PolylightNode_Flicker_Type.FRANDOM
template FSIN*(_: typedesc[PolylightNode]): PolylightNode_Flicker_Type = PolylightNode_Flicker_Type.FSIN
template FCUSTOM*(_: typedesc[PolylightNode]): PolylightNode_Flicker_Type = PolylightNode_Flicker_Type.FCUSTOM

type PolylightNode_Attenuation_Type {.importcpp: "PolylightNode::Attenuation_Type", pure, header: "polylightNode.h".} = enum
  ALINEAR = 0
  AQUADRATIC = 1

template Attenuation_Type*(_: typedesc[PolylightNode]): typedesc[PolylightNode_Attenuation_Type] = typedesc[PolylightNode_Attenuation_Type]
template Attenuation_Type*(_: typedesc[PolylightNode], value: untyped): PolylightNode_Attenuation_Type = PolylightNode_Attenuation_Type(value)

template ALINEAR*(_: typedesc[PolylightNode]): PolylightNode_Attenuation_Type = PolylightNode_Attenuation_Type.ALINEAR
template AQUADRATIC*(_: typedesc[PolylightNode]): PolylightNode_Attenuation_Type = PolylightNode_Attenuation_Type.AQUADRATIC

type PolylightEffect* {.importcpp: "PT(PolylightEffect)", bycopy, pure, inheritable, header: "polylightEffect.h".} = object of RenderEffect

proc toPolylightEffect*(_: type(nil)): PolylightEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PolylightEffect], obj: TypedObject): PolylightEffect {.importcpp: "DCAST(PolylightEffect, @)".}

type PolylightEffect_ContribType {.importcpp: "PolylightEffect::ContribType", pure, header: "polylightEffect.h".} = enum
  CT_proximal = 0
  CT_all = 1

template ContribType*(_: typedesc[PolylightEffect]): typedesc[PolylightEffect_ContribType] = typedesc[PolylightEffect_ContribType]
template ContribType*(_: typedesc[PolylightEffect], value: untyped): PolylightEffect_ContribType = PolylightEffect_ContribType(value)

template CT_proximal*(_: typedesc[PolylightEffect]): PolylightEffect_ContribType = PolylightEffect_ContribType.CT_proximal
template CT_all*(_: typedesc[PolylightEffect]): PolylightEffect_ContribType = PolylightEffect_ContribType.CT_all

type ShaderAttrib* {.importcpp: "PT(ShaderAttrib)", bycopy, pure, inheritable, header: "shaderAttrib.h".} = object of RenderAttrib

proc toShaderAttrib*(_: type(nil)): ShaderAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ShaderAttrib], obj: TypedObject): ShaderAttrib {.importcpp: "DCAST(ShaderAttrib, @)".}

type ShowBoundsEffect* {.importcpp: "PT(ShowBoundsEffect)", bycopy, pure, inheritable, header: "showBoundsEffect.h".} = object of RenderEffect

proc toShowBoundsEffect*(_: type(nil)): ShowBoundsEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ShowBoundsEffect], obj: TypedObject): ShowBoundsEffect {.importcpp: "DCAST(ShowBoundsEffect, @)".}

type TexProjectorEffect* {.importcpp: "PT(TexProjectorEffect)", bycopy, pure, inheritable, header: "texProjectorEffect.h".} = object of RenderEffect

proc toTexProjectorEffect*(_: type(nil)): TexProjectorEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TexProjectorEffect], obj: TypedObject): TexProjectorEffect {.importcpp: "DCAST(TexProjectorEffect, @)".}

type ScissorEffect* {.importcpp: "PT(ScissorEffect)", bycopy, pure, inheritable, header: "scissorEffect.h".} = object of RenderEffect

proc toScissorEffect*(_: type(nil)): ScissorEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ScissorEffect], obj: TypedObject): ScissorEffect {.importcpp: "DCAST(ScissorEffect, @)".}

type SceneGraphReducer* {.importcpp: "SceneGraphReducer", pure, inheritable, header: "sceneGraphReducer.h".} = object

type SceneGraphReducer_AttribTypes {.importcpp: "SceneGraphReducer::AttribTypes", pure, header: "sceneGraphReducer.h".} = enum
  TT_transform = 1
  TT_color = 2
  TT_colorScale = 4
  TT_texMatrix = 8
  TT_clipPlane = 16
  TT_cullFace = 32
  TT_applyTextureColor = 64
  TT_other = 128

template AttribTypes*(_: typedesc[SceneGraphReducer]): typedesc[SceneGraphReducer_AttribTypes] = typedesc[SceneGraphReducer_AttribTypes]
template AttribTypes*(_: typedesc[SceneGraphReducer], value: untyped): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes(value)

template TT_transform*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_transform
template TT_color*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_color
template TT_colorScale*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_colorScale
template TT_texMatrix*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_texMatrix
template TT_clipPlane*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_clipPlane
template TT_cullFace*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_cullFace
template TT_applyTextureColor*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_applyTextureColor
template TT_other*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_AttribTypes = SceneGraphReducer_AttribTypes.TT_other

type SceneGraphReducer_CombineSiblings {.importcpp: "SceneGraphReducer::CombineSiblings", pure, header: "sceneGraphReducer.h".} = enum
  CS_geomNode = 1
  CS_withinRadius = 2
  CS_other = 4
  CS_recurse = 8

template CombineSiblings*(_: typedesc[SceneGraphReducer]): typedesc[SceneGraphReducer_CombineSiblings] = typedesc[SceneGraphReducer_CombineSiblings]
template CombineSiblings*(_: typedesc[SceneGraphReducer], value: untyped): SceneGraphReducer_CombineSiblings = SceneGraphReducer_CombineSiblings(value)

template CS_geomNode*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CombineSiblings = SceneGraphReducer_CombineSiblings.CS_geomNode
template CS_withinRadius*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CombineSiblings = SceneGraphReducer_CombineSiblings.CS_withinRadius
template CS_other*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CombineSiblings = SceneGraphReducer_CombineSiblings.CS_other
template CS_recurse*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CombineSiblings = SceneGraphReducer_CombineSiblings.CS_recurse

type SceneGraphReducer_CollectVertexData {.importcpp: "SceneGraphReducer::CollectVertexData", pure, header: "sceneGraphReducer.h".} = enum
  CVD_name = 1
  CVD_model = 2
  CVD_transform = 4
  CVD_avoidDynamic = 8
  CVD_oneNodeOnly = 16
  CVD_format = 32
  CVD_usageHint = 64
  CVD_animationType = 128

template CollectVertexData*(_: typedesc[SceneGraphReducer]): typedesc[SceneGraphReducer_CollectVertexData] = typedesc[SceneGraphReducer_CollectVertexData]
template CollectVertexData*(_: typedesc[SceneGraphReducer], value: untyped): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData(value)

template CVD_name*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_name
template CVD_model*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_model
template CVD_transform*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_transform
template CVD_avoidDynamic*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_avoidDynamic
template CVD_oneNodeOnly*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_oneNodeOnly
template CVD_format*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_format
template CVD_usageHint*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_usageHint
template CVD_animationType*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_CollectVertexData = SceneGraphReducer_CollectVertexData.CVD_animationType

type SceneGraphReducer_MakeNonindexed {.importcpp: "SceneGraphReducer::MakeNonindexed", pure, header: "sceneGraphReducer.h".} = enum
  MN_compositeOnly = 1
  MN_avoidAnimated = 2
  MN_avoidDynamic = 4

template MakeNonindexed*(_: typedesc[SceneGraphReducer]): typedesc[SceneGraphReducer_MakeNonindexed] = typedesc[SceneGraphReducer_MakeNonindexed]
template MakeNonindexed*(_: typedesc[SceneGraphReducer], value: untyped): SceneGraphReducer_MakeNonindexed = SceneGraphReducer_MakeNonindexed(value)

template MN_compositeOnly*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_MakeNonindexed = SceneGraphReducer_MakeNonindexed.MN_compositeOnly
template MN_avoidAnimated*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_MakeNonindexed = SceneGraphReducer_MakeNonindexed.MN_avoidAnimated
template MN_avoidDynamic*(_: typedesc[SceneGraphReducer]): SceneGraphReducer_MakeNonindexed = SceneGraphReducer_MakeNonindexed.MN_avoidDynamic

type PortalNode* {.importcpp: "PT(PortalNode)", bycopy, pure, inheritable, header: "portalNode.h".} = object of PandaNode

proc toPortalNode*(_: type(nil)): PortalNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PortalNode], obj: TypedObject): PortalNode {.importcpp: "DCAST(PortalNode, @)".}

type ScissorAttrib* {.importcpp: "PT(ScissorAttrib)", bycopy, pure, inheritable, header: "scissorAttrib.h".} = object of RenderAttrib

proc toScissorAttrib*(_: type(nil)): ScissorAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ScissorAttrib], obj: TypedObject): ScissorAttrib {.importcpp: "DCAST(ScissorAttrib, @)".}

type ShadeModelAttrib* {.importcpp: "PT(ShadeModelAttrib)", bycopy, pure, inheritable, header: "shadeModelAttrib.h".} = object of RenderAttrib

proc toShadeModelAttrib*(_: type(nil)): ShadeModelAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ShadeModelAttrib], obj: TypedObject): ShadeModelAttrib {.importcpp: "DCAST(ShadeModelAttrib, @)".}

type ShadeModelAttrib_Mode {.importcpp: "ShadeModelAttrib::Mode", pure, header: "shadeModelAttrib.h".} = enum
  M_flat = 0
  M_smooth = 1

template Mode*(_: typedesc[ShadeModelAttrib]): typedesc[ShadeModelAttrib_Mode] = typedesc[ShadeModelAttrib_Mode]
template Mode*(_: typedesc[ShadeModelAttrib], value: untyped): ShadeModelAttrib_Mode = ShadeModelAttrib_Mode(value)

template M_flat*(_: typedesc[ShadeModelAttrib]): ShadeModelAttrib_Mode = ShadeModelAttrib_Mode.M_flat
template M_smooth*(_: typedesc[ShadeModelAttrib]): ShadeModelAttrib_Mode = ShadeModelAttrib_Mode.M_smooth

type StencilAttrib* {.importcpp: "PT(StencilAttrib)", bycopy, pure, inheritable, header: "stencilAttrib.h".} = object of RenderAttrib

proc toStencilAttrib*(_: type(nil)): StencilAttrib {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[StencilAttrib], obj: TypedObject): StencilAttrib {.importcpp: "DCAST(StencilAttrib, @)".}

type StencilAttrib_StencilRenderState {.importcpp: "StencilAttrib::StencilRenderState", pure, header: "stencilAttrib.h".} = enum
  SRS_frontComparisonFunction = 0
  SRS_frontStencilFailOperation = 1
  SRS_frontStencilPassZFailOperation = 2
  SRS_frontStencilPassZPassOperation = 3
  SRS_reference = 4
  SRS_readMask = 5
  SRS_writeMask = 6
  SRS_backComparisonFunction = 7
  SRS_backStencilFailOperation = 8
  SRS_backStencilPassZFailOperation = 9
  SRS_backStencilPassZPassOperation = 10
  SRS_clear = 11
  SRS_clearValue = 12
  SRS_total = 13

template StencilRenderState*(_: typedesc[StencilAttrib]): typedesc[StencilAttrib_StencilRenderState] = typedesc[StencilAttrib_StencilRenderState]
template StencilRenderState*(_: typedesc[StencilAttrib], value: untyped): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState(value)

template SRS_frontComparisonFunction*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_frontComparisonFunction
template SRS_frontStencilFailOperation*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_frontStencilFailOperation
template SRS_frontStencilPassZFailOperation*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_frontStencilPassZFailOperation
template SRS_frontStencilPassZPassOperation*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_frontStencilPassZPassOperation
template SRS_reference*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_reference
template SRS_readMask*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_readMask
template SRS_writeMask*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_writeMask
template SRS_backComparisonFunction*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_backComparisonFunction
template SRS_backStencilFailOperation*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_backStencilFailOperation
template SRS_backStencilPassZFailOperation*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_backStencilPassZFailOperation
template SRS_backStencilPassZPassOperation*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_backStencilPassZPassOperation
template SRS_clear*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_clear
template SRS_clearValue*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_clearValue
template SRS_total*(_: typedesc[StencilAttrib]): StencilAttrib_StencilRenderState = StencilAttrib_StencilRenderState.SRS_total

type StencilAttrib_StencilComparisonFunction {.importcpp: "StencilAttrib::StencilComparisonFunction", pure, header: "stencilAttrib.h".} = enum
  SCF_never = 1
  SCF_lessThan = 2
  SCF_equal = 3
  SCF_lessThanOrEqual = 4
  SCF_greaterThan = 5
  SCF_notEqual = 6
  SCF_greaterThanOrEqual = 7
  SCF_always = 8

template StencilComparisonFunction*(_: typedesc[StencilAttrib]): typedesc[StencilAttrib_StencilComparisonFunction] = typedesc[StencilAttrib_StencilComparisonFunction]
template StencilComparisonFunction*(_: typedesc[StencilAttrib], value: untyped): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction(value)

template SCF_never*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_never
template SCF_lessThan*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_lessThan
template SCF_equal*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_equal
template SCF_lessThanOrEqual*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_lessThanOrEqual
template SCF_greaterThan*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_greaterThan
template SCF_notEqual*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_notEqual
template SCF_greaterThanOrEqual*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_greaterThanOrEqual
template SCF_always*(_: typedesc[StencilAttrib]): StencilAttrib_StencilComparisonFunction = StencilAttrib_StencilComparisonFunction.SCF_always

type StencilAttrib_StencilOperation {.importcpp: "StencilAttrib::StencilOperation", pure, header: "stencilAttrib.h".} = enum
  SO_keep = 0
  SO_zero = 1
  SO_replace = 2
  SO_increment = 3
  SO_decrement = 4
  SO_invert = 5
  SO_incrementSaturate = 6
  SO_decrementSaturate = 7

template StencilOperation*(_: typedesc[StencilAttrib]): typedesc[StencilAttrib_StencilOperation] = typedesc[StencilAttrib_StencilOperation]
template StencilOperation*(_: typedesc[StencilAttrib], value: untyped): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation(value)

template SO_keep*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_keep
template SO_zero*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_zero
template SO_replace*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_replace
template SO_increment*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_increment
template SO_decrement*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_decrement
template SO_invert*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_invert
template SO_incrementSaturate*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_incrementSaturate
template SO_decrementSaturate*(_: typedesc[StencilAttrib]): StencilAttrib_StencilOperation = StencilAttrib_StencilOperation.SO_decrementSaturate

type ShaderPool* {.importcpp: "ShaderPool", pure, inheritable, header: "shaderPool.h".} = object

type MovieAudio* {.importcpp: "PT(MovieAudio)", bycopy, pure, inheritable, header: "movieAudio.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[MovieAudio]): typedesc[Namable] = typedesc[Namable]

proc toMovieAudio*(_: type(nil)): MovieAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovieAudio], obj: TypedObject): MovieAudio {.importcpp: "DCAST(MovieAudio, @)".}

type FlacAudio* {.importcpp: "PT(FlacAudio)", bycopy, pure, inheritable, header: "flacAudio.h".} = object of MovieAudio

proc toFlacAudio*(_: type(nil)): FlacAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FlacAudio], obj: TypedObject): FlacAudio {.importcpp: "DCAST(FlacAudio, @)".}

type MovieAudioCursor* {.importcpp: "PT(MovieAudioCursor)", bycopy, pure, inheritable, header: "movieAudioCursor.h".} = object of TypedWritableReferenceCount

proc toMovieAudioCursor*(_: type(nil)): MovieAudioCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovieAudioCursor], obj: TypedObject): MovieAudioCursor {.importcpp: "DCAST(MovieAudioCursor, @)".}

type FlacAudioCursor* {.importcpp: "PT(FlacAudioCursor)", bycopy, pure, inheritable, header: "flacAudioCursor.h".} = object of MovieAudioCursor

proc toFlacAudioCursor*(_: type(nil)): FlacAudioCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FlacAudioCursor], obj: TypedObject): FlacAudioCursor {.importcpp: "DCAST(FlacAudioCursor, @)".}

type MovieVideo* {.importcpp: "PT(MovieVideo)", bycopy, pure, inheritable, header: "movieVideo.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[MovieVideo]): typedesc[Namable] = typedesc[Namable]

proc toMovieVideo*(_: type(nil)): MovieVideo {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovieVideo], obj: TypedObject): MovieVideo {.importcpp: "DCAST(MovieVideo, @)".}

type InkblotVideo* {.importcpp: "PT(InkblotVideo)", bycopy, pure, inheritable, header: "inkblotVideo.h".} = object of MovieVideo

proc toInkblotVideo*(_: type(nil)): InkblotVideo {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[InkblotVideo], obj: TypedObject): InkblotVideo {.importcpp: "DCAST(InkblotVideo, @)".}

type MovieVideoCursor* {.importcpp: "PT(MovieVideoCursor)", bycopy, pure, inheritable, header: "movieVideoCursor.h".} = object of TypedWritableReferenceCount

proc toMovieVideoCursor*(_: type(nil)): MovieVideoCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovieVideoCursor], obj: TypedObject): MovieVideoCursor {.importcpp: "DCAST(MovieVideoCursor, @)".}

type InkblotVideoCursor* {.importcpp: "PT(InkblotVideoCursor)", bycopy, pure, inheritable, header: "inkblotVideoCursor.h".} = object of MovieVideoCursor

proc toInkblotVideoCursor*(_: type(nil)): InkblotVideoCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[InkblotVideoCursor], obj: TypedObject): InkblotVideoCursor {.importcpp: "DCAST(InkblotVideoCursor, @)".}

type MicrophoneAudio* {.importcpp: "PT(MicrophoneAudio)", bycopy, pure, inheritable, header: "microphoneAudio.h".} = object of MovieAudio

proc toMicrophoneAudio*(_: type(nil)): MicrophoneAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MicrophoneAudio], obj: TypedObject): MicrophoneAudio {.importcpp: "DCAST(MicrophoneAudio, @)".}

type OpusAudio* {.importcpp: "PT(OpusAudio)", bycopy, pure, inheritable, header: "opusAudio.h".} = object of MovieAudio

proc toOpusAudio*(_: type(nil)): OpusAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[OpusAudio], obj: TypedObject): OpusAudio {.importcpp: "DCAST(OpusAudio, @)".}

type OpusAudioCursor* {.importcpp: "PT(OpusAudioCursor)", bycopy, pure, inheritable, header: "opusAudioCursor.h".} = object of MovieAudioCursor

proc toOpusAudioCursor*(_: type(nil)): OpusAudioCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[OpusAudioCursor], obj: TypedObject): OpusAudioCursor {.importcpp: "DCAST(OpusAudioCursor, @)".}

type UserDataAudio* {.importcpp: "PT(UserDataAudio)", bycopy, pure, inheritable, header: "userDataAudio.h".} = object of MovieAudio

proc toUserDataAudio*(_: type(nil)): UserDataAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[UserDataAudio], obj: TypedObject): UserDataAudio {.importcpp: "DCAST(UserDataAudio, @)".}

type UserDataAudioCursor* {.importcpp: "PT(UserDataAudioCursor)", bycopy, pure, inheritable, header: "userDataAudioCursor.h".} = object of MovieAudioCursor

proc toUserDataAudioCursor*(_: type(nil)): UserDataAudioCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[UserDataAudioCursor], obj: TypedObject): UserDataAudioCursor {.importcpp: "DCAST(UserDataAudioCursor, @)".}

type VorbisAudio* {.importcpp: "PT(VorbisAudio)", bycopy, pure, inheritable, header: "vorbisAudio.h".} = object of MovieAudio

proc toVorbisAudio*(_: type(nil)): VorbisAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VorbisAudio], obj: TypedObject): VorbisAudio {.importcpp: "DCAST(VorbisAudio, @)".}

type VorbisAudioCursor* {.importcpp: "PT(VorbisAudioCursor)", bycopy, pure, inheritable, header: "vorbisAudioCursor.h".} = object of MovieAudioCursor

proc toVorbisAudioCursor*(_: type(nil)): VorbisAudioCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VorbisAudioCursor], obj: TypedObject): VorbisAudioCursor {.importcpp: "DCAST(VorbisAudioCursor, @)".}

type WavAudio* {.importcpp: "PT(WavAudio)", bycopy, pure, inheritable, header: "wavAudio.h".} = object of MovieAudio

proc toWavAudio*(_: type(nil)): WavAudio {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[WavAudio], obj: TypedObject): WavAudio {.importcpp: "DCAST(WavAudio, @)".}

type WavAudioCursor* {.importcpp: "PT(WavAudioCursor)", bycopy, pure, inheritable, header: "wavAudioCursor.h".} = object of MovieAudioCursor

proc toWavAudioCursor*(_: type(nil)): WavAudioCursor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[WavAudioCursor], obj: TypedObject): WavAudioCursor {.importcpp: "DCAST(WavAudioCursor, @)".}

type CardMaker* {.importcpp: "CardMaker*", bycopy, pure, inheritable, header: "cardMaker.h".} = object of Namable

proc toCardMaker*(_: type(nil)): CardMaker {.importcpp: "(nullptr)".}

type FisheyeMaker* {.importcpp: "FisheyeMaker*", bycopy, pure, inheritable, header: "fisheyeMaker.h".} = object of Namable

proc toFisheyeMaker*(_: type(nil)): FisheyeMaker {.importcpp: "(nullptr)".}

type TextProperties* {.importcpp: "TextProperties*", bycopy, pure, inheritable, header: "textProperties.h".} = object

proc toTextProperties*(_: type(nil)): TextProperties {.importcpp: "(nullptr)".}

type TextProperties_Alignment {.importcpp: "TextProperties::Alignment", pure, header: "textProperties.h".} = enum
  A_left = 0
  A_right = 1
  A_center = 2
  A_boxedLeft = 3
  A_boxedRight = 4
  A_boxedCenter = 5

template Alignment*(_: typedesc[TextProperties]): typedesc[TextProperties_Alignment] = typedesc[TextProperties_Alignment]
template Alignment*(_: typedesc[TextProperties], value: untyped): TextProperties_Alignment = TextProperties_Alignment(value)

template A_left*(_: typedesc[TextProperties]): TextProperties_Alignment = TextProperties_Alignment.A_left
template A_right*(_: typedesc[TextProperties]): TextProperties_Alignment = TextProperties_Alignment.A_right
template A_center*(_: typedesc[TextProperties]): TextProperties_Alignment = TextProperties_Alignment.A_center
template A_boxedLeft*(_: typedesc[TextProperties]): TextProperties_Alignment = TextProperties_Alignment.A_boxedLeft
template A_boxedRight*(_: typedesc[TextProperties]): TextProperties_Alignment = TextProperties_Alignment.A_boxedRight
template A_boxedCenter*(_: typedesc[TextProperties]): TextProperties_Alignment = TextProperties_Alignment.A_boxedCenter

type TextProperties_Direction {.importcpp: "TextProperties::Direction", pure, header: "textProperties.h".} = enum
  D_ltr = 0
  D_rtl = 1

template Direction*(_: typedesc[TextProperties]): typedesc[TextProperties_Direction] = typedesc[TextProperties_Direction]
template Direction*(_: typedesc[TextProperties], value: untyped): TextProperties_Direction = TextProperties_Direction(value)

template D_ltr*(_: typedesc[TextProperties]): TextProperties_Direction = TextProperties_Direction.D_ltr
template D_rtl*(_: typedesc[TextProperties]): TextProperties_Direction = TextProperties_Direction.D_rtl

type TextNode* {.importcpp: "PT(TextNode)", bycopy, pure, inheritable, header: "textNode.h".} = object of PandaNode

proc upcastToTextEncoder*(_: typedesc[TextNode]): typedesc[TextEncoder] = typedesc[TextEncoder]
proc upcastToTextProperties*(_: typedesc[TextNode]): typedesc[TextProperties] = typedesc[TextProperties]

proc toTextNode*(_: type(nil)): TextNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TextNode], obj: TypedObject): TextNode {.importcpp: "DCAST(TextNode, @)".}

type TextNode_FlattenFlags {.importcpp: "TextNode::FlattenFlags", pure, header: "textNode.h".} = enum
  FF_none = 0
  FF_light = 1
  FF_medium = 2
  FF_strong = 4
  FF_dynamicMerge = 8

template FlattenFlags*(_: typedesc[TextNode]): typedesc[TextNode_FlattenFlags] = typedesc[TextNode_FlattenFlags]
template FlattenFlags*(_: typedesc[TextNode], value: untyped): TextNode_FlattenFlags = TextNode_FlattenFlags(value)

template FF_none*(_: typedesc[TextNode]): TextNode_FlattenFlags = TextNode_FlattenFlags.FF_none
template FF_light*(_: typedesc[TextNode]): TextNode_FlattenFlags = TextNode_FlattenFlags.FF_light
template FF_medium*(_: typedesc[TextNode]): TextNode_FlattenFlags = TextNode_FlattenFlags.FF_medium
template FF_strong*(_: typedesc[TextNode]): TextNode_FlattenFlags = TextNode_FlattenFlags.FF_strong
template FF_dynamicMerge*(_: typedesc[TextNode]): TextNode_FlattenFlags = TextNode_FlattenFlags.FF_dynamicMerge

type FrameRateMeter* {.importcpp: "PT(FrameRateMeter)", bycopy, pure, inheritable, header: "frameRateMeter.h".} = object of TextNode

proc toFrameRateMeter*(_: type(nil)): FrameRateMeter {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FrameRateMeter], obj: TypedObject): FrameRateMeter {.importcpp: "DCAST(FrameRateMeter, @)".}

type GeoMipTerrain* {.importcpp: "GeoMipTerrain*", bycopy, pure, inheritable, header: "geoMipTerrain.h".} = object of TypedObject

proc toGeoMipTerrain*(_: type(nil)): GeoMipTerrain {.importcpp: "(nullptr)".}

type GeoMipTerrain_AutoFlattenMode {.importcpp: "GeoMipTerrain::AutoFlattenMode", pure, header: "geoMipTerrain.h".} = enum
  AFM_off = 0
  AFM_light = 1
  AFM_medium = 2
  AFM_strong = 3

template AutoFlattenMode*(_: typedesc[GeoMipTerrain]): typedesc[GeoMipTerrain_AutoFlattenMode] = typedesc[GeoMipTerrain_AutoFlattenMode]
template AutoFlattenMode*(_: typedesc[GeoMipTerrain], value: untyped): GeoMipTerrain_AutoFlattenMode = GeoMipTerrain_AutoFlattenMode(value)

template AFM_off*(_: typedesc[GeoMipTerrain]): GeoMipTerrain_AutoFlattenMode = GeoMipTerrain_AutoFlattenMode.AFM_off
template AFM_light*(_: typedesc[GeoMipTerrain]): GeoMipTerrain_AutoFlattenMode = GeoMipTerrain_AutoFlattenMode.AFM_light
template AFM_medium*(_: typedesc[GeoMipTerrain]): GeoMipTerrain_AutoFlattenMode = GeoMipTerrain_AutoFlattenMode.AFM_medium
template AFM_strong*(_: typedesc[GeoMipTerrain]): GeoMipTerrain_AutoFlattenMode = GeoMipTerrain_AutoFlattenMode.AFM_strong

type HeightfieldTesselator* {.importcpp: "HeightfieldTesselator", pure, inheritable, header: "heightfieldTesselator.h".} = object of Namable

type LineSegs* {.importcpp: "LineSegs", pure, inheritable, header: "lineSegs.h".} = object of Namable

type MeshDrawer* {.importcpp: "MeshDrawer", pure, inheritable, header: "meshDrawer.h".} = object of TypedObject

type MeshDrawer2D* {.importcpp: "MeshDrawer2D", pure, inheritable, header: "meshDrawer2D.h".} = object of TypedObject

type Texture* {.importcpp: "PT(Texture)", bycopy, pure, inheritable, header: "texture.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[Texture]): typedesc[Namable] = typedesc[Namable]

proc toTexture*(_: type(nil)): Texture {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Texture], obj: TypedObject): Texture {.importcpp: "DCAST(Texture, @)".}

type Texture_TextureType {.importcpp: "Texture::TextureType", pure, header: "texture.h".} = enum
  TT_1dTexture = 0
  TT_2dTexture = 1
  TT_3dTexture = 2
  TT_2dTextureArray = 3
  TT_cubeMap = 4
  TT_bufferTexture = 5
  TT_cubeMapArray = 6
  TT_1dTextureArray = 7

template TextureType*(_: typedesc[Texture]): typedesc[Texture_TextureType] = typedesc[Texture_TextureType]
template TextureType*(_: typedesc[Texture], value: untyped): Texture_TextureType = Texture_TextureType(value)

template TT_1dTexture*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_1dTexture
template TT_2dTexture*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_2dTexture
template TT_3dTexture*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_3dTexture
template TT_2dTextureArray*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_2dTextureArray
template TT_cubeMap*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_cubeMap
template TT_bufferTexture*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_bufferTexture
template TT_cubeMapArray*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_cubeMapArray
template TT_1dTextureArray*(_: typedesc[Texture]): Texture_TextureType = Texture_TextureType.TT_1dTextureArray

type Texture_ComponentType {.importcpp: "Texture::ComponentType", pure, header: "texture.h".} = enum
  T_unsignedByte = 0
  T_unsignedShort = 1
  T_float = 2
  T_unsignedInt248 = 3
  T_int = 4
  T_byte = 5
  T_short = 6
  T_halfFloat = 7
  T_unsignedInt = 8

template ComponentType*(_: typedesc[Texture]): typedesc[Texture_ComponentType] = typedesc[Texture_ComponentType]
template ComponentType*(_: typedesc[Texture], value: untyped): Texture_ComponentType = Texture_ComponentType(value)

template T_unsignedByte*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_unsignedByte
template T_unsignedShort*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_unsignedShort
template T_float*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_float
template T_unsignedInt248*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_unsignedInt248
template T_int*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_int
template T_byte*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_byte
template T_short*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_short
template T_halfFloat*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_halfFloat
template T_unsignedInt*(_: typedesc[Texture]): Texture_ComponentType = Texture_ComponentType.T_unsignedInt

type Texture_Format {.importcpp: "Texture::Format", pure, header: "texture.h".} = enum
  F_depthStencil = 1
  F_colorIndex = 2
  F_red = 3
  F_green = 4
  F_blue = 5
  F_alpha = 6
  F_rgb = 7
  F_rgb5 = 8
  F_rgb8 = 9
  F_rgb12 = 10
  F_rgb332 = 11
  F_rgba = 12
  F_rgbm = 13
  F_rgba4 = 14
  F_rgba5 = 15
  F_rgba8 = 16
  F_rgba12 = 17
  F_luminance = 18
  F_luminanceAlpha = 19
  F_luminanceAlphamask = 20
  F_rgba16 = 21
  F_rgba32 = 22
  F_depthComponent = 23
  F_depthComponent16 = 24
  F_depthComponent24 = 25
  F_depthComponent32 = 26
  F_r16 = 27
  F_rg16 = 28
  F_rgb16 = 29
  F_srgb = 30
  F_srgbAlpha = 31
  F_sluminance = 32
  F_sluminanceAlpha = 33
  F_r32i = 34
  F_r32 = 35
  F_rg32 = 36
  F_rgb32 = 37
  F_r8i = 38
  F_rg8i = 39
  F_rgb8i = 40
  F_rgba8i = 41
  F_r11G11B10 = 42
  F_rgb9E5 = 43
  F_rgb10A2 = 44
  F_rg = 45
  F_r16i = 46
  F_rg16i = 47
  F_rgb16i = 48
  F_rgba16i = 49
  F_rg32i = 50
  F_rgb32i = 51
  F_rgba32i = 52

template Format*(_: typedesc[Texture]): typedesc[Texture_Format] = typedesc[Texture_Format]
template Format*(_: typedesc[Texture], value: untyped): Texture_Format = Texture_Format(value)

template F_depthStencil*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_depthStencil
template F_colorIndex*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_colorIndex
template F_red*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_red
template F_green*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_green
template F_blue*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_blue
template F_alpha*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_alpha
template F_rgb*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb
template F_rgb5*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb5
template F_rgb8*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb8
template F_rgb12*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb12
template F_rgb332*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb332
template F_rgba*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba
template F_rgbm*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgbm
template F_rgba4*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba4
template F_rgba5*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba5
template F_rgba8*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba8
template F_rgba12*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba12
template F_luminance*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_luminance
template F_luminanceAlpha*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_luminanceAlpha
template F_luminanceAlphamask*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_luminanceAlphamask
template F_rgba16*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba16
template F_rgba32*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba32
template F_depthComponent*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_depthComponent
template F_depthComponent16*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_depthComponent16
template F_depthComponent24*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_depthComponent24
template F_depthComponent32*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_depthComponent32
template F_r16*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_r16
template F_rg16*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rg16
template F_rgb16*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb16
template F_srgb*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_srgb
template F_srgbAlpha*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_srgbAlpha
template F_sluminance*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_sluminance
template F_sluminanceAlpha*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_sluminanceAlpha
template F_r32i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_r32i
template F_r32*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_r32
template F_rg32*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rg32
template F_rgb32*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb32
template F_r8i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_r8i
template F_rg8i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rg8i
template F_rgb8i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb8i
template F_rgba8i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba8i
template F_r11G11B10*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_r11G11B10
template F_rgb9E5*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb9E5
template F_rgb10A2*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb10A2
template F_rg*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rg
template F_r16i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_r16i
template F_rg16i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rg16i
template F_rgb16i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb16i
template F_rgba16i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba16i
template F_rg32i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rg32i
template F_rgb32i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgb32i
template F_rgba32i*(_: typedesc[Texture]): Texture_Format = Texture_Format.F_rgba32i

type Texture_DeprecatedFilterType {.importcpp: "Texture::DeprecatedFilterType", pure, header: "texture.h".} = enum
  FT_nearest = 0
  FT_linear = 1
  FT_nearestMipmapNearest = 2
  FT_linearMipmapNearest = 3
  FT_nearestMipmapLinear = 4
  FT_linearMipmapLinear = 5
  FT_shadow = 6
  FT_default = 7
  FT_invalid = 8

template DeprecatedFilterType*(_: typedesc[Texture]): typedesc[Texture_DeprecatedFilterType] = typedesc[Texture_DeprecatedFilterType]
template DeprecatedFilterType*(_: typedesc[Texture], value: untyped): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType(value)

template FT_nearest*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_nearest
template FT_linear*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_linear
template FT_nearestMipmapNearest*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_nearestMipmapNearest
template FT_linearMipmapNearest*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_linearMipmapNearest
template FT_nearestMipmapLinear*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_nearestMipmapLinear
template FT_linearMipmapLinear*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_linearMipmapLinear
template FT_shadow*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_shadow
template FT_default*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_default
template FT_invalid*(_: typedesc[Texture]): Texture_DeprecatedFilterType = Texture_DeprecatedFilterType.FT_invalid

type Texture_DeprecatedWrapMode {.importcpp: "Texture::DeprecatedWrapMode", pure, header: "texture.h".} = enum
  WM_clamp = 0
  WM_repeat = 1
  WM_mirror = 2
  WM_mirrorOnce = 3
  WM_borderColor = 4
  WM_invalid = 5

template DeprecatedWrapMode*(_: typedesc[Texture]): typedesc[Texture_DeprecatedWrapMode] = typedesc[Texture_DeprecatedWrapMode]
template DeprecatedWrapMode*(_: typedesc[Texture], value: untyped): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode(value)

template WM_clamp*(_: typedesc[Texture]): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode.WM_clamp
template WM_repeat*(_: typedesc[Texture]): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode.WM_repeat
template WM_mirror*(_: typedesc[Texture]): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode.WM_mirror
template WM_mirrorOnce*(_: typedesc[Texture]): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode.WM_mirrorOnce
template WM_borderColor*(_: typedesc[Texture]): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode.WM_borderColor
template WM_invalid*(_: typedesc[Texture]): Texture_DeprecatedWrapMode = Texture_DeprecatedWrapMode.WM_invalid

type Texture_CompressionMode {.importcpp: "Texture::CompressionMode", pure, header: "texture.h".} = enum
  CM_default = 0
  CM_off = 1
  CM_on = 2
  CM_fxt1 = 3
  CM_dxt1 = 4
  CM_dxt2 = 5
  CM_dxt3 = 6
  CM_dxt4 = 7
  CM_dxt5 = 8
  CM_pvr12bpp = 9
  CM_pvr14bpp = 10
  CM_rgtc = 11
  CM_etc1 = 12
  CM_etc2 = 13
  CM_eac = 14

template CompressionMode*(_: typedesc[Texture]): typedesc[Texture_CompressionMode] = typedesc[Texture_CompressionMode]
template CompressionMode*(_: typedesc[Texture], value: untyped): Texture_CompressionMode = Texture_CompressionMode(value)

template CM_default*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_default
template CM_off*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_off
template CM_on*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_on
template CM_fxt1*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_fxt1
template CM_dxt1*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_dxt1
template CM_dxt2*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_dxt2
template CM_dxt3*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_dxt3
template CM_dxt4*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_dxt4
template CM_dxt5*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_dxt5
template CM_pvr12bpp*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_pvr12bpp
template CM_pvr14bpp*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_pvr14bpp
template CM_rgtc*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_rgtc
template CM_etc1*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_etc1
template CM_etc2*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_etc2
template CM_eac*(_: typedesc[Texture]): Texture_CompressionMode = Texture_CompressionMode.CM_eac

type Texture_QualityLevel {.importcpp: "Texture::QualityLevel", pure, header: "texture.h".} = enum
  QL_default = 0
  QL_fastest = 1
  QL_normal = 2
  QL_best = 3

template QualityLevel*(_: typedesc[Texture]): typedesc[Texture_QualityLevel] = typedesc[Texture_QualityLevel]
template QualityLevel*(_: typedesc[Texture], value: untyped): Texture_QualityLevel = Texture_QualityLevel(value)

template QL_default*(_: typedesc[Texture]): Texture_QualityLevel = Texture_QualityLevel.QL_default
template QL_fastest*(_: typedesc[Texture]): Texture_QualityLevel = Texture_QualityLevel.QL_fastest
template QL_normal*(_: typedesc[Texture]): Texture_QualityLevel = Texture_QualityLevel.QL_normal
template QL_best*(_: typedesc[Texture]): Texture_QualityLevel = Texture_QualityLevel.QL_best

type MovieTexture* {.importcpp: "PT(MovieTexture)", bycopy, pure, inheritable, header: "movieTexture.h".} = object of Texture

proc toMovieTexture*(_: type(nil)): MovieTexture {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovieTexture], obj: TypedObject): MovieTexture {.importcpp: "DCAST(MovieTexture, @)".}

type MultitexReducer* {.importcpp: "MultitexReducer", pure, inheritable, header: "multitexReducer.h".} = object

type VertexTransform* {.importcpp: "PT(VertexTransform)", bycopy, pure, inheritable, header: "vertexTransform.h".} = object of TypedWritableReferenceCount

proc toVertexTransform*(_: type(nil)): VertexTransform {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VertexTransform], obj: TypedObject): VertexTransform {.importcpp: "DCAST(VertexTransform, @)".}

type NodeVertexTransform* {.importcpp: "PT(NodeVertexTransform)", bycopy, pure, inheritable, header: "nodeVertexTransform.h".} = object of VertexTransform

proc toNodeVertexTransform*(_: type(nil)): NodeVertexTransform {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NodeVertexTransform], obj: TypedObject): NodeVertexTransform {.importcpp: "DCAST(NodeVertexTransform, @)".}

type ShaderTerrainMesh* {.importcpp: "PT(ShaderTerrainMesh)", bycopy, pure, inheritable, header: "shaderTerrainMesh.h".} = object of PandaNode

proc toShaderTerrainMesh*(_: type(nil)): ShaderTerrainMesh {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ShaderTerrainMesh], obj: TypedObject): ShaderTerrainMesh {.importcpp: "DCAST(ShaderTerrainMesh, @)".}

type SceneGraphAnalyzerMeter* {.importcpp: "PT(SceneGraphAnalyzerMeter)", bycopy, pure, inheritable, header: "sceneGraphAnalyzerMeter.h".} = object of TextNode

proc toSceneGraphAnalyzerMeter*(_: type(nil)): SceneGraphAnalyzerMeter {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SceneGraphAnalyzerMeter], obj: TypedObject): SceneGraphAnalyzerMeter {.importcpp: "DCAST(SceneGraphAnalyzerMeter, @)".}

type RigidBodyCombiner* {.importcpp: "PT(RigidBodyCombiner)", bycopy, pure, inheritable, header: "rigidBodyCombiner.h".} = object of PandaNode

proc toRigidBodyCombiner*(_: type(nil)): RigidBodyCombiner {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RigidBodyCombiner], obj: TypedObject): RigidBodyCombiner {.importcpp: "DCAST(RigidBodyCombiner, @)".}

type PipeOcclusionCullTraverser* {.importcpp: "PT(PipeOcclusionCullTraverser)", bycopy, pure, inheritable, header: "pipeOcclusionCullTraverser.h".} = object of CullTraverser

proc toPipeOcclusionCullTraverser*(_: type(nil)): PipeOcclusionCullTraverser {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PipeOcclusionCullTraverser], obj: TypedObject): PipeOcclusionCullTraverser {.importcpp: "DCAST(PipeOcclusionCullTraverser, @)".}

type PfmVizzer* {.importcpp: "PfmVizzer", pure, inheritable, header: "pfmVizzer.h".} = object

type PfmVizzer_ColumnType {.importcpp: "PfmVizzer::ColumnType", pure, header: "pfmVizzer.h".} = enum
  CT_texcoord2 = 0
  CT_texcoord3 = 1
  CT_vertex1 = 2
  CT_vertex2 = 3
  CT_vertex3 = 4
  CT_normal3 = 5
  CT_blend1 = 6
  CT_auxVertex1 = 7
  CT_auxVertex2 = 8
  CT_auxVertex3 = 9

template ColumnType*(_: typedesc[PfmVizzer]): typedesc[PfmVizzer_ColumnType] = typedesc[PfmVizzer_ColumnType]
template ColumnType*(_: typedesc[PfmVizzer], value: untyped): PfmVizzer_ColumnType = PfmVizzer_ColumnType(value)

template CT_texcoord2*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_texcoord2
template CT_texcoord3*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_texcoord3
template CT_vertex1*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_vertex1
template CT_vertex2*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_vertex2
template CT_vertex3*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_vertex3
template CT_normal3*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_normal3
template CT_blend1*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_blend1
template CT_auxVertex1*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_auxVertex1
template CT_auxVertex2*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_auxVertex2
template CT_auxVertex3*(_: typedesc[PfmVizzer]): PfmVizzer_ColumnType = PfmVizzer_ColumnType.CT_auxVertex3

type PfmVizzer_MeshFace {.importcpp: "PfmVizzer::MeshFace", pure, header: "pfmVizzer.h".} = enum
  MF_front = 1
  MF_back = 2
  MF_both = 3

template MeshFace*(_: typedesc[PfmVizzer]): typedesc[PfmVizzer_MeshFace] = typedesc[PfmVizzer_MeshFace]
template MeshFace*(_: typedesc[PfmVizzer], value: untyped): PfmVizzer_MeshFace = PfmVizzer_MeshFace(value)

template MF_front*(_: typedesc[PfmVizzer]): PfmVizzer_MeshFace = PfmVizzer_MeshFace.MF_front
template MF_back*(_: typedesc[PfmVizzer]): PfmVizzer_MeshFace = PfmVizzer_MeshFace.MF_back
template MF_both*(_: typedesc[PfmVizzer]): PfmVizzer_MeshFace = PfmVizzer_MeshFace.MF_both

type AnimGroup* {.importcpp: "PT(AnimGroup)", bycopy, pure, inheritable, header: "animGroup.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[AnimGroup]): typedesc[Namable] = typedesc[Namable]

proc toAnimGroup*(_: type(nil)): AnimGroup {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimGroup], obj: TypedObject): AnimGroup {.importcpp: "DCAST(AnimGroup, @)".}

type AnimBundle* {.importcpp: "PT(AnimBundle)", bycopy, pure, inheritable, header: "animBundle.h".} = object of AnimGroup

proc toAnimBundle*(_: type(nil)): AnimBundle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimBundle], obj: TypedObject): AnimBundle {.importcpp: "DCAST(AnimBundle, @)".}

type AnimBundleNode* {.importcpp: "PT(AnimBundleNode)", bycopy, pure, inheritable, header: "animBundleNode.h".} = object of PandaNode

proc toAnimBundleNode*(_: type(nil)): AnimBundleNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimBundleNode], obj: TypedObject): AnimBundleNode {.importcpp: "DCAST(AnimBundleNode, @)".}

type PartGroup* {.importcpp: "PT(PartGroup)", bycopy, pure, inheritable, header: "partGroup.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[PartGroup]): typedesc[Namable] = typedesc[Namable]

proc toPartGroup*(_: type(nil)): PartGroup {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PartGroup], obj: TypedObject): PartGroup {.importcpp: "DCAST(PartGroup, @)".}

type PartGroup_HierarchyMatchFlags {.importcpp: "PartGroup::HierarchyMatchFlags", pure, header: "partGroup.h".} = enum
  HMF_okPartExtra = 1
  HMF_okAnimExtra = 2
  HMF_okWrongRootName = 4

template HierarchyMatchFlags*(_: typedesc[PartGroup]): typedesc[PartGroup_HierarchyMatchFlags] = typedesc[PartGroup_HierarchyMatchFlags]
template HierarchyMatchFlags*(_: typedesc[PartGroup], value: untyped): PartGroup_HierarchyMatchFlags = PartGroup_HierarchyMatchFlags(value)

template HMF_okPartExtra*(_: typedesc[PartGroup]): PartGroup_HierarchyMatchFlags = PartGroup_HierarchyMatchFlags.HMF_okPartExtra
template HMF_okAnimExtra*(_: typedesc[PartGroup]): PartGroup_HierarchyMatchFlags = PartGroup_HierarchyMatchFlags.HMF_okAnimExtra
template HMF_okWrongRootName*(_: typedesc[PartGroup]): PartGroup_HierarchyMatchFlags = PartGroup_HierarchyMatchFlags.HMF_okWrongRootName

type AnimControl* {.importcpp: "PT(AnimControl)", bycopy, pure, inheritable, header: "animControl.h".} = object of TypedReferenceCount

proc upcastToAnimInterface*(_: typedesc[AnimControl]): typedesc[AnimInterface] = typedesc[AnimInterface]
proc upcastToNamable*(_: typedesc[AnimControl]): typedesc[Namable] = typedesc[Namable]

proc toAnimControl*(_: type(nil)): AnimControl {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimControl], obj: TypedObject): AnimControl {.importcpp: "DCAST(AnimControl, @)".}

type AnimChannelBase* {.importcpp: "PT(AnimChannelBase)", bycopy, pure, inheritable, header: "animChannelBase.h".} = object of AnimGroup

proc toAnimChannelBase*(_: type(nil)): AnimChannelBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimChannelBase], obj: TypedObject): AnimChannelBase {.importcpp: "DCAST(AnimChannelBase, @)".}

type AnimChannelMatrixDynamic* {.importcpp: "PT(AnimChannelMatrixDynamic)", bycopy, pure, inheritable, header: "animChannelMatrixDynamic.h".} = object

proc toAnimChannelMatrixDynamic*(_: type(nil)): AnimChannelMatrixDynamic {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimChannelMatrixDynamic], obj: TypedObject): AnimChannelMatrixDynamic {.importcpp: "DCAST(AnimChannelMatrixDynamic, @)".}

type AnimChannelMatrixXfmTable* {.importcpp: "PT(AnimChannelMatrixXfmTable)", bycopy, pure, inheritable, header: "animChannelMatrixXfmTable.h".} = object

proc toAnimChannelMatrixXfmTable*(_: type(nil)): AnimChannelMatrixXfmTable {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimChannelMatrixXfmTable], obj: TypedObject): AnimChannelMatrixXfmTable {.importcpp: "DCAST(AnimChannelMatrixXfmTable, @)".}

type AnimChannelScalarDynamic* {.importcpp: "PT(AnimChannelScalarDynamic)", bycopy, pure, inheritable, header: "animChannelScalarDynamic.h".} = object

proc toAnimChannelScalarDynamic*(_: type(nil)): AnimChannelScalarDynamic {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimChannelScalarDynamic], obj: TypedObject): AnimChannelScalarDynamic {.importcpp: "DCAST(AnimChannelScalarDynamic, @)".}

type AnimChannelScalarTable* {.importcpp: "PT(AnimChannelScalarTable)", bycopy, pure, inheritable, header: "animChannelScalarTable.h".} = object

proc toAnimChannelScalarTable*(_: type(nil)): AnimChannelScalarTable {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimChannelScalarTable], obj: TypedObject): AnimChannelScalarTable {.importcpp: "DCAST(AnimChannelScalarTable, @)".}

type AnimControlCollection* {.importcpp: "AnimControlCollection", pure, inheritable, header: "animControlCollection.h".} = object

type CopyOnWriteObject* {.importcpp: "PT(CopyOnWriteObject)", bycopy, pure, inheritable, header: "copyOnWriteObject.h".} = object of CachedTypedWritableReferenceCount

proc toCopyOnWriteObject*(_: type(nil)): CopyOnWriteObject {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CopyOnWriteObject], obj: TypedObject): CopyOnWriteObject {.importcpp: "DCAST(CopyOnWriteObject, @)".}

type AnimPreloadTable* {.importcpp: "PT(AnimPreloadTable)", bycopy, pure, inheritable, header: "animPreloadTable.h".} = object of CopyOnWriteObject

proc toAnimPreloadTable*(_: type(nil)): AnimPreloadTable {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimPreloadTable], obj: TypedObject): AnimPreloadTable {.importcpp: "DCAST(AnimPreloadTable, @)".}

type PartSubset* {.importcpp: "PartSubset", pure, inheritable, header: "partSubset.h".} = object

type BindAnimRequest* {.importcpp: "PT(BindAnimRequest)", bycopy, pure, inheritable, header: "bindAnimRequest.h".} = object of ModelLoadRequest

proc toBindAnimRequest*(_: type(nil)): BindAnimRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BindAnimRequest], obj: TypedObject): BindAnimRequest {.importcpp: "DCAST(BindAnimRequest, @)".}

type PartBundle* {.importcpp: "PT(PartBundle)", bycopy, pure, inheritable, header: "partBundle.h".} = object of PartGroup

proc toPartBundle*(_: type(nil)): PartBundle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PartBundle], obj: TypedObject): PartBundle {.importcpp: "DCAST(PartBundle, @)".}

type PartBundle_BlendType {.importcpp: "PartBundle::BlendType", pure, header: "partBundle.h".} = enum
  BT_linear = 0
  BT_normalizedLinear = 1
  BT_componentwise = 2
  BT_componentwiseQuat = 3

template BlendType*(_: typedesc[PartBundle]): typedesc[PartBundle_BlendType] = typedesc[PartBundle_BlendType]
template BlendType*(_: typedesc[PartBundle], value: untyped): PartBundle_BlendType = PartBundle_BlendType(value)

template BT_linear*(_: typedesc[PartBundle]): PartBundle_BlendType = PartBundle_BlendType.BT_linear
template BT_normalizedLinear*(_: typedesc[PartBundle]): PartBundle_BlendType = PartBundle_BlendType.BT_normalizedLinear
template BT_componentwise*(_: typedesc[PartBundle]): PartBundle_BlendType = PartBundle_BlendType.BT_componentwise
template BT_componentwiseQuat*(_: typedesc[PartBundle]): PartBundle_BlendType = PartBundle_BlendType.BT_componentwiseQuat

type PartBundleNode* {.importcpp: "PT(PartBundleNode)", bycopy, pure, inheritable, header: "partBundleNode.h".} = object of PandaNode

proc toPartBundleNode*(_: type(nil)): PartBundleNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PartBundleNode], obj: TypedObject): PartBundleNode {.importcpp: "DCAST(PartBundleNode, @)".}

type PartBundleHandle* {.importcpp: "PT(PartBundleHandle)", bycopy, pure, inheritable, header: "partBundleHandle.h".} = object of ReferenceCount

proc toPartBundleHandle*(_: type(nil)): PartBundleHandle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PartBundleHandle], obj: TypedObject): PartBundleHandle {.importcpp: "DCAST(PartBundleHandle, @)".}

type MovingPartBase* {.importcpp: "PT(MovingPartBase)", bycopy, pure, inheritable, header: "movingPartBase.h".} = object of PartGroup

proc toMovingPartBase*(_: type(nil)): MovingPartBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovingPartBase], obj: TypedObject): MovingPartBase {.importcpp: "DCAST(MovingPartBase, @)".}

type MovingPartMatrix* {.importcpp: "PT(MovingPartMatrix)", bycopy, pure, inheritable, header: "movingPartMatrix.h".} = object

proc toMovingPartMatrix*(_: type(nil)): MovingPartMatrix {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovingPartMatrix], obj: TypedObject): MovingPartMatrix {.importcpp: "DCAST(MovingPartMatrix, @)".}

type MovingPartScalar* {.importcpp: "PT(MovingPartScalar)", bycopy, pure, inheritable, header: "movingPartScalar.h".} = object

proc toMovingPartScalar*(_: type(nil)): MovingPartScalar {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MovingPartScalar], obj: TypedObject): MovingPartScalar {.importcpp: "DCAST(MovingPartScalar, @)".}

type PStatClient* {.importcpp: "PStatClient", pure, inheritable, header: "pStatClient.h".} = object

type PStatCollector* {.importcpp: "PStatCollector", pure, inheritable, header: "pStatCollector.h".} = object

type PStatThread* {.importcpp: "PStatThread", pure, inheritable, header: "pStatThread.h".} = object

type PStatCollectorForward* {.importcpp: "PT(PStatCollectorForward)", bycopy, pure, inheritable, header: "pStatCollectorForward.h".} = object of PStatCollectorForwardBase

proc toPStatCollectorForward*(_: type(nil)): PStatCollectorForward {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PStatCollectorForward], obj: TypedObject): PStatCollectorForward {.importcpp: "DCAST(PStatCollectorForward, @)".}

type CharacterJoint* {.importcpp: "PT(CharacterJoint)", bycopy, pure, inheritable, header: "characterJoint.h".} = object of MovingPartMatrix

proc toCharacterJoint*(_: type(nil)): CharacterJoint {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CharacterJoint], obj: TypedObject): CharacterJoint {.importcpp: "DCAST(CharacterJoint, @)".}

type CharacterSlider* {.importcpp: "PT(CharacterSlider)", bycopy, pure, inheritable, header: "characterSlider.h".} = object of MovingPartScalar

proc toCharacterSlider*(_: type(nil)): CharacterSlider {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CharacterSlider], obj: TypedObject): CharacterSlider {.importcpp: "DCAST(CharacterSlider, @)".}

type VertexSlider* {.importcpp: "PT(VertexSlider)", bycopy, pure, inheritable, header: "vertexSlider.h".} = object of TypedWritableReferenceCount

proc toVertexSlider*(_: type(nil)): VertexSlider {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VertexSlider], obj: TypedObject): VertexSlider {.importcpp: "DCAST(VertexSlider, @)".}

type CharacterVertexSlider* {.importcpp: "PT(CharacterVertexSlider)", bycopy, pure, inheritable, header: "characterVertexSlider.h".} = object of VertexSlider

proc toCharacterVertexSlider*(_: type(nil)): CharacterVertexSlider {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CharacterVertexSlider], obj: TypedObject): CharacterVertexSlider {.importcpp: "DCAST(CharacterVertexSlider, @)".}

type JointVertexTransform* {.importcpp: "PT(JointVertexTransform)", bycopy, pure, inheritable, header: "jointVertexTransform.h".} = object of VertexTransform

proc toJointVertexTransform*(_: type(nil)): JointVertexTransform {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[JointVertexTransform], obj: TypedObject): JointVertexTransform {.importcpp: "DCAST(JointVertexTransform, @)".}

type Character* {.importcpp: "PT(Character)", bycopy, pure, inheritable, header: "character.h".} = object of PartBundleNode

proc toCharacter*(_: type(nil)): Character {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Character], obj: TypedObject): Character {.importcpp: "DCAST(Character, @)".}

type CharacterJointBundle* {.importcpp: "PT(CharacterJointBundle)", bycopy, pure, inheritable, header: "characterJointBundle.h".} = object of PartBundle

proc toCharacterJointBundle*(_: type(nil)): CharacterJointBundle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CharacterJointBundle], obj: TypedObject): CharacterJointBundle {.importcpp: "DCAST(CharacterJointBundle, @)".}

type CharacterJointEffect* {.importcpp: "PT(CharacterJointEffect)", bycopy, pure, inheritable, header: "characterJointEffect.h".} = object of RenderEffect

proc toCharacterJointEffect*(_: type(nil)): CharacterJointEffect {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CharacterJointEffect], obj: TypedObject): CharacterJointEffect {.importcpp: "DCAST(CharacterJointEffect, @)".}

type CollisionSolid* {.importcpp: "PT(CollisionSolid)", bycopy, pure, inheritable, header: "collisionSolid.h".} = object of CopyOnWriteObject

proc toCollisionSolid*(_: type(nil)): CollisionSolid {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionSolid], obj: TypedObject): CollisionSolid {.importcpp: "DCAST(CollisionSolid, @)".}

type CollisionBox* {.importcpp: "PT(CollisionBox)", bycopy, pure, inheritable, header: "collisionBox.h".} = object of CollisionSolid

proc toCollisionBox*(_: type(nil)): CollisionBox {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionBox], obj: TypedObject): CollisionBox {.importcpp: "DCAST(CollisionBox, @)".}

type CollisionCapsule* {.importcpp: "PT(CollisionCapsule)", bycopy, pure, inheritable, header: "collisionCapsule.h".} = object of CollisionSolid

proc toCollisionCapsule*(_: type(nil)): CollisionCapsule {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionCapsule], obj: TypedObject): CollisionCapsule {.importcpp: "DCAST(CollisionCapsule, @)".}

type CollisionHandler* {.importcpp: "PT(CollisionHandler)", bycopy, pure, inheritable, header: "collisionHandler.h".} = object of TypedReferenceCount

proc toCollisionHandler*(_: type(nil)): CollisionHandler {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandler], obj: TypedObject): CollisionHandler {.importcpp: "DCAST(CollisionHandler, @)".}

type CollisionNode* {.importcpp: "PT(CollisionNode)", bycopy, pure, inheritable, header: "collisionNode.h".} = object of PandaNode

proc toCollisionNode*(_: type(nil)): CollisionNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionNode], obj: TypedObject): CollisionNode {.importcpp: "DCAST(CollisionNode, @)".}

type CollisionTraverser* {.importcpp: "CollisionTraverser", pure, inheritable, header: "collisionTraverser.h".} = object of Namable

type CollisionRecorder* {.importcpp: "CollisionRecorder", pure, inheritable, header: "collisionRecorder.h".} = object of TypedObject

type CollisionEntry* {.importcpp: "PT(CollisionEntry)", bycopy, pure, inheritable, header: "collisionEntry.h".} = object of TypedWritableReferenceCount

proc toCollisionEntry*(_: type(nil)): CollisionEntry {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionEntry], obj: TypedObject): CollisionEntry {.importcpp: "DCAST(CollisionEntry, @)".}

type CollisionPlane* {.importcpp: "PT(CollisionPlane)", bycopy, pure, inheritable, header: "collisionPlane.h".} = object of CollisionSolid

proc toCollisionPlane*(_: type(nil)): CollisionPlane {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionPlane], obj: TypedObject): CollisionPlane {.importcpp: "DCAST(CollisionPlane, @)".}

type CollisionFloorMesh* {.importcpp: "PT(CollisionFloorMesh)", bycopy, pure, inheritable, header: "collisionFloorMesh.h".} = object of CollisionSolid

proc toCollisionFloorMesh*(_: type(nil)): CollisionFloorMesh {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionFloorMesh], obj: TypedObject): CollisionFloorMesh {.importcpp: "DCAST(CollisionFloorMesh, @)".}

type CollisionPolygon* {.importcpp: "PT(CollisionPolygon)", bycopy, pure, inheritable, header: "collisionPolygon.h".} = object of CollisionPlane

proc toCollisionPolygon*(_: type(nil)): CollisionPolygon {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionPolygon], obj: TypedObject): CollisionPolygon {.importcpp: "DCAST(CollisionPolygon, @)".}

type CollisionHandlerEvent* {.importcpp: "PT(CollisionHandlerEvent)", bycopy, pure, inheritable, header: "collisionHandlerEvent.h".} = object of CollisionHandler

proc toCollisionHandlerEvent*(_: type(nil)): CollisionHandlerEvent {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerEvent], obj: TypedObject): CollisionHandlerEvent {.importcpp: "DCAST(CollisionHandlerEvent, @)".}

type CollisionHandlerPhysical* {.importcpp: "PT(CollisionHandlerPhysical)", bycopy, pure, inheritable, header: "collisionHandlerPhysical.h".} = object of CollisionHandlerEvent

proc toCollisionHandlerPhysical*(_: type(nil)): CollisionHandlerPhysical {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerPhysical], obj: TypedObject): CollisionHandlerPhysical {.importcpp: "DCAST(CollisionHandlerPhysical, @)".}

type CollisionHandlerFloor* {.importcpp: "PT(CollisionHandlerFloor)", bycopy, pure, inheritable, header: "collisionHandlerFloor.h".} = object of CollisionHandlerPhysical

proc toCollisionHandlerFloor*(_: type(nil)): CollisionHandlerFloor {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerFloor], obj: TypedObject): CollisionHandlerFloor {.importcpp: "DCAST(CollisionHandlerFloor, @)".}

type CollisionHandlerPusher* {.importcpp: "PT(CollisionHandlerPusher)", bycopy, pure, inheritable, header: "collisionHandlerPusher.h".} = object of CollisionHandlerPhysical

proc toCollisionHandlerPusher*(_: type(nil)): CollisionHandlerPusher {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerPusher], obj: TypedObject): CollisionHandlerPusher {.importcpp: "DCAST(CollisionHandlerPusher, @)".}

type CollisionHandlerFluidPusher* {.importcpp: "PT(CollisionHandlerFluidPusher)", bycopy, pure, inheritable, header: "collisionHandlerFluidPusher.h".} = object of CollisionHandlerPusher

proc toCollisionHandlerFluidPusher*(_: type(nil)): CollisionHandlerFluidPusher {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerFluidPusher], obj: TypedObject): CollisionHandlerFluidPusher {.importcpp: "DCAST(CollisionHandlerFluidPusher, @)".}

type CollisionHandlerGravity* {.importcpp: "PT(CollisionHandlerGravity)", bycopy, pure, inheritable, header: "collisionHandlerGravity.h".} = object of CollisionHandlerPhysical

proc toCollisionHandlerGravity*(_: type(nil)): CollisionHandlerGravity {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerGravity], obj: TypedObject): CollisionHandlerGravity {.importcpp: "DCAST(CollisionHandlerGravity, @)".}

type CollisionHandlerHighestEvent* {.importcpp: "PT(CollisionHandlerHighestEvent)", bycopy, pure, inheritable, header: "collisionHandlerHighestEvent.h".} = object of CollisionHandlerEvent

proc toCollisionHandlerHighestEvent*(_: type(nil)): CollisionHandlerHighestEvent {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerHighestEvent], obj: TypedObject): CollisionHandlerHighestEvent {.importcpp: "DCAST(CollisionHandlerHighestEvent, @)".}

type CollisionHandlerQueue* {.importcpp: "PT(CollisionHandlerQueue)", bycopy, pure, inheritable, header: "collisionHandlerQueue.h".} = object of CollisionHandler

proc toCollisionHandlerQueue*(_: type(nil)): CollisionHandlerQueue {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionHandlerQueue], obj: TypedObject): CollisionHandlerQueue {.importcpp: "DCAST(CollisionHandlerQueue, @)".}

type CollisionSphere* {.importcpp: "PT(CollisionSphere)", bycopy, pure, inheritable, header: "collisionSphere.h".} = object of CollisionSolid

proc toCollisionSphere*(_: type(nil)): CollisionSphere {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionSphere], obj: TypedObject): CollisionSphere {.importcpp: "DCAST(CollisionSphere, @)".}

type CollisionInvSphere* {.importcpp: "PT(CollisionInvSphere)", bycopy, pure, inheritable, header: "collisionInvSphere.h".} = object of CollisionSphere

proc toCollisionInvSphere*(_: type(nil)): CollisionInvSphere {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionInvSphere], obj: TypedObject): CollisionInvSphere {.importcpp: "DCAST(CollisionInvSphere, @)".}

type CollisionRay* {.importcpp: "PT(CollisionRay)", bycopy, pure, inheritable, header: "collisionRay.h".} = object of CollisionSolid

proc toCollisionRay*(_: type(nil)): CollisionRay {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionRay], obj: TypedObject): CollisionRay {.importcpp: "DCAST(CollisionRay, @)".}

type CollisionLine* {.importcpp: "PT(CollisionLine)", bycopy, pure, inheritable, header: "collisionLine.h".} = object of CollisionRay

proc toCollisionLine*(_: type(nil)): CollisionLine {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionLine], obj: TypedObject): CollisionLine {.importcpp: "DCAST(CollisionLine, @)".}

type CollisionParabola* {.importcpp: "PT(CollisionParabola)", bycopy, pure, inheritable, header: "collisionParabola.h".} = object of CollisionSolid

proc toCollisionParabola*(_: type(nil)): CollisionParabola {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionParabola], obj: TypedObject): CollisionParabola {.importcpp: "DCAST(CollisionParabola, @)".}

type CollisionSegment* {.importcpp: "PT(CollisionSegment)", bycopy, pure, inheritable, header: "collisionSegment.h".} = object of CollisionSolid

proc toCollisionSegment*(_: type(nil)): CollisionSegment {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionSegment], obj: TypedObject): CollisionSegment {.importcpp: "DCAST(CollisionSegment, @)".}

type CollisionTube* = CollisionCapsule

type CollisionVisualizer* {.importcpp: "PT(CollisionVisualizer)", bycopy, pure, inheritable, header: "collisionVisualizer.h".} = object of PandaNode

proc upcastToCollisionRecorder*(_: typedesc[CollisionVisualizer]): typedesc[CollisionRecorder] = typedesc[CollisionRecorder]

proc toCollisionVisualizer*(_: type(nil)): CollisionVisualizer {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CollisionVisualizer], obj: TypedObject): CollisionVisualizer {.importcpp: "DCAST(CollisionVisualizer, @)".}

type TrackerData* {.importcpp: "TrackerData", pure, inheritable, header: "trackerData.h".} = object

type InputDevice* {.importcpp: "PT(InputDevice)", bycopy, pure, inheritable, header: "inputDevice.h".} = object of TypedReferenceCount

proc toInputDevice*(_: type(nil)): InputDevice {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[InputDevice], obj: TypedObject): InputDevice {.importcpp: "DCAST(InputDevice, @)".}

type InputDevice_State {.importcpp: "InputDevice::State", pure, header: "inputDevice.h".} = enum
  S_unknown = 0
  S_up = 1
  S_down = 2

template State*(_: typedesc[InputDevice]): typedesc[InputDevice_State] = typedesc[InputDevice_State]
template State*(_: typedesc[InputDevice], value: untyped): InputDevice_State = InputDevice_State(value)

template S_unknown*(_: typedesc[InputDevice]): InputDevice_State = InputDevice_State.S_unknown
template S_up*(_: typedesc[InputDevice]): InputDevice_State = InputDevice_State.S_up
template S_down*(_: typedesc[InputDevice]): InputDevice_State = InputDevice_State.S_down

type ClientBase* {.importcpp: "PT(ClientBase)", bycopy, pure, inheritable, header: "clientBase.h".} = object of TypedReferenceCount

proc toClientBase*(_: type(nil)): ClientBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ClientBase], obj: TypedObject): ClientBase {.importcpp: "DCAST(ClientBase, @)".}

type AnalogNode* {.importcpp: "PT(AnalogNode)", bycopy, pure, inheritable, header: "analogNode.h".} = object of DataNode

proc toAnalogNode*(_: type(nil)): AnalogNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnalogNode], obj: TypedObject): AnalogNode {.importcpp: "DCAST(AnalogNode, @)".}

type ButtonNode* {.importcpp: "PT(ButtonNode)", bycopy, pure, inheritable, header: "buttonNode.h".} = object of DataNode

proc toButtonNode*(_: type(nil)): ButtonNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ButtonNode], obj: TypedObject): ButtonNode {.importcpp: "DCAST(ButtonNode, @)".}

type DialNode* {.importcpp: "PT(DialNode)", bycopy, pure, inheritable, header: "dialNode.h".} = object of DataNode

proc toDialNode*(_: type(nil)): DialNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DialNode], obj: TypedObject): DialNode {.importcpp: "DCAST(DialNode, @)".}

type InputDeviceSet* {.importcpp: "InputDeviceSet", pure, inheritable, header: "inputDeviceSet.h".} = object

type InputDeviceManager* {.importcpp: "InputDeviceManager", pure, inheritable, header: "inputDeviceManager.h".} = object

type InputDeviceNode* {.importcpp: "PT(InputDeviceNode)", bycopy, pure, inheritable, header: "inputDeviceNode.h".} = object of DataNode

proc toInputDeviceNode*(_: type(nil)): InputDeviceNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[InputDeviceNode], obj: TypedObject): InputDeviceNode {.importcpp: "DCAST(InputDeviceNode, @)".}

type LinuxJoystickDevice* {.importcpp: "PT(LinuxJoystickDevice)", bycopy, pure, inheritable, header: "linuxJoystickDevice.h".} = object of InputDevice

proc toLinuxJoystickDevice*(_: type(nil)): LinuxJoystickDevice {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[LinuxJoystickDevice], obj: TypedObject): LinuxJoystickDevice {.importcpp: "DCAST(LinuxJoystickDevice, @)".}

type TrackerNode* {.importcpp: "PT(TrackerNode)", bycopy, pure, inheritable, header: "trackerNode.h".} = object of DataNode

proc toTrackerNode*(_: type(nil)): TrackerNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TrackerNode], obj: TypedObject): TrackerNode {.importcpp: "DCAST(TrackerNode, @)".}

type VirtualMouse* {.importcpp: "PT(VirtualMouse)", bycopy, pure, inheritable, header: "virtualMouse.h".} = object of DataNode

proc toVirtualMouse*(_: type(nil)): VirtualMouse {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VirtualMouse], obj: TypedObject): VirtualMouse {.importcpp: "DCAST(VirtualMouse, @)".}

type DataGraphTraverser* {.importcpp: "DataGraphTraverser", pure, inheritable, header: "dataGraphTraverser.h".} = object

type GraphicsDevice* {.importcpp: "PT(GraphicsDevice)", bycopy, pure, inheritable, header: "graphicsDevice.h".} = object of TypedReferenceCount

proc toGraphicsDevice*(_: type(nil)): GraphicsDevice {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsDevice], obj: TypedObject): GraphicsDevice {.importcpp: "DCAST(GraphicsDevice, @)".}

type GraphicsPipe* {.importcpp: "PT(GraphicsPipe)", bycopy, pure, inheritable, header: "graphicsPipe.h".} = object of TypedReferenceCount

proc toGraphicsPipe*(_: type(nil)): GraphicsPipe {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsPipe], obj: TypedObject): GraphicsPipe {.importcpp: "DCAST(GraphicsPipe, @)".}

type GraphicsPipe_OutputTypes {.importcpp: "GraphicsPipe::OutputTypes", pure, header: "graphicsPipe.h".} = enum
  OT_window = 1
  OT_fullscreenWindow = 2
  OT_buffer = 4
  OT_textureBuffer = 8

template OutputTypes*(_: typedesc[GraphicsPipe]): typedesc[GraphicsPipe_OutputTypes] = typedesc[GraphicsPipe_OutputTypes]
template OutputTypes*(_: typedesc[GraphicsPipe], value: untyped): GraphicsPipe_OutputTypes = GraphicsPipe_OutputTypes(value)

template OT_window*(_: typedesc[GraphicsPipe]): GraphicsPipe_OutputTypes = GraphicsPipe_OutputTypes.OT_window
template OT_fullscreenWindow*(_: typedesc[GraphicsPipe]): GraphicsPipe_OutputTypes = GraphicsPipe_OutputTypes.OT_fullscreenWindow
template OT_buffer*(_: typedesc[GraphicsPipe]): GraphicsPipe_OutputTypes = GraphicsPipe_OutputTypes.OT_buffer
template OT_textureBuffer*(_: typedesc[GraphicsPipe]): GraphicsPipe_OutputTypes = GraphicsPipe_OutputTypes.OT_textureBuffer

type GraphicsPipe_BufferCreationFlags {.importcpp: "GraphicsPipe::BufferCreationFlags", pure, header: "graphicsPipe.h".} = enum
  BF_refuseParasite = 1
  BF_requireParasite = 2
  BF_refuseWindow = 4
  BF_requireWindow = 8
  BF_requireCallbackWindow = 16
  BF_canBindColor = 64
  BF_canBindEvery = 128
  BF_resizeable = 256
  BF_sizeTrackHost = 512
  BF_rttCumulative = 1024
  BF_fbPropsOptional = 2048
  BF_sizeSquare = 4096
  BF_sizePower2 = 8192
  BF_canBindLayered = 16384

template BufferCreationFlags*(_: typedesc[GraphicsPipe]): typedesc[GraphicsPipe_BufferCreationFlags] = typedesc[GraphicsPipe_BufferCreationFlags]
template BufferCreationFlags*(_: typedesc[GraphicsPipe], value: untyped): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags(value)

template BF_refuseParasite*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_refuseParasite
template BF_requireParasite*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_requireParasite
template BF_refuseWindow*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_refuseWindow
template BF_requireWindow*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_requireWindow
template BF_requireCallbackWindow*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_requireCallbackWindow
template BF_canBindColor*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_canBindColor
template BF_canBindEvery*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_canBindEvery
template BF_resizeable*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_resizeable
template BF_sizeTrackHost*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_sizeTrackHost
template BF_rttCumulative*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_rttCumulative
template BF_fbPropsOptional*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_fbPropsOptional
template BF_sizeSquare*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_sizeSquare
template BF_sizePower2*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_sizePower2
template BF_canBindLayered*(_: typedesc[GraphicsPipe]): GraphicsPipe_BufferCreationFlags = GraphicsPipe_BufferCreationFlags.BF_canBindLayered

type DisplayInformation* {.importcpp: "DisplayInformation", pure, inheritable, header: "displayInformation.h".} = object

type DisplayInformation_DetectionState {.importcpp: "DisplayInformation::DetectionState", pure, header: "displayInformation.h".} = enum
  DS_unknown = 0
  DS_success = 1
  DS_direct3dCreateError = 2
  DS_createWindowError = 3
  DS_createDeviceError = 4

template DetectionState*(_: typedesc[DisplayInformation]): typedesc[DisplayInformation_DetectionState] = typedesc[DisplayInformation_DetectionState]
template DetectionState*(_: typedesc[DisplayInformation], value: untyped): DisplayInformation_DetectionState = DisplayInformation_DetectionState(value)

template DS_unknown*(_: typedesc[DisplayInformation]): DisplayInformation_DetectionState = DisplayInformation_DetectionState.DS_unknown
template DS_success*(_: typedesc[DisplayInformation]): DisplayInformation_DetectionState = DisplayInformation_DetectionState.DS_success
template DS_direct3dCreateError*(_: typedesc[DisplayInformation]): DisplayInformation_DetectionState = DisplayInformation_DetectionState.DS_direct3dCreateError
template DS_createWindowError*(_: typedesc[DisplayInformation]): DisplayInformation_DetectionState = DisplayInformation_DetectionState.DS_createWindowError
template DS_createDeviceError*(_: typedesc[DisplayInformation]): DisplayInformation_DetectionState = DisplayInformation_DetectionState.DS_createDeviceError

type DrawableRegion* {.importcpp: "DrawableRegion*", bycopy, pure, inheritable, header: "drawableRegion.h".} = object

proc toDrawableRegion*(_: type(nil)): DrawableRegion {.importcpp: "(nullptr)".}

type DrawableRegion_RenderTexturePlane {.importcpp: "DrawableRegion::RenderTexturePlane", pure, header: "drawableRegion.h".} = enum
  RTP_stencil = 0
  RTP_depthStencil = 1
  RTP_color = 2
  RTP_auxRgba0 = 3
  RTP_auxRgba1 = 4
  RTP_auxRgba2 = 5
  RTP_auxRgba3 = 6
  RTP_auxHrgba0 = 7
  RTP_auxHrgba1 = 8
  RTP_auxHrgba2 = 9
  RTP_auxHrgba3 = 10
  RTP_auxFloat0 = 11
  RTP_auxFloat1 = 12
  RTP_auxFloat2 = 13
  RTP_auxFloat3 = 14
  RTP_depth = 15
  RTP_COUNT = 16

template RenderTexturePlane*(_: typedesc[DrawableRegion]): typedesc[DrawableRegion_RenderTexturePlane] = typedesc[DrawableRegion_RenderTexturePlane]
template RenderTexturePlane*(_: typedesc[DrawableRegion], value: untyped): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane(value)

template RTP_stencil*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_stencil
template RTP_depthStencil*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_depthStencil
template RTP_color*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_color
template RTP_auxRgba0*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxRgba0
template RTP_auxRgba1*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxRgba1
template RTP_auxRgba2*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxRgba2
template RTP_auxRgba3*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxRgba3
template RTP_auxHrgba0*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxHrgba0
template RTP_auxHrgba1*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxHrgba1
template RTP_auxHrgba2*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxHrgba2
template RTP_auxHrgba3*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxHrgba3
template RTP_auxFloat0*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxFloat0
template RTP_auxFloat1*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxFloat1
template RTP_auxFloat2*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxFloat2
template RTP_auxFloat3*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_auxFloat3
template RTP_depth*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_depth
template RTP_COUNT*(_: typedesc[DrawableRegion]): DrawableRegion_RenderTexturePlane = DrawableRegion_RenderTexturePlane.RTP_COUNT

type WindowHandle* {.importcpp: "PT(WindowHandle)", bycopy, pure, inheritable, header: "windowHandle.h".} = object of TypedReferenceCount

proc toWindowHandle*(_: type(nil)): WindowHandle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[WindowHandle], obj: TypedObject): WindowHandle {.importcpp: "DCAST(WindowHandle, @)".}

type WindowProperties* {.importcpp: "WindowProperties", pure, inheritable, header: "windowProperties.h".} = object

type WindowProperties_ZOrder {.importcpp: "WindowProperties::ZOrder", pure, header: "windowProperties.h".} = enum
  Z_bottom = 0
  Z_normal = 1
  Z_top = 2

template ZOrder*(_: typedesc[WindowProperties]): typedesc[WindowProperties_ZOrder] = typedesc[WindowProperties_ZOrder]
template ZOrder*(_: typedesc[WindowProperties], value: untyped): WindowProperties_ZOrder = WindowProperties_ZOrder(value)

template Z_bottom*(_: typedesc[WindowProperties]): WindowProperties_ZOrder = WindowProperties_ZOrder.Z_bottom
template Z_normal*(_: typedesc[WindowProperties]): WindowProperties_ZOrder = WindowProperties_ZOrder.Z_normal
template Z_top*(_: typedesc[WindowProperties]): WindowProperties_ZOrder = WindowProperties_ZOrder.Z_top

type WindowProperties_MouseMode {.importcpp: "WindowProperties::MouseMode", pure, header: "windowProperties.h".} = enum
  M_absolute = 0
  M_relative = 1
  M_confined = 2

template MouseMode*(_: typedesc[WindowProperties]): typedesc[WindowProperties_MouseMode] = typedesc[WindowProperties_MouseMode]
template MouseMode*(_: typedesc[WindowProperties], value: untyped): WindowProperties_MouseMode = WindowProperties_MouseMode(value)

template M_absolute*(_: typedesc[WindowProperties]): WindowProperties_MouseMode = WindowProperties_MouseMode.M_absolute
template M_relative*(_: typedesc[WindowProperties]): WindowProperties_MouseMode = WindowProperties_MouseMode.M_relative
template M_confined*(_: typedesc[WindowProperties]): WindowProperties_MouseMode = WindowProperties_MouseMode.M_confined

type DisplayRegion* {.importcpp: "PT(DisplayRegion)", bycopy, pure, inheritable, header: "displayRegion.h".} = object of TypedReferenceCount

proc upcastToDrawableRegion*(_: typedesc[DisplayRegion]): typedesc[DrawableRegion] = typedesc[DrawableRegion]

proc toDisplayRegion*(_: type(nil)): DisplayRegion {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DisplayRegion], obj: TypedObject): DisplayRegion {.importcpp: "DCAST(DisplayRegion, @)".}

type GraphicsOutputBase* {.importcpp: "PT(GraphicsOutputBase)", bycopy, pure, inheritable, header: "graphicsOutputBase.h".} = object of TypedWritableReferenceCount

proc toGraphicsOutputBase*(_: type(nil)): GraphicsOutputBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsOutputBase], obj: TypedObject): GraphicsOutputBase {.importcpp: "DCAST(GraphicsOutputBase, @)".}

type GraphicsOutput* {.importcpp: "PT(GraphicsOutput)", bycopy, pure, inheritable, header: "graphicsOutput.h".} = object of GraphicsOutputBase

proc upcastToDrawableRegion*(_: typedesc[GraphicsOutput]): typedesc[DrawableRegion] = typedesc[DrawableRegion]

proc toGraphicsOutput*(_: type(nil)): GraphicsOutput {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsOutput], obj: TypedObject): GraphicsOutput {.importcpp: "DCAST(GraphicsOutput, @)".}

type GraphicsOutput_RenderTextureMode {.importcpp: "GraphicsOutput::RenderTextureMode", pure, header: "graphicsOutput.h".} = enum
  RTM_none = 0
  RTM_bindOrCopy = 1
  RTM_copyTexture = 2
  RTM_copyRam = 3
  RTM_triggeredCopyTexture = 4
  RTM_triggeredCopyRam = 5
  RTM_bindLayered = 6

template RenderTextureMode*(_: typedesc[GraphicsOutput]): typedesc[GraphicsOutput_RenderTextureMode] = typedesc[GraphicsOutput_RenderTextureMode]
template RenderTextureMode*(_: typedesc[GraphicsOutput], value: untyped): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode(value)

template RTM_none*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_none
template RTM_bindOrCopy*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_bindOrCopy
template RTM_copyTexture*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_copyTexture
template RTM_copyRam*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_copyRam
template RTM_triggeredCopyTexture*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_triggeredCopyTexture
template RTM_triggeredCopyRam*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_triggeredCopyRam
template RTM_bindLayered*(_: typedesc[GraphicsOutput]): GraphicsOutput_RenderTextureMode = GraphicsOutput_RenderTextureMode.RTM_bindLayered

type GraphicsOutput_FrameMode {.importcpp: "GraphicsOutput::FrameMode", pure, header: "graphicsOutput.h".} = enum
  FM_render = 0
  FM_parasite = 1
  FM_refresh = 2

template FrameMode*(_: typedesc[GraphicsOutput]): typedesc[GraphicsOutput_FrameMode] = typedesc[GraphicsOutput_FrameMode]
template FrameMode*(_: typedesc[GraphicsOutput], value: untyped): GraphicsOutput_FrameMode = GraphicsOutput_FrameMode(value)

template FM_render*(_: typedesc[GraphicsOutput]): GraphicsOutput_FrameMode = GraphicsOutput_FrameMode.FM_render
template FM_parasite*(_: typedesc[GraphicsOutput]): GraphicsOutput_FrameMode = GraphicsOutput_FrameMode.FM_parasite
template FM_refresh*(_: typedesc[GraphicsOutput]): GraphicsOutput_FrameMode = GraphicsOutput_FrameMode.FM_refresh

type GraphicsStateGuardianBase* {.importcpp: "PT(GraphicsStateGuardianBase)", bycopy, pure, inheritable, header: "graphicsStateGuardianBase.h".} = object of TypedWritableReferenceCount

proc toGraphicsStateGuardianBase*(_: type(nil)): GraphicsStateGuardianBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsStateGuardianBase], obj: TypedObject): GraphicsStateGuardianBase {.importcpp: "DCAST(GraphicsStateGuardianBase, @)".}

type GraphicsStateGuardian* {.importcpp: "PT(GraphicsStateGuardian)", bycopy, pure, inheritable, header: "graphicsStateGuardian.h".} = object of GraphicsStateGuardianBase

proc toGraphicsStateGuardian*(_: type(nil)): GraphicsStateGuardian {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsStateGuardian], obj: TypedObject): GraphicsStateGuardian {.importcpp: "DCAST(GraphicsStateGuardian, @)".}

type GraphicsStateGuardian_ShaderModel {.importcpp: "GraphicsStateGuardian::ShaderModel", pure, header: "graphicsStateGuardian.h".} = enum
  SM_00 = 0
  SM_11 = 1
  SM_20 = 2
  SM_2X = 3
  SM_30 = 4
  SM_40 = 5
  SM_50 = 6
  SM_51 = 7

template ShaderModel*(_: typedesc[GraphicsStateGuardian]): typedesc[GraphicsStateGuardian_ShaderModel] = typedesc[GraphicsStateGuardian_ShaderModel]
template ShaderModel*(_: typedesc[GraphicsStateGuardian], value: untyped): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel(value)

template SM_00*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_00
template SM_11*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_11
template SM_20*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_20
template SM_2X*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_2X
template SM_30*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_30
template SM_40*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_40
template SM_50*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_50
template SM_51*(_: typedesc[GraphicsStateGuardian]): GraphicsStateGuardian_ShaderModel = GraphicsStateGuardian_ShaderModel.SM_51

type GraphicsEngine* {.importcpp: "PT(GraphicsEngine)", bycopy, pure, inheritable, header: "graphicsEngine.h".} = object of ReferenceCount

proc toGraphicsEngine*(_: type(nil)): GraphicsEngine {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsEngine], obj: TypedObject): GraphicsEngine {.importcpp: "DCAST(GraphicsEngine, @)".}

type GraphicsThreadingModel* {.importcpp: "GraphicsThreadingModel", pure, inheritable, header: "graphicsThreadingModel.h".} = object

type StereoDisplayRegion* {.importcpp: "PT(StereoDisplayRegion)", bycopy, pure, inheritable, header: "stereoDisplayRegion.h".} = object of DisplayRegion

proc toStereoDisplayRegion*(_: type(nil)): StereoDisplayRegion {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[StereoDisplayRegion], obj: TypedObject): StereoDisplayRegion {.importcpp: "DCAST(StereoDisplayRegion, @)".}

type FrameBufferProperties* {.importcpp: "FrameBufferProperties", pure, inheritable, header: "frameBufferProperties.h".} = object

type GraphicsWindowInputDevice* {.importcpp: "PT(GraphicsWindowInputDevice)", bycopy, pure, inheritable, header: "graphicsWindowInputDevice.h".} = object of InputDevice

proc toGraphicsWindowInputDevice*(_: type(nil)): GraphicsWindowInputDevice {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsWindowInputDevice], obj: TypedObject): GraphicsWindowInputDevice {.importcpp: "DCAST(GraphicsWindowInputDevice, @)".}

type TouchInfo* {.importcpp: "TouchInfo", pure, inheritable, header: "touchInfo.h".} = object

type TouchInfo_TouchInfoFlags {.importcpp: "TouchInfo::TouchInfoFlags", pure, header: "touchInfo.h".} = enum
  TIF_move = 1
  TIF_down = 2
  TIF_up = 4

template TouchInfoFlags*(_: typedesc[TouchInfo]): typedesc[TouchInfo_TouchInfoFlags] = typedesc[TouchInfo_TouchInfoFlags]
template TouchInfoFlags*(_: typedesc[TouchInfo], value: untyped): TouchInfo_TouchInfoFlags = TouchInfo_TouchInfoFlags(value)

template TIF_move*(_: typedesc[TouchInfo]): TouchInfo_TouchInfoFlags = TouchInfo_TouchInfoFlags.TIF_move
template TIF_down*(_: typedesc[TouchInfo]): TouchInfo_TouchInfoFlags = TouchInfo_TouchInfoFlags.TIF_down
template TIF_up*(_: typedesc[TouchInfo]): TouchInfo_TouchInfoFlags = TouchInfo_TouchInfoFlags.TIF_up

type GraphicsWindowProcCallbackData* {.importcpp: "GraphicsWindowProcCallbackData", pure, inheritable, header: "graphicsWindowProcCallbackData.h".} = object of CallbackData

type GraphicsWindow* {.importcpp: "PT(GraphicsWindow)", bycopy, pure, inheritable, header: "graphicsWindow.h".} = object of GraphicsOutput

proc toGraphicsWindow*(_: type(nil)): GraphicsWindow {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsWindow], obj: TypedObject): GraphicsWindow {.importcpp: "DCAST(GraphicsWindow, @)".}

type CallbackGraphicsWindow* {.importcpp: "PT(CallbackGraphicsWindow)", bycopy, pure, inheritable, header: "callbackGraphicsWindow.h".} = object of GraphicsWindow

proc toCallbackGraphicsWindow*(_: type(nil)): CallbackGraphicsWindow {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CallbackGraphicsWindow], obj: TypedObject): CallbackGraphicsWindow {.importcpp: "DCAST(CallbackGraphicsWindow, @)".}

type CallbackGraphicsWindow_RenderCallbackType {.importcpp: "CallbackGraphicsWindow::RenderCallbackType", pure, header: "callbackGraphicsWindow.h".} = enum
  RCT_beginFrame = 0
  RCT_endFrame = 1
  RCT_beginFlip = 2
  RCT_endFlip = 3

template RenderCallbackType*(_: typedesc[CallbackGraphicsWindow]): typedesc[CallbackGraphicsWindow_RenderCallbackType] = typedesc[CallbackGraphicsWindow_RenderCallbackType]
template RenderCallbackType*(_: typedesc[CallbackGraphicsWindow], value: untyped): CallbackGraphicsWindow_RenderCallbackType = CallbackGraphicsWindow_RenderCallbackType(value)

template RCT_beginFrame*(_: typedesc[CallbackGraphicsWindow]): CallbackGraphicsWindow_RenderCallbackType = CallbackGraphicsWindow_RenderCallbackType.RCT_beginFrame
template RCT_endFrame*(_: typedesc[CallbackGraphicsWindow]): CallbackGraphicsWindow_RenderCallbackType = CallbackGraphicsWindow_RenderCallbackType.RCT_endFrame
template RCT_beginFlip*(_: typedesc[CallbackGraphicsWindow]): CallbackGraphicsWindow_RenderCallbackType = CallbackGraphicsWindow_RenderCallbackType.RCT_beginFlip
template RCT_endFlip*(_: typedesc[CallbackGraphicsWindow]): CallbackGraphicsWindow_RenderCallbackType = CallbackGraphicsWindow_RenderCallbackType.RCT_endFlip

type DisplayMode* {.importcpp: "DisplayMode", pure, inheritable, header: "displayInformation.h".} = object

type DisplayRegionCullCallbackData* {.importcpp: "DisplayRegionCullCallbackData", pure, inheritable, header: "displayRegionCullCallbackData.h".} = object of CallbackData

type DisplayRegionDrawCallbackData* {.importcpp: "DisplayRegionDrawCallbackData", pure, inheritable, header: "displayRegionDrawCallbackData.h".} = object of CallbackData

type DisplaySearchParameters* {.importcpp: "DisplaySearchParameters", pure, inheritable, header: "displaySearchParameters.h".} = object

type GraphicsBuffer* {.importcpp: "PT(GraphicsBuffer)", bycopy, pure, inheritable, header: "graphicsBuffer.h".} = object of GraphicsOutput

proc toGraphicsBuffer*(_: type(nil)): GraphicsBuffer {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GraphicsBuffer], obj: TypedObject): GraphicsBuffer {.importcpp: "DCAST(GraphicsBuffer, @)".}

type GraphicsPipeSelection* {.importcpp: "GraphicsPipeSelection*", bycopy, pure, inheritable, header: "graphicsPipeSelection.h".} = object

proc toGraphicsPipeSelection*(_: type(nil)): GraphicsPipeSelection {.importcpp: "(nullptr)".}

type MouseAndKeyboard* {.importcpp: "PT(MouseAndKeyboard)", bycopy, pure, inheritable, header: "mouseAndKeyboard.h".} = object of DataNode

proc toMouseAndKeyboard*(_: type(nil)): MouseAndKeyboard {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseAndKeyboard], obj: TypedObject): MouseAndKeyboard {.importcpp: "DCAST(MouseAndKeyboard, @)".}

type NativeWindowHandle* {.importcpp: "PT(NativeWindowHandle)", bycopy, pure, header: "nativeWindowHandle.h".} = object of WindowHandle

proc toNativeWindowHandle*(_: type(nil)): NativeWindowHandle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NativeWindowHandle], obj: TypedObject): NativeWindowHandle {.importcpp: "DCAST(NativeWindowHandle, @)".}

type ParasiteBuffer* {.importcpp: "PT(ParasiteBuffer)", bycopy, pure, inheritable, header: "parasiteBuffer.h".} = object of GraphicsOutput

proc toParasiteBuffer*(_: type(nil)): ParasiteBuffer {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParasiteBuffer], obj: TypedObject): ParasiteBuffer {.importcpp: "DCAST(ParasiteBuffer, @)".}

type ThreadPriority* {.importcpp: "ThreadPriority", header: "threadPriority.h".} = enum
  TP_low = 0
  TP_normal = 1
  TP_high = 2
  TP_urgent = 3

type Thread* {.importcpp: "PT(Thread)", bycopy, pure, inheritable, header: "thread.h".} = object of TypedReferenceCount

proc upcastToNamable*(_: typedesc[Thread]): typedesc[Namable] = typedesc[Namable]

proc toThread*(_: type(nil)): Thread {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Thread], obj: TypedObject): Thread {.importcpp: "DCAST(Thread, @)".}

type MutexDirect* {.importcpp: "MutexDirect", pure, inheritable, header: "mutexDirect.h".} = object

type Mutex* {.importcpp: "Mutex", pure, inheritable, header: "pmutex.h".} = object of MutexDirect

type ConditionVarDirect* {.importcpp: "ConditionVarDirect", pure, inheritable, header: "conditionVarDirect.h".} = object

type ConditionVar* {.importcpp: "ConditionVar", pure, inheritable, header: "conditionVar.h".} = object of ConditionVarDirect

type ConditionVarFullDirect* {.importcpp: "ConditionVarFullDirect", pure, inheritable, header: "conditionVarFullDirect.h".} = object

type ConditionVarFull* {.importcpp: "ConditionVarFull", pure, inheritable, header: "conditionVarFull.h".} = object of ConditionVarFullDirect

type ReMutexDirect* {.importcpp: "ReMutexDirect", pure, inheritable, header: "reMutexDirect.h".} = object

type ReMutex* {.importcpp: "ReMutex", pure, inheritable, header: "reMutex.h".} = object of ReMutexDirect

type ExternalThread* {.importcpp: "PT(ExternalThread)", bycopy, pure, inheritable, header: "externalThread.h".} = object of Thread

proc toExternalThread*(_: type(nil)): ExternalThread {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ExternalThread], obj: TypedObject): ExternalThread {.importcpp: "DCAST(ExternalThread, @)".}

type LightMutexDirect* {.importcpp: "LightMutexDirect", pure, inheritable, header: "lightMutexDirect.h".} = object

type LightMutex* {.importcpp: "LightMutex", pure, inheritable, header: "lightMutex.h".} = object of LightMutexDirect

type LightReMutexDirect* {.importcpp: "LightReMutexDirect", pure, inheritable, header: "lightReMutexDirect.h".} = object

type LightReMutex* {.importcpp: "LightReMutex", pure, inheritable, header: "lightReMutex.h".} = object of LightReMutexDirect

type MainThread* {.importcpp: "PT(MainThread)", bycopy, pure, inheritable, header: "mainThread.h".} = object of Thread

proc toMainThread*(_: type(nil)): MainThread {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MainThread], obj: TypedObject): MainThread {.importcpp: "DCAST(MainThread, @)".}

type Semaphore* {.importcpp: "Semaphore", pure, inheritable, header: "psemaphore.h".} = object

type EventParameter* {.importcpp: "EventParameter", pure, inheritable, header: "eventParameter.h".} = object

type AsyncTaskManager* {.importcpp: "PT(AsyncTaskManager)", bycopy, pure, inheritable, header: "asyncTaskManager.h".} = object of TypedReferenceCount

proc upcastToNamable*(_: typedesc[AsyncTaskManager]): typedesc[Namable] = typedesc[Namable]

proc toAsyncTaskManager*(_: type(nil)): AsyncTaskManager {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AsyncTaskManager], obj: TypedObject): AsyncTaskManager {.importcpp: "DCAST(AsyncTaskManager, @)".}

type AsyncTaskCollection* {.importcpp: "AsyncTaskCollection", pure, inheritable, header: "asyncTaskCollection.h".} = object

type AsyncTaskChain* {.importcpp: "PT(AsyncTaskChain)", bycopy, pure, inheritable, header: "asyncTaskChain.h".} = object of TypedReferenceCount

proc upcastToNamable*(_: typedesc[AsyncTaskChain]): typedesc[Namable] = typedesc[Namable]

proc toAsyncTaskChain*(_: type(nil)): AsyncTaskChain {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AsyncTaskChain], obj: TypedObject): AsyncTaskChain {.importcpp: "DCAST(AsyncTaskChain, @)".}

type AsyncTaskPause* {.importcpp: "PT(AsyncTaskPause)", bycopy, pure, inheritable, header: "asyncTaskPause.h".} = object of AsyncTask

proc toAsyncTaskPause*(_: type(nil)): AsyncTaskPause {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AsyncTaskPause], obj: TypedObject): AsyncTaskPause {.importcpp: "DCAST(AsyncTaskPause, @)".}

type AsyncTaskSequence* {.importcpp: "PT(AsyncTaskSequence)", bycopy, pure, inheritable, header: "asyncTaskSequence.h".} = object of AsyncTask

proc upcastToAsyncTaskCollection*(_: typedesc[AsyncTaskSequence]): typedesc[AsyncTaskCollection] = typedesc[AsyncTaskCollection]

proc toAsyncTaskSequence*(_: type(nil)): AsyncTaskSequence {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AsyncTaskSequence], obj: TypedObject): AsyncTaskSequence {.importcpp: "DCAST(AsyncTaskSequence, @)".}

type ButtonEvent* {.importcpp: "ButtonEvent", pure, inheritable, header: "buttonEvent.h".} = object

type ButtonEvent_Type {.importcpp: "ButtonEvent::Type", pure, header: "buttonEvent.h".} = enum
  T_down = 0
  T_resumeDown = 1
  T_up = 2
  T_repeat = 3
  T_keystroke = 4
  T_candidate = 5
  T_move = 6
  T_rawDown = 7
  T_rawUp = 8

template Type*(_: typedesc[ButtonEvent]): typedesc[ButtonEvent_Type] = typedesc[ButtonEvent_Type]
template Type*(_: typedesc[ButtonEvent], value: untyped): ButtonEvent_Type = ButtonEvent_Type(value)

template T_down*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_down
template T_resumeDown*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_resumeDown
template T_up*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_up
template T_repeat*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_repeat
template T_keystroke*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_keystroke
template T_candidate*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_candidate
template T_move*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_move
template T_rawDown*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_rawDown
template T_rawUp*(_: typedesc[ButtonEvent]): ButtonEvent_Type = ButtonEvent_Type.T_rawUp

type ParamValueBase* {.importcpp: "PT(ParamValueBase)", bycopy, pure, inheritable, header: "paramValue.h".} = object of TypedWritableReferenceCount

proc toParamValueBase*(_: type(nil)): ParamValueBase {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParamValueBase], obj: TypedObject): ParamValueBase {.importcpp: "DCAST(ParamValueBase, @)".}

type ButtonEventList* {.importcpp: "PT(ButtonEventList)", bycopy, pure, inheritable, header: "buttonEventList.h".} = object of ParamValueBase

proc toButtonEventList*(_: type(nil)): ButtonEventList {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ButtonEventList], obj: TypedObject): ButtonEventList {.importcpp: "DCAST(ButtonEventList, @)".}

type Event* {.importcpp: "PT(Event)", bycopy, pure, inheritable, header: "event.h".} = object of TypedReferenceCount

proc toEvent*(_: type(nil)): Event {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Event], obj: TypedObject): Event {.importcpp: "DCAST(Event, @)".}

type EventHandler* {.importcpp: "EventHandler", pure, inheritable, header: "eventHandler.h".} = object of TypedObject

type EventQueue* {.importcpp: "EventQueue*", bycopy, pure, inheritable, header: "eventQueue.h".} = object

proc toEventQueue*(_: type(nil)): EventQueue {.importcpp: "(nullptr)".}

type PointerEventList* {.importcpp: "PT(PointerEventList)", bycopy, pure, inheritable, header: "pointerEventList.h".} = object of ParamValueBase

proc toPointerEventList*(_: type(nil)): PointerEventList {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PointerEventList], obj: TypedObject): PointerEventList {.importcpp: "DCAST(PointerEventList, @)".}

type AdaptiveLru* {.importcpp: "AdaptiveLru", pure, inheritable, header: "adaptiveLru.h".} = object of Namable

type AdaptiveLruPage* {.importcpp: "AdaptiveLruPage*", bycopy, pure, inheritable, header: "adaptiveLru.h".} = object

proc toAdaptiveLruPage*(_: type(nil)): AdaptiveLruPage {.importcpp: "(nullptr)".}

type GeomEnums* {.importcpp: "GeomEnums", pure, inheritable, header: "geomEnums.h".} = object

type GeomEnums_UsageHint {.importcpp: "GeomEnums::UsageHint", pure, header: "geomEnums.h".} = enum
  UH_client = 0
  UH_stream = 1
  UH_dynamic = 2
  UH_static = 3
  UH_unspecified = 4

template UsageHint*(_: typedesc[GeomEnums]): typedesc[GeomEnums_UsageHint] = typedesc[GeomEnums_UsageHint]
template UsageHint*(_: typedesc[GeomEnums], value: untyped): GeomEnums_UsageHint = GeomEnums_UsageHint(value)

template UH_client*(_: typedesc[GeomEnums]): GeomEnums_UsageHint = GeomEnums_UsageHint.UH_client
template UH_stream*(_: typedesc[GeomEnums]): GeomEnums_UsageHint = GeomEnums_UsageHint.UH_stream
template UH_dynamic*(_: typedesc[GeomEnums]): GeomEnums_UsageHint = GeomEnums_UsageHint.UH_dynamic
template UH_static*(_: typedesc[GeomEnums]): GeomEnums_UsageHint = GeomEnums_UsageHint.UH_static
template UH_unspecified*(_: typedesc[GeomEnums]): GeomEnums_UsageHint = GeomEnums_UsageHint.UH_unspecified

type GeomEnums_GeomRendering {.importcpp: "GeomEnums::GeomRendering", pure, header: "geomEnums.h".} = enum
  GR_indexedPoint = 1
  GR_point = 2
  GR_pointUniformSize = 4
  GR_perPointSize = 8
  GR_pointPerspective = 16
  GR_pointAspectRatio = 32
  GR_pointScale = 64
  GR_pointRotate = 128
  GR_pointSprite = 256
  GR_pointSpriteTexMatrix = 512
  GR_pointBits = 1022
  GR_triangleStrip = 1024
  GR_triangleFan = 2048
  GR_lineStrip = 4096
  GR_compositeBits = 7168
  GR_flatFirstVertex = 8192
  GR_flatLastVertex = 16384
  GR_shadeModelBits = 24576
  GR_indexedOther = 65536
  GR_indexedBits = 65537
  GR_stripCutIndex = 131072
  GR_renderModeWireframe = 262144
  GR_renderModePoint = 524288
  GR_adjacency = 1048576

template GeomRendering*(_: typedesc[GeomEnums]): typedesc[GeomEnums_GeomRendering] = typedesc[GeomEnums_GeomRendering]
template GeomRendering*(_: typedesc[GeomEnums], value: untyped): GeomEnums_GeomRendering = GeomEnums_GeomRendering(value)

template GR_indexedPoint*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_indexedPoint
template GR_indexedOther*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_indexedOther
template GR_indexedBits*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_indexedBits
template GR_point*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_point
template GR_pointUniformSize*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointUniformSize
template GR_perPointSize*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_perPointSize
template GR_pointPerspective*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointPerspective
template GR_pointAspectRatio*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointAspectRatio
template GR_pointScale*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointScale
template GR_pointRotate*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointRotate
template GR_pointSprite*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointSprite
template GR_pointSpriteTexMatrix*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointSpriteTexMatrix
template GR_pointBits*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_pointBits
template GR_triangleStrip*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_triangleStrip
template GR_triangleFan*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_triangleFan
template GR_lineStrip*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_lineStrip
template GR_compositeBits*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_compositeBits
template GR_stripCutIndex*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_stripCutIndex
template GR_flatFirstVertex*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_flatFirstVertex
template GR_flatLastVertex*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_flatLastVertex
template GR_shadeModelBits*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_shadeModelBits
template GR_renderModeWireframe*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_renderModeWireframe
template GR_renderModePoint*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_renderModePoint
template GR_adjacency*(_: typedesc[GeomEnums]): GeomEnums_GeomRendering = GeomEnums_GeomRendering.GR_adjacency

type GeomEnums_ShadeModel {.importcpp: "GeomEnums::ShadeModel", pure, header: "geomEnums.h".} = enum
  SM_uniform = 0
  SM_smooth = 1
  SM_flatFirstVertex = 2
  SM_flatLastVertex = 3

template ShadeModel*(_: typedesc[GeomEnums]): typedesc[GeomEnums_ShadeModel] = typedesc[GeomEnums_ShadeModel]
template ShadeModel*(_: typedesc[GeomEnums], value: untyped): GeomEnums_ShadeModel = GeomEnums_ShadeModel(value)

template SM_uniform*(_: typedesc[GeomEnums]): GeomEnums_ShadeModel = GeomEnums_ShadeModel.SM_uniform
template SM_smooth*(_: typedesc[GeomEnums]): GeomEnums_ShadeModel = GeomEnums_ShadeModel.SM_smooth
template SM_flatFirstVertex*(_: typedesc[GeomEnums]): GeomEnums_ShadeModel = GeomEnums_ShadeModel.SM_flatFirstVertex
template SM_flatLastVertex*(_: typedesc[GeomEnums]): GeomEnums_ShadeModel = GeomEnums_ShadeModel.SM_flatLastVertex

type GeomEnums_PrimitiveType {.importcpp: "GeomEnums::PrimitiveType", pure, header: "geomEnums.h".} = enum
  PT_none = 0
  PT_polygons = 1
  PT_lines = 2
  PT_points = 3
  PT_patches = 4

template PrimitiveType*(_: typedesc[GeomEnums]): typedesc[GeomEnums_PrimitiveType] = typedesc[GeomEnums_PrimitiveType]
template PrimitiveType*(_: typedesc[GeomEnums], value: untyped): GeomEnums_PrimitiveType = GeomEnums_PrimitiveType(value)

template PT_none*(_: typedesc[GeomEnums]): GeomEnums_PrimitiveType = GeomEnums_PrimitiveType.PT_none
template PT_polygons*(_: typedesc[GeomEnums]): GeomEnums_PrimitiveType = GeomEnums_PrimitiveType.PT_polygons
template PT_lines*(_: typedesc[GeomEnums]): GeomEnums_PrimitiveType = GeomEnums_PrimitiveType.PT_lines
template PT_points*(_: typedesc[GeomEnums]): GeomEnums_PrimitiveType = GeomEnums_PrimitiveType.PT_points
template PT_patches*(_: typedesc[GeomEnums]): GeomEnums_PrimitiveType = GeomEnums_PrimitiveType.PT_patches

type GeomEnums_NumericType {.importcpp: "GeomEnums::NumericType", pure, header: "geomEnums.h".} = enum
  NT_uint8 = 0
  NT_uint16 = 1
  NT_uint32 = 2
  NT_packedDcba = 3
  NT_packedDabc = 4
  NT_float32 = 5
  NT_float64 = 6
  NT_stdfloat = 7
  NT_int8 = 8
  NT_int16 = 9
  NT_int32 = 10
  NT_packedUfloat = 11

template NumericType*(_: typedesc[GeomEnums]): typedesc[GeomEnums_NumericType] = typedesc[GeomEnums_NumericType]
template NumericType*(_: typedesc[GeomEnums], value: untyped): GeomEnums_NumericType = GeomEnums_NumericType(value)

template NT_uint8*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_uint8
template NT_uint16*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_uint16
template NT_uint32*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_uint32
template NT_packedDcba*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_packedDcba
template NT_packedDabc*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_packedDabc
template NT_float32*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_float32
template NT_float64*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_float64
template NT_stdfloat*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_stdfloat
template NT_int8*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_int8
template NT_int16*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_int16
template NT_int32*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_int32
template NT_packedUfloat*(_: typedesc[GeomEnums]): GeomEnums_NumericType = GeomEnums_NumericType.NT_packedUfloat

type GeomEnums_Contents {.importcpp: "GeomEnums::Contents", pure, header: "geomEnums.h".} = enum
  C_other = 0
  C_point = 1
  C_clipPoint = 2
  C_vector = 3
  C_texcoord = 4
  C_color = 5
  C_index = 6
  C_morphDelta = 7
  C_matrix = 8
  C_normal = 9

template Contents*(_: typedesc[GeomEnums]): typedesc[GeomEnums_Contents] = typedesc[GeomEnums_Contents]
template Contents*(_: typedesc[GeomEnums], value: untyped): GeomEnums_Contents = GeomEnums_Contents(value)

template C_other*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_other
template C_point*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_point
template C_clipPoint*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_clipPoint
template C_vector*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_vector
template C_texcoord*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_texcoord
template C_color*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_color
template C_index*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_index
template C_morphDelta*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_morphDelta
template C_matrix*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_matrix
template C_normal*(_: typedesc[GeomEnums]): GeomEnums_Contents = GeomEnums_Contents.C_normal

type GeomEnums_AnimationType {.importcpp: "GeomEnums::AnimationType", pure, header: "geomEnums.h".} = enum
  AT_none = 0
  AT_panda = 1
  AT_hardware = 2

template AnimationType*(_: typedesc[GeomEnums]): typedesc[GeomEnums_AnimationType] = typedesc[GeomEnums_AnimationType]
template AnimationType*(_: typedesc[GeomEnums], value: untyped): GeomEnums_AnimationType = GeomEnums_AnimationType(value)

template AT_none*(_: typedesc[GeomEnums]): GeomEnums_AnimationType = GeomEnums_AnimationType.AT_none
template AT_panda*(_: typedesc[GeomEnums]): GeomEnums_AnimationType = GeomEnums_AnimationType.AT_panda
template AT_hardware*(_: typedesc[GeomEnums]): GeomEnums_AnimationType = GeomEnums_AnimationType.AT_hardware

type GeomVertexAnimationSpec* {.importcpp: "GeomVertexAnimationSpec", pure, inheritable, header: "geomVertexAnimationSpec.h".} = object of GeomEnums

type InternalName* {.importcpp: "PT(InternalName)", bycopy, pure, header: "internalName.h".} = object of TypedWritableReferenceCount

proc toInternalName*(_: type(nil)): InternalName {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[InternalName], obj: TypedObject): InternalName {.importcpp: "DCAST(InternalName, @)".}

type GeomVertexColumn* {.importcpp: "GeomVertexColumn", pure, inheritable, header: "geomVertexColumn.h".} = object of GeomEnums

type GeomVertexArrayFormat* {.importcpp: "PT(GeomVertexArrayFormat)", bycopy, pure, header: "geomVertexArrayFormat.h".} = object of TypedWritableReferenceCount

proc upcastToGeomEnums*(_: typedesc[GeomVertexArrayFormat]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeomVertexArrayFormat*(_: type(nil)): GeomVertexArrayFormat {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomVertexArrayFormat], obj: TypedObject): GeomVertexArrayFormat {.importcpp: "DCAST(GeomVertexArrayFormat, @)".}

type GeomVertexFormat* {.importcpp: "PT(GeomVertexFormat)", bycopy, pure, header: "geomVertexFormat.h".} = object of TypedWritableReferenceCount

proc upcastToGeomEnums*(_: typedesc[GeomVertexFormat]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeomVertexFormat*(_: type(nil)): GeomVertexFormat {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomVertexFormat], obj: TypedObject): GeomVertexFormat {.importcpp: "DCAST(GeomVertexFormat, @)".}

type SimpleLru* {.importcpp: "SimpleLru", pure, inheritable, header: "simpleLru.h".} = object of Namable

type SimpleLruPage* {.importcpp: "SimpleLruPage*", bycopy, pure, inheritable, header: "simpleLru.h".} = object

proc toSimpleLruPage*(_: type(nil)): SimpleLruPage {.importcpp: "(nullptr)".}

type SimpleAllocator* {.importcpp: "SimpleAllocator*", bycopy, pure, inheritable, header: "simpleAllocator.h".} = object

proc toSimpleAllocator*(_: type(nil)): SimpleAllocator {.importcpp: "(nullptr)".}

type SimpleAllocatorBlock* {.importcpp: "SimpleAllocatorBlock*", bycopy, pure, inheritable, header: "simpleAllocator.h".} = object

proc toSimpleAllocatorBlock*(_: type(nil)): SimpleAllocatorBlock {.importcpp: "(nullptr)".}

type VertexDataSaveFile* {.importcpp: "VertexDataSaveFile*", bycopy, pure, inheritable, header: "vertexDataSaveFile.h".} = object of SimpleAllocator

proc toVertexDataSaveFile*(_: type(nil)): VertexDataSaveFile {.importcpp: "(nullptr)".}

type VertexDataPage* {.importcpp: "VertexDataPage", pure, inheritable, header: "vertexDataPage.h".} = object of SimpleAllocator

proc upcastToSimpleLruPage*(_: typedesc[VertexDataPage]): typedesc[SimpleLruPage] = typedesc[SimpleLruPage]

type VertexDataPage_RamClass {.importcpp: "VertexDataPage::RamClass", pure, header: "vertexDataPage.h".} = enum
  RC_resident = 0
  RC_compressed = 1
  RC_disk = 2
  RC_endOfList = 3

template RamClass*(_: typedesc[VertexDataPage]): typedesc[VertexDataPage_RamClass] = typedesc[VertexDataPage_RamClass]
template RamClass*(_: typedesc[VertexDataPage], value: untyped): VertexDataPage_RamClass = VertexDataPage_RamClass(value)

template RC_resident*(_: typedesc[VertexDataPage]): VertexDataPage_RamClass = VertexDataPage_RamClass.RC_resident
template RC_compressed*(_: typedesc[VertexDataPage]): VertexDataPage_RamClass = VertexDataPage_RamClass.RC_compressed
template RC_disk*(_: typedesc[VertexDataPage]): VertexDataPage_RamClass = VertexDataPage_RamClass.RC_disk
template RC_endOfList*(_: typedesc[VertexDataPage]): VertexDataPage_RamClass = VertexDataPage_RamClass.RC_endOfList

type VertexDataBook* {.importcpp: "VertexDataBook", pure, inheritable, header: "vertexDataBook.h".} = object

type VertexDataBlock* {.importcpp: "PT(VertexDataBlock)", bycopy, pure, inheritable, header: "vertexDataBlock.h".} = object of SimpleAllocatorBlock

proc upcastToReferenceCount*(_: typedesc[VertexDataBlock]): typedesc[ReferenceCount] = typedesc[ReferenceCount]

proc toVertexDataBlock*(_: type(nil)): VertexDataBlock {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VertexDataBlock], obj: TypedObject): VertexDataBlock {.importcpp: "DCAST(VertexDataBlock, @)".}

type GeomVertexArrayData* {.importcpp: "PT(GeomVertexArrayData)", bycopy, pure, inheritable, header: "geomVertexArrayData.h".} = object of CopyOnWriteObject

proc upcastToSimpleLruPage*(_: typedesc[GeomVertexArrayData]): typedesc[SimpleLruPage] = typedesc[SimpleLruPage]
proc upcastToGeomEnums*(_: typedesc[GeomVertexArrayData]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeomVertexArrayData*(_: type(nil)): GeomVertexArrayData {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomVertexArrayData], obj: TypedObject): GeomVertexArrayData {.importcpp: "DCAST(GeomVertexArrayData, @)".}

type GeomVertexArrayDataHandle* {.importcpp: "PT(GeomVertexArrayDataHandle)", bycopy, pure, inheritable, header: "geomVertexArrayData.h".} = object of ReferenceCount

proc upcastToGeomEnums*(_: typedesc[GeomVertexArrayDataHandle]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeomVertexArrayDataHandle*(_: type(nil)): GeomVertexArrayDataHandle {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomVertexArrayDataHandle], obj: TypedObject): GeomVertexArrayDataHandle {.importcpp: "DCAST(GeomVertexArrayDataHandle, @)".}

type GeomCacheManager* {.importcpp: "GeomCacheManager", pure, inheritable, header: "geomCacheManager.h".} = object

type TransformTable* {.importcpp: "PT(TransformTable)", bycopy, pure, inheritable, header: "transformTable.h".} = object of TypedWritableReferenceCount

proc toTransformTable*(_: type(nil)): TransformTable {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TransformTable], obj: TypedObject): TransformTable {.importcpp: "DCAST(TransformTable, @)".}

type TransformBlend* {.importcpp: "TransformBlend", pure, inheritable, header: "transformBlend.h".} = object

type TransformBlendTable* {.importcpp: "PT(TransformBlendTable)", bycopy, pure, inheritable, header: "transformBlendTable.h".} = object of CopyOnWriteObject

proc toTransformBlendTable*(_: type(nil)): TransformBlendTable {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TransformBlendTable], obj: TypedObject): TransformBlendTable {.importcpp: "DCAST(TransformBlendTable, @)".}

type SliderTable* {.importcpp: "PT(SliderTable)", bycopy, pure, inheritable, header: "sliderTable.h".} = object of TypedWritableReferenceCount

proc toSliderTable*(_: type(nil)): SliderTable {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SliderTable], obj: TypedObject): SliderTable {.importcpp: "DCAST(SliderTable, @)".}

type GeomVertexData* {.importcpp: "PT(GeomVertexData)", bycopy, pure, inheritable, header: "geomVertexData.h".} = object of CopyOnWriteObject

proc upcastToGeomEnums*(_: typedesc[GeomVertexData]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeomVertexData*(_: type(nil)): GeomVertexData {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomVertexData], obj: TypedObject): GeomVertexData {.importcpp: "DCAST(GeomVertexData, @)".}

type AnimateVerticesRequest* {.importcpp: "PT(AnimateVerticesRequest)", bycopy, pure, inheritable, header: "animateVerticesRequest.h".} = object of AsyncTask

proc toAnimateVerticesRequest*(_: type(nil)): AnimateVerticesRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AnimateVerticesRequest], obj: TypedObject): AnimateVerticesRequest {.importcpp: "DCAST(AnimateVerticesRequest, @)".}

type SavedContext* {.importcpp: "SavedContext*", bycopy, pure, inheritable, header: "savedContext.h".} = object of TypedObject

proc toSavedContext*(_: type(nil)): SavedContext {.importcpp: "(nullptr)".}

type BufferContext* {.importcpp: "BufferContext*", bycopy, pure, inheritable, header: "bufferContext.h".} = object of SavedContext

proc toBufferContext*(_: type(nil)): BufferContext {.importcpp: "(nullptr)".}

type GeomPrimitive* {.importcpp: "PT(GeomPrimitive)", bycopy, pure, inheritable, header: "geomPrimitive.h".} = object of CopyOnWriteObject

proc upcastToGeomEnums*(_: typedesc[GeomPrimitive]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeomPrimitive*(_: type(nil)): GeomPrimitive {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomPrimitive], obj: TypedObject): GeomPrimitive {.importcpp: "DCAST(GeomPrimitive, @)".}

type TextureStage* {.importcpp: "PT(TextureStage)", bycopy, pure, inheritable, header: "textureStage.h".} = object of TypedWritableReferenceCount

proc toTextureStage*(_: type(nil)): TextureStage {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TextureStage], obj: TypedObject): TextureStage {.importcpp: "DCAST(TextureStage, @)".}

type TextureStage_Mode {.importcpp: "TextureStage::Mode", pure, header: "textureStage.h".} = enum
  M_modulate = 0
  M_decal = 1
  M_blend = 2
  M_replace = 3
  M_add = 4
  M_combine = 5
  M_blendColorScale = 6
  M_modulateGlow = 7
  M_modulateGloss = 8
  M_normal = 9
  M_normalHeight = 10
  M_glow = 11
  M_gloss = 12
  M_height = 13
  M_selector = 14
  M_normalGloss = 15
  M_emission = 16

template Mode*(_: typedesc[TextureStage]): typedesc[TextureStage_Mode] = typedesc[TextureStage_Mode]
template Mode*(_: typedesc[TextureStage], value: untyped): TextureStage_Mode = TextureStage_Mode(value)

template M_modulate*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_modulate
template M_decal*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_decal
template M_blend*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_blend
template M_replace*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_replace
template M_add*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_add
template M_combine*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_combine
template M_blendColorScale*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_blendColorScale
template M_modulateGlow*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_modulateGlow
template M_modulateGloss*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_modulateGloss
template M_normal*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_normal
template M_normalHeight*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_normalHeight
template M_glow*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_glow
template M_gloss*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_gloss
template M_height*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_height
template M_selector*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_selector
template M_normalGloss*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_normalGloss
template M_emission*(_: typedesc[TextureStage]): TextureStage_Mode = TextureStage_Mode.M_emission

type TextureStage_CombineMode {.importcpp: "TextureStage::CombineMode", pure, header: "textureStage.h".} = enum
  CM_undefined = 0
  CM_replace = 1
  CM_modulate = 2
  CM_add = 3
  CM_addSigned = 4
  CM_interpolate = 5
  CM_subtract = 6
  CM_dot3Rgb = 7
  CM_dot3Rgba = 8

template CombineMode*(_: typedesc[TextureStage]): typedesc[TextureStage_CombineMode] = typedesc[TextureStage_CombineMode]
template CombineMode*(_: typedesc[TextureStage], value: untyped): TextureStage_CombineMode = TextureStage_CombineMode(value)

template CM_undefined*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_undefined
template CM_replace*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_replace
template CM_modulate*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_modulate
template CM_add*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_add
template CM_addSigned*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_addSigned
template CM_interpolate*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_interpolate
template CM_subtract*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_subtract
template CM_dot3Rgb*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_dot3Rgb
template CM_dot3Rgba*(_: typedesc[TextureStage]): TextureStage_CombineMode = TextureStage_CombineMode.CM_dot3Rgba

type TextureStage_CombineSource {.importcpp: "TextureStage::CombineSource", pure, header: "textureStage.h".} = enum
  CS_undefined = 0
  CS_texture = 1
  CS_constant = 2
  CS_primaryColor = 3
  CS_previous = 4
  CS_constantColorScale = 5
  CS_lastSavedResult = 6

template CombineSource*(_: typedesc[TextureStage]): typedesc[TextureStage_CombineSource] = typedesc[TextureStage_CombineSource]
template CombineSource*(_: typedesc[TextureStage], value: untyped): TextureStage_CombineSource = TextureStage_CombineSource(value)

template CS_undefined*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_undefined
template CS_texture*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_texture
template CS_constant*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_constant
template CS_primaryColor*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_primaryColor
template CS_previous*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_previous
template CS_constantColorScale*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_constantColorScale
template CS_lastSavedResult*(_: typedesc[TextureStage]): TextureStage_CombineSource = TextureStage_CombineSource.CS_lastSavedResult

type TextureStage_CombineOperand {.importcpp: "TextureStage::CombineOperand", pure, header: "textureStage.h".} = enum
  CO_undefined = 0
  CO_srcColor = 1
  CO_oneMinusSrcColor = 2
  CO_srcAlpha = 3
  CO_oneMinusSrcAlpha = 4

template CombineOperand*(_: typedesc[TextureStage]): typedesc[TextureStage_CombineOperand] = typedesc[TextureStage_CombineOperand]
template CombineOperand*(_: typedesc[TextureStage], value: untyped): TextureStage_CombineOperand = TextureStage_CombineOperand(value)

template CO_undefined*(_: typedesc[TextureStage]): TextureStage_CombineOperand = TextureStage_CombineOperand.CO_undefined
template CO_srcColor*(_: typedesc[TextureStage]): TextureStage_CombineOperand = TextureStage_CombineOperand.CO_srcColor
template CO_oneMinusSrcColor*(_: typedesc[TextureStage]): TextureStage_CombineOperand = TextureStage_CombineOperand.CO_oneMinusSrcColor
template CO_srcAlpha*(_: typedesc[TextureStage]): TextureStage_CombineOperand = TextureStage_CombineOperand.CO_srcAlpha
template CO_oneMinusSrcAlpha*(_: typedesc[TextureStage]): TextureStage_CombineOperand = TextureStage_CombineOperand.CO_oneMinusSrcAlpha

type Geom* {.importcpp: "PT(Geom)", bycopy, pure, inheritable, header: "geom.h".} = object of CopyOnWriteObject

proc upcastToGeomEnums*(_: typedesc[Geom]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toGeom*(_: type(nil)): Geom {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Geom], obj: TypedObject): Geom {.importcpp: "DCAST(Geom, @)".}

type GeomContext* {.importcpp: "GeomContext", pure, inheritable, header: "geomContext.h".} = object of SavedContext

type GeomLines* {.importcpp: "PT(GeomLines)", bycopy, pure, inheritable, header: "geomLines.h".} = object of GeomPrimitive

proc toGeomLines*(_: type(nil)): GeomLines {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomLines], obj: TypedObject): GeomLines {.importcpp: "DCAST(GeomLines, @)".}

type GeomLinesAdjacency* {.importcpp: "PT(GeomLinesAdjacency)", bycopy, pure, inheritable, header: "geomLinesAdjacency.h".} = object of GeomPrimitive

proc toGeomLinesAdjacency*(_: type(nil)): GeomLinesAdjacency {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomLinesAdjacency], obj: TypedObject): GeomLinesAdjacency {.importcpp: "DCAST(GeomLinesAdjacency, @)".}

type GeomLinestrips* {.importcpp: "PT(GeomLinestrips)", bycopy, pure, inheritable, header: "geomLinestrips.h".} = object of GeomPrimitive

proc toGeomLinestrips*(_: type(nil)): GeomLinestrips {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomLinestrips], obj: TypedObject): GeomLinestrips {.importcpp: "DCAST(GeomLinestrips, @)".}

type GeomLinestripsAdjacency* {.importcpp: "PT(GeomLinestripsAdjacency)", bycopy, pure, inheritable, header: "geomLinestripsAdjacency.h".} = object of GeomPrimitive

proc toGeomLinestripsAdjacency*(_: type(nil)): GeomLinestripsAdjacency {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomLinestripsAdjacency], obj: TypedObject): GeomLinestripsAdjacency {.importcpp: "DCAST(GeomLinestripsAdjacency, @)".}

type GeomPatches* {.importcpp: "PT(GeomPatches)", bycopy, pure, inheritable, header: "geomPatches.h".} = object of GeomPrimitive

proc toGeomPatches*(_: type(nil)): GeomPatches {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomPatches], obj: TypedObject): GeomPatches {.importcpp: "DCAST(GeomPatches, @)".}

type GeomPoints* {.importcpp: "PT(GeomPoints)", bycopy, pure, inheritable, header: "geomPoints.h".} = object of GeomPrimitive

proc toGeomPoints*(_: type(nil)): GeomPoints {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomPoints], obj: TypedObject): GeomPoints {.importcpp: "DCAST(GeomPoints, @)".}

type GeomTriangles* {.importcpp: "PT(GeomTriangles)", bycopy, pure, inheritable, header: "geomTriangles.h".} = object of GeomPrimitive

proc toGeomTriangles*(_: type(nil)): GeomTriangles {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomTriangles], obj: TypedObject): GeomTriangles {.importcpp: "DCAST(GeomTriangles, @)".}

type GeomTrianglesAdjacency* {.importcpp: "PT(GeomTrianglesAdjacency)", bycopy, pure, inheritable, header: "geomTrianglesAdjacency.h".} = object of GeomPrimitive

proc toGeomTrianglesAdjacency*(_: type(nil)): GeomTrianglesAdjacency {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomTrianglesAdjacency], obj: TypedObject): GeomTrianglesAdjacency {.importcpp: "DCAST(GeomTrianglesAdjacency, @)".}

type GeomTrifans* {.importcpp: "PT(GeomTrifans)", bycopy, pure, inheritable, header: "geomTrifans.h".} = object of GeomPrimitive

proc toGeomTrifans*(_: type(nil)): GeomTrifans {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomTrifans], obj: TypedObject): GeomTrifans {.importcpp: "DCAST(GeomTrifans, @)".}

type GeomTristrips* {.importcpp: "PT(GeomTristrips)", bycopy, pure, inheritable, header: "geomTristrips.h".} = object of GeomPrimitive

proc toGeomTristrips*(_: type(nil)): GeomTristrips {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomTristrips], obj: TypedObject): GeomTristrips {.importcpp: "DCAST(GeomTristrips, @)".}

type GeomTristripsAdjacency* {.importcpp: "PT(GeomTristripsAdjacency)", bycopy, pure, inheritable, header: "geomTristripsAdjacency.h".} = object of GeomPrimitive

proc toGeomTristripsAdjacency*(_: type(nil)): GeomTristripsAdjacency {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomTristripsAdjacency], obj: TypedObject): GeomTristripsAdjacency {.importcpp: "DCAST(GeomTristripsAdjacency, @)".}

type GeomVertexReader* {.importcpp: "GeomVertexReader", pure, inheritable, header: "geomVertexReader.h".} = object of GeomEnums

type GeomVertexWriter* {.importcpp: "GeomVertexWriter", pure, inheritable, header: "geomVertexWriter.h".} = object of GeomEnums

type GeomVertexRewriter* {.importcpp: "GeomVertexRewriter", pure, inheritable, header: "geomVertexRewriter.h".} = object of GeomVertexWriter

proc upcastToGeomVertexReader*(_: typedesc[GeomVertexRewriter]): typedesc[GeomVertexReader] = typedesc[GeomVertexReader]

type SamplerState* {.importcpp: "SamplerState", pure, inheritable, header: "samplerState.h".} = object

type SamplerState_FilterType {.importcpp: "SamplerState::FilterType", pure, header: "samplerState.h".} = enum
  FT_nearest = 0
  FT_linear = 1
  FT_nearestMipmapNearest = 2
  FT_linearMipmapNearest = 3
  FT_nearestMipmapLinear = 4
  FT_linearMipmapLinear = 5
  FT_shadow = 6
  FT_default = 7
  FT_invalid = 8

template FilterType*(_: typedesc[SamplerState]): typedesc[SamplerState_FilterType] = typedesc[SamplerState_FilterType]
template FilterType*(_: typedesc[SamplerState], value: untyped): SamplerState_FilterType = SamplerState_FilterType(value)

template FT_nearest*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_nearest
template FT_linear*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_linear
template FT_nearestMipmapNearest*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_nearestMipmapNearest
template FT_linearMipmapNearest*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_linearMipmapNearest
template FT_nearestMipmapLinear*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_nearestMipmapLinear
template FT_linearMipmapLinear*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_linearMipmapLinear
template FT_shadow*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_shadow
template FT_default*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_default
template FT_invalid*(_: typedesc[SamplerState]): SamplerState_FilterType = SamplerState_FilterType.FT_invalid

type SamplerState_WrapMode {.importcpp: "SamplerState::WrapMode", pure, header: "samplerState.h".} = enum
  WM_clamp = 0
  WM_repeat = 1
  WM_mirror = 2
  WM_mirrorOnce = 3
  WM_borderColor = 4
  WM_invalid = 5

template WrapMode*(_: typedesc[SamplerState]): typedesc[SamplerState_WrapMode] = typedesc[SamplerState_WrapMode]
template WrapMode*(_: typedesc[SamplerState], value: untyped): SamplerState_WrapMode = SamplerState_WrapMode(value)

template WM_clamp*(_: typedesc[SamplerState]): SamplerState_WrapMode = SamplerState_WrapMode.WM_clamp
template WM_repeat*(_: typedesc[SamplerState]): SamplerState_WrapMode = SamplerState_WrapMode.WM_repeat
template WM_mirror*(_: typedesc[SamplerState]): SamplerState_WrapMode = SamplerState_WrapMode.WM_mirror
template WM_mirrorOnce*(_: typedesc[SamplerState]): SamplerState_WrapMode = SamplerState_WrapMode.WM_mirrorOnce
template WM_borderColor*(_: typedesc[SamplerState]): SamplerState_WrapMode = SamplerState_WrapMode.WM_borderColor
template WM_invalid*(_: typedesc[SamplerState]): SamplerState_WrapMode = SamplerState_WrapMode.WM_invalid

type Shader* {.importcpp: "PT(Shader)", bycopy, pure, inheritable, header: "shader.h".} = object of TypedWritableReferenceCount

proc toShader*(_: type(nil)): Shader {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Shader], obj: TypedObject): Shader {.importcpp: "DCAST(Shader, @)".}

type Shader_ShaderLanguage {.importcpp: "Shader::ShaderLanguage", pure, header: "shader.h".} = enum
  SL_none = 0
  SL_Cg = 1
  SL_GLSL = 2
  SL_HLSL = 3
  SL_SPIRV = 4

template ShaderLanguage*(_: typedesc[Shader]): typedesc[Shader_ShaderLanguage] = typedesc[Shader_ShaderLanguage]
template ShaderLanguage*(_: typedesc[Shader], value: untyped): Shader_ShaderLanguage = Shader_ShaderLanguage(value)

template SL_none*(_: typedesc[Shader]): Shader_ShaderLanguage = Shader_ShaderLanguage.SL_none
template SL_Cg*(_: typedesc[Shader]): Shader_ShaderLanguage = Shader_ShaderLanguage.SL_Cg
template SL_GLSL*(_: typedesc[Shader]): Shader_ShaderLanguage = Shader_ShaderLanguage.SL_GLSL
template SL_HLSL*(_: typedesc[Shader]): Shader_ShaderLanguage = Shader_ShaderLanguage.SL_HLSL
template SL_SPIRV*(_: typedesc[Shader]): Shader_ShaderLanguage = Shader_ShaderLanguage.SL_SPIRV

type Shader_ShaderType {.importcpp: "Shader::ShaderType", pure, header: "shader.h".} = enum
  ST_none = 0
  ST_vertex = 1
  ST_fragment = 2
  ST_geometry = 3
  ST_tessControl = 4
  ST_tessEvaluation = 5
  ST_compute = 6
  ST_COUNT = 7

template ShaderType*(_: typedesc[Shader]): typedesc[Shader_ShaderType] = typedesc[Shader_ShaderType]
template ShaderType*(_: typedesc[Shader], value: untyped): Shader_ShaderType = Shader_ShaderType(value)

template ST_none*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_none
template ST_vertex*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_vertex
template ST_fragment*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_fragment
template ST_geometry*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_geometry
template ST_tessControl*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_tessControl
template ST_tessEvaluation*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_tessEvaluation
template ST_compute*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_compute
template ST_COUNT*(_: typedesc[Shader]): Shader_ShaderType = Shader_ShaderType.ST_COUNT

type Shader_AutoShaderSwitch {.importcpp: "Shader::AutoShaderSwitch", pure, header: "shader.h".} = enum
  AS_normal = 1
  AS_glow = 2
  AS_gloss = 4
  AS_ramp = 8
  AS_shadow = 16

template AutoShaderSwitch*(_: typedesc[Shader]): typedesc[Shader_AutoShaderSwitch] = typedesc[Shader_AutoShaderSwitch]
template AutoShaderSwitch*(_: typedesc[Shader], value: untyped): Shader_AutoShaderSwitch = Shader_AutoShaderSwitch(value)

template AS_normal*(_: typedesc[Shader]): Shader_AutoShaderSwitch = Shader_AutoShaderSwitch.AS_normal
template AS_glow*(_: typedesc[Shader]): Shader_AutoShaderSwitch = Shader_AutoShaderSwitch.AS_glow
template AS_gloss*(_: typedesc[Shader]): Shader_AutoShaderSwitch = Shader_AutoShaderSwitch.AS_gloss
template AS_ramp*(_: typedesc[Shader]): Shader_AutoShaderSwitch = Shader_AutoShaderSwitch.AS_ramp
template AS_shadow*(_: typedesc[Shader]): Shader_AutoShaderSwitch = Shader_AutoShaderSwitch.AS_shadow

type Shader_AutoShaderBit {.importcpp: "Shader::AutoShaderBit", pure, header: "shader.h".} = enum
  bitAutoShaderNormal = 0
  bitAutoShaderGlow = 1
  bitAutoShaderGloss = 2
  bitAutoShaderRamp = 3
  bitAutoShaderShadow = 4

template AutoShaderBit*(_: typedesc[Shader]): typedesc[Shader_AutoShaderBit] = typedesc[Shader_AutoShaderBit]
template AutoShaderBit*(_: typedesc[Shader], value: untyped): Shader_AutoShaderBit = Shader_AutoShaderBit(value)

template bitAutoShaderNormal*(_: typedesc[Shader]): Shader_AutoShaderBit = Shader_AutoShaderBit.bitAutoShaderNormal
template bitAutoShaderGlow*(_: typedesc[Shader]): Shader_AutoShaderBit = Shader_AutoShaderBit.bitAutoShaderGlow
template bitAutoShaderGloss*(_: typedesc[Shader]): Shader_AutoShaderBit = Shader_AutoShaderBit.bitAutoShaderGloss
template bitAutoShaderRamp*(_: typedesc[Shader]): Shader_AutoShaderBit = Shader_AutoShaderBit.bitAutoShaderRamp
template bitAutoShaderShadow*(_: typedesc[Shader]): Shader_AutoShaderBit = Shader_AutoShaderBit.bitAutoShaderShadow

type ShaderBuffer* {.importcpp: "PT(ShaderBuffer)", bycopy, pure, inheritable, header: "shaderBuffer.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[ShaderBuffer]): typedesc[Namable] = typedesc[Namable]
proc upcastToGeomEnums*(_: typedesc[ShaderBuffer]): typedesc[GeomEnums] = typedesc[GeomEnums]

proc toShaderBuffer*(_: type(nil)): ShaderBuffer {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ShaderBuffer], obj: TypedObject): ShaderBuffer {.importcpp: "DCAST(ShaderBuffer, @)".}

type PreparedGraphicsObjects* {.importcpp: "PT(PreparedGraphicsObjects)", bycopy, pure, inheritable, header: "preparedGraphicsObjects.h".} = object of ReferenceCount

proc toPreparedGraphicsObjects*(_: type(nil)): PreparedGraphicsObjects {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PreparedGraphicsObjects], obj: TypedObject): PreparedGraphicsObjects {.importcpp: "DCAST(PreparedGraphicsObjects, @)".}

type IndexBufferContext* {.importcpp: "IndexBufferContext", pure, inheritable, header: "indexBufferContext.h".} = object of BufferContext

proc upcastToAdaptiveLruPage*(_: typedesc[IndexBufferContext]): typedesc[AdaptiveLruPage] = typedesc[AdaptiveLruPage]

type Lens* {.importcpp: "PT(Lens)", bycopy, pure, inheritable, header: "lens.h".} = object of TypedWritableReferenceCount

proc toLens*(_: type(nil)): Lens {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Lens], obj: TypedObject): Lens {.importcpp: "DCAST(Lens, @)".}

type Lens_StereoChannel {.importcpp: "Lens::StereoChannel", pure, header: "lens.h".} = enum
  SC_mono = 0
  SC_left = 1
  SC_right = 2
  SC_stereo = 3

template StereoChannel*(_: typedesc[Lens]): typedesc[Lens_StereoChannel] = typedesc[Lens_StereoChannel]
template StereoChannel*(_: typedesc[Lens], value: untyped): Lens_StereoChannel = Lens_StereoChannel(value)

template SC_mono*(_: typedesc[Lens]): Lens_StereoChannel = Lens_StereoChannel.SC_mono
template SC_left*(_: typedesc[Lens]): Lens_StereoChannel = Lens_StereoChannel.SC_left
template SC_right*(_: typedesc[Lens]): Lens_StereoChannel = Lens_StereoChannel.SC_right
template SC_stereo*(_: typedesc[Lens]): Lens_StereoChannel = Lens_StereoChannel.SC_stereo

type Lens_FromCorners {.importcpp: "Lens::FromCorners", pure, header: "lens.h".} = enum
  FC_roll = 1
  FC_cameraPlane = 2
  FC_offAxis = 4
  FC_aspectRatio = 8
  FC_shear = 16
  FC_keystone = 32

template FromCorners*(_: typedesc[Lens]): typedesc[Lens_FromCorners] = typedesc[Lens_FromCorners]
template FromCorners*(_: typedesc[Lens], value: untyped): Lens_FromCorners = Lens_FromCorners(value)

template FC_roll*(_: typedesc[Lens]): Lens_FromCorners = Lens_FromCorners.FC_roll
template FC_cameraPlane*(_: typedesc[Lens]): Lens_FromCorners = Lens_FromCorners.FC_cameraPlane
template FC_offAxis*(_: typedesc[Lens]): Lens_FromCorners = Lens_FromCorners.FC_offAxis
template FC_aspectRatio*(_: typedesc[Lens]): Lens_FromCorners = Lens_FromCorners.FC_aspectRatio
template FC_shear*(_: typedesc[Lens]): Lens_FromCorners = Lens_FromCorners.FC_shear
template FC_keystone*(_: typedesc[Lens]): Lens_FromCorners = Lens_FromCorners.FC_keystone

type Material* {.importcpp: "PT(Material)", bycopy, pure, inheritable, header: "material.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[Material]): typedesc[Namable] = typedesc[Namable]

proc toMaterial*(_: type(nil)): Material {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Material], obj: TypedObject): Material {.importcpp: "DCAST(Material, @)".}

type MaterialPool* {.importcpp: "MaterialPool", pure, inheritable, header: "materialPool.h".} = object

type MatrixLens* {.importcpp: "PT(MatrixLens)", bycopy, pure, inheritable, header: "matrixLens.h".} = object of Lens

proc toMatrixLens*(_: type(nil)): MatrixLens {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MatrixLens], obj: TypedObject): MatrixLens {.importcpp: "DCAST(MatrixLens, @)".}

type OrthographicLens* {.importcpp: "PT(OrthographicLens)", bycopy, pure, inheritable, header: "orthographicLens.h".} = object of Lens

proc toOrthographicLens*(_: type(nil)): OrthographicLens {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[OrthographicLens], obj: TypedObject): OrthographicLens {.importcpp: "DCAST(OrthographicLens, @)".}

type ParamTextureSampler* {.importcpp: "PT(ParamTextureSampler)", bycopy, pure, inheritable, header: "paramTexture.h".} = object of ParamValueBase

proc toParamTextureSampler*(_: type(nil)): ParamTextureSampler {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParamTextureSampler], obj: TypedObject): ParamTextureSampler {.importcpp: "DCAST(ParamTextureSampler, @)".}

type ParamTextureImage* {.importcpp: "PT(ParamTextureImage)", bycopy, pure, inheritable, header: "paramTexture.h".} = object of ParamValueBase

proc toParamTextureImage*(_: type(nil)): ParamTextureImage {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParamTextureImage], obj: TypedObject): ParamTextureImage {.importcpp: "DCAST(ParamTextureImage, @)".}

type PerspectiveLens* {.importcpp: "PT(PerspectiveLens)", bycopy, pure, inheritable, header: "perspectiveLens.h".} = object of Lens

proc toPerspectiveLens*(_: type(nil)): PerspectiveLens {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PerspectiveLens], obj: TypedObject): PerspectiveLens {.importcpp: "DCAST(PerspectiveLens, @)".}

type TextureReloadRequest* {.importcpp: "PT(TextureReloadRequest)", bycopy, pure, inheritable, header: "textureReloadRequest.h".} = object of AsyncTask

proc toTextureReloadRequest*(_: type(nil)): TextureReloadRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TextureReloadRequest], obj: TypedObject): TextureReloadRequest {.importcpp: "DCAST(TextureReloadRequest, @)".}

type TextureContext* {.importcpp: "TextureContext", pure, inheritable, header: "textureContext.h".} = object of BufferContext

proc upcastToAdaptiveLruPage*(_: typedesc[TextureContext]): typedesc[AdaptiveLruPage] = typedesc[AdaptiveLruPage]

type ShaderContext* {.importcpp: "ShaderContext", pure, inheritable, header: "shaderContext.h".} = object of SavedContext

type UserVertexSlider* {.importcpp: "PT(UserVertexSlider)", bycopy, pure, inheritable, header: "userVertexSlider.h".} = object of VertexSlider

proc toUserVertexSlider*(_: type(nil)): UserVertexSlider {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[UserVertexSlider], obj: TypedObject): UserVertexSlider {.importcpp: "DCAST(UserVertexSlider, @)".}

type UserVertexTransform* {.importcpp: "PT(UserVertexTransform)", bycopy, pure, inheritable, header: "userVertexTransform.h".} = object of VertexTransform

proc toUserVertexTransform*(_: type(nil)): UserVertexTransform {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[UserVertexTransform], obj: TypedObject): UserVertexTransform {.importcpp: "DCAST(UserVertexTransform, @)".}

type VideoTexture* {.importcpp: "PT(VideoTexture)", bycopy, pure, inheritable, header: "videoTexture.h".} = object of Texture

proc upcastToAnimInterface*(_: typedesc[VideoTexture]): typedesc[AnimInterface] = typedesc[AnimInterface]

proc toVideoTexture*(_: type(nil)): VideoTexture {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[VideoTexture], obj: TypedObject): VideoTexture {.importcpp: "DCAST(VideoTexture, @)".}

type VertexBufferContext* {.importcpp: "VertexBufferContext", pure, inheritable, header: "vertexBufferContext.h".} = object of BufferContext

proc upcastToAdaptiveLruPage*(_: typedesc[VertexBufferContext]): typedesc[AdaptiveLruPage] = typedesc[AdaptiveLruPage]

type TextureCollection* {.importcpp: "TextureCollection", pure, inheritable, header: "textureCollection.h".} = object

type TexturePool* {.importcpp: "TexturePool", pure, inheritable, header: "texturePool.h".} = object

type TexturePeeker* {.importcpp: "PT(TexturePeeker)", bycopy, pure, inheritable, header: "texturePeeker.h".} = object of ReferenceCount

proc toTexturePeeker*(_: type(nil)): TexturePeeker {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TexturePeeker], obj: TypedObject): TexturePeeker {.importcpp: "DCAST(TexturePeeker, @)".}

type TextureStagePool* {.importcpp: "TextureStagePool", pure, inheritable, header: "textureStagePool.h".} = object

type TextureStagePool_Mode {.importcpp: "TextureStagePool::Mode", pure, header: "textureStagePool.h".} = enum
  M_none = 0
  M_name = 1
  M_unique = 2

template Mode*(_: typedesc[TextureStagePool]): typedesc[TextureStagePool_Mode] = typedesc[TextureStagePool_Mode]
template Mode*(_: typedesc[TextureStagePool], value: untyped): TextureStagePool_Mode = TextureStagePool_Mode(value)

template M_none*(_: typedesc[TextureStagePool]): TextureStagePool_Mode = TextureStagePool_Mode.M_none
template M_name*(_: typedesc[TextureStagePool]): TextureStagePool_Mode = TextureStagePool_Mode.M_name
template M_unique*(_: typedesc[TextureStagePool]): TextureStagePool_Mode = TextureStagePool_Mode.M_unique

type MathNumbers* {.importcpp: "MathNumbers", pure, inheritable, header: "mathNumbers.h".} = object

type LVecBase2f* {.importcpp: "WrappedLVecBase2f", header: wrappedVec2Code, pure, inheritable.} = object
  x*: float32
  y*: float32

type LVecBase2d* {.importcpp: "WrappedLVecBase2d", header: wrappedVec2Code, pure, inheritable.} = object
  x*: float64
  y*: float64

type LVecBase2i* {.importcpp: "WrappedLVecBase2i", header: wrappedVec2Code, pure, inheritable.} = object
  x*: int32
  y*: int32

type LVector2f* {.importcpp: "WrappedLVector2f", header: wrappedVec2Code, pure, inheritable.} = object of LVecBase2f

type LVector2d* {.importcpp: "WrappedLVector2d", header: wrappedVec2Code, pure, inheritable.} = object of LVecBase2d

type LVector2i* {.importcpp: "WrappedLVector2i", header: wrappedVec2Code, pure, inheritable.} = object of LVecBase2i

type LPoint2f* {.importcpp: "WrappedLPoint2f", header: wrappedVec2Code, pure, inheritable.} = object of LVecBase2f

type LPoint2d* {.importcpp: "WrappedLPoint2d", header: wrappedVec2Code, pure, inheritable.} = object of LVecBase2d

type LPoint2i* {.importcpp: "WrappedLPoint2i", header: wrappedVec2Code, pure, inheritable.} = object of LVecBase2i

type LVecBase3f* {.importcpp: "WrappedLVecBase3f", header: wrappedVec3Code, pure, inheritable.} = object
  x*: float32
  y*: float32
  z*: float32

type LVecBase3d* {.importcpp: "WrappedLVecBase3d", header: wrappedVec3Code, pure, inheritable.} = object
  x*: float64
  y*: float64
  z*: float64

type LVecBase3i* {.importcpp: "WrappedLVecBase3i", header: wrappedVec3Code, pure, inheritable.} = object
  x*: int32
  y*: int32
  z*: int32

type CoordinateSystem* {.importcpp: "CoordinateSystem", header: "coordinateSystem.h".} = enum
  CS_default = 0
  CS_zupRight = 1
  CS_yupRight = 2
  CS_zupLeft = 3
  CS_yupLeft = 4
  CS_invalid = 5

type LVector3f* {.importcpp: "WrappedLVector3f", header: wrappedVec3Code, pure, inheritable.} = object of LVecBase3f

type LVector3d* {.importcpp: "WrappedLVector3d", header: wrappedVec3Code, pure, inheritable.} = object of LVecBase3d

type LVector3i* {.importcpp: "WrappedLVector3i", header: wrappedVec3Code, pure, inheritable.} = object of LVecBase3i

type LPoint3f* {.importcpp: "WrappedLPoint3f", header: wrappedVec3Code, pure, inheritable.} = object of LVecBase3f

type LPoint3d* {.importcpp: "WrappedLPoint3d", header: wrappedVec3Code, pure, inheritable.} = object of LVecBase3d

type LPoint3i* {.importcpp: "WrappedLPoint3i", header: wrappedVec3Code, pure, inheritable.} = object of LVecBase3i

type LVecBase4f* {.importcpp: "WrappedLVecBase4f", header: wrappedVec4Code, pure, inheritable.} = object
  x*: float32
  y*: float32
  z*: float32
  w*: float32

type UnalignedLVecBase4f* {.importcpp: "WrappedUnalignedLVecBase4f", header: wrappedVec4Code, pure, inheritable.} = object
  x*: float32
  y*: float32
  z*: float32
  w*: float32

type LVecBase4d* {.importcpp: "WrappedLVecBase4d", header: wrappedVec4Code, pure, inheritable.} = object
  x*: float64
  y*: float64
  z*: float64
  w*: float64

type UnalignedLVecBase4d* {.importcpp: "WrappedUnalignedLVecBase4d", header: wrappedVec4Code, pure, inheritable.} = object
  x*: float64
  y*: float64
  z*: float64
  w*: float64

type LVecBase4i* {.importcpp: "WrappedLVecBase4i", header: wrappedVec4Code, pure, inheritable.} = object
  x*: int32
  y*: int32
  z*: int32
  w*: int32

type UnalignedLVecBase4i* {.importcpp: "WrappedUnalignedLVecBase4i", header: wrappedVec4Code, pure, inheritable.} = object
  x*: int32
  y*: int32
  z*: int32
  w*: int32

type LVector4f* {.importcpp: "WrappedLVector4f", header: wrappedVec4Code, pure, inheritable.} = object of LVecBase4f

type LVector4d* {.importcpp: "WrappedLVector4d", header: wrappedVec4Code, pure, inheritable.} = object of LVecBase4d

type LVector4i* {.importcpp: "WrappedLVector4i", header: wrappedVec4Code, pure, inheritable.} = object of LVecBase4i

type LPoint4f* {.importcpp: "WrappedLPoint4f", header: wrappedVec4Code, pure, inheritable.} = object of LVecBase4f

type LPoint4d* {.importcpp: "WrappedLPoint4d", header: wrappedVec4Code, pure, inheritable.} = object of LVecBase4d

type LPoint4i* {.importcpp: "WrappedLPoint4i", header: wrappedVec4Code, pure, inheritable.} = object of LVecBase4i

type LMatrix3f* {.importcpp: "LMatrix3f", pure, inheritable, header: "lmatrix.h".} = object

type LMatrix4f* {.importcpp: "LMatrix4f", pure, inheritable, header: "lmatrix.h".} = object

type UnalignedLMatrix4f* {.importcpp: "UnalignedLMatrix4f", pure, inheritable, header: "lmatrix.h".} = object

type LMatrix3d* {.importcpp: "LMatrix3d", pure, inheritable, header: "lmatrix.h".} = object

type LMatrix4d* {.importcpp: "LMatrix4d", pure, inheritable, header: "lmatrix.h".} = object

type UnalignedLMatrix4d* {.importcpp: "UnalignedLMatrix4d", pure, inheritable, header: "lmatrix.h".} = object

type LQuaternionf* {.importcpp: "LQuaternionf", pure, inheritable, header: "lquaternion.h".} = object of LVecBase4f

type LQuaterniond* {.importcpp: "LQuaterniond", pure, inheritable, header: "lquaternion.h".} = object of LVecBase4d

type LRotationf* {.importcpp: "LRotationf", pure, inheritable, header: "lrotation.h".} = object of LQuaternionf

type LRotationd* {.importcpp: "LRotationd", pure, inheritable, header: "lrotation.h".} = object of LQuaterniond

type LOrientationf* {.importcpp: "LOrientationf", pure, inheritable, header: "lorientation.h".} = object of LQuaternionf

type LOrientationd* {.importcpp: "LOrientationd", pure, inheritable, header: "lorientation.h".} = object of LQuaterniond

type LVertexf* = LPoint3f

type LNormalf* = LVector3f

type LTexCoordf* = LPoint2f

type LTexCoord3f* = LPoint3f

type LColorf* = LVecBase4f

type LRGBColorf* = LVecBase3f

type LVertexd* = LPoint3d

type LNormald* = LVector3d

type LTexCoordd* = LPoint2d

type LTexCoord3d* = LPoint3d

type LColord* = LVecBase4d

type LRGBColord* = LVecBase3d

type Mat4F* = LMatrix4f

type Mat3F* = LMatrix3f

type VBase4F* = LVecBase4f

type Vec4F* = LVector4f

type Point4F* = LPoint4f

type VBase3F* = LVecBase3f

type Vec3F* = LVector3f

type Point3F* = LPoint3f

type VBase2F* = LVecBase2f

type Vec2F* = LVector2f

type Point2F* = LPoint2f

type QuatF* = LQuaternionf

type Mat4D* = LMatrix4d

type Mat3D* = LMatrix3d

type VBase4D* = LVecBase4d

type Vec4D* = LVector4d

type Point4D* = LPoint4d

type VBase3D* = LVecBase3d

type Vec3D* = LVector3d

type Point3D* = LPoint3d

type VBase2D* = LVecBase2d

type Vec2D* = LVector2d

type Point2D* = LPoint2d

type QuatD* = LQuaterniond

type LVecBase2* = LVecBase2f

type LPoint2* = LPoint2f

type LVector2* = LVector2f

type LVecBase3* = LVecBase3f

type LPoint3* = LPoint3f

type LVector3* = LVector3f

type LVecBase4* = LVecBase4f

type LPoint4* = LPoint4f

type LVector4* = LVector4f

type LQuaternion* = LQuaternionf

type LRotation* = LRotationf

type LOrientation* = LOrientationf

type LMatrix3* = LMatrix3f

type LMatrix4* = LMatrix4f

type LVertex* = LVertexf

type LNormal* = LNormalf

type LTexCoord* = LTexCoordf

type LTexCoord3* = LTexCoord3f

type LColor* = LColorf

type LRGBColor* = LRGBColorf

type UnalignedLVecBase4* = UnalignedLVecBase4f

type UnalignedLMatrix4* = UnalignedLMatrix4f

type Mat4* = LMatrix4f

type Mat3* = LMatrix3f

type VBase4* = LVecBase4f

type Vec4* = LVector4f

type Point4* = LPoint4f

type VBase3* = LVecBase3f

type Vec3* = LVector3f

type Point3* = LPoint3f

type VBase2* = LVecBase2f

type Vec2* = LVector2f

type Point2* = LPoint2f

type Quat* = LQuaternionf

type ConfigVariableColor* {.importcpp: "ConfigVariableColor", pure, inheritable, header: "configVariableColor.h".} = object of ConfigVariable

type BoundingVolume* {.importcpp: "PT(BoundingVolume)", bycopy, pure, inheritable, header: "boundingVolume.h".} = object of TypedReferenceCount

proc toBoundingVolume*(_: type(nil)): BoundingVolume {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BoundingVolume], obj: TypedObject): BoundingVolume {.importcpp: "DCAST(BoundingVolume, @)".}

type BoundingVolume_IntersectionFlags {.importcpp: "BoundingVolume::IntersectionFlags", pure, header: "boundingVolume.h".} = enum
  IF_noIntersection = 0
  IF_possible = 1
  IF_some = 2
  IF_all = 4
  IF_dontUnderstand = 8

template IntersectionFlags*(_: typedesc[BoundingVolume]): typedesc[BoundingVolume_IntersectionFlags] = typedesc[BoundingVolume_IntersectionFlags]
template IntersectionFlags*(_: typedesc[BoundingVolume], value: untyped): BoundingVolume_IntersectionFlags = BoundingVolume_IntersectionFlags(value)

template IF_noIntersection*(_: typedesc[BoundingVolume]): BoundingVolume_IntersectionFlags = BoundingVolume_IntersectionFlags.IF_noIntersection
template IF_possible*(_: typedesc[BoundingVolume]): BoundingVolume_IntersectionFlags = BoundingVolume_IntersectionFlags.IF_possible
template IF_some*(_: typedesc[BoundingVolume]): BoundingVolume_IntersectionFlags = BoundingVolume_IntersectionFlags.IF_some
template IF_all*(_: typedesc[BoundingVolume]): BoundingVolume_IntersectionFlags = BoundingVolume_IntersectionFlags.IF_all
template IF_dontUnderstand*(_: typedesc[BoundingVolume]): BoundingVolume_IntersectionFlags = BoundingVolume_IntersectionFlags.IF_dontUnderstand

type BoundingVolume_BoundsType {.importcpp: "BoundingVolume::BoundsType", pure, header: "boundingVolume.h".} = enum
  BT_default = 0
  BT_best = 1
  BT_sphere = 2
  BT_box = 3
  BT_fastest = 4

template BoundsType*(_: typedesc[BoundingVolume]): typedesc[BoundingVolume_BoundsType] = typedesc[BoundingVolume_BoundsType]
template BoundsType*(_: typedesc[BoundingVolume], value: untyped): BoundingVolume_BoundsType = BoundingVolume_BoundsType(value)

template BT_default*(_: typedesc[BoundingVolume]): BoundingVolume_BoundsType = BoundingVolume_BoundsType.BT_default
template BT_best*(_: typedesc[BoundingVolume]): BoundingVolume_BoundsType = BoundingVolume_BoundsType.BT_best
template BT_sphere*(_: typedesc[BoundingVolume]): BoundingVolume_BoundsType = BoundingVolume_BoundsType.BT_sphere
template BT_box*(_: typedesc[BoundingVolume]): BoundingVolume_BoundsType = BoundingVolume_BoundsType.BT_box
template BT_fastest*(_: typedesc[BoundingVolume]): BoundingVolume_BoundsType = BoundingVolume_BoundsType.BT_fastest

type GeometricBoundingVolume* {.importcpp: "PT(GeometricBoundingVolume)", bycopy, pure, inheritable, header: "geometricBoundingVolume.h".} = object of BoundingVolume

proc toGeometricBoundingVolume*(_: type(nil)): GeometricBoundingVolume {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeometricBoundingVolume], obj: TypedObject): GeometricBoundingVolume {.importcpp: "DCAST(GeometricBoundingVolume, @)".}

type FiniteBoundingVolume* {.importcpp: "PT(FiniteBoundingVolume)", bycopy, pure, inheritable, header: "finiteBoundingVolume.h".} = object of GeometricBoundingVolume

proc toFiniteBoundingVolume*(_: type(nil)): FiniteBoundingVolume {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FiniteBoundingVolume], obj: TypedObject): FiniteBoundingVolume {.importcpp: "DCAST(FiniteBoundingVolume, @)".}

type LParabolaf* {.importcpp: "LParabolaf", pure, inheritable, header: "parabola.h".} = object

type LParabolad* {.importcpp: "LParabolad", pure, inheritable, header: "parabola.h".} = object

type LParabola* = LParabolaf

type LPlanef* {.importcpp: "LPlanef", pure, inheritable, header: "plane.h".} = object of LVecBase4f

type LPlaned* {.importcpp: "LPlaned", pure, inheritable, header: "plane.h".} = object of LVecBase4d

type LPlane* = LPlanef

type PlaneF* = LPlanef

type PlaneD* = LPlaned

type Plane* = LPlanef

type BoundingBox* {.importcpp: "PT(BoundingBox)", bycopy, pure, inheritable, header: "boundingBox.h".} = object of FiniteBoundingVolume

proc toBoundingBox*(_: type(nil)): BoundingBox {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BoundingBox], obj: TypedObject): BoundingBox {.importcpp: "DCAST(BoundingBox, @)".}

type LFrustumf* {.importcpp: "LFrustumf", pure, inheritable, header: "frustum.h".} = object

type LFrustumd* {.importcpp: "LFrustumd", pure, inheritable, header: "frustum.h".} = object

type LFrustum* = LFrustumf

type FrustumF* = LFrustumf

type FrustumD* = LFrustumd

type Frustum* = LFrustumf

type BoundingHexahedron* {.importcpp: "PT(BoundingHexahedron)", bycopy, pure, inheritable, header: "boundingHexahedron.h".} = object of FiniteBoundingVolume

proc toBoundingHexahedron*(_: type(nil)): BoundingHexahedron {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BoundingHexahedron], obj: TypedObject): BoundingHexahedron {.importcpp: "DCAST(BoundingHexahedron, @)".}

type BoundingLine* {.importcpp: "PT(BoundingLine)", bycopy, pure, inheritable, header: "boundingLine.h".} = object of GeometricBoundingVolume

proc toBoundingLine*(_: type(nil)): BoundingLine {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BoundingLine], obj: TypedObject): BoundingLine {.importcpp: "DCAST(BoundingLine, @)".}

type BoundingPlane* {.importcpp: "PT(BoundingPlane)", bycopy, pure, inheritable, header: "boundingPlane.h".} = object of GeometricBoundingVolume

proc toBoundingPlane*(_: type(nil)): BoundingPlane {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BoundingPlane], obj: TypedObject): BoundingPlane {.importcpp: "DCAST(BoundingPlane, @)".}

type BoundingSphere* {.importcpp: "PT(BoundingSphere)", bycopy, pure, inheritable, header: "boundingSphere.h".} = object of FiniteBoundingVolume

proc toBoundingSphere*(_: type(nil)): BoundingSphere {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BoundingSphere], obj: TypedObject): BoundingSphere {.importcpp: "DCAST(BoundingSphere, @)".}

type IntersectionBoundingVolume* {.importcpp: "PT(IntersectionBoundingVolume)", bycopy, pure, inheritable, header: "intersectionBoundingVolume.h".} = object of GeometricBoundingVolume

proc toIntersectionBoundingVolume*(_: type(nil)): IntersectionBoundingVolume {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[IntersectionBoundingVolume], obj: TypedObject): IntersectionBoundingVolume {.importcpp: "DCAST(IntersectionBoundingVolume, @)".}

type Mersenne* {.importcpp: "Mersenne", pure, inheritable, header: "mersenne.h".} = object

type OmniBoundingVolume* {.importcpp: "PT(OmniBoundingVolume)", bycopy, pure, inheritable, header: "omniBoundingVolume.h".} = object of GeometricBoundingVolume

proc toOmniBoundingVolume*(_: type(nil)): OmniBoundingVolume {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[OmniBoundingVolume], obj: TypedObject): OmniBoundingVolume {.importcpp: "DCAST(OmniBoundingVolume, @)".}

type UnionBoundingVolume* {.importcpp: "PT(UnionBoundingVolume)", bycopy, pure, inheritable, header: "unionBoundingVolume.h".} = object of GeometricBoundingVolume

proc toUnionBoundingVolume*(_: type(nil)): UnionBoundingVolume {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[UnionBoundingVolume], obj: TypedObject): UnionBoundingVolume {.importcpp: "DCAST(UnionBoundingVolume, @)".}

type Randomizer* {.importcpp: "Randomizer", pure, inheritable, header: "randomizer.h".} = object

type PerlinNoise* {.importcpp: "PerlinNoise", pure, inheritable, header: "perlinNoise.h".} = object

type PerlinNoise2* {.importcpp: "PerlinNoise2", pure, inheritable, header: "perlinNoise2.h".} = object of PerlinNoise

type PerlinNoise3* {.importcpp: "PerlinNoise3", pure, inheritable, header: "perlinNoise3.h".} = object of PerlinNoise

type StackedPerlinNoise2* {.importcpp: "StackedPerlinNoise2", pure, inheritable, header: "stackedPerlinNoise2.h".} = object

type StackedPerlinNoise3* {.importcpp: "StackedPerlinNoise3", pure, inheritable, header: "stackedPerlinNoise3.h".} = object

type Triangulator* {.importcpp: "Triangulator", pure, inheritable, header: "triangulator.h".} = object

type Triangulator3* {.importcpp: "Triangulator3", pure, inheritable, header: "triangulator3.h".} = object of Triangulator

type ParametricCurve* {.importcpp: "PT(ParametricCurve)", bycopy, pure, inheritable, header: "parametricCurve.h".} = object of PandaNode

proc toParametricCurve*(_: type(nil)): ParametricCurve {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParametricCurve], obj: TypedObject): ParametricCurve {.importcpp: "DCAST(ParametricCurve, @)".}

type CubicCurveseg* {.importcpp: "PT(CubicCurveseg)", bycopy, pure, inheritable, header: "cubicCurveseg.h".} = object of ParametricCurve

proc toCubicCurveseg*(_: type(nil)): CubicCurveseg {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CubicCurveseg], obj: TypedObject): CubicCurveseg {.importcpp: "DCAST(CubicCurveseg, @)".}

type ParametricCurveCollection* {.importcpp: "PT(ParametricCurveCollection)", bycopy, pure, inheritable, header: "parametricCurveCollection.h".} = object of ReferenceCount

proc toParametricCurveCollection*(_: type(nil)): ParametricCurveCollection {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParametricCurveCollection], obj: TypedObject): ParametricCurveCollection {.importcpp: "DCAST(ParametricCurveCollection, @)".}

type CurveFitter* {.importcpp: "CurveFitter", pure, inheritable, header: "curveFitter.h".} = object

type PiecewiseCurve* {.importcpp: "PT(PiecewiseCurve)", bycopy, pure, inheritable, header: "piecewiseCurve.h".} = object of ParametricCurve

proc toPiecewiseCurve*(_: type(nil)): PiecewiseCurve {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PiecewiseCurve], obj: TypedObject): PiecewiseCurve {.importcpp: "DCAST(PiecewiseCurve, @)".}

type HermiteCurve* {.importcpp: "PT(HermiteCurve)", bycopy, pure, inheritable, header: "hermiteCurve.h".} = object of PiecewiseCurve

proc toHermiteCurve*(_: type(nil)): HermiteCurve {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[HermiteCurve], obj: TypedObject): HermiteCurve {.importcpp: "DCAST(HermiteCurve, @)".}

type NurbsCurveInterface* {.importcpp: "NurbsCurveInterface*", bycopy, pure, inheritable, header: "nurbsCurveInterface.h".} = object

proc toNurbsCurveInterface*(_: type(nil)): NurbsCurveInterface {.importcpp: "(nullptr)".}

type NurbsCurve* {.importcpp: "PT(NurbsCurve)", bycopy, pure, inheritable, header: "nurbsCurve.h".} = object of PiecewiseCurve

proc upcastToNurbsCurveInterface*(_: typedesc[NurbsCurve]): typedesc[NurbsCurveInterface] = typedesc[NurbsCurveInterface]

proc toNurbsCurve*(_: type(nil)): NurbsCurve {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NurbsCurve], obj: TypedObject): NurbsCurve {.importcpp: "DCAST(NurbsCurve, @)".}

type NurbsCurveResult* {.importcpp: "PT(NurbsCurveResult)", bycopy, pure, inheritable, header: "nurbsCurveResult.h".} = object of ReferenceCount

proc toNurbsCurveResult*(_: type(nil)): NurbsCurveResult {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NurbsCurveResult], obj: TypedObject): NurbsCurveResult {.importcpp: "DCAST(NurbsCurveResult, @)".}

type NurbsCurveEvaluator* {.importcpp: "PT(NurbsCurveEvaluator)", bycopy, pure, inheritable, header: "nurbsCurveEvaluator.h".} = object of ReferenceCount

proc toNurbsCurveEvaluator*(_: type(nil)): NurbsCurveEvaluator {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NurbsCurveEvaluator], obj: TypedObject): NurbsCurveEvaluator {.importcpp: "DCAST(NurbsCurveEvaluator, @)".}

type NurbsSurfaceResult* {.importcpp: "PT(NurbsSurfaceResult)", bycopy, pure, inheritable, header: "nurbsSurfaceResult.h".} = object of ReferenceCount

proc toNurbsSurfaceResult*(_: type(nil)): NurbsSurfaceResult {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NurbsSurfaceResult], obj: TypedObject): NurbsSurfaceResult {.importcpp: "DCAST(NurbsSurfaceResult, @)".}

type NurbsSurfaceEvaluator* {.importcpp: "PT(NurbsSurfaceEvaluator)", bycopy, pure, inheritable, header: "nurbsSurfaceEvaluator.h".} = object of ReferenceCount

proc toNurbsSurfaceEvaluator*(_: type(nil)): NurbsSurfaceEvaluator {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[NurbsSurfaceEvaluator], obj: TypedObject): NurbsSurfaceEvaluator {.importcpp: "DCAST(NurbsSurfaceEvaluator, @)".}

type RopeNode* {.importcpp: "PT(RopeNode)", bycopy, pure, inheritable, header: "ropeNode.h".} = object of PandaNode

proc toRopeNode*(_: type(nil)): RopeNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[RopeNode], obj: TypedObject): RopeNode {.importcpp: "DCAST(RopeNode, @)".}

type RopeNode_RenderMode {.importcpp: "RopeNode::RenderMode", pure, header: "ropeNode.h".} = enum
  RM_thread = 0
  RM_tape = 1
  RM_billboard = 2
  RM_tube = 3

template RenderMode*(_: typedesc[RopeNode]): typedesc[RopeNode_RenderMode] = typedesc[RopeNode_RenderMode]
template RenderMode*(_: typedesc[RopeNode], value: untyped): RopeNode_RenderMode = RopeNode_RenderMode(value)

template RM_thread*(_: typedesc[RopeNode]): RopeNode_RenderMode = RopeNode_RenderMode.RM_thread
template RM_tape*(_: typedesc[RopeNode]): RopeNode_RenderMode = RopeNode_RenderMode.RM_tape
template RM_billboard*(_: typedesc[RopeNode]): RopeNode_RenderMode = RopeNode_RenderMode.RM_billboard
template RM_tube*(_: typedesc[RopeNode]): RopeNode_RenderMode = RopeNode_RenderMode.RM_tube

type RopeNode_UVMode {.importcpp: "RopeNode::UVMode", pure, header: "ropeNode.h".} = enum
  UV_none = 0
  UV_parametric = 1
  UV_distance = 2
  UV_distance2 = 3

template UVMode*(_: typedesc[RopeNode]): typedesc[RopeNode_UVMode] = typedesc[RopeNode_UVMode]
template UVMode*(_: typedesc[RopeNode], value: untyped): RopeNode_UVMode = RopeNode_UVMode(value)

template UV_none*(_: typedesc[RopeNode]): RopeNode_UVMode = RopeNode_UVMode.UV_none
template UV_parametric*(_: typedesc[RopeNode]): RopeNode_UVMode = RopeNode_UVMode.UV_parametric
template UV_distance*(_: typedesc[RopeNode]): RopeNode_UVMode = RopeNode_UVMode.UV_distance
template UV_distance2*(_: typedesc[RopeNode]): RopeNode_UVMode = RopeNode_UVMode.UV_distance2

type RopeNode_NormalMode {.importcpp: "RopeNode::NormalMode", pure, header: "ropeNode.h".} = enum
  NM_none = 0
  NM_vertex = 1

template NormalMode*(_: typedesc[RopeNode]): typedesc[RopeNode_NormalMode] = typedesc[RopeNode_NormalMode]
template NormalMode*(_: typedesc[RopeNode], value: untyped): RopeNode_NormalMode = RopeNode_NormalMode(value)

template NM_none*(_: typedesc[RopeNode]): RopeNode_NormalMode = RopeNode_NormalMode.NM_none
template NM_vertex*(_: typedesc[RopeNode]): RopeNode_NormalMode = RopeNode_NormalMode.NM_vertex

type SheetNode* {.importcpp: "PT(SheetNode)", bycopy, pure, inheritable, header: "sheetNode.h".} = object of PandaNode

proc toSheetNode*(_: type(nil)): SheetNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[SheetNode], obj: TypedObject): SheetNode {.importcpp: "DCAST(SheetNode, @)".}

type pixel* {.importcpp: "pixel", pure, inheritable, header: "pnmimage_base.h".} = object
  r*: uint16
  g*: uint16
  b*: uint16

type xel* = pixel

type PNMFileType* {.importcpp: "PNMFileType", pure, inheritable, header: "pnmFileType.h".} = object of TypedWritable

type PNMFileTypeRegistry* {.importcpp: "PNMFileTypeRegistry", pure, inheritable, header: "pnmFileTypeRegistry.h".} = object

type PNMImageHeader* {.importcpp: "PNMImageHeader", pure, inheritable, header: "pnmImageHeader.h".} = object

type PNMImageHeader_ColorType {.importcpp: "PNMImageHeader::ColorType", pure, header: "pnmImageHeader.h".} = enum
  CT_invalid = 0
  CT_grayscale = 1
  CT_twoChannel = 2
  CT_color = 3
  CT_fourChannel = 4

template ColorType*(_: typedesc[PNMImageHeader]): typedesc[PNMImageHeader_ColorType] = typedesc[PNMImageHeader_ColorType]
template ColorType*(_: typedesc[PNMImageHeader], value: untyped): PNMImageHeader_ColorType = PNMImageHeader_ColorType(value)

template CT_invalid*(_: typedesc[PNMImageHeader]): PNMImageHeader_ColorType = PNMImageHeader_ColorType.CT_invalid
template CT_grayscale*(_: typedesc[PNMImageHeader]): PNMImageHeader_ColorType = PNMImageHeader_ColorType.CT_grayscale
template CT_twoChannel*(_: typedesc[PNMImageHeader]): PNMImageHeader_ColorType = PNMImageHeader_ColorType.CT_twoChannel
template CT_color*(_: typedesc[PNMImageHeader]): PNMImageHeader_ColorType = PNMImageHeader_ColorType.CT_color
template CT_fourChannel*(_: typedesc[PNMImageHeader]): PNMImageHeader_ColorType = PNMImageHeader_ColorType.CT_fourChannel

type PfmFile* {.importcpp: "PfmFile", pure, inheritable, header: "pfmFile.h".} = object of PNMImageHeader

type PNMBrush* {.importcpp: "PT(PNMBrush)", bycopy, pure, inheritable, header: "pnmBrush.h".} = object of ReferenceCount

proc toPNMBrush*(_: type(nil)): PNMBrush {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PNMBrush], obj: TypedObject): PNMBrush {.importcpp: "DCAST(PNMBrush, @)".}

type PNMBrush_BrushEffect {.importcpp: "PNMBrush::BrushEffect", pure, header: "pnmBrush.h".} = enum
  BE_set = 0
  BE_blend = 1
  BE_darken = 2
  BE_lighten = 3

template BrushEffect*(_: typedesc[PNMBrush]): typedesc[PNMBrush_BrushEffect] = typedesc[PNMBrush_BrushEffect]
template BrushEffect*(_: typedesc[PNMBrush], value: untyped): PNMBrush_BrushEffect = PNMBrush_BrushEffect(value)

template BE_set*(_: typedesc[PNMBrush]): PNMBrush_BrushEffect = PNMBrush_BrushEffect.BE_set
template BE_blend*(_: typedesc[PNMBrush]): PNMBrush_BrushEffect = PNMBrush_BrushEffect.BE_blend
template BE_darken*(_: typedesc[PNMBrush]): PNMBrush_BrushEffect = PNMBrush_BrushEffect.BE_darken
template BE_lighten*(_: typedesc[PNMBrush]): PNMBrush_BrushEffect = PNMBrush_BrushEffect.BE_lighten

type PNMImage* {.importcpp: "PNMImage", pure, inheritable, header: "pnmImage.h".} = object of PNMImageHeader

type PNMPainter* {.importcpp: "PNMPainter", pure, inheritable, header: "pnmPainter.h".} = object

type TextGlyph* {.importcpp: "PT(TextGlyph)", bycopy, pure, inheritable, header: "textGlyph.h".} = object of TypedReferenceCount

proc toTextGlyph*(_: type(nil)): TextGlyph {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TextGlyph], obj: TypedObject): TextGlyph {.importcpp: "DCAST(TextGlyph, @)".}

type TextFont* {.importcpp: "PT(TextFont)", bycopy, pure, inheritable, header: "textFont.h".} = object of TypedReferenceCount

proc upcastToNamable*(_: typedesc[TextFont]): typedesc[Namable] = typedesc[Namable]

proc toTextFont*(_: type(nil)): TextFont {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[TextFont], obj: TypedObject): TextFont {.importcpp: "DCAST(TextFont, @)".}

type TextFont_RenderMode {.importcpp: "TextFont::RenderMode", pure, header: "textFont.h".} = enum
  RM_texture = 0
  RM_wireframe = 1
  RM_polygon = 2
  RM_extruded = 3
  RM_solid = 4
  RM_distanceField = 5
  RM_invalid = 6

template RenderMode*(_: typedesc[TextFont]): typedesc[TextFont_RenderMode] = typedesc[TextFont_RenderMode]
template RenderMode*(_: typedesc[TextFont], value: untyped): TextFont_RenderMode = TextFont_RenderMode(value)

template RM_texture*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_texture
template RM_wireframe*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_wireframe
template RM_polygon*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_polygon
template RM_extruded*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_extruded
template RM_solid*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_solid
template RM_distanceField*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_distanceField
template RM_invalid*(_: typedesc[TextFont]): TextFont_RenderMode = TextFont_RenderMode.RM_invalid

type DynamicTextGlyph* {.importcpp: "PT(DynamicTextGlyph)", bycopy, pure, inheritable, header: "dynamicTextGlyph.h".} = object of TextGlyph

proc toDynamicTextGlyph*(_: type(nil)): DynamicTextGlyph {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DynamicTextGlyph], obj: TypedObject): DynamicTextGlyph {.importcpp: "DCAST(DynamicTextGlyph, @)".}

type DynamicTextPage* {.importcpp: "PT(DynamicTextPage)", bycopy, pure, inheritable, header: "dynamicTextPage.h".} = object of Texture

proc toDynamicTextPage*(_: type(nil)): DynamicTextPage {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DynamicTextPage], obj: TypedObject): DynamicTextPage {.importcpp: "DCAST(DynamicTextPage, @)".}

type FreetypeFont* {.importcpp: "FreetypeFont", pure, inheritable, header: "freetypeFont.h".} = object of Namable

type FreetypeFont_WindingOrder {.importcpp: "FreetypeFont::WindingOrder", pure, header: "freetypeFont.h".} = enum
  WO_default = 0
  WO_left = 1
  WO_right = 2
  WO_invalid = 3

template WindingOrder*(_: typedesc[FreetypeFont]): typedesc[FreetypeFont_WindingOrder] = typedesc[FreetypeFont_WindingOrder]
template WindingOrder*(_: typedesc[FreetypeFont], value: untyped): FreetypeFont_WindingOrder = FreetypeFont_WindingOrder(value)

template WO_default*(_: typedesc[FreetypeFont]): FreetypeFont_WindingOrder = FreetypeFont_WindingOrder.WO_default
template WO_left*(_: typedesc[FreetypeFont]): FreetypeFont_WindingOrder = FreetypeFont_WindingOrder.WO_left
template WO_right*(_: typedesc[FreetypeFont]): FreetypeFont_WindingOrder = FreetypeFont_WindingOrder.WO_right
template WO_invalid*(_: typedesc[FreetypeFont]): FreetypeFont_WindingOrder = FreetypeFont_WindingOrder.WO_invalid

type DynamicTextFont* {.importcpp: "PT(DynamicTextFont)", bycopy, pure, inheritable, header: "dynamicTextFont.h".} = object of TextFont

proc upcastToFreetypeFont*(_: typedesc[DynamicTextFont]): typedesc[FreetypeFont] = typedesc[FreetypeFont]

proc toDynamicTextFont*(_: type(nil)): DynamicTextFont {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DynamicTextFont], obj: TypedObject): DynamicTextFont {.importcpp: "DCAST(DynamicTextFont, @)".}

type FontPool* {.importcpp: "FontPool", pure, inheritable, header: "fontPool.h".} = object

type GeomTextGlyph* {.importcpp: "PT(GeomTextGlyph)", bycopy, pure, inheritable, header: "geomTextGlyph.h".} = object of Geom

proc toGeomTextGlyph*(_: type(nil)): GeomTextGlyph {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[GeomTextGlyph], obj: TypedObject): GeomTextGlyph {.importcpp: "DCAST(GeomTextGlyph, @)".}

type StaticTextFont* {.importcpp: "PT(StaticTextFont)", bycopy, pure, inheritable, header: "staticTextFont.h".} = object of TextFont

proc toStaticTextFont*(_: type(nil)): StaticTextFont {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[StaticTextFont], obj: TypedObject): StaticTextFont {.importcpp: "DCAST(StaticTextFont, @)".}

type TextGraphic* {.importcpp: "TextGraphic", pure, inheritable, header: "textGraphic.h".} = object

type TextPropertiesManager* {.importcpp: "TextPropertiesManager", pure, inheritable, header: "textPropertiesManager.h".} = object

type TextAssembler* {.importcpp: "TextAssembler", pure, inheritable, header: "textAssembler.h".} = object

type ButtonThrower* {.importcpp: "PT(ButtonThrower)", bycopy, pure, inheritable, header: "buttonThrower.h".} = object of DataNode

proc toButtonThrower*(_: type(nil)): ButtonThrower {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ButtonThrower], obj: TypedObject): ButtonThrower {.importcpp: "DCAST(ButtonThrower, @)".}

type MouseInterfaceNode* {.importcpp: "PT(MouseInterfaceNode)", bycopy, pure, inheritable, header: "mouseInterfaceNode.h".} = object of DataNode

proc toMouseInterfaceNode*(_: type(nil)): MouseInterfaceNode {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseInterfaceNode], obj: TypedObject): MouseInterfaceNode {.importcpp: "DCAST(MouseInterfaceNode, @)".}

type DriveInterface* {.importcpp: "PT(DriveInterface)", bycopy, pure, inheritable, header: "driveInterface.h".} = object of MouseInterfaceNode

proc toDriveInterface*(_: type(nil)): DriveInterface {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[DriveInterface], obj: TypedObject): DriveInterface {.importcpp: "DCAST(DriveInterface, @)".}

type MouseSubregion* {.importcpp: "PT(MouseSubregion)", bycopy, pure, inheritable, header: "mouseSubregion.h".} = object of MouseInterfaceNode

proc toMouseSubregion*(_: type(nil)): MouseSubregion {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseSubregion], obj: TypedObject): MouseSubregion {.importcpp: "DCAST(MouseSubregion, @)".}

type MouseWatcherRegion* {.importcpp: "PT(MouseWatcherRegion)", bycopy, pure, inheritable, header: "mouseWatcherRegion.h".} = object of TypedWritableReferenceCount

proc upcastToNamable*(_: typedesc[MouseWatcherRegion]): typedesc[Namable] = typedesc[Namable]

proc toMouseWatcherRegion*(_: type(nil)): MouseWatcherRegion {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseWatcherRegion], obj: TypedObject): MouseWatcherRegion {.importcpp: "DCAST(MouseWatcherRegion, @)".}

type MouseWatcherRegion_SuppressFlags {.importcpp: "MouseWatcherRegion::SuppressFlags", pure, header: "mouseWatcherRegion.h".} = enum
  SF_mouseButton = 1
  SF_otherButton = 2
  SF_anyButton = 3
  SF_mousePosition = 4

template SuppressFlags*(_: typedesc[MouseWatcherRegion]): typedesc[MouseWatcherRegion_SuppressFlags] = typedesc[MouseWatcherRegion_SuppressFlags]
template SuppressFlags*(_: typedesc[MouseWatcherRegion], value: untyped): MouseWatcherRegion_SuppressFlags = MouseWatcherRegion_SuppressFlags(value)

template SF_mouseButton*(_: typedesc[MouseWatcherRegion]): MouseWatcherRegion_SuppressFlags = MouseWatcherRegion_SuppressFlags.SF_mouseButton
template SF_otherButton*(_: typedesc[MouseWatcherRegion]): MouseWatcherRegion_SuppressFlags = MouseWatcherRegion_SuppressFlags.SF_otherButton
template SF_anyButton*(_: typedesc[MouseWatcherRegion]): MouseWatcherRegion_SuppressFlags = MouseWatcherRegion_SuppressFlags.SF_anyButton
template SF_mousePosition*(_: typedesc[MouseWatcherRegion]): MouseWatcherRegion_SuppressFlags = MouseWatcherRegion_SuppressFlags.SF_mousePosition

type MouseWatcherBase* {.importcpp: "MouseWatcherBase*", bycopy, pure, inheritable, header: "mouseWatcherBase.h".} = object

proc toMouseWatcherBase*(_: type(nil)): MouseWatcherBase {.importcpp: "(nullptr)".}

type MouseWatcherGroup* {.importcpp: "PT(MouseWatcherGroup)", bycopy, pure, inheritable, header: "mouseWatcherGroup.h".} = object of MouseWatcherBase

proc upcastToReferenceCount*(_: typedesc[MouseWatcherGroup]): typedesc[ReferenceCount] = typedesc[ReferenceCount]

proc toMouseWatcherGroup*(_: type(nil)): MouseWatcherGroup {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseWatcherGroup], obj: TypedObject): MouseWatcherGroup {.importcpp: "DCAST(MouseWatcherGroup, @)".}

type MouseWatcher* {.importcpp: "PT(MouseWatcher)", bycopy, pure, inheritable, header: "mouseWatcher.h".} = object of DataNode

proc upcastToMouseWatcherBase*(_: typedesc[MouseWatcher]): typedesc[MouseWatcherBase] = typedesc[MouseWatcherBase]

proc toMouseWatcher*(_: type(nil)): MouseWatcher {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[MouseWatcher], obj: TypedObject): MouseWatcher {.importcpp: "DCAST(MouseWatcher, @)".}

type MouseWatcherParameter* {.importcpp: "MouseWatcherParameter", pure, inheritable, header: "mouseWatcherParameter.h".} = object

type Trackball* {.importcpp: "PT(Trackball)", bycopy, pure, inheritable, header: "trackball.h".} = object of MouseInterfaceNode

proc toTrackball*(_: type(nil)): Trackball {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Trackball], obj: TypedObject): Trackball {.importcpp: "DCAST(Trackball, @)".}

type Trackball_ControlMode {.importcpp: "Trackball::ControlMode", pure, header: "trackball.h".} = enum
  CM_default = 0
  CM_truck = 1
  CM_pan = 2
  CM_dolly = 3
  CM_roll = 4

template ControlMode*(_: typedesc[Trackball]): typedesc[Trackball_ControlMode] = typedesc[Trackball_ControlMode]
template ControlMode*(_: typedesc[Trackball], value: untyped): Trackball_ControlMode = Trackball_ControlMode(value)

template CM_default*(_: typedesc[Trackball]): Trackball_ControlMode = Trackball_ControlMode.CM_default
template CM_truck*(_: typedesc[Trackball]): Trackball_ControlMode = Trackball_ControlMode.CM_truck
template CM_pan*(_: typedesc[Trackball]): Trackball_ControlMode = Trackball_ControlMode.CM_pan
template CM_dolly*(_: typedesc[Trackball]): Trackball_ControlMode = Trackball_ControlMode.CM_dolly
template CM_roll*(_: typedesc[Trackball]): Trackball_ControlMode = Trackball_ControlMode.CM_roll

type Transform2SG* {.importcpp: "PT(Transform2SG)", bycopy, pure, inheritable, header: "transform2sg.h".} = object of DataNode

proc toTransform2SG*(_: type(nil)): Transform2SG {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Transform2SG], obj: TypedObject): Transform2SG {.importcpp: "DCAST(Transform2SG, @)".}

type AutoTextureScale* {.importcpp: "AutoTextureScale", header: "autoTextureScale.h".} = enum
  ATS_none = 0
  ATS_down = 1
  ATS_up = 2
  ATS_pad = 3
  ATS_unspecified = 4

type UpdateSeq* {.importcpp: "UpdateSeq", pure, inheritable, header: "updateSeq.h".} = object

type BamCacheRecord* {.importcpp: "PT(BamCacheRecord)", bycopy, pure, inheritable, header: "bamCacheRecord.h".} = object of TypedWritableReferenceCount

proc toBamCacheRecord*(_: type(nil)): BamCacheRecord {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[BamCacheRecord], obj: TypedObject): BamCacheRecord {.importcpp: "DCAST(BamCacheRecord, @)".}

type BamCache* {.importcpp: "BamCache", pure, inheritable, header: "bamCache.h".} = object

type LoaderOptions* {.importcpp: "LoaderOptions", pure, inheritable, header: "loaderOptions.h".} = object

type LoaderOptions_LoaderFlags {.importcpp: "LoaderOptions::LoaderFlags", pure, header: "loaderOptions.h".} = enum
  LF_search = 1
  LF_reportErrors = 2
  LF_convertSkeleton = 4
  LF_convertChannels = 8
  LF_convertAnim = 12
  LF_noDiskCache = 16
  LF_noRamCache = 32
  LF_noCache = 48
  LF_cacheOnly = 64
  LF_allowInstance = 128

template LoaderFlags*(_: typedesc[LoaderOptions]): typedesc[LoaderOptions_LoaderFlags] = typedesc[LoaderOptions_LoaderFlags]
template LoaderFlags*(_: typedesc[LoaderOptions], value: untyped): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags(value)

template LF_search*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_search
template LF_reportErrors*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_reportErrors
template LF_convertSkeleton*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_convertSkeleton
template LF_convertChannels*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_convertChannels
template LF_convertAnim*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_convertAnim
template LF_noDiskCache*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_noDiskCache
template LF_noRamCache*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_noRamCache
template LF_noCache*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_noCache
template LF_cacheOnly*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_cacheOnly
template LF_allowInstance*(_: typedesc[LoaderOptions]): LoaderOptions_LoaderFlags = LoaderOptions_LoaderFlags.LF_allowInstance

type LoaderOptions_TextureFlags {.importcpp: "LoaderOptions::TextureFlags", pure, header: "loaderOptions.h".} = enum
  TF_preload = 4
  TF_preloadSimple = 8
  TF_allow1d = 16
  TF_generateMipmaps = 32
  TF_multiview = 64
  TF_integer = 128
  TF_float = 256
  TF_allowCompression = 512

template TextureFlags*(_: typedesc[LoaderOptions]): typedesc[LoaderOptions_TextureFlags] = typedesc[LoaderOptions_TextureFlags]
template TextureFlags*(_: typedesc[LoaderOptions], value: untyped): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags(value)

template TF_preload*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_preload
template TF_preloadSimple*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_preloadSimple
template TF_allow1d*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_allow1d
template TF_generateMipmaps*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_generateMipmaps
template TF_multiview*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_multiview
template TF_integer*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_integer
template TF_float*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_float
template TF_allowCompression*(_: typedesc[LoaderOptions]): LoaderOptions_TextureFlags = LoaderOptions_TextureFlags.TF_allowCompression

type BamReader* {.importcpp: "BamReader", pure, inheritable, header: "bamReader.h".} = object of BamEnums

type BamWriter* {.importcpp: "BamWriter", pure, inheritable, header: "bamWriter.h".} = object of BamEnums

type BitMask*[T: static[typedesc], U: static[int]] {.importcpp: "BitMask<'0, '1>", pure, inheritable, header: "bitMask.h".} = object

type BitMask16* = BitMask[uint16, 16]

type BitMask32* = BitMask[uint32, 32]

type BitMask64* = BitMask[uint64, 64]

type BitMaskNative* {.importcpp: "BitMaskNative", pure, inheritable, header: "bitMask.h".} = object

type BitArray* {.importcpp: "BitArray", pure, inheritable, header: "bitArray.h".} = object

type ButtonHandle* {.importcpp: "ButtonHandle", pure, header: "buttonHandle.h".} = object

type ButtonRegistry* {.importcpp: "ButtonRegistry", pure, inheritable, header: "buttonRegistry.h".} = object

type ButtonMap* {.importcpp: "PT(ButtonMap)", bycopy, pure, inheritable, header: "buttonMap.h".} = object of TypedReferenceCount

proc toButtonMap*(_: type(nil)): ButtonMap {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ButtonMap], obj: TypedObject): ButtonMap {.importcpp: "DCAST(ButtonMap, @)".}

type CallbackObject* {.importcpp: "PT(CallbackObject)", bycopy, pure, inheritable, header: "callbackObject.h".} = object of TypedReferenceCount

proc toCallbackObject*(_: type(nil)): CallbackObject {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[CallbackObject], obj: TypedObject): CallbackObject {.importcpp: "DCAST(CallbackObject, @)".}

type TimeVal* {.importcpp: "TimeVal", pure, inheritable, header: "clockObject.h".} = object

type ClockObject* {.importcpp: "PT(ClockObject)", bycopy, pure, inheritable, header: "clockObject.h".} = object of ReferenceCount

proc toClockObject*(_: type(nil)): ClockObject {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ClockObject], obj: TypedObject): ClockObject {.importcpp: "DCAST(ClockObject, @)".}

type ClockObject_Mode {.importcpp: "ClockObject::Mode", pure, header: "clockObject.h".} = enum
  M_normal = 0
  M_nonRealTime = 1
  M_forced = 2
  M_degrade = 3
  M_slave = 4
  M_limited = 5
  M_integer = 6
  M_integerLimited = 7

template Mode*(_: typedesc[ClockObject]): typedesc[ClockObject_Mode] = typedesc[ClockObject_Mode]
template Mode*(_: typedesc[ClockObject], value: untyped): ClockObject_Mode = ClockObject_Mode(value)

template M_normal*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_normal
template M_nonRealTime*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_nonRealTime
template M_forced*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_forced
template M_degrade*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_degrade
template M_slave*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_slave
template M_limited*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_limited
template M_integer*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_integer
template M_integerLimited*(_: typedesc[ClockObject]): ClockObject_Mode = ClockObject_Mode.M_integerLimited

type CollideMask* = BitMask32

type ColorSpace* {.importcpp: "ColorSpace", header: "colorSpace.h".} = enum
  CS_unspecified = 0
  CS_linear = 1
  CS_sRGB = 2
  CS_scRGB = 3

type DatagramBuffer* {.importcpp: "DatagramBuffer", pure, inheritable, header: "datagramBuffer.h".} = object of DatagramSink

proc upcastToDatagramGenerator*(_: typedesc[DatagramBuffer]): typedesc[DatagramGenerator] = typedesc[DatagramGenerator]

type DatagramInputFile* {.importcpp: "DatagramInputFile", pure, inheritable, header: "datagramInputFile.h".} = object of DatagramGenerator

type DatagramOutputFile* {.importcpp: "DatagramOutputFile", pure, inheritable, header: "datagramOutputFile.h".} = object of DatagramSink

type DrawMask* = BitMask32

type GamepadButton* {.importcpp: "GamepadButton", pure, inheritable, header: "gamepadButton.h".} = object

type KeyboardButton* {.importcpp: "KeyboardButton", pure, inheritable, header: "keyboardButton.h".} = object

type ModifierButtons* {.importcpp: "ModifierButtons", pure, inheritable, header: "modifierButtons.h".} = object

type MouseButton* {.importcpp: "MouseButton", pure, inheritable, header: "mouseButton.h".} = object

type PointerType* {.importcpp: "PointerType", pure, header: "pointerData.h".} = enum
  unknown = 0
  mouse = 1
  finger = 2
  stylus = 3
  eraser = 4

type PointerData* {.importcpp: "PointerData", pure, inheritable, header: "pointerData.h".} = object

type MouseData* = PointerData

type SparseArray* {.importcpp: "SparseArray", pure, inheritable, header: "sparseArray.h".} = object

type ParamTypedRefCount* {.importcpp: "PT(ParamTypedRefCount)", bycopy, pure, inheritable, header: "paramValue.h".} = object of ParamValueBase

proc toParamTypedRefCount*(_: type(nil)): ParamTypedRefCount {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[ParamTypedRefCount], obj: TypedObject): ParamTypedRefCount {.importcpp: "DCAST(ParamTypedRefCount, @)".}

type WritableConfigurable* {.importcpp: "WritableConfigurable", pure, inheritable, header: "writableConfigurable.h".} = object of TypedWritable

type UniqueIdAllocator* {.importcpp: "UniqueIdAllocator", pure, inheritable, header: "uniqueIdAllocator.h".} = object

type PortalMask* = BitMask32

type FilterProperties* {.importcpp: "PT(FilterProperties)", bycopy, pure, inheritable, header: "filterProperties.h".} = object of TypedReferenceCount

proc toFilterProperties*(_: type(nil)): FilterProperties {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[FilterProperties], obj: TypedObject): FilterProperties {.importcpp: "DCAST(FilterProperties, @)".}

type AudioSound* {.importcpp: "PT(AudioSound)", bycopy, pure, inheritable, header: "audioSound.h".} = object of TypedReferenceCount

proc toAudioSound*(_: type(nil)): AudioSound {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AudioSound], obj: TypedObject): AudioSound {.importcpp: "DCAST(AudioSound, @)".}

type AudioSound_SoundStatus {.importcpp: "AudioSound::SoundStatus", pure, header: "audioSound.h".} = enum
  BAD = 0
  READY = 1
  PLAYING = 2

template SoundStatus*(_: typedesc[AudioSound]): typedesc[AudioSound_SoundStatus] = typedesc[AudioSound_SoundStatus]
template SoundStatus*(_: typedesc[AudioSound], value: untyped): AudioSound_SoundStatus = AudioSound_SoundStatus(value)

template BAD*(_: typedesc[AudioSound]): AudioSound_SoundStatus = AudioSound_SoundStatus.BAD
template READY*(_: typedesc[AudioSound]): AudioSound_SoundStatus = AudioSound_SoundStatus.READY
template PLAYING*(_: typedesc[AudioSound]): AudioSound_SoundStatus = AudioSound_SoundStatus.PLAYING

type AudioManager* {.importcpp: "PT(AudioManager)", bycopy, pure, inheritable, header: "audioManager.h".} = object of TypedReferenceCount

proc toAudioManager*(_: type(nil)): AudioManager {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AudioManager], obj: TypedObject): AudioManager {.importcpp: "DCAST(AudioManager, @)".}

type AudioManager_SpeakerModeCategory {.importcpp: "AudioManager::SpeakerModeCategory", pure, header: "audioManager.h".} = enum
  SPEAKERMODE_raw = 0
  SPEAKERMODE_mono = 1
  SPEAKERMODE_stereo = 2
  SPEAKERMODE_quad = 3
  SPEAKERMODE_surround = 4
  SPEAKERMODE_5point1 = 5
  SPEAKERMODE_7point1 = 6
  SPEAKERMODE_max = 7
  SPEAKERMODE_COUNT = 8

template SpeakerModeCategory*(_: typedesc[AudioManager]): typedesc[AudioManager_SpeakerModeCategory] = typedesc[AudioManager_SpeakerModeCategory]
template SpeakerModeCategory*(_: typedesc[AudioManager], value: untyped): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory(value)

template SPEAKERMODE_raw*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_raw
template SPEAKERMODE_mono*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_mono
template SPEAKERMODE_stereo*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_stereo
template SPEAKERMODE_quad*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_quad
template SPEAKERMODE_surround*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_surround
template SPEAKERMODE_5point1*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_5point1
template SPEAKERMODE_7point1*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_7point1
template SPEAKERMODE_max*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_max
template SPEAKERMODE_COUNT*(_: typedesc[AudioManager]): AudioManager_SpeakerModeCategory = AudioManager_SpeakerModeCategory.SPEAKERMODE_COUNT

type AudioManager_SpeakerId {.importcpp: "AudioManager::SpeakerId", pure, header: "audioManager.h".} = enum
  SPK_none = 0
  SPK_frontleft = 1
  SPK_frontright = 2
  SPK_center = 3
  SPK_sub = 4
  SPK_backleft = 5
  SPK_backright = 6
  SPK_sideleft = 7
  SPK_sideright = 8
  SPK_COUNT = 9

template SpeakerId*(_: typedesc[AudioManager]): typedesc[AudioManager_SpeakerId] = typedesc[AudioManager_SpeakerId]
template SpeakerId*(_: typedesc[AudioManager], value: untyped): AudioManager_SpeakerId = AudioManager_SpeakerId(value)

template SPK_none*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_none
template SPK_frontleft*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_frontleft
template SPK_frontright*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_frontright
template SPK_center*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_center
template SPK_sub*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_sub
template SPK_backleft*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_backleft
template SPK_backright*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_backright
template SPK_sideleft*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_sideleft
template SPK_sideright*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_sideright
template SPK_COUNT*(_: typedesc[AudioManager]): AudioManager_SpeakerId = AudioManager_SpeakerId.SPK_COUNT

type AudioManager_StreamMode {.importcpp: "AudioManager::StreamMode", pure, header: "audioManager.h".} = enum
  SM_heuristic = 0
  SM_sample = 1
  SM_stream = 2

template StreamMode*(_: typedesc[AudioManager]): typedesc[AudioManager_StreamMode] = typedesc[AudioManager_StreamMode]
template StreamMode*(_: typedesc[AudioManager], value: untyped): AudioManager_StreamMode = AudioManager_StreamMode(value)

template SM_heuristic*(_: typedesc[AudioManager]): AudioManager_StreamMode = AudioManager_StreamMode.SM_heuristic
template SM_sample*(_: typedesc[AudioManager]): AudioManager_StreamMode = AudioManager_StreamMode.SM_sample
template SM_stream*(_: typedesc[AudioManager]): AudioManager_StreamMode = AudioManager_StreamMode.SM_stream

type AudioLoadRequest* {.importcpp: "PT(AudioLoadRequest)", bycopy, pure, inheritable, header: "audioLoadRequest.h".} = object of AsyncTask

proc toAudioLoadRequest*(_: type(nil)): AudioLoadRequest {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[AudioLoadRequest], obj: TypedObject): AudioLoadRequest {.importcpp: "DCAST(AudioLoadRequest, @)".}

type PGFrameStyle* {.importcpp: "PGFrameStyle", pure, inheritable, header: "pgFrameStyle.h".} = object

type PGFrameStyle_Type {.importcpp: "PGFrameStyle::Type", pure, header: "pgFrameStyle.h".} = enum
  T_none = 0
  T_flat = 1
  T_bevelOut = 2
  T_bevelIn = 3
  T_groove = 4
  T_ridge = 5
  T_textureBorder = 6

template Type*(_: typedesc[PGFrameStyle]): typedesc[PGFrameStyle_Type] = typedesc[PGFrameStyle_Type]
template Type*(_: typedesc[PGFrameStyle], value: untyped): PGFrameStyle_Type = PGFrameStyle_Type(value)

template T_none*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_none
template T_flat*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_flat
template T_bevelOut*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_bevelOut
template T_bevelIn*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_bevelIn
template T_groove*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_groove
template T_ridge*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_ridge
template T_textureBorder*(_: typedesc[PGFrameStyle]): PGFrameStyle_Type = PGFrameStyle_Type.T_textureBorder

type PGItem* {.importcpp: "PT(PGItem)", bycopy, pure, inheritable, header: "pgItem.h".} = object of PandaNode

proc toPGItem*(_: type(nil)): PGItem {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGItem], obj: TypedObject): PGItem {.importcpp: "DCAST(PGItem, @)".}

type PGButton* {.importcpp: "PT(PGButton)", bycopy, pure, inheritable, header: "pgButton.h".} = object of PGItem

proc toPGButton*(_: type(nil)): PGButton {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGButton], obj: TypedObject): PGButton {.importcpp: "DCAST(PGButton, @)".}

type PGButton_State {.importcpp: "PGButton::State", pure, header: "pgButton.h".} = enum
  S_ready = 0
  S_depressed = 1
  S_rollover = 2
  S_inactive = 3

template State*(_: typedesc[PGButton]): typedesc[PGButton_State] = typedesc[PGButton_State]
template State*(_: typedesc[PGButton], value: untyped): PGButton_State = PGButton_State(value)

template S_ready*(_: typedesc[PGButton]): PGButton_State = PGButton_State.S_ready
template S_depressed*(_: typedesc[PGButton]): PGButton_State = PGButton_State.S_depressed
template S_rollover*(_: typedesc[PGButton]): PGButton_State = PGButton_State.S_rollover
template S_inactive*(_: typedesc[PGButton]): PGButton_State = PGButton_State.S_inactive

type PGTop* {.importcpp: "PT(PGTop)", bycopy, pure, inheritable, header: "pgTop.h".} = object of PandaNode

proc toPGTop*(_: type(nil)): PGTop {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGTop], obj: TypedObject): PGTop {.importcpp: "DCAST(PGTop, @)".}

type PGEntry* {.importcpp: "PT(PGEntry)", bycopy, pure, inheritable, header: "pgEntry.h".} = object of PGItem

proc toPGEntry*(_: type(nil)): PGEntry {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGEntry], obj: TypedObject): PGEntry {.importcpp: "DCAST(PGEntry, @)".}

type PGEntry_State {.importcpp: "PGEntry::State", pure, header: "pgEntry.h".} = enum
  S_focus = 0
  S_noFocus = 1
  S_inactive = 2

template State*(_: typedesc[PGEntry]): typedesc[PGEntry_State] = typedesc[PGEntry_State]
template State*(_: typedesc[PGEntry], value: untyped): PGEntry_State = PGEntry_State(value)

template S_focus*(_: typedesc[PGEntry]): PGEntry_State = PGEntry_State.S_focus
template S_noFocus*(_: typedesc[PGEntry]): PGEntry_State = PGEntry_State.S_noFocus
template S_inactive*(_: typedesc[PGEntry]): PGEntry_State = PGEntry_State.S_inactive

type PGMouseWatcherParameter* {.importcpp: "PT(PGMouseWatcherParameter)", bycopy, pure, inheritable, header: "pgMouseWatcherParameter.h".} = object of TypedWritableReferenceCount

proc upcastToMouseWatcherParameter*(_: typedesc[PGMouseWatcherParameter]): typedesc[MouseWatcherParameter] = typedesc[MouseWatcherParameter]

proc toPGMouseWatcherParameter*(_: type(nil)): PGMouseWatcherParameter {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGMouseWatcherParameter], obj: TypedObject): PGMouseWatcherParameter {.importcpp: "DCAST(PGMouseWatcherParameter, @)".}

type PGMouseWatcherBackground* {.importcpp: "PT(PGMouseWatcherBackground)", bycopy, pure, inheritable, header: "pgMouseWatcherBackground.h".} = object of MouseWatcherRegion

proc toPGMouseWatcherBackground*(_: type(nil)): PGMouseWatcherBackground {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGMouseWatcherBackground], obj: TypedObject): PGMouseWatcherBackground {.importcpp: "DCAST(PGMouseWatcherBackground, @)".}

type PGVirtualFrame* {.importcpp: "PT(PGVirtualFrame)", bycopy, pure, inheritable, header: "pgVirtualFrame.h".} = object of PGItem

proc toPGVirtualFrame*(_: type(nil)): PGVirtualFrame {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGVirtualFrame], obj: TypedObject): PGVirtualFrame {.importcpp: "DCAST(PGVirtualFrame, @)".}

type PGSliderBar* {.importcpp: "PT(PGSliderBar)", bycopy, pure, inheritable, header: "pgSliderBar.h".} = object of PGItem

proc toPGSliderBar*(_: type(nil)): PGSliderBar {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGSliderBar], obj: TypedObject): PGSliderBar {.importcpp: "DCAST(PGSliderBar, @)".}

type PGScrollFrame* {.importcpp: "PT(PGScrollFrame)", bycopy, pure, inheritable, header: "pgScrollFrame.h".} = object of PGVirtualFrame

proc toPGScrollFrame*(_: type(nil)): PGScrollFrame {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGScrollFrame], obj: TypedObject): PGScrollFrame {.importcpp: "DCAST(PGScrollFrame, @)".}

type PGWaitBar* {.importcpp: "PT(PGWaitBar)", bycopy, pure, inheritable, header: "pgWaitBar.h".} = object of PGItem

proc toPGWaitBar*(_: type(nil)): PGWaitBar {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[PGWaitBar], obj: TypedObject): PGWaitBar {.importcpp: "DCAST(PGWaitBar, @)".}

type NetAddress* {.importcpp: "NetAddress", pure, inheritable, header: "netAddress.h".} = object

type Connection* {.importcpp: "PT(Connection)", bycopy, pure, inheritable, header: "connection.h".} = object of ReferenceCount

proc toConnection*(_: type(nil)): Connection {.importcpp: "(nullptr)".}
func dcast*(_: typedesc[Connection], obj: TypedObject): Connection {.importcpp: "DCAST(Connection, @)".}

type ConnectionReader* {.importcpp: "ConnectionReader*", bycopy, pure, inheritable, header: "connectionReader.h".} = object

proc toConnectionReader*(_: type(nil)): ConnectionReader {.importcpp: "(nullptr)".}

type ConnectionListener* {.importcpp: "ConnectionListener*", bycopy, pure, inheritable, header: "connectionListener.h".} = object of ConnectionReader

proc toConnectionListener*(_: type(nil)): ConnectionListener {.importcpp: "(nullptr)".}

type NetDatagram* {.importcpp: "NetDatagram", pure, inheritable, header: "netDatagram.h".} = object of Datagram

type ConnectionManager* {.importcpp: "ConnectionManager*", bycopy, pure, inheritable, header: "connectionManager.h".} = object

proc toConnectionManager*(_: type(nil)): ConnectionManager {.importcpp: "(nullptr)".}

type ConnectionWriter* {.importcpp: "ConnectionWriter", pure, inheritable, header: "connectionWriter.h".} = object

type DatagramGeneratorNet* {.importcpp: "DatagramGeneratorNet*", bycopy, pure, inheritable, header: "datagramGeneratorNet.h".} = object of DatagramGenerator

proc upcastToConnectionReader*(_: typedesc[DatagramGeneratorNet]): typedesc[ConnectionReader] = typedesc[ConnectionReader]

proc toDatagramGeneratorNet*(_: type(nil)): DatagramGeneratorNet {.importcpp: "(nullptr)".}

type DatagramSinkNet* {.importcpp: "DatagramSinkNet", pure, inheritable, header: "datagramSinkNet.h".} = object of DatagramSink

proc upcastToConnectionWriter*(_: typedesc[DatagramSinkNet]): typedesc[ConnectionWriter] = typedesc[ConnectionWriter]

type QueuedConnectionListener* {.importcpp: "QueuedConnectionListener*", bycopy, pure, inheritable, header: "queuedConnectionListener.h".} = object of ConnectionListener

proc toQueuedConnectionListener*(_: type(nil)): QueuedConnectionListener {.importcpp: "(nullptr)".}

type QueuedConnectionManager* {.importcpp: "QueuedConnectionManager*", bycopy, pure, inheritable, header: "queuedConnectionManager.h".} = object of ConnectionManager

proc toQueuedConnectionManager*(_: type(nil)): QueuedConnectionManager {.importcpp: "(nullptr)".}

type QueuedConnectionReader* {.importcpp: "QueuedConnectionReader*", bycopy, pure, inheritable, header: "queuedConnectionReader.h".} = object of ConnectionReader

proc toQueuedConnectionReader*(_: type(nil)): QueuedConnectionReader {.importcpp: "(nullptr)".}

type RecentConnectionReader* {.importcpp: "RecentConnectionReader*", bycopy, pure, inheritable, header: "recentConnectionReader.h".} = object of ConnectionReader

proc toRecentConnectionReader*(_: type(nil)): RecentConnectionReader {.importcpp: "(nullptr)".}

type Socket_Address* {.importcpp: "Socket_Address*", bycopy, pure, inheritable, header: "socket_address.h".} = object

proc toSocket_Address*(_: type(nil)): Socket_Address {.importcpp: "(nullptr)".}

type Socket_IP* {.importcpp: "Socket_IP", pure, inheritable, header: "socket_ip.h".} = object of TypedObject

type Socket_TCP* {.importcpp: "Socket_TCP", pure, inheritable, header: "socket_tcp.h".} = object of Socket_IP

type Socket_TCP_Listen* {.importcpp: "Socket_TCP_Listen", pure, inheritable, header: "socket_tcp_listen.h".} = object of Socket_IP

type Socket_UDP_Incoming* {.importcpp: "Socket_UDP_Incoming", pure, inheritable, header: "socket_udp_incoming.h".} = object of Socket_IP

type Socket_UDP_Outgoing* {.importcpp: "Socket_UDP_Outgoing", pure, inheritable, header: "socket_udp_outgoing.h".} = object of Socket_IP

type Socket_fdset* {.importcpp: "Socket_fdset", pure, inheritable, header: "socket_fdset.h".} = object

type Buffered_DatagramConnection* {.importcpp: "Buffered_DatagramConnection", pure, inheritable, header: "buffered_datagramconnection.h".} = object of Socket_TCP

type Socket_UDP* {.importcpp: "Socket_UDP", pure, inheritable, header: "socket_udp.h".} = object of Socket_UDP_Incoming

type PNMTextGlyph* {.importcpp: "PNMTextGlyph", pure, inheritable, header: "pnmTextGlyph.h".} = object

type PNMTextMaker* {.importcpp: "PNMTextMaker", pure, inheritable, header: "pnmTextMaker.h".} = object of FreetypeFont

type PNMTextMaker_Alignment {.importcpp: "PNMTextMaker::Alignment", pure, header: "pnmTextMaker.h".} = enum
  A_left = 0
  A_right = 1
  A_center = 2

template Alignment*(_: typedesc[PNMTextMaker]): typedesc[PNMTextMaker_Alignment] = typedesc[PNMTextMaker_Alignment]
template Alignment*(_: typedesc[PNMTextMaker], value: untyped): PNMTextMaker_Alignment = PNMTextMaker_Alignment(value)

template A_left*(_: typedesc[PNMTextMaker]): PNMTextMaker_Alignment = PNMTextMaker_Alignment.A_left
template A_right*(_: typedesc[PNMTextMaker]): PNMTextMaker_Alignment = PNMTextMaker_Alignment.A_right
template A_center*(_: typedesc[PNMTextMaker]): PNMTextMaker_Alignment = PNMTextMaker_Alignment.A_center

type TypeHandle_parentClasses = distinct TypeHandle

template parentClasses*(this: TypeHandle): TypeHandle_parentClasses = TypeHandle_parentClasses(this)

type TypeHandle_childClasses = distinct TypeHandle

template childClasses*(this: TypeHandle): TypeHandle_childClasses = TypeHandle_childClasses(this)

type TypeRegistry_typehandles = distinct TypeRegistry

template typehandles*(this: TypeRegistry): TypeRegistry_typehandles = TypeRegistry_typehandles(this)

type TypeRegistry_rootClasses = distinct TypeRegistry

template rootClasses*(this: TypeRegistry): TypeRegistry_rootClasses = TypeRegistry_rootClasses(this)

func defaultEncoding*(_: typedesc[TextEncoder]): TextEncoder_Encoding {.importcpp: "TextEncoder::get_default_encoding()", header: "textEncoder.h".}

proc `defaultEncoding=`*(_: typedesc[TextEncoder], encoding: TextEncoder_Encoding) {.importcpp: "#TextEncoder::set_default_encoding(#)", header: "textEncoder.h".}

func versionString*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_version_string())", header: "pandaSystem.h".}

func majorVersion*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_major_version()", header: "pandaSystem.h".}

func minorVersion*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_minor_version()", header: "pandaSystem.h".}

func sequenceVersion*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_sequence_version()", header: "pandaSystem.h".}

func officialVersion*(_: typedesc[PandaSystem]): bool {.importcpp: "PandaSystem::is_official_version()", header: "pandaSystem.h".}

func memoryAlignment*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_memory_alignment()", header: "pandaSystem.h".}

func distributor*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_distributor())", header: "pandaSystem.h".}

func compiler*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_compiler())", header: "pandaSystem.h".}

func buildDate*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_build_date())", header: "pandaSystem.h".}

func gitCommit*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_git_commit())", header: "pandaSystem.h".}

func platform*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_platform())", header: "pandaSystem.h".}

type PandaSystem_systems = distinct PandaSystem

template systems*(this: PandaSystem): PandaSystem_systems = PandaSystem_systems(this)

type DSearchPath_directories = distinct DSearchPath

template directories*(this: DSearchPath): DSearchPath_directories = DSearchPath_directories(this)

type ExecutionEnvironment_environmentVariables = distinct typedesc[ExecutionEnvironment]

proc `[]`*(_: ExecutionEnvironment_environmentVariables, `var`: string): string {.importcpp: "nimStringFromStdString(#ExecutionEnvironment::get_environment_variable(nimStringToStdString(#)))", header: "executionEnvironment.h".}

template environmentVariables*(this: typedesc[ExecutionEnvironment]): ExecutionEnvironment_environmentVariables = ExecutionEnvironment_environmentVariables(this)

proc hasKey*(_: ExecutionEnvironment_environmentVariables, `var`: string): bool {.importcpp: "#ExecutionEnvironment::has_environment_variable(nimStringToStdString(#))", header: "executionEnvironment.h".}

proc contains*(_: ExecutionEnvironment_environmentVariables, `var`: string): bool {.importcpp: "#ExecutionEnvironment::has_environment_variable(nimStringToStdString(#))", header: "executionEnvironment.h".}

proc `[]=`*(_: ExecutionEnvironment_environmentVariables, `var`: string, value: string) {.importcpp: "#ExecutionEnvironment::set_environment_variable(nimStringToStdString(#), nimStringToStdString(#))", header: "executionEnvironment.h".}

type ExecutionEnvironment_args = distinct typedesc[ExecutionEnvironment]

proc `[]`*(_: ExecutionEnvironment_args, n: int): string {.importcpp: "nimStringFromStdString(#ExecutionEnvironment::get_arg(#))", header: "executionEnvironment.h".}

template args*(this: typedesc[ExecutionEnvironment]): ExecutionEnvironment_args = ExecutionEnvironment_args(this)

func len*(_: ExecutionEnvironment_args): int {.importcpp: "ExecutionEnvironment::get_num_args()", header: "executionEnvironment.h".}

func binaryName*(_: typedesc[ExecutionEnvironment]): string {.importcpp: "nimStringFromStdString(ExecutionEnvironment::get_binary_name())", header: "executionEnvironment.h".}

proc `binaryName=`*(_: typedesc[ExecutionEnvironment], name: string) {.importcpp: "#ExecutionEnvironment::set_binary_name(nimStringToStdString(#))", header: "executionEnvironment.h".}

func dtoolName*(_: typedesc[ExecutionEnvironment]): string {.importcpp: "nimStringFromStdString(ExecutionEnvironment::get_dtool_name())", header: "executionEnvironment.h".}

proc `dtoolName=`*(_: typedesc[ExecutionEnvironment], name: string) {.importcpp: "#ExecutionEnvironment::set_dtool_name(nimStringToStdString(#))", header: "executionEnvironment.h".}

func cwd*(_: typedesc[ExecutionEnvironment]): Filename {.importcpp: "ExecutionEnvironment::get_cwd()", header: "executionEnvironment.h".}

type ConfigPage_declarations = distinct ConfigPage

template declarations*(this: ConfigPage): ConfigPage_declarations = ConfigPage_declarations(this)

type ConfigVariableCore_declarations = distinct ConfigVariableCore

template declarations*(this: ConfigVariableCore): ConfigVariableCore_declarations = ConfigVariableCore_declarations(this)

type ConfigVariableCore_references = distinct ConfigVariableCore

template references*(this: ConfigVariableCore): ConfigVariableCore_references = ConfigVariableCore_references(this)

type ConfigVariableCore_trustedReferences = distinct ConfigVariableCore

template trustedReferences*(this: ConfigVariableCore): ConfigVariableCore_trustedReferences = ConfigVariableCore_trustedReferences(this)

type ConfigVariableCore_uniqueReferences = distinct ConfigVariableCore

template uniqueReferences*(this: ConfigVariableCore): ConfigVariableCore_uniqueReferences = ConfigVariableCore_uniqueReferences(this)

type ConfigPageManager_prcPatterns = distinct ConfigPageManager

template prcPatterns*(this: ConfigPageManager): ConfigPageManager_prcPatterns = ConfigPageManager_prcPatterns(this)

type ConfigPageManager_prcEncryptedPatterns = distinct ConfigPageManager

template prcEncryptedPatterns*(this: ConfigPageManager): ConfigPageManager_prcEncryptedPatterns = ConfigPageManager_prcEncryptedPatterns(this)

type ConfigPageManager_prcExecutablePatterns = distinct ConfigPageManager

template prcExecutablePatterns*(this: ConfigPageManager): ConfigPageManager_prcExecutablePatterns = ConfigPageManager_prcExecutablePatterns(this)

type ConfigPageManager_implicitPages = distinct ConfigPageManager

template implicitPages*(this: ConfigPageManager): ConfigPageManager_implicitPages = ConfigPageManager_implicitPages(this)

type ConfigPageManager_explicitPages = distinct ConfigPageManager

template explicitPages*(this: ConfigPageManager): ConfigPageManager_explicitPages = ConfigPageManager_explicitPages(this)

type ConfigVariableManager_variables = distinct ConfigVariableManager

template variables*(this: ConfigVariableManager): ConfigVariableManager_variables = ConfigVariableManager_variables(this)

type ConfigVariableSearchPath_directories = distinct ConfigVariableSearchPath

template directories*(this: ConfigVariableSearchPath): ConfigVariableSearchPath_directories = ConfigVariableSearchPath_directories(this)

type NotifyCategory_children = distinct NotifyCategory

template children*(this: NotifyCategory): NotifyCategory_children = NotifyCategory_children(this)

func tracking*(_: typedesc[MemoryUsage]): bool {.importcpp: "MemoryUsage::is_tracking()", header: "memoryUsage.h".}

func counting*(_: typedesc[MemoryUsage]): bool {.importcpp: "MemoryUsage::is_counting()", header: "memoryUsage.h".}

func currentCppSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_current_cpp_size()", header: "memoryUsage.h".}

func totalCppSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_total_cpp_size()", header: "memoryUsage.h".}

func pandaHeapSingleSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_heap_single_size()", header: "memoryUsage.h".}

func pandaHeapArraySize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_heap_array_size()", header: "memoryUsage.h".}

func pandaHeapOverhead*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_heap_overhead()", header: "memoryUsage.h".}

func pandaMmapSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_mmap_size()", header: "memoryUsage.h".}

func externalSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_external_size()", header: "memoryUsage.h".}

func totalSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_total_size()", header: "memoryUsage.h".}

func magicNumber*(_: typedesc[Multifile]): string {.importcpp: "nimStringFromStdString(Multifile::get_magic_number())", header: "multifile.h".}

type VirtualFileSystem_mounts = distinct VirtualFileSystem

template mounts*(this: VirtualFileSystem): VirtualFileSystem_mounts = VirtualFileSystem_mounts(this)

type PandaNode_tags = distinct PandaNode

template tags*(this: PandaNode): PandaNode_tags = PandaNode_tags(this)

func overallBit*(_: typedesc[PandaNode]): DrawMask {.importcpp: "PandaNode::get_overall_bit()", header: "pandaNode.h".}

func allCameraMask*(_: typedesc[PandaNode]): DrawMask {.importcpp: "PandaNode::get_all_camera_mask()", header: "pandaNode.h".}

type ComputeNode_dispatches = distinct ComputeNode

template dispatches*(this: ComputeNode): ComputeNode_dispatches = ComputeNode_dispatches(this)

type Camera_displayRegions = distinct Camera

template displayRegions*(this: Camera): Camera_displayRegions = Camera_displayRegions(this)

type Camera_tagStates = distinct Camera

template tagStates*(this: Camera): Camera_tagStates = Camera_tagStates(this)

type Camera_auxSceneData = distinct Camera

template auxSceneData*(this: Camera): Camera_auxSceneData = Camera_auxSceneData(this)

type LODNode_ins = distinct LODNode

template ins*(this: LODNode): LODNode_ins = LODNode_ins(this)

type LODNode_outs = distinct LODNode

template outs*(this: LODNode): LODNode_outs = LODNode_outs(this)

func classSlot*(_: typedesc[RenderModeAttrib]): int {.importcpp: "RenderModeAttrib::get_class_slot()", header: "renderModeAttrib.h".}

func classSlot*(_: typedesc[TexMatrixAttrib]): int {.importcpp: "TexMatrixAttrib::get_class_slot()", header: "texMatrixAttrib.h".}

type RenderState_attribs = distinct RenderState

template attribs*(this: RenderState): RenderState_attribs = RenderState_attribs(this)

func classSlot*(_: typedesc[AlphaTestAttrib]): int {.importcpp: "AlphaTestAttrib::get_class_slot()", header: "alphaTestAttrib.h".}

func classSlot*(_: typedesc[AntialiasAttrib]): int {.importcpp: "AntialiasAttrib::get_class_slot()", header: "antialiasAttrib.h".}

func classSlot*(_: typedesc[TransparencyAttrib]): int {.importcpp: "TransparencyAttrib::get_class_slot()", header: "transparencyAttrib.h".}

func classSlot*(_: typedesc[LogicOpAttrib]): int {.importcpp: "LogicOpAttrib::get_class_slot()", header: "logicOpAttrib.h".}

type NodePath_nodes = distinct NodePath

template nodes*(this: NodePath): NodePath_nodes = NodePath_nodes(this)

type NodePath_ancestors = distinct NodePath

template ancestors*(this: NodePath): NodePath_ancestors = NodePath_ancestors(this)

type NodePath_netTags = distinct NodePath

template netTags*(this: NodePath): NodePath_netTags = NodePath_netTags(this)

func classSlot*(_: typedesc[AudioVolumeAttrib]): int {.importcpp: "AudioVolumeAttrib::get_class_slot()", header: "audioVolumeAttrib.h".}

func classSlot*(_: typedesc[AuxBitplaneAttrib]): int {.importcpp: "AuxBitplaneAttrib::get_class_slot()", header: "auxBitplaneAttrib.h".}

func classSlot*(_: typedesc[ClipPlaneAttrib]): int {.importcpp: "ClipPlaneAttrib::get_class_slot()", header: "clipPlaneAttrib.h".}

func classSlot*(_: typedesc[ColorAttrib]): int {.importcpp: "ColorAttrib::get_class_slot()", header: "colorAttrib.h".}

func classSlot*(_: typedesc[ColorBlendAttrib]): int {.importcpp: "ColorBlendAttrib::get_class_slot()", header: "colorBlendAttrib.h".}

func classSlot*(_: typedesc[ColorScaleAttrib]): int {.importcpp: "ColorScaleAttrib::get_class_slot()", header: "colorScaleAttrib.h".}

func classSlot*(_: typedesc[ColorWriteAttrib]): int {.importcpp: "ColorWriteAttrib::get_class_slot()", header: "colorWriteAttrib.h".}

func defaultCollideMask*(_: typedesc[GeomNode]): CollideMask {.importcpp: "GeomNode::get_default_collide_mask()", header: "geomNode.h".}

func classSlot*(_: typedesc[CullBinAttrib]): int {.importcpp: "CullBinAttrib::get_class_slot()", header: "cullBinAttrib.h".}

func classSlot*(_: typedesc[CullFaceAttrib]): int {.importcpp: "CullFaceAttrib::get_class_slot()", header: "cullFaceAttrib.h".}

func classSlot*(_: typedesc[FogAttrib]): int {.importcpp: "FogAttrib::get_class_slot()", header: "fogAttrib.h".}

func classSlot*(_: typedesc[RescaleNormalAttrib]): int {.importcpp: "RescaleNormalAttrib::get_class_slot()", header: "rescaleNormalAttrib.h".}

func classSlot*(_: typedesc[DepthOffsetAttrib]): int {.importcpp: "DepthOffsetAttrib::get_class_slot()", header: "depthOffsetAttrib.h".}

func classSlot*(_: typedesc[DepthTestAttrib]): int {.importcpp: "DepthTestAttrib::get_class_slot()", header: "depthTestAttrib.h".}

func classSlot*(_: typedesc[DepthWriteAttrib]): int {.importcpp: "DepthWriteAttrib::get_class_slot()", header: "depthWriteAttrib.h".}

type LightAttrib_onLights = distinct LightAttrib

template onLights*(this: LightAttrib): LightAttrib_onLights = LightAttrib_onLights(this)

type LightAttrib_offLights = distinct LightAttrib

template offLights*(this: LightAttrib): LightAttrib_offLights = LightAttrib_offLights(this)

func classSlot*(_: typedesc[LightAttrib]): int {.importcpp: "LightAttrib::get_class_slot()", header: "lightAttrib.h".}

func classSlot*(_: typedesc[LightRampAttrib]): int {.importcpp: "LightRampAttrib::get_class_slot()", header: "lightRampAttrib.h".}

type LoaderFileTypeRegistry_types = distinct LoaderFileTypeRegistry

template types*(this: LoaderFileTypeRegistry): LoaderFileTypeRegistry_types = LoaderFileTypeRegistry_types(this)

func classSlot*(_: typedesc[MaterialAttrib]): int {.importcpp: "MaterialAttrib::get_class_slot()", header: "materialAttrib.h".}

type TextureAttrib_onStages = distinct TextureAttrib

template onStages*(this: TextureAttrib): TextureAttrib_onStages = TextureAttrib_onStages(this)

type TextureAttrib_textures = distinct TextureAttrib

template textures*(this: TextureAttrib): TextureAttrib_textures = TextureAttrib_textures(this)

type TextureAttrib_samplers = distinct TextureAttrib

template samplers*(this: TextureAttrib): TextureAttrib_samplers = TextureAttrib_samplers(this)

type TextureAttrib_offStages = distinct TextureAttrib

template offStages*(this: TextureAttrib): TextureAttrib_offStages = TextureAttrib_offStages(this)

func classSlot*(_: typedesc[TextureAttrib]): int {.importcpp: "TextureAttrib::get_class_slot()", header: "textureAttrib.h".}

func classSlot*(_: typedesc[TexGenAttrib]): int {.importcpp: "TexGenAttrib::get_class_slot()", header: "texGenAttrib.h".}

type OccluderNode_vertices = distinct OccluderNode

template vertices*(this: OccluderNode): OccluderNode_vertices = OccluderNode_vertices(this)

func classSlot*(_: typedesc[ShaderAttrib]): int {.importcpp: "ShaderAttrib::get_class_slot()", header: "shaderAttrib.h".}

type PortalNode_vertices = distinct PortalNode

template vertices*(this: PortalNode): PortalNode_vertices = PortalNode_vertices(this)

func classSlot*(_: typedesc[ScissorAttrib]): int {.importcpp: "ScissorAttrib::get_class_slot()", header: "scissorAttrib.h".}

func classSlot*(_: typedesc[ShadeModelAttrib]): int {.importcpp: "ShadeModelAttrib::get_class_slot()", header: "shadeModelAttrib.h".}

func classSlot*(_: typedesc[StencilAttrib]): int {.importcpp: "StencilAttrib::get_class_slot()", header: "stencilAttrib.h".}

type MicrophoneAudio_options = distinct typedesc[MicrophoneAudio]

proc `[]`*(_: MicrophoneAudio_options, n: int): MicrophoneAudio {.importcpp: "#MicrophoneAudio::get_option(#)", header: "microphoneAudio.h".}

template options*(this: typedesc[MicrophoneAudio]): MicrophoneAudio_options = MicrophoneAudio_options(this)

func len*(_: MicrophoneAudio_options): int {.importcpp: "MicrophoneAudio::get_num_options()", header: "microphoneAudio.h".}

type Texture_auxData = distinct Texture

template auxData*(this: Texture): Texture_auxData = Texture_auxData(this)

type AnimGroup_children = distinct AnimGroup

template children*(this: AnimGroup): AnimGroup_children = AnimGroup_children(this)

type PartGroup_children = distinct PartGroup

template children*(this: PartGroup): PartGroup_children = PartGroup_children(this)

type PartBundle_nodes = distinct PartBundle

template nodes*(this: PartBundle): PartBundle_nodes = PartBundle_nodes(this)

type PartBundleNode_bundles = distinct PartBundleNode

template bundles*(this: PartBundleNode): PartBundleNode_bundles = PartBundleNode_bundles(this)

type PartBundleNode_bundleHandles = distinct PartBundleNode

template bundleHandles*(this: PartBundleNode): PartBundleNode_bundleHandles = PartBundleNode_bundleHandles(this)

type PStatClient_collectors = distinct PStatClient

template collectors*(this: PStatClient): PStatClient_collectors = PStatClient_collectors(this)

type PStatClient_threads = distinct PStatClient

template threads*(this: PStatClient): PStatClient_threads = PStatClient_threads(this)

type CollisionNode_solids = distinct CollisionNode

template solids*(this: CollisionNode): CollisionNode_solids = CollisionNode_solids(this)

func defaultCollideMask*(_: typedesc[CollisionNode]): CollideMask {.importcpp: "CollisionNode::get_default_collide_mask()", header: "collisionNode.h".}

type CollisionTraverser_colliders = distinct CollisionTraverser

template colliders*(this: CollisionTraverser): CollisionTraverser_colliders = CollisionTraverser_colliders(this)

type CollisionFloorMesh_vertices = distinct CollisionFloorMesh

template vertices*(this: CollisionFloorMesh): CollisionFloorMesh_vertices = CollisionFloorMesh_vertices(this)

type CollisionFloorMesh_triangles = distinct CollisionFloorMesh

template triangles*(this: CollisionFloorMesh): CollisionFloorMesh_triangles = CollisionFloorMesh_triangles(this)

type CollisionPolygon_points = distinct CollisionPolygon

template points*(this: CollisionPolygon): CollisionPolygon_points = CollisionPolygon_points(this)

type CollisionHandlerEvent_inPatterns = distinct CollisionHandlerEvent

template inPatterns*(this: CollisionHandlerEvent): CollisionHandlerEvent_inPatterns = CollisionHandlerEvent_inPatterns(this)

type CollisionHandlerEvent_againPatterns = distinct CollisionHandlerEvent

template againPatterns*(this: CollisionHandlerEvent): CollisionHandlerEvent_againPatterns = CollisionHandlerEvent_againPatterns(this)

type CollisionHandlerEvent_outPatterns = distinct CollisionHandlerEvent

template outPatterns*(this: CollisionHandlerEvent): CollisionHandlerEvent_outPatterns = CollisionHandlerEvent_outPatterns(this)

type CollisionHandlerQueue_entries = distinct CollisionHandlerQueue

template entries*(this: CollisionHandlerQueue): CollisionHandlerQueue_entries = CollisionHandlerQueue_entries(this)

func configProperties*(_: typedesc[WindowProperties]): WindowProperties {.importcpp: "WindowProperties::get_config_properties()", header: "windowProperties.h".}

func default*(_: typedesc[WindowProperties]): WindowProperties {.importcpp: "WindowProperties::get_default()", header: "windowProperties.h".}

proc `default=`*(_: typedesc[WindowProperties], defaultProperties: WindowProperties) {.importcpp: "#WindowProperties::set_default(#)", header: "windowProperties.h".}

type GraphicsOutput_displayRegions = distinct GraphicsOutput

template displayRegions*(this: GraphicsOutput): GraphicsOutput_displayRegions = GraphicsOutput_displayRegions(this)

type GraphicsOutput_activeDisplayRegions = distinct GraphicsOutput

template activeDisplayRegions*(this: GraphicsOutput): GraphicsOutput_activeDisplayRegions = GraphicsOutput_activeDisplayRegions(this)

type GraphicsEngine_windows = distinct GraphicsEngine

template windows*(this: GraphicsEngine): GraphicsEngine_windows = GraphicsEngine_windows(this)

type GraphicsPipeSelection_pipeTypes = distinct GraphicsPipeSelection

template pipeTypes*(this: GraphicsPipeSelection): GraphicsPipeSelection_pipeTypes = GraphicsPipeSelection_pipeTypes(this)

func mainThread*(_: typedesc[Thread]): Thread {.importcpp: "Thread::get_main_thread()", header: "thread.h".}

func externalThread*(_: typedesc[Thread]): Thread {.importcpp: "Thread::get_external_thread()", header: "thread.h".}

func currentThread*(_: typedesc[Thread]): Thread {.importcpp: "Thread::get_current_thread()", header: "thread.h".}

func currentPipelineStage*(_: typedesc[Thread]): int {.importcpp: "Thread::get_current_pipeline_stage()", header: "thread.h".}

func threadingSupported*(_: typedesc[Thread]): bool {.importcpp: "Thread::is_threading_supported()", header: "thread.h".}

func trueThreads*(_: typedesc[Thread]): bool {.importcpp: "Thread::is_true_threads()", header: "thread.h".}

func simpleThreads*(_: typedesc[Thread]): bool {.importcpp: "Thread::is_simple_threads()", header: "thread.h".}

type ButtonEventList_events = distinct ButtonEventList

template events*(this: ButtonEventList): ButtonEventList_events = ButtonEventList_events(this)

type Event_parameters = distinct Event

template parameters*(this: Event): Event_parameters = Event_parameters(this)

type GeomVertexArrayFormat_columns = distinct GeomVertexArrayFormat

template columns*(this: GeomVertexArrayFormat): GeomVertexArrayFormat_columns = GeomVertexArrayFormat_columns(this)

type GeomVertexFormat_arrays = distinct GeomVertexFormat

template arrays*(this: GeomVertexFormat): GeomVertexFormat_arrays = GeomVertexFormat_arrays(this)

type GeomVertexFormat_points = distinct GeomVertexFormat

template points*(this: GeomVertexFormat): GeomVertexFormat_points = GeomVertexFormat_points(this)

type GeomVertexFormat_vectors = distinct GeomVertexFormat

template vectors*(this: GeomVertexFormat): GeomVertexFormat_vectors = GeomVertexFormat_vectors(this)

type GeomVertexFormat_columns = distinct GeomVertexFormat

template columns*(this: GeomVertexFormat): GeomVertexFormat_columns = GeomVertexFormat_columns(this)

func saveFile*(_: typedesc[VertexDataPage]): VertexDataSaveFile {.importcpp: "VertexDataPage::get_save_file()", header: "vertexDataPage.h".}

type TransformTable_transforms = distinct TransformTable

template transforms*(this: TransformTable): TransformTable_transforms = TransformTable_transforms(this)

type TransformBlend_transforms = distinct TransformBlend

template transforms*(this: TransformBlend): TransformBlend_transforms = TransformBlend_transforms(this)

type TransformBlend_weights = distinct TransformBlend

template weights*(this: TransformBlend): TransformBlend_weights = TransformBlend_weights(this)

type TransformBlendTable_blends = distinct TransformBlendTable

template blends*(this: TransformBlendTable): TransformBlendTable_blends = TransformBlendTable_blends(this)

type GeomVertexData_arrays = distinct GeomVertexData

template arrays*(this: GeomVertexData): GeomVertexData_arrays = GeomVertexData_arrays(this)

func default*(_: typedesc[TextureStage]): TextureStage {.importcpp: "TextureStage::get_default()", header: "textureStage.h".}

type Geom_primitives = distinct Geom

template primitives*(this: Geom): Geom_primitives = Geom_primitives(this)

func mode*(_: typedesc[TextureStagePool]): TextureStagePool_Mode {.importcpp: "TextureStagePool::get_mode()", header: "textureStagePool.h".}

proc `mode=`*(_: typedesc[TextureStagePool], mode: TextureStagePool_Mode) {.importcpp: "#TextureStagePool::set_mode(#)", header: "textureStagePool.h".}

type LMatrix3f_rows = distinct LMatrix3f

template rows*(this: LMatrix3f): LMatrix3f_rows = LMatrix3f_rows(this)

func len*(_: LMatrix3f_rows): int {.importcpp: "LMatrix3f::size()", header: "lmatrix.h".}

type LMatrix3f_cols = distinct LMatrix3f

template cols*(this: LMatrix3f): LMatrix3f_cols = LMatrix3f_cols(this)

func len*(_: LMatrix3f_cols): int {.importcpp: "LMatrix3f::size()", header: "lmatrix.h".}

type LMatrix4f_rows = distinct LMatrix4f

template rows*(this: LMatrix4f): LMatrix4f_rows = LMatrix4f_rows(this)

func len*(_: LMatrix4f_rows): int {.importcpp: "LMatrix4f::size()", header: "lmatrix.h".}

type LMatrix4f_cols = distinct LMatrix4f

template cols*(this: LMatrix4f): LMatrix4f_cols = LMatrix4f_cols(this)

func len*(_: LMatrix4f_cols): int {.importcpp: "LMatrix4f::size()", header: "lmatrix.h".}

type LMatrix3d_rows = distinct LMatrix3d

template rows*(this: LMatrix3d): LMatrix3d_rows = LMatrix3d_rows(this)

func len*(_: LMatrix3d_rows): int {.importcpp: "LMatrix3d::size()", header: "lmatrix.h".}

type LMatrix3d_cols = distinct LMatrix3d

template cols*(this: LMatrix3d): LMatrix3d_cols = LMatrix3d_cols(this)

func len*(_: LMatrix3d_cols): int {.importcpp: "LMatrix3d::size()", header: "lmatrix.h".}

type LMatrix4d_rows = distinct LMatrix4d

template rows*(this: LMatrix4d): LMatrix4d_rows = LMatrix4d_rows(this)

func len*(_: LMatrix4d_rows): int {.importcpp: "LMatrix4d::size()", header: "lmatrix.h".}

type LMatrix4d_cols = distinct LMatrix4d

template cols*(this: LMatrix4d): LMatrix4d_cols = LMatrix4d_cols(this)

func len*(_: LMatrix4d_cols): int {.importcpp: "LMatrix4d::size()", header: "lmatrix.h".}

type BoundingBox_points = distinct BoundingBox

template points*(this: BoundingBox): BoundingBox_points = BoundingBox_points(this)

type BoundingBox_planes = distinct BoundingBox

template planes*(this: BoundingBox): BoundingBox_planes = BoundingBox_planes(this)

type BoundingHexahedron_points = distinct BoundingHexahedron

template points*(this: BoundingHexahedron): BoundingHexahedron_points = BoundingHexahedron_points(this)

type BoundingHexahedron_planes = distinct BoundingHexahedron

template planes*(this: BoundingHexahedron): BoundingHexahedron_planes = BoundingHexahedron_planes(this)

type IntersectionBoundingVolume_components = distinct IntersectionBoundingVolume

template components*(this: IntersectionBoundingVolume): IntersectionBoundingVolume_components = IntersectionBoundingVolume_components(this)

type UnionBoundingVolume_components = distinct UnionBoundingVolume

template components*(this: UnionBoundingVolume): UnionBoundingVolume_components = UnionBoundingVolume_components(this)

type Triangulator_vertices = distinct Triangulator

template vertices*(this: Triangulator): Triangulator_vertices = Triangulator_vertices(this)

type Triangulator3_vertices = distinct Triangulator3

template vertices*(this: Triangulator3): Triangulator3_vertices = Triangulator3_vertices(this)

type ParametricCurveCollection_curves = distinct ParametricCurveCollection

template curves*(this: ParametricCurveCollection): ParametricCurveCollection_curves = ParametricCurveCollection_curves(this)

type ParametricCurveCollection_timewarpCurves = distinct ParametricCurveCollection

template timewarpCurves*(this: ParametricCurveCollection): ParametricCurveCollection_timewarpCurves = ParametricCurveCollection_timewarpCurves(this)

type NurbsSurfaceEvaluator_uKnots = distinct NurbsSurfaceEvaluator

template uKnots*(this: NurbsSurfaceEvaluator): NurbsSurfaceEvaluator_uKnots = NurbsSurfaceEvaluator_uKnots(this)

type NurbsSurfaceEvaluator_vKnots = distinct NurbsSurfaceEvaluator

template vKnots*(this: NurbsSurfaceEvaluator): NurbsSurfaceEvaluator_vKnots = NurbsSurfaceEvaluator_vKnots(this)

func vertexColorDimension*(_: typedesc[RopeNode]): int {.importcpp: "RopeNode::get_vertex_color_dimension()", header: "ropeNode.h".}

func vertexThicknessDimension*(_: typedesc[RopeNode]): int {.importcpp: "RopeNode::get_vertex_thickness_dimension()", header: "ropeNode.h".}

type PNMFileType_extensions = distinct PNMFileType

template extensions*(this: PNMFileType): PNMFileType_extensions = PNMFileType_extensions(this)

type PNMFileTypeRegistry_types = distinct PNMFileTypeRegistry

template types*(this: PNMFileTypeRegistry): PNMFileTypeRegistry_types = PNMFileTypeRegistry_types(this)

type DynamicTextFont_pages = distinct DynamicTextFont

template pages*(this: DynamicTextFont): DynamicTextFont_pages = DynamicTextFont_pages(this)

type ButtonThrower_parameters = distinct ButtonThrower

template parameters*(this: ButtonThrower): ButtonThrower_parameters = ButtonThrower_parameters(this)

type MouseWatcherBase_regions = distinct MouseWatcherBase

template regions*(this: MouseWatcherBase): MouseWatcherBase_regions = MouseWatcherBase_regions(this)

type ModifierButtons_buttons = distinct ModifierButtons

template buttons*(this: ModifierButtons): ModifierButtons_buttons = ModifierButtons_buttons(this)

func dlsPathname*(_: typedesc[AudioManager]): Filename {.importcpp: "AudioManager::get_dls_pathname()", header: "audioManager.h".}

func clickPrefix*(_: typedesc[PGButton]): string {.importcpp: "nimStringFromStdString(PGButton::get_click_prefix())", header: "pgButton.h".}

func hostName*(_: typedesc[ConnectionManager]): string {.importcpp: "nimStringFromStdString(ConnectionManager::get_host_name())", header: "connectionManager.h".}

proc getTotalAlloc*(_: typedesc[NeverFreeMemory]): int {.importcpp: "NeverFreeMemory::get_total_alloc()", header: "neverFreeMemory.h".}

proc getTotalUsed*(_: typedesc[NeverFreeMemory]): int {.importcpp: "NeverFreeMemory::get_total_used()", header: "neverFreeMemory.h".}

proc getTotalUnused*(_: typedesc[NeverFreeMemory]): int {.importcpp: "NeverFreeMemory::get_total_unused()", header: "neverFreeMemory.h".}

proc initTypeHandle*(): TypeHandle {.importcpp: "TypeHandle()".}

proc initTypeHandle*(param0: TypeHandle): TypeHandle {.importcpp: "TypeHandle(#)".}

proc none*(_: typedesc[TypeHandle]): TypeHandle {.importcpp: "TypeHandle::none()", header: "typeHandle.h".}

proc reregisterTypes*(_: typedesc[TypeRegistry]) {.importcpp: "TypeRegistry::reregister_types()", header: "typeRegistry.h".}

proc initTypeRegistry*(param0: TypeRegistry): TypeRegistry {.importcpp: "TypeRegistry(#)".}

proc getClassType*(_: typedesc[TypedObject]): TypeHandle {.importcpp: "TypedObject::get_class_type()", header: "typedObject.h".}

proc initfstream*(): fstream {.importcpp: "fstream()".}

proc initifstream*(): ifstream {.importcpp: "ifstream()".}

proc initofstream*(): ofstream {.importcpp: "ofstream()".}

proc initIFileStream*(): IFileStream {.importcpp: "IFileStream()".}

proc initIFileStream*(filename: string): IFileStream {.importcpp: "IFileStream(nimStringToStdString(#))", header: stringConversionCode.}

proc initOFileStream*(): OFileStream {.importcpp: "OFileStream()".}

proc initOFileStream*(filename: string): OFileStream {.importcpp: "OFileStream(nimStringToStdString(#))", header: stringConversionCode.}

proc initFileStream*(): FileStream {.importcpp: "FileStream()".}

proc initFileStream*(filename: string): FileStream {.importcpp: "FileStream(nimStringToStdString(#))", header: stringConversionCode.}

proc newTextEncoder*(): TextEncoder {.importcpp: "new TextEncoder()".}

proc newTextEncoder*(copy: TextNode | TextEncoder): TextEncoder {.importcpp: "new TextEncoder(#)".}

proc setDefaultEncoding*(_: typedesc[TextEncoder], encoding: TextEncoder_Encoding) {.importcpp: "#TextEncoder::set_default_encoding(#)", header: "textEncoder.h".}

proc getDefaultEncoding*(_: typedesc[TextEncoder]): TextEncoder_Encoding {.importcpp: "TextEncoder::get_default_encoding()", header: "textEncoder.h".}

proc reencodeText*(_: typedesc[TextEncoder], text: string, `from`: TextEncoder_Encoding, to: TextEncoder_Encoding): string {.importcpp: "nimStringFromStdString(#TextEncoder::reencode_text(nimStringToStdString(#), #, #))", header: "textEncoder.h".}

proc unicodeIsalpha*(_: typedesc[TextEncoder], character: int): bool {.importcpp: "#TextEncoder::unicode_isalpha(#)", header: "textEncoder.h".}

proc unicodeIsdigit*(_: typedesc[TextEncoder], character: int): bool {.importcpp: "#TextEncoder::unicode_isdigit(#)", header: "textEncoder.h".}

proc unicodeIspunct*(_: typedesc[TextEncoder], character: int): bool {.importcpp: "#TextEncoder::unicode_ispunct(#)", header: "textEncoder.h".}

proc unicodeIslower*(_: typedesc[TextEncoder], character: int): bool {.importcpp: "#TextEncoder::unicode_islower(#)", header: "textEncoder.h".}

proc unicodeIsupper*(_: typedesc[TextEncoder], character: int): bool {.importcpp: "#TextEncoder::unicode_isupper(#)", header: "textEncoder.h".}

proc unicodeIsspace*(_: typedesc[TextEncoder], character: int): bool {.importcpp: "#TextEncoder::unicode_isspace(#)", header: "textEncoder.h".}

proc unicodeToupper*(_: typedesc[TextEncoder], character: int): int {.importcpp: "#TextEncoder::unicode_toupper(#)", header: "textEncoder.h".}

proc unicodeTolower*(_: typedesc[TextEncoder], character: int): int {.importcpp: "#TextEncoder::unicode_tolower(#)", header: "textEncoder.h".}

proc upper*(_: typedesc[TextEncoder], source: string): string {.importcpp: "nimStringFromStdString(#TextEncoder::upper(nimStringToStdString(#)))", header: "textEncoder.h".}

proc upper*(_: typedesc[TextEncoder], source: string, encoding: TextEncoder_Encoding): string {.importcpp: "nimStringFromStdString(#TextEncoder::upper(nimStringToStdString(#), #))", header: "textEncoder.h".}

proc lower*(_: typedesc[TextEncoder], source: string): string {.importcpp: "nimStringFromStdString(#TextEncoder::lower(nimStringToStdString(#)))", header: "textEncoder.h".}

proc lower*(_: typedesc[TextEncoder], source: string, encoding: TextEncoder_Encoding): string {.importcpp: "nimStringFromStdString(#TextEncoder::lower(nimStringToStdString(#), #))", header: "textEncoder.h".}

proc initFilename*(): Filename {.importcpp: "Filename()".}

proc initFilename*(dirname: Filename, basename: Filename): Filename {.importcpp: "Filename(#, #)".}

proc textFilename*(_: typedesc[Filename], filename: Filename): Filename {.importcpp: "#Filename::text_filename(#)", header: "filename.h".}

proc textFilename*(_: typedesc[Filename], filename: string): Filename {.importcpp: "#Filename::text_filename(nimStringToStdString(#))", header: "filename.h".}

proc binaryFilename*(_: typedesc[Filename], filename: Filename): Filename {.importcpp: "#Filename::binary_filename(#)", header: "filename.h".}

proc binaryFilename*(_: typedesc[Filename], filename: string): Filename {.importcpp: "#Filename::binary_filename(nimStringToStdString(#))", header: "filename.h".}

proc dsoFilename*(_: typedesc[Filename], filename: string): Filename {.importcpp: "#Filename::dso_filename(nimStringToStdString(#))", header: "filename.h".}

proc executableFilename*(_: typedesc[Filename], filename: string): Filename {.importcpp: "#Filename::executable_filename(nimStringToStdString(#))", header: "filename.h".}

proc patternFilename*(_: typedesc[Filename], filename: string): Filename {.importcpp: "#Filename::pattern_filename(nimStringToStdString(#))", header: "filename.h".}

proc fromOsSpecific*(_: typedesc[Filename], osSpecific: string, `type`: Filename_Type): Filename {.importcpp: "#Filename::from_os_specific(nimStringToStdString(#), #)", header: "filename.h".}

proc fromOsSpecific*(_: typedesc[Filename], osSpecific: string): Filename {.importcpp: "#Filename::from_os_specific(nimStringToStdString(#))", header: "filename.h".}

proc fromOsSpecificW*(_: typedesc[Filename], osSpecific: string, `type`: Filename_Type): Filename {.importcpp: "#Filename::from_os_specific_w(nimStringToStdString(#), #)", header: "filename.h".}

proc fromOsSpecificW*(_: typedesc[Filename], osSpecific: string): Filename {.importcpp: "#Filename::from_os_specific_w(nimStringToStdString(#))", header: "filename.h".}

proc expandFrom*(_: typedesc[Filename], userString: string, `type`: Filename_Type): Filename {.importcpp: "#Filename::expand_from(nimStringToStdString(#), #)", header: "filename.h".}

proc expandFrom*(_: typedesc[Filename], userString: string): Filename {.importcpp: "#Filename::expand_from(nimStringToStdString(#))", header: "filename.h".}

proc temporary*(_: typedesc[Filename], dirname: string, prefix: string, suffix: string, `type`: Filename_Type): Filename {.importcpp: "#Filename::temporary(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: "filename.h".}

proc temporary*(_: typedesc[Filename], dirname: string, prefix: string, suffix: string): Filename {.importcpp: "#Filename::temporary(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: "filename.h".}

proc temporary*(_: typedesc[Filename], dirname: string, prefix: string): Filename {.importcpp: "#Filename::temporary(nimStringToStdString(#), nimStringToStdString(#))", header: "filename.h".}

proc getHomeDirectory*(_: typedesc[Filename]): Filename {.importcpp: "Filename::get_home_directory()", header: "filename.h".}

proc getTempDirectory*(_: typedesc[Filename]): Filename {.importcpp: "Filename::get_temp_directory()", header: "filename.h".}

proc getUserAppdataDirectory*(_: typedesc[Filename]): Filename {.importcpp: "Filename::get_user_appdata_directory()", header: "filename.h".}

proc getCommonAppdataDirectory*(_: typedesc[Filename]): Filename {.importcpp: "Filename::get_common_appdata_directory()", header: "filename.h".}

proc setFilesystemEncoding*(_: typedesc[Filename], encoding: TextEncoder_Encoding) {.importcpp: "#Filename::set_filesystem_encoding(#)", header: "filename.h".}

proc getFilesystemEncoding*(_: typedesc[Filename]): TextEncoder_Encoding {.importcpp: "Filename::get_filesystem_encoding()", header: "filename.h".}

proc getClassType*(_: typedesc[Filename]): TypeHandle {.importcpp: "Filename::get_class_type()", header: "filename.h".}

proc getVersionString*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_version_string())", header: "pandaSystem.h".}

proc getPackageVersionString*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_package_version_string())", header: "pandaSystem.h".}

proc getPackageHostUrl*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_package_host_url())", header: "pandaSystem.h".}

proc getP3dCoreapiVersionString*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_p3d_coreapi_version_string())", header: "pandaSystem.h".}

proc getMajorVersion*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_major_version()", header: "pandaSystem.h".}

proc getMinorVersion*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_minor_version()", header: "pandaSystem.h".}

proc getSequenceVersion*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_sequence_version()", header: "pandaSystem.h".}

proc isOfficialVersion*(_: typedesc[PandaSystem]): bool {.importcpp: "PandaSystem::is_official_version()", header: "pandaSystem.h".}

proc getMemoryAlignment*(_: typedesc[PandaSystem]): int {.importcpp: "PandaSystem::get_memory_alignment()", header: "pandaSystem.h".}

proc getDistributor*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_distributor())", header: "pandaSystem.h".}

proc getCompiler*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_compiler())", header: "pandaSystem.h".}

proc getBuildDate*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_build_date())", header: "pandaSystem.h".}

proc getGitCommit*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_git_commit())", header: "pandaSystem.h".}

proc getPlatform*(_: typedesc[PandaSystem]): string {.importcpp: "nimStringFromStdString(PandaSystem::get_platform())", header: "pandaSystem.h".}

proc getGlobalPtr*(_: typedesc[PandaSystem]): PandaSystem {.importcpp: "PandaSystem::get_global_ptr()", header: "pandaSystem.h".}

proc getClassType*(_: typedesc[PandaSystem]): TypeHandle {.importcpp: "PandaSystem::get_class_type()", header: "pandaSystem.h".}

proc initDSearchPath*(): DSearchPath {.importcpp: "DSearchPath()".}

proc initDSearchPath*(copy: DSearchPath): DSearchPath {.importcpp: "DSearchPath(#)".}

proc initDSearchPath*(directory: Filename): DSearchPath {.importcpp: "DSearchPath(#)".}

proc initDSearchPath*(path: string, separator: string): DSearchPath {.importcpp: "DSearchPath(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initDSearchPath*(path: string): DSearchPath {.importcpp: "DSearchPath(nimStringToStdString(#))", header: stringConversionCode.}

proc searchPath*(_: typedesc[DSearchPath], filename: Filename, path: string, separator: string): Filename {.importcpp: "#DSearchPath::search_path(#, nimStringToStdString(#), nimStringToStdString(#))", header: "dSearchPath.h".}

proc searchPath*(_: typedesc[DSearchPath], filename: Filename, path: string): Filename {.importcpp: "#DSearchPath::search_path(#, nimStringToStdString(#))", header: "dSearchPath.h".}

proc hasEnvironmentVariable*(_: typedesc[ExecutionEnvironment], `var`: string): bool {.importcpp: "#ExecutionEnvironment::has_environment_variable(nimStringToStdString(#))", header: "executionEnvironment.h".}

proc getEnvironmentVariable*(_: typedesc[ExecutionEnvironment], `var`: string): string {.importcpp: "nimStringFromStdString(#ExecutionEnvironment::get_environment_variable(nimStringToStdString(#)))", header: "executionEnvironment.h".}

proc setEnvironmentVariable*(_: typedesc[ExecutionEnvironment], `var`: string, value: string) {.importcpp: "#ExecutionEnvironment::set_environment_variable(nimStringToStdString(#), nimStringToStdString(#))", header: "executionEnvironment.h".}

proc shadowEnvironmentVariable*(_: typedesc[ExecutionEnvironment], `var`: string, value: string) {.importcpp: "#ExecutionEnvironment::shadow_environment_variable(nimStringToStdString(#), nimStringToStdString(#))", header: "executionEnvironment.h".}

proc clearShadow*(_: typedesc[ExecutionEnvironment], `var`: string) {.importcpp: "#ExecutionEnvironment::clear_shadow(nimStringToStdString(#))", header: "executionEnvironment.h".}

proc expandString*(_: typedesc[ExecutionEnvironment], str: string): string {.importcpp: "nimStringFromStdString(#ExecutionEnvironment::expand_string(nimStringToStdString(#)))", header: "executionEnvironment.h".}

proc getNumArgs*(_: typedesc[ExecutionEnvironment]): int {.importcpp: "ExecutionEnvironment::get_num_args()", header: "executionEnvironment.h".}

proc getArg*(_: typedesc[ExecutionEnvironment], n: int): string {.importcpp: "nimStringFromStdString(#ExecutionEnvironment::get_arg(#))", header: "executionEnvironment.h".}

proc getBinaryName*(_: typedesc[ExecutionEnvironment]): string {.importcpp: "nimStringFromStdString(ExecutionEnvironment::get_binary_name())", header: "executionEnvironment.h".}

proc getDtoolName*(_: typedesc[ExecutionEnvironment]): string {.importcpp: "nimStringFromStdString(ExecutionEnvironment::get_dtool_name())", header: "executionEnvironment.h".}

proc setBinaryName*(_: typedesc[ExecutionEnvironment], name: string) {.importcpp: "#ExecutionEnvironment::set_binary_name(nimStringToStdString(#))", header: "executionEnvironment.h".}

proc setDtoolName*(_: typedesc[ExecutionEnvironment], name: string) {.importcpp: "#ExecutionEnvironment::set_dtool_name(nimStringToStdString(#))", header: "executionEnvironment.h".}

proc getCwd*(_: typedesc[ExecutionEnvironment]): Filename {.importcpp: "ExecutionEnvironment::get_cwd()", header: "executionEnvironment.h".}

proc initExecutionEnvironment*(param0: ExecutionEnvironment): ExecutionEnvironment {.importcpp: "ExecutionEnvironment(#)".}

proc initGlobPattern*(copy: GlobPattern): GlobPattern {.importcpp: "GlobPattern(#)".}

proc initGlobPattern*(pattern: string): GlobPattern {.importcpp: "GlobPattern(nimStringToStdString(#))", header: stringConversionCode.}

proc initGlobPattern*(): GlobPattern {.importcpp: "GlobPattern()".}

proc initLineStream*(): LineStream {.importcpp: "LineStream()".}

proc initConfigFlags*(): ConfigFlags {.importcpp: "ConfigFlags()".}

proc initConfigFlags*(param0: ConfigFlags): ConfigFlags {.importcpp: "ConfigFlags(#)".}

proc getDefaultPage*(_: typedesc[ConfigPage]): ConfigPage {.importcpp: "ConfigPage::get_default_page()", header: "configPage.h".}

proc getLocalPage*(_: typedesc[ConfigPage]): ConfigPage {.importcpp: "ConfigPage::get_local_page()", header: "configPage.h".}

proc initNotify*(): Notify {.importcpp: "Notify()".}

proc initNotify*(param0: Notify): Notify {.importcpp: "Notify(#)".}

proc null*(_: typedesc[Notify]): ostream {.importcpp: "Notify::null()", header: "pnotify.h".}

proc writeString*(_: typedesc[Notify], str: string) {.importcpp: "#Notify::write_string(nimStringToStdString(#))", header: "pnotify.h".}

proc getGlobalPtr*(_: typedesc[ConfigPageManager]): ConfigPageManager {.importcpp: "ConfigPageManager::get_global_ptr()", header: "configPageManager.h".}

proc getGlobalPtr*(_: typedesc[ConfigVariableManager]): ConfigVariableManager {.importcpp: "ConfigVariableManager::get_global_ptr()", header: "configVariableManager.h".}

proc initConfigVariable*(param0: ConfigVariable): ConfigVariable {.importcpp: "ConfigVariable(#)".}

proc initConfigVariable*(name: string): ConfigVariable {.importcpp: "ConfigVariable(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableBool*(param0: ConfigVariableBool): ConfigVariableBool {.importcpp: "ConfigVariableBool(#)".}

proc initConfigVariableBool*(name: string): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableBool*(name: string, defaultValue: bool, description: string, flags: int): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableBool*(name: string, defaultValue: bool, description: string): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableBool*(name: string, defaultValue: bool): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableBool*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableBool*(name: string, defaultValue: string, description: string): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableBool*(name: string, defaultValue: string): ConfigVariableBool {.importcpp: "ConfigVariableBool(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableDouble*(param0: ConfigVariableDouble): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(#)".}

proc initConfigVariableDouble*(name: string): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableDouble*(name: string, defaultValue: float64, description: string, flags: int): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableDouble*(name: string, defaultValue: float64, description: string): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableDouble*(name: string, defaultValue: float64): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableDouble*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableDouble*(name: string, defaultValue: string, description: string): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableDouble*(name: string, defaultValue: string): ConfigVariableDouble {.importcpp: "ConfigVariableDouble(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableFilename*(param0: ConfigVariableFilename): ConfigVariableFilename {.importcpp: "ConfigVariableFilename(#)".}

proc initConfigVariableFilename*(name: string): ConfigVariableFilename {.importcpp: "ConfigVariableFilename(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableFilename*(name: string, defaultValue: Filename, description: string, flags: int): ConfigVariableFilename {.importcpp: "ConfigVariableFilename(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableFilename*(name: string, defaultValue: Filename, description: string): ConfigVariableFilename {.importcpp: "ConfigVariableFilename(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableFilename*(name: string, defaultValue: Filename): ConfigVariableFilename {.importcpp: "ConfigVariableFilename(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt*(param0: ConfigVariableInt): ConfigVariableInt {.importcpp: "ConfigVariableInt(#)".}

proc initConfigVariableInt*(name: string): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt*(name: string, defaultValue: int, description: string, flags: int): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt*(name: string, defaultValue: int, description: string): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt*(name: string, defaultValue: int): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt*(name: string, defaultValue: string, description: string): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt*(name: string, defaultValue: string): ConfigVariableInt {.importcpp: "ConfigVariableInt(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt64*(param0: ConfigVariableInt64): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(#)".}

proc initConfigVariableInt64*(name: string): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt64*(name: string, defaultValue: clonglong, description: string, flags: int): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt64*(name: string, defaultValue: clonglong, description: string): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt64*(name: string, defaultValue: clonglong): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt64*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableInt64*(name: string, defaultValue: string, description: string): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableInt64*(name: string, defaultValue: string): ConfigVariableInt64 {.importcpp: "ConfigVariableInt64(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableList*(param0: ConfigVariableList): ConfigVariableList {.importcpp: "ConfigVariableList(#)".}

proc initConfigVariableList*(name: string, description: string, flags: int): ConfigVariableList {.importcpp: "ConfigVariableList(nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableList*(name: string, description: string): ConfigVariableList {.importcpp: "ConfigVariableList(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableList*(name: string): ConfigVariableList {.importcpp: "ConfigVariableList(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string, defaultValue: DSearchPath, description: string, flags: int): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string, defaultValue: DSearchPath, description: string): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string, description: string, flags: int): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string, description: string): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableSearchPath*(name: string, defaultValue: string, description: string): ConfigVariableSearchPath {.importcpp: "ConfigVariableSearchPath(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableString*(param0: ConfigVariableString): ConfigVariableString {.importcpp: "ConfigVariableString(#)".}

proc initConfigVariableString*(name: string): ConfigVariableString {.importcpp: "ConfigVariableString(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableString*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableString {.importcpp: "ConfigVariableString(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableString*(name: string, defaultValue: string, description: string): ConfigVariableString {.importcpp: "ConfigVariableString(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableString*(name: string, defaultValue: string): ConfigVariableString {.importcpp: "ConfigVariableString(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc setServerDelta*(_: typedesc[NotifyCategory], delta: int) {.importcpp: "#NotifyCategory::set_server_delta(#)", header: "notifyCategory.h".}

proc initNotifyCategory*(param0: NotifyCategory): NotifyCategory {.importcpp: "NotifyCategory(#)".}

proc initIDecryptStream*(): IDecryptStream {.importcpp: "IDecryptStream()".}

proc initIDecryptStream*(source: istream, ownsSource: bool, password: string): IDecryptStream {.importcpp: "IDecryptStream(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc initOEncryptStream*(): OEncryptStream {.importcpp: "OEncryptStream()".}

proc initOEncryptStream*(dest: iostream | ostream, ownsDest: bool, password: string): OEncryptStream {.importcpp: "OEncryptStream(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc initStreamReader*(copy: StreamReader): StreamReader {.importcpp: "StreamReader(#)".}

proc initStreamReader*(`in`: istream, ownsStream: bool): StreamReader {.importcpp: "StreamReader(#, #)".}

proc initStreamWriter*(copy: StreamWriter): StreamWriter {.importcpp: "StreamWriter(#)".}

proc initStreamWriter*(`out`: iostream | ostream, ownsStream: bool): StreamWriter {.importcpp: "StreamWriter(#, #)".}

proc initIStreamWrapper*(stream: istream): IStreamWrapper {.importcpp: "IStreamWrapper(#)".}

proc initOStreamWrapper*(stream: iostream | ostream): OStreamWrapper {.importcpp: "OStreamWrapper(#)".}

proc initStreamWrapper*(stream: iostream): StreamWrapper {.importcpp: "StreamWrapper(#)".}

proc initURLSpec*(): URLSpec {.importcpp: "URLSpec()".}

proc initURLSpec*(param0: URLSpec): URLSpec {.importcpp: "URLSpec(#)".}

proc initURLSpec*(url: URLSpec, path: Filename): URLSpec {.importcpp: "URLSpec(#, #)".}

proc initURLSpec*(url: string, serverNameExpected: bool): URLSpec {.importcpp: "URLSpec(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initURLSpec*(url: string): URLSpec {.importcpp: "URLSpec(nimStringToStdString(#))", header: stringConversionCode.}

proc getDefaultPortForScheme*(_: typedesc[URLSpec], scheme: string): int {.importcpp: "#URLSpec::get_default_port_for_scheme(nimStringToStdString(#))", header: "urlSpec.h".}

proc quote*(_: typedesc[URLSpec], source: string, safe: string): string {.importcpp: "nimStringFromStdString(#URLSpec::quote(nimStringToStdString(#), nimStringToStdString(#)))", header: "urlSpec.h".}

proc quote*(_: typedesc[URLSpec], source: string): string {.importcpp: "nimStringFromStdString(#URLSpec::quote(nimStringToStdString(#)))", header: "urlSpec.h".}

proc quotePlus*(_: typedesc[URLSpec], source: string, safe: string): string {.importcpp: "nimStringFromStdString(#URLSpec::quote_plus(nimStringToStdString(#), nimStringToStdString(#)))", header: "urlSpec.h".}

proc quotePlus*(_: typedesc[URLSpec], source: string): string {.importcpp: "nimStringFromStdString(#URLSpec::quote_plus(nimStringToStdString(#)))", header: "urlSpec.h".}

proc unquote*(_: typedesc[URLSpec], source: string): string {.importcpp: "nimStringFromStdString(#URLSpec::unquote(nimStringToStdString(#)))", header: "urlSpec.h".}

proc unquotePlus*(_: typedesc[URLSpec], source: string): string {.importcpp: "nimStringFromStdString(#URLSpec::unquote_plus(nimStringToStdString(#)))", header: "urlSpec.h".}

proc initHTTPEnum*(): HTTPEnum {.importcpp: "HTTPEnum()".}

proc initHTTPEnum*(param0: HTTPEnum): HTTPEnum {.importcpp: "HTTPEnum(#)".}

proc initHTTPDate*(): HTTPDate {.importcpp: "HTTPDate()".}

proc initHTTPDate*(copy: HTTPDate): HTTPDate {.importcpp: "HTTPDate(#)".}

proc initHTTPDate*(format: string): HTTPDate {.importcpp: "HTTPDate(nimStringToStdString(#))", header: stringConversionCode.}

proc initHTTPDate*(time: Time): HTTPDate {.importcpp: "HTTPDate(#)".}

proc now*(_: typedesc[HTTPDate]): HTTPDate {.importcpp: "HTTPDate::now()", header: "httpDate.h".}

proc initHTTPCookie*(): HTTPCookie {.importcpp: "HTTPCookie()".}

proc initHTTPCookie*(param0: HTTPCookie): HTTPCookie {.importcpp: "HTTPCookie(#)".}

proc initHTTPCookie*(format: string, url: URLSpec): HTTPCookie {.importcpp: "HTTPCookie(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initHTTPCookie*(name: string, path: string, domain: string): HTTPCookie {.importcpp: "HTTPCookie(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc newHTTPClient*(): HTTPClient {.importcpp: "new HTTPClient()".}

proc newHTTPClient*(copy: HTTPClient): HTTPClient {.importcpp: "new HTTPClient(#)".}

proc initRandomSeed*(_: typedesc[HTTPClient]) {.importcpp: "HTTPClient::init_random_seed()", header: "httpClient.h".}

proc parseHttpVersionString*(_: typedesc[HTTPClient], version: string): HTTPEnum_HTTPVersion {.importcpp: "#HTTPClient::parse_http_version_string(nimStringToStdString(#))", header: "httpClient.h".}

proc base64Encode*(_: typedesc[HTTPClient], s: string): string {.importcpp: "nimStringFromStdString(#HTTPClient::base64_encode(nimStringToStdString(#)))", header: "httpClient.h".}

proc base64Decode*(_: typedesc[HTTPClient], s: string): string {.importcpp: "nimStringFromStdString(#HTTPClient::base64_decode(nimStringToStdString(#)))", header: "httpClient.h".}

proc getGlobalPtr*(_: typedesc[HTTPClient]): HTTPClient {.importcpp: "HTTPClient::get_global_ptr()", header: "httpClient.h".}

proc initHTTPEntityTag*(): HTTPEntityTag {.importcpp: "HTTPEntityTag()".}

proc initHTTPEntityTag*(copy: HTTPEntityTag): HTTPEntityTag {.importcpp: "HTTPEntityTag(#)".}

proc initHTTPEntityTag*(weak: bool, tag: string): HTTPEntityTag {.importcpp: "HTTPEntityTag(#, nimStringToStdString(#))", header: stringConversionCode.}

proc initHTTPEntityTag*(text: string): HTTPEntityTag {.importcpp: "HTTPEntityTag(nimStringToStdString(#))", header: stringConversionCode.}

proc initDocumentSpec*(): DocumentSpec {.importcpp: "DocumentSpec()".}

proc initDocumentSpec*(copy: DocumentSpec): DocumentSpec {.importcpp: "DocumentSpec(#)".}

proc initDocumentSpec*(url: URLSpec): DocumentSpec {.importcpp: "DocumentSpec(#)".}

proc initDocumentSpec*(url: string): DocumentSpec {.importcpp: "DocumentSpec(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[HTTPChannel]): TypeHandle {.importcpp: "HTTPChannel::get_class_type()", header: "httpChannel.h".}

proc newHTTPChannel*(param0: HTTPChannel): HTTPChannel {.importcpp: "new HTTPChannel(#)".}

proc initDecompressor*(): Decompressor {.importcpp: "Decompressor()".}

proc initDecompressor*(param0: Decompressor): Decompressor {.importcpp: "Decompressor(#)".}

proc initDownloadDb*(): DownloadDb {.importcpp: "DownloadDb()".}

proc initDownloadDb*(param0: DownloadDb): DownloadDb {.importcpp: "DownloadDb(#)".}

proc initDownloadDb*(serverFile: Filename, clientFile: Filename): DownloadDb {.importcpp: "DownloadDb(#, #)".}

proc initDownloadDb*(serverFile: Ramfile, clientFile: Filename): DownloadDb {.importcpp: "DownloadDb(#, #)".}

proc checkCrc*(name: Filename): int {.importcpp: "check_crc(#)", header: "download_utils.h".}

proc checkAdler*(name: Filename): int {.importcpp: "check_adler(#)", header: "download_utils.h".}

proc initExtractor*(): Extractor {.importcpp: "Extractor()".}

proc initMultiplexStream*(): MultiplexStream {.importcpp: "MultiplexStream()".}

proc getClassType*(_: typedesc[VirtualFileHTTP]): TypeHandle {.importcpp: "VirtualFileHTTP::get_class_type()", header: "virtualFileHTTP.h".}

proc newVirtualFileMountHTTP*(root: URLSpec, http: HTTPClient): VirtualFileMountHTTP {.importcpp: "new VirtualFileMountHTTP(#, #)".}

proc newVirtualFileMountHTTP*(root: URLSpec): VirtualFileMountHTTP {.importcpp: "new VirtualFileMountHTTP(#)".}

proc reloadVfsMountUrl*(_: typedesc[VirtualFileMountHTTP]) {.importcpp: "VirtualFileMountHTTP::reload_vfs_mount_url()", header: "virtualFileMountHTTP.h".}

proc getClassType*(_: typedesc[VirtualFileMountHTTP]): TypeHandle {.importcpp: "VirtualFileMountHTTP::get_class_type()", header: "virtualFileMountHTTP.h".}

proc newPatcher*(): Patcher {.importcpp: "new Patcher()".}

proc newPatcher*(param0: Patcher): Patcher {.importcpp: "new Patcher(#)".}

proc newPatcher*(buffer: Buffer): Patcher {.importcpp: "new Patcher(#)".}

proc initStringStream*(): StringStream {.importcpp: "StringStream()".}

proc isTracking*(_: typedesc[MemoryUsage]): bool {.importcpp: "MemoryUsage::is_tracking()", header: "memoryUsage.h".}

proc isCounting*(_: typedesc[MemoryUsage]): bool {.importcpp: "MemoryUsage::is_counting()", header: "memoryUsage.h".}

proc getCurrentCppSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_current_cpp_size()", header: "memoryUsage.h".}

proc getTotalCppSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_total_cpp_size()", header: "memoryUsage.h".}

proc getPandaHeapSingleSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_heap_single_size()", header: "memoryUsage.h".}

proc getPandaHeapArraySize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_heap_array_size()", header: "memoryUsage.h".}

proc getPandaHeapOverhead*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_heap_overhead()", header: "memoryUsage.h".}

proc getPandaMmapSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_panda_mmap_size()", header: "memoryUsage.h".}

proc getExternalSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_external_size()", header: "memoryUsage.h".}

proc getTotalSize*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_total_size()", header: "memoryUsage.h".}

proc getNumPointers*(_: typedesc[MemoryUsage]): int {.importcpp: "MemoryUsage::get_num_pointers()", header: "memoryUsage.h".}

proc getPointers*(_: typedesc[MemoryUsage], result: MemoryUsagePointers) {.importcpp: "#MemoryUsage::get_pointers(#)", header: "memoryUsage.h".}

proc getPointersOfType*(_: typedesc[MemoryUsage], result: MemoryUsagePointers, `type`: TypeHandle) {.importcpp: "#MemoryUsage::get_pointers_of_type(#, #)", header: "memoryUsage.h".}

proc getPointersOfAge*(_: typedesc[MemoryUsage], result: MemoryUsagePointers, `from`: float64, to: float64) {.importcpp: "#MemoryUsage::get_pointers_of_age(#, #, #)", header: "memoryUsage.h".}

proc getPointersWithZeroCount*(_: typedesc[MemoryUsage], result: MemoryUsagePointers) {.importcpp: "#MemoryUsage::get_pointers_with_zero_count(#)", header: "memoryUsage.h".}

proc freeze*(_: typedesc[MemoryUsage]) {.importcpp: "MemoryUsage::freeze()", header: "memoryUsage.h".}

proc showCurrentTypes*(_: typedesc[MemoryUsage]) {.importcpp: "MemoryUsage::show_current_types()", header: "memoryUsage.h".}

proc showTrendTypes*(_: typedesc[MemoryUsage]) {.importcpp: "MemoryUsage::show_trend_types()", header: "memoryUsage.h".}

proc showCurrentAges*(_: typedesc[MemoryUsage]) {.importcpp: "MemoryUsage::show_current_ages()", header: "memoryUsage.h".}

proc showTrendAges*(_: typedesc[MemoryUsage]) {.importcpp: "MemoryUsage::show_trend_ages()", header: "memoryUsage.h".}

proc initMemoryUsage*(param0: MemoryUsage): MemoryUsage {.importcpp: "MemoryUsage(#)".}

proc getClassType*(_: typedesc[ReferenceCount]): TypeHandle {.importcpp: "ReferenceCount::get_class_type()", header: "referenceCount.h".}

proc newBuffer*(param0: Buffer): Buffer {.importcpp: "new Buffer(#)".}

proc compressString*(source: string, compressionLevel: int): string {.importcpp: "nimStringFromStdString(compress_string(nimStringToStdString(#), #))", header: "compress_string.h".}

proc decompressString*(source: string): string {.importcpp: "nimStringFromStdString(decompress_string(nimStringToStdString(#)))", header: "compress_string.h".}

proc compressFile*(source: Filename, dest: Filename, compressionLevel: int): bool {.importcpp: "compress_file(#, #, #)", header: "compress_string.h".}

proc decompressFile*(source: Filename, dest: Filename): bool {.importcpp: "decompress_file(#, #)", header: "compress_string.h".}

proc compressStream*(source: istream, dest: iostream | ostream, compressionLevel: int): bool {.importcpp: "compress_stream(#, #, #)", header: "compress_string.h".}

proc decompressStream*(source: istream, dest: iostream | ostream): bool {.importcpp: "decompress_stream(#, #)", header: "compress_string.h".}

proc copyStream*(source: istream, dest: iostream | ostream): bool {.importcpp: "copy_stream(#, #)", header: "copy_stream.h".}

proc getClassType*(_: typedesc[NodeReferenceCount]): TypeHandle {.importcpp: "NodeReferenceCount::get_class_type()", header: "nodeReferenceCount.h".}

proc initDatagram*(): Datagram {.importcpp: "Datagram()".}

proc initDatagram*(copy: Datagram): Datagram {.importcpp: "Datagram(#)".}

proc getClassType*(_: typedesc[Datagram]): TypeHandle {.importcpp: "Datagram::get_class_type()", header: "datagram.h".}

proc initDatagramIterator*(): DatagramIterator {.importcpp: "DatagramIterator()".}

proc initDatagramIterator*(datagram: Datagram, offset: int): DatagramIterator {.importcpp: "DatagramIterator(#, #)".}

proc initDatagramIterator*(datagram: Datagram): DatagramIterator {.importcpp: "DatagramIterator(#)".}

proc initDatagramIterator*(param0: DatagramIterator): DatagramIterator {.importcpp: "DatagramIterator(#)".}

proc getClassType*(_: typedesc[DatagramIterator]): TypeHandle {.importcpp: "DatagramIterator::get_class_type()", header: "datagramIterator.h".}

proc getClassType*(_: typedesc[TypedReferenceCount]): TypeHandle {.importcpp: "TypedReferenceCount::get_class_type()", header: "typedReferenceCount.h".}

proc newFileReference*(param0: FileReference): FileReference {.importcpp: "new FileReference(#)".}

proc newFileReference*(filename: Filename): FileReference {.importcpp: "new FileReference(#)".}

proc getClassType*(_: typedesc[FileReference]): TypeHandle {.importcpp: "FileReference::get_class_type()", header: "fileReference.h".}

proc encryptString*(source: string, password: string, algorithm: string, keyLength: int, iterationCount: int): string {.importcpp: "nimStringFromStdString(encrypt_string(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #, #))", header: "encrypt_string.h".}

proc encryptString*(source: string, password: string, algorithm: string, keyLength: int): string {.importcpp: "nimStringFromStdString(encrypt_string(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #))", header: "encrypt_string.h".}

proc encryptString*(source: string, password: string, algorithm: string): string {.importcpp: "nimStringFromStdString(encrypt_string(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#)))", header: "encrypt_string.h".}

proc encryptString*(source: string, password: string): string {.importcpp: "nimStringFromStdString(encrypt_string(nimStringToStdString(#), nimStringToStdString(#)))", header: "encrypt_string.h".}

proc decryptString*(source: string, password: string): string {.importcpp: "nimStringFromStdString(decrypt_string(nimStringToStdString(#), nimStringToStdString(#)))", header: "encrypt_string.h".}

proc encryptFile*(source: Filename, dest: Filename, password: string, algorithm: string, keyLength: int, iterationCount: int): bool {.importcpp: "encrypt_file(#, #, nimStringToStdString(#), nimStringToStdString(#), #, #)", header: "encrypt_file.h".}

proc encryptFile*(source: Filename, dest: Filename, password: string, algorithm: string, keyLength: int): bool {.importcpp: "encrypt_file(#, #, nimStringToStdString(#), nimStringToStdString(#), #)", header: "encrypt_file.h".}

proc encryptFile*(source: Filename, dest: Filename, password: string, algorithm: string): bool {.importcpp: "encrypt_file(#, #, nimStringToStdString(#), nimStringToStdString(#))", header: "encrypt_file.h".}

proc encryptFile*(source: Filename, dest: Filename, password: string): bool {.importcpp: "encrypt_file(#, #, nimStringToStdString(#))", header: "encrypt_file.h".}

proc decryptFile*(source: Filename, dest: Filename, password: string): bool {.importcpp: "decrypt_file(#, #, nimStringToStdString(#))", header: "encrypt_file.h".}

proc encryptStream*(source: istream, dest: iostream | ostream, password: string, algorithm: string, keyLength: int, iterationCount: int): bool {.importcpp: "encrypt_stream(#, #, nimStringToStdString(#), nimStringToStdString(#), #, #)", header: "encrypt_stream.h".}

proc encryptStream*(source: istream, dest: iostream | ostream, password: string, algorithm: string, keyLength: int): bool {.importcpp: "encrypt_stream(#, #, nimStringToStdString(#), nimStringToStdString(#), #)", header: "encrypt_stream.h".}

proc encryptStream*(source: istream, dest: iostream | ostream, password: string, algorithm: string): bool {.importcpp: "encrypt_stream(#, #, nimStringToStdString(#), nimStringToStdString(#))", header: "encrypt_stream.h".}

proc encryptStream*(source: istream, dest: iostream | ostream, password: string): bool {.importcpp: "encrypt_stream(#, #, nimStringToStdString(#))", header: "encrypt_stream.h".}

proc decryptStream*(source: istream, dest: iostream | ostream, password: string): bool {.importcpp: "decrypt_stream(#, #, nimStringToStdString(#))", header: "encrypt_stream.h".}

proc errorToText*(err: ErrorUtilCode): string {.importcpp: "nimStringFromStdString(error_to_text(#))", header: "error_utils.h".}

proc getWriteError*(): int {.importcpp: "get_write_error()", header: "error_utils.h".}

proc handleSocketError*(): string {.importcpp: "nimStringFromStdString(handle_socket_error())", header: "error_utils.h".}

proc getNetworkError*(): int {.importcpp: "get_network_error()", header: "error_utils.h".}

proc initRamfile*(): Ramfile {.importcpp: "Ramfile()".}

proc initRamfile*(param0: Ramfile): Ramfile {.importcpp: "Ramfile(#)".}

proc initHashVal*(): HashVal {.importcpp: "HashVal()".}

proc initHashVal*(copy: HashVal): HashVal {.importcpp: "HashVal(#)".}

proc initMemoryUsagePointers*(): MemoryUsagePointers {.importcpp: "MemoryUsagePointers()".}

proc initMemoryUsagePointers*(param0: MemoryUsagePointers): MemoryUsagePointers {.importcpp: "MemoryUsagePointers(#)".}

proc initISubStream*(): ISubStream {.importcpp: "ISubStream()".}

proc initISubStream*(source: IStreamWrapper, start: clonglong, `end`: clonglong): ISubStream {.importcpp: "ISubStream(#, #, #)".}

proc initOSubStream*(): OSubStream {.importcpp: "OSubStream()".}

proc initOSubStream*(dest: StreamWrapper | OStreamWrapper, start: clonglong, `end`: clonglong, append: bool): OSubStream {.importcpp: "OSubStream(#, #, #, #)".}

proc initOSubStream*(dest: StreamWrapper | OStreamWrapper, start: clonglong, `end`: clonglong): OSubStream {.importcpp: "OSubStream(#, #, #)".}

proc initSubStream*(): SubStream {.importcpp: "SubStream()".}

proc initSubStream*(nested: StreamWrapper, start: clonglong, `end`: clonglong, append: bool): SubStream {.importcpp: "SubStream(#, #, #, #)".}

proc initSubStream*(nested: StreamWrapper, start: clonglong, `end`: clonglong): SubStream {.importcpp: "SubStream(#, #, #)".}

proc newMultifile*(): Multifile {.importcpp: "new Multifile()".}

proc closeReadSubfile*(_: typedesc[Multifile], stream: istream) {.importcpp: "#Multifile::close_read_subfile(#)", header: "multifile.h".}

proc getMagicNumber*(_: typedesc[Multifile]): string {.importcpp: "nimStringFromStdString(Multifile::get_magic_number())", header: "multifile.h".}

proc newNamable*(param0: Loader | AnimControl | TextFont | Material | Namable | MovieVideo | Texture | ShaderBuffer | Thread | AsyncTaskManager | MouseWatcherRegion | PandaNode | PartGroup | MovieAudio | AnimGroup | AsyncTaskChain | AsyncTask): Namable {.importcpp: "new Namable(#)".}

proc newNamable*(initialName: string): Namable {.importcpp: "new Namable(nimStringToStdString(#))", header: stringConversionCode.}

proc newNamable*(): Namable {.importcpp: "new Namable()".}

proc getClassType*(_: typedesc[Namable]): TypeHandle {.importcpp: "Namable::get_class_type()", header: "namable.h".}

proc getGlobalPtr*(_: typedesc[OpenSSLWrapper]): OpenSSLWrapper {.importcpp: "OpenSSLWrapper::get_global_ptr()", header: "openSSLWrapper.h".}

proc initSubfileInfo*(): SubfileInfo {.importcpp: "SubfileInfo()".}

proc initSubfileInfo*(file: FileReference, start: clonglong, size: int): SubfileInfo {.importcpp: "SubfileInfo(#, #, #)".}

proc initSubfileInfo*(filename: Filename, start: clonglong, size: int): SubfileInfo {.importcpp: "SubfileInfo(#, #, #)".}

proc initSubfileInfo*(copy: SubfileInfo): SubfileInfo {.importcpp: "SubfileInfo(#)".}

proc getClassType*(_: typedesc[VirtualFile]): TypeHandle {.importcpp: "VirtualFile::get_class_type()", header: "virtualFile.h".}

proc getClassType*(_: typedesc[VirtualFileComposite]): TypeHandle {.importcpp: "VirtualFileComposite::get_class_type()", header: "virtualFileComposite.h".}

proc getClassType*(_: typedesc[VirtualFileMount]): TypeHandle {.importcpp: "VirtualFileMount::get_class_type()", header: "virtualFileMount.h".}

proc newVirtualFileMountMultifile*(multifile: Multifile): VirtualFileMountMultifile {.importcpp: "new VirtualFileMountMultifile(#)".}

proc getClassType*(_: typedesc[VirtualFileMountMultifile]): TypeHandle {.importcpp: "VirtualFileMountMultifile::get_class_type()", header: "virtualFileMountMultifile.h".}

proc newVirtualFileMountRamdisk*(): VirtualFileMountRamdisk {.importcpp: "new VirtualFileMountRamdisk()".}

proc getClassType*(_: typedesc[VirtualFileMountRamdisk]): TypeHandle {.importcpp: "VirtualFileMountRamdisk::get_class_type()", header: "virtualFileMountRamdisk.h".}

proc newVirtualFileMountSystem*(physicalFilename: Filename): VirtualFileMountSystem {.importcpp: "new VirtualFileMountSystem(#)".}

proc getClassType*(_: typedesc[VirtualFileMountSystem]): TypeHandle {.importcpp: "VirtualFileMountSystem::get_class_type()", header: "virtualFileMountSystem.h".}

proc getClassType*(_: typedesc[VirtualFileSimple]): TypeHandle {.importcpp: "VirtualFileSimple::get_class_type()", header: "virtualFileSimple.h".}

proc newTemporaryFile*(filename: Filename): TemporaryFile {.importcpp: "new TemporaryFile(#)".}

proc newTemporaryFile*(param0: TemporaryFile): TemporaryFile {.importcpp: "new TemporaryFile(#)".}

proc getClassType*(_: typedesc[TemporaryFile]): TypeHandle {.importcpp: "TemporaryFile::get_class_type()", header: "temporaryFile.h".}

proc initIDecompressStream*(): IDecompressStream {.importcpp: "IDecompressStream()".}

proc initIDecompressStream*(source: istream, ownsSource: bool): IDecompressStream {.importcpp: "IDecompressStream(#, #)".}

proc initOCompressStream*(): OCompressStream {.importcpp: "OCompressStream()".}

proc initOCompressStream*(dest: iostream | ostream, ownsDest: bool, compressionLevel: int): OCompressStream {.importcpp: "OCompressStream(#, #, #)".}

proc initOCompressStream*(dest: iostream | ostream, ownsDest: bool): OCompressStream {.importcpp: "OCompressStream(#, #)".}

proc newVirtualFileList*(param0: VirtualFileList): VirtualFileList {.importcpp: "new VirtualFileList(#)".}

proc initVirtualFileSystem*(): VirtualFileSystem {.importcpp: "VirtualFileSystem()".}

proc getGlobalPtr*(_: typedesc[VirtualFileSystem]): VirtualFileSystem {.importcpp: "VirtualFileSystem::get_global_ptr()", header: "virtualFileSystem.h".}

proc closeReadFile*(_: typedesc[VirtualFileSystem], stream: istream) {.importcpp: "#VirtualFileSystem::close_read_file(#)", header: "virtualFileSystem.h".}

proc closeWriteFile*(_: typedesc[VirtualFileSystem], stream: iostream | ostream) {.importcpp: "#VirtualFileSystem::close_write_file(#)", header: "virtualFileSystem.h".}

proc closeReadWriteFile*(_: typedesc[VirtualFileSystem], stream: iostream) {.importcpp: "#VirtualFileSystem::close_read_write_file(#)", header: "virtualFileSystem.h".}

proc getGlobalPtr*(_: typedesc[TrueClock]): TrueClock {.importcpp: "TrueClock::get_global_ptr()", header: "trueClock.h".}

proc initPatchfile*(): Patchfile {.importcpp: "Patchfile()".}

proc initPatchfile*(buffer: Buffer): Patchfile {.importcpp: "Patchfile(#)".}

proc passwordHash*(password: string, salt: string, iters: int, keylen: int): string {.importcpp: "nimStringFromStdString(password_hash(nimStringToStdString(#), nimStringToStdString(#), #, #))", header: "password_hash.h".}

proc initProfileTimer*(other: ProfileTimer): ProfileTimer {.importcpp: "ProfileTimer(#)".}

proc initProfileTimer*(name: string, maxEntries: int): ProfileTimer {.importcpp: "ProfileTimer(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initProfileTimer*(name: string): ProfileTimer {.importcpp: "ProfileTimer(nimStringToStdString(#))", header: stringConversionCode.}

proc initProfileTimer*(): ProfileTimer {.importcpp: "ProfileTimer()".}

proc consolidateAllTo*(_: typedesc[ProfileTimer], `out`: iostream | ostream) {.importcpp: "#ProfileTimer::consolidateAllTo(#)", header: "profileTimer.h".}

proc consolidateAllTo*(_: typedesc[ProfileTimer]) {.importcpp: "ProfileTimer::consolidateAllTo()", header: "profileTimer.h".}

proc printAllTo*(_: typedesc[ProfileTimer], `out`: iostream | ostream) {.importcpp: "#ProfileTimer::printAllTo(#)", header: "profileTimer.h".}

proc printAllTo*(_: typedesc[ProfileTimer]) {.importcpp: "ProfileTimer::printAllTo()", header: "profileTimer.h".}

proc getClassType*(_: typedesc[RecorderBase]): TypeHandle {.importcpp: "RecorderBase::get_class_type()", header: "recorderBase.h".}

proc newMouseRecorder*(name: string): MouseRecorder {.importcpp: "new MouseRecorder(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[MouseRecorder]): TypeHandle {.importcpp: "MouseRecorder::get_class_type()", header: "mouseRecorder.h".}

proc newRecorderController*(): RecorderController {.importcpp: "new RecorderController()".}

proc getClassType*(_: typedesc[RecorderController]): TypeHandle {.importcpp: "RecorderController::get_class_type()", header: "recorderController.h".}

proc newSocketStreamRecorder*(): SocketStreamRecorder {.importcpp: "new SocketStreamRecorder()".}

proc newSocketStreamRecorder*(stream: SocketStream, ownsStream: bool): SocketStreamRecorder {.importcpp: "new SocketStreamRecorder(#, #)".}

proc getClassType*(_: typedesc[SocketStreamRecorder]): TypeHandle {.importcpp: "SocketStreamRecorder::get_class_type()", header: "socketStreamRecorder.h".}

proc getClassType*(_: typedesc[LightNode]): TypeHandle {.importcpp: "LightNode::get_class_type()", header: "lightNode.h".}

proc newAmbientLight*(name: string): AmbientLight {.importcpp: "new AmbientLight(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[AmbientLight]): TypeHandle {.importcpp: "AmbientLight::get_class_type()", header: "ambientLight.h".}

proc newCallbackNode*(name: string): CallbackNode {.importcpp: "new CallbackNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[CallbackNode]): TypeHandle {.importcpp: "CallbackNode::get_class_type()", header: "callbackNode.h".}

proc newComputeNode*(name: string): ComputeNode {.importcpp: "new ComputeNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[ComputeNode]): TypeHandle {.importcpp: "ComputeNode::get_class_type()", header: "computeNode.h".}

proc getClassType*(_: typedesc[LightLensNode]): TypeHandle {.importcpp: "LightLensNode::get_class_type()", header: "lightLensNode.h".}

proc newDirectionalLight*(name: string): DirectionalLight {.importcpp: "new DirectionalLight(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[DirectionalLight]): TypeHandle {.importcpp: "DirectionalLight::get_class_type()", header: "directionalLight.h".}

proc newLODNode*(name: string): LODNode {.importcpp: "new LODNode(nimStringToStdString(#))", header: stringConversionCode.}

proc makeDefaultLod*(_: typedesc[LODNode], name: string): LODNode {.importcpp: "#LODNode::make_default_lod(nimStringToStdString(#))", header: "lodNode.h".}

proc getClassType*(_: typedesc[LODNode]): TypeHandle {.importcpp: "LODNode::get_class_type()", header: "lodNode.h".}

proc newFadeLODNode*(name: string): FadeLODNode {.importcpp: "new FadeLODNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[FadeLODNode]): TypeHandle {.importcpp: "FadeLODNode::get_class_type()", header: "fadeLodNode.h".}

proc getClassType*(_: typedesc[NodeCullCallbackData]): TypeHandle {.importcpp: "NodeCullCallbackData::get_class_type()", header: "nodeCullCallbackData.h".}

proc newPointLight*(name: string): PointLight {.importcpp: "new PointLight(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[PointLight]): TypeHandle {.importcpp: "PointLight::get_class_type()", header: "pointLight.h".}

proc newRectangleLight*(name: string): RectangleLight {.importcpp: "new RectangleLight(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[RectangleLight]): TypeHandle {.importcpp: "RectangleLight::get_class_type()", header: "rectangleLight.h".}

proc newSelectiveChildNode*(name: string): SelectiveChildNode {.importcpp: "new SelectiveChildNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[SelectiveChildNode]): TypeHandle {.importcpp: "SelectiveChildNode::get_class_type()", header: "selectiveChildNode.h".}

proc newSequenceNode*(name: string): SequenceNode {.importcpp: "new SequenceNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[SequenceNode]): TypeHandle {.importcpp: "SequenceNode::get_class_type()", header: "sequenceNode.h".}

proc newShaderGenerator*(gsg: GraphicsStateGuardianBase): ShaderGenerator {.importcpp: "new ShaderGenerator(#)".}

proc newShaderGenerator*(param0: ShaderGenerator): ShaderGenerator {.importcpp: "new ShaderGenerator(#)".}

proc getClassType*(_: typedesc[ShaderGenerator]): TypeHandle {.importcpp: "ShaderGenerator::get_class_type()", header: "shaderGenerator.h".}

proc newSphereLight*(name: string): SphereLight {.importcpp: "new SphereLight(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[SphereLight]): TypeHandle {.importcpp: "SphereLight::get_class_type()", header: "sphereLight.h".}

proc newSpotlight*(name: string): Spotlight {.importcpp: "new Spotlight(nimStringToStdString(#))", header: stringConversionCode.}

proc makeSpot*(_: typedesc[Spotlight], pixelWidth: int, fullRadius: float, fg: LColor, bg: LColor): Texture {.importcpp: "#Spotlight::make_spot(#, #, #, #)", header: "spotlight.h".}

proc getClassType*(_: typedesc[Spotlight]): TypeHandle {.importcpp: "Spotlight::get_class_type()", header: "spotlight.h".}

proc newSwitchNode*(name: string): SwitchNode {.importcpp: "new SwitchNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[SwitchNode]): TypeHandle {.importcpp: "SwitchNode::get_class_type()", header: "switchNode.h".}

proc newUvScrollNode*(name: string): UvScrollNode {.importcpp: "new UvScrollNode(nimStringToStdString(#))", header: stringConversionCode.}

proc newUvScrollNode*(name: string, uSpeed: float, vSpeed: float, wSpeed: float, rSpeed: float): UvScrollNode {.importcpp: "new UvScrollNode(nimStringToStdString(#), #, #, #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[UvScrollNode]): TypeHandle {.importcpp: "UvScrollNode::get_class_type()", header: "uvScrollNode.h".}

proc initSceneGraphAnalyzer*(): SceneGraphAnalyzer {.importcpp: "SceneGraphAnalyzer()".}

proc initSceneGraphAnalyzer*(param0: SceneGraphAnalyzer): SceneGraphAnalyzer {.importcpp: "SceneGraphAnalyzer(#)".}

proc makeIdentity*(_: typedesc[TransformState]): TransformState {.importcpp: "deconstify(TransformState::make_identity())", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeInvalid*(_: typedesc[TransformState]): TransformState {.importcpp: "deconstify(TransformState::make_invalid())", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePos*(_: typedesc[TransformState], pos: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_pos((LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeHpr*(_: typedesc[TransformState], hpr: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_hpr((LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeQuat*(_: typedesc[TransformState], quat: LQuaternion): TransformState {.importcpp: "deconstify(#TransformState::make_quat(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosHpr*(_: typedesc[TransformState], pos: LVecBase3, hpr: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_pos_hpr((LVecBase3 const &)(#), (LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeScale*(_: typedesc[TransformState], scale: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_scale((LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeScale*(_: typedesc[TransformState], scale: float): TransformState {.importcpp: "deconstify(#TransformState::make_scale(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeShear*(_: typedesc[TransformState], shear: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_shear((LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosHprScale*(_: typedesc[TransformState], pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_pos_hpr_scale((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosQuatScale*(_: typedesc[TransformState], pos: LVecBase3, quat: LQuaternion, scale: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_pos_quat_scale((LVecBase3 const &)(#), #, (LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosHprScaleShear*(_: typedesc[TransformState], pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3, shear: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_pos_hpr_scale_shear((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosQuatScaleShear*(_: typedesc[TransformState], pos: LVecBase3, quat: LQuaternion, scale: LVecBase3, shear: LVecBase3): TransformState {.importcpp: "deconstify(#TransformState::make_pos_quat_scale_shear((LVecBase3 const &)(#), #, (LVecBase3 const &)(#), (LVecBase3 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeMat*(_: typedesc[TransformState], mat: LMatrix4): TransformState {.importcpp: "deconstify(#TransformState::make_mat(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePos2d*(_: typedesc[TransformState], pos: LVecBase2): TransformState {.importcpp: "deconstify(#TransformState::make_pos2d((LVecBase2 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeRotate2d*(_: typedesc[TransformState], rotate: float): TransformState {.importcpp: "deconstify(#TransformState::make_rotate2d(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosRotate2d*(_: typedesc[TransformState], pos: LVecBase2, rotate: float): TransformState {.importcpp: "deconstify(#TransformState::make_pos_rotate2d((LVecBase2 const &)(#), #))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeScale2d*(_: typedesc[TransformState], scale: LVecBase2): TransformState {.importcpp: "deconstify(#TransformState::make_scale2d((LVecBase2 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeScale2d*(_: typedesc[TransformState], scale: float): TransformState {.importcpp: "deconstify(#TransformState::make_scale2d(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeShear2d*(_: typedesc[TransformState], shear: float): TransformState {.importcpp: "deconstify(#TransformState::make_shear2d(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosRotateScale2d*(_: typedesc[TransformState], pos: LVecBase2, rotate: float, scale: LVecBase2): TransformState {.importcpp: "deconstify(#TransformState::make_pos_rotate_scale2d((LVecBase2 const &)(#), #, (LVecBase2 const &)(#)))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makePosRotateScaleShear2d*(_: typedesc[TransformState], pos: LVecBase2, rotate: float, scale: LVecBase2, shear: float): TransformState {.importcpp: "deconstify(#TransformState::make_pos_rotate_scale_shear2d((LVecBase2 const &)(#), #, (LVecBase2 const &)(#), #))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc makeMat3*(_: typedesc[TransformState], mat: LMatrix3): TransformState {.importcpp: "deconstify(#TransformState::make_mat3(#))", header: "#include \"transformState.h\"\n" & deconstifyCode.}

proc getNumStates*(_: typedesc[TransformState]): int {.importcpp: "TransformState::get_num_states()", header: "transformState.h".}

proc getNumUnusedStates*(_: typedesc[TransformState]): int {.importcpp: "TransformState::get_num_unused_states()", header: "transformState.h".}

proc clearCache*(_: typedesc[TransformState]): int {.importcpp: "TransformState::clear_cache()", header: "transformState.h".}

proc garbageCollect*(_: typedesc[TransformState]): int {.importcpp: "TransformState::garbage_collect()", header: "transformState.h".}

proc listCycles*(_: typedesc[TransformState], `out`: iostream | ostream) {.importcpp: "#TransformState::list_cycles(#)", header: "transformState.h".}

proc listStates*(_: typedesc[TransformState], `out`: iostream | ostream) {.importcpp: "#TransformState::list_states(#)", header: "transformState.h".}

proc validateStates*(_: typedesc[TransformState]): bool {.importcpp: "TransformState::validate_states()", header: "transformState.h".}

proc getClassType*(_: typedesc[TransformState]): TypeHandle {.importcpp: "TransformState::get_class_type()", header: "transformState.h".}

proc getMaxSlots*(_: typedesc[RenderAttribRegistry]): int {.importcpp: "RenderAttribRegistry::get_max_slots()", header: "renderAttribRegistry.h".}

proc getGlobalPtr*(_: typedesc[RenderAttribRegistry]): RenderAttribRegistry {.importcpp: "RenderAttribRegistry::get_global_ptr()", header: "renderAttribRegistry.h".}

proc getNumAttribs*(_: typedesc[RenderAttrib]): int {.importcpp: "RenderAttrib::get_num_attribs()", header: "renderAttrib.h".}

proc listAttribs*(_: typedesc[RenderAttrib], `out`: iostream | ostream) {.importcpp: "#RenderAttrib::list_attribs(#)", header: "renderAttrib.h".}

proc garbageCollect*(_: typedesc[RenderAttrib]): int {.importcpp: "RenderAttrib::garbage_collect()", header: "renderAttrib.h".}

proc validateAttribs*(_: typedesc[RenderAttrib]): bool {.importcpp: "RenderAttrib::validate_attribs()", header: "renderAttrib.h".}

proc getClassType*(_: typedesc[RenderAttrib]): TypeHandle {.importcpp: "RenderAttrib::get_class_type()", header: "renderAttrib.h".}

proc make*(_: typedesc[RenderModeAttrib], mode: RenderModeAttrib_Mode, thickness: float, perspective: bool, wireframeColor: LColor): RenderAttrib {.importcpp: "deconstify(#RenderModeAttrib::make(#, #, #, #))", header: "#include \"renderModeAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderModeAttrib], mode: RenderModeAttrib_Mode, thickness: float, perspective: bool): RenderAttrib {.importcpp: "deconstify(#RenderModeAttrib::make(#, #, #))", header: "#include \"renderModeAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderModeAttrib], mode: RenderModeAttrib_Mode, thickness: float): RenderAttrib {.importcpp: "deconstify(#RenderModeAttrib::make(#, #))", header: "#include \"renderModeAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderModeAttrib], mode: RenderModeAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#RenderModeAttrib::make(#))", header: "#include \"renderModeAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[RenderModeAttrib]): RenderAttrib {.importcpp: "deconstify(RenderModeAttrib::make_default())", header: "#include \"renderModeAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[RenderModeAttrib]): int {.importcpp: "RenderModeAttrib::get_class_slot()", header: "renderModeAttrib.h".}

proc getClassType*(_: typedesc[RenderModeAttrib]): TypeHandle {.importcpp: "RenderModeAttrib::get_class_type()", header: "renderModeAttrib.h".}

proc make*(_: typedesc[TexMatrixAttrib]): RenderAttrib {.importcpp: "deconstify(TexMatrixAttrib::make())", header: "#include \"texMatrixAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[TexMatrixAttrib], mat: LMatrix4): RenderAttrib {.importcpp: "deconstify(#TexMatrixAttrib::make(#))", header: "#include \"texMatrixAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[TexMatrixAttrib], stage: TextureStage, transform: TransformState): RenderAttrib {.importcpp: "deconstify(#TexMatrixAttrib::make(#, #))", header: "#include \"texMatrixAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[TexMatrixAttrib]): RenderAttrib {.importcpp: "deconstify(TexMatrixAttrib::make_default())", header: "#include \"texMatrixAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[TexMatrixAttrib]): int {.importcpp: "TexMatrixAttrib::get_class_slot()", header: "texMatrixAttrib.h".}

proc getClassType*(_: typedesc[TexMatrixAttrib]): TypeHandle {.importcpp: "TexMatrixAttrib::get_class_type()", header: "texMatrixAttrib.h".}

proc makeEmpty*(_: typedesc[RenderState]): RenderState {.importcpp: "deconstify(RenderState::make_empty())", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, attrib3: RenderAttrib, attrib4: RenderAttrib, attrib5: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #, #, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, attrib3: RenderAttrib, attrib4: RenderAttrib, attrib5: RenderAttrib): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, attrib3: RenderAttrib, attrib4: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, attrib3: RenderAttrib, attrib4: RenderAttrib): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, attrib3: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, attrib3: RenderAttrib): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#RenderState::make(#, #, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib1: RenderAttrib, attrib2: RenderAttrib): RenderState {.importcpp: "deconstify(#RenderState::make(#, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#RenderState::make(#, #))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderState], attrib: RenderAttrib): RenderState {.importcpp: "deconstify(#RenderState::make(#))", header: "#include \"renderState.h\"\n" & deconstifyCode.}

proc getMaxPriority*(_: typedesc[RenderState]): int {.importcpp: "RenderState::get_max_priority()", header: "renderState.h".}

proc getNumStates*(_: typedesc[RenderState]): int {.importcpp: "RenderState::get_num_states()", header: "renderState.h".}

proc getNumUnusedStates*(_: typedesc[RenderState]): int {.importcpp: "RenderState::get_num_unused_states()", header: "renderState.h".}

proc clearCache*(_: typedesc[RenderState]): int {.importcpp: "RenderState::clear_cache()", header: "renderState.h".}

proc clearMungerCache*(_: typedesc[RenderState]) {.importcpp: "RenderState::clear_munger_cache()", header: "renderState.h".}

proc garbageCollect*(_: typedesc[RenderState]): int {.importcpp: "RenderState::garbage_collect()", header: "renderState.h".}

proc listCycles*(_: typedesc[RenderState], `out`: iostream | ostream) {.importcpp: "#RenderState::list_cycles(#)", header: "renderState.h".}

proc listStates*(_: typedesc[RenderState], `out`: iostream | ostream) {.importcpp: "#RenderState::list_states(#)", header: "renderState.h".}

proc validateStates*(_: typedesc[RenderState]): bool {.importcpp: "RenderState::validate_states()", header: "renderState.h".}

proc getClassType*(_: typedesc[RenderState]): TypeHandle {.importcpp: "RenderState::get_class_type()", header: "renderState.h".}

proc make*(_: typedesc[AlphaTestAttrib], mode: RenderAttrib_PandaCompareFunc, referenceAlpha: float): RenderAttrib {.importcpp: "deconstify(#AlphaTestAttrib::make(#, #))", header: "#include \"alphaTestAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[AlphaTestAttrib]): RenderAttrib {.importcpp: "deconstify(AlphaTestAttrib::make_default())", header: "#include \"alphaTestAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[AlphaTestAttrib]): int {.importcpp: "AlphaTestAttrib::get_class_slot()", header: "alphaTestAttrib.h".}

proc getClassType*(_: typedesc[AlphaTestAttrib]): TypeHandle {.importcpp: "AlphaTestAttrib::get_class_type()", header: "alphaTestAttrib.h".}

proc make*(_: typedesc[AntialiasAttrib], mode: int): RenderAttrib {.importcpp: "deconstify(#AntialiasAttrib::make(#))", header: "#include \"antialiasAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[AntialiasAttrib]): RenderAttrib {.importcpp: "deconstify(AntialiasAttrib::make_default())", header: "#include \"antialiasAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[AntialiasAttrib]): int {.importcpp: "AntialiasAttrib::get_class_slot()", header: "antialiasAttrib.h".}

proc getClassType*(_: typedesc[AntialiasAttrib]): TypeHandle {.importcpp: "AntialiasAttrib::get_class_type()", header: "antialiasAttrib.h".}

proc getNumEffects*(_: typedesc[RenderEffect]): int {.importcpp: "RenderEffect::get_num_effects()", header: "renderEffect.h".}

proc listEffects*(_: typedesc[RenderEffect], `out`: iostream | ostream) {.importcpp: "#RenderEffect::list_effects(#)", header: "renderEffect.h".}

proc validateEffects*(_: typedesc[RenderEffect]): bool {.importcpp: "RenderEffect::validate_effects()", header: "renderEffect.h".}

proc getClassType*(_: typedesc[RenderEffect]): TypeHandle {.importcpp: "RenderEffect::get_class_type()", header: "renderEffect.h".}

proc makeEmpty*(_: typedesc[RenderEffects]): RenderEffects {.importcpp: "deconstify(RenderEffects::make_empty())", header: "#include \"renderEffects.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderEffects], effect: RenderEffect): RenderEffects {.importcpp: "deconstify(#RenderEffects::make(#))", header: "#include \"renderEffects.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderEffects], effect1: RenderEffect, effect2: RenderEffect): RenderEffects {.importcpp: "deconstify(#RenderEffects::make(#, #))", header: "#include \"renderEffects.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderEffects], effect1: RenderEffect, effect2: RenderEffect, effect3: RenderEffect): RenderEffects {.importcpp: "deconstify(#RenderEffects::make(#, #, #))", header: "#include \"renderEffects.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[RenderEffects], effect1: RenderEffect, effect2: RenderEffect, effect3: RenderEffect, effect4: RenderEffect): RenderEffects {.importcpp: "deconstify(#RenderEffects::make(#, #, #, #))", header: "#include \"renderEffects.h\"\n" & deconstifyCode.}

proc getNumStates*(_: typedesc[RenderEffects]): int {.importcpp: "RenderEffects::get_num_states()", header: "renderEffects.h".}

proc listStates*(_: typedesc[RenderEffects], `out`: iostream | ostream) {.importcpp: "#RenderEffects::list_states(#)", header: "renderEffects.h".}

proc validateStates*(_: typedesc[RenderEffects]): bool {.importcpp: "RenderEffects::validate_states()", header: "renderEffects.h".}

proc getClassType*(_: typedesc[RenderEffects]): TypeHandle {.importcpp: "RenderEffects::get_class_type()", header: "renderEffects.h".}

proc newPandaNode*(name: string): PandaNode {.importcpp: "new PandaNode(nimStringToStdString(#))", header: stringConversionCode.}

proc resetAllPrevTransform*(_: typedesc[PandaNode], currentThread: Thread) {.importcpp: "#PandaNode::reset_all_prev_transform(#)", header: "pandaNode.h".}

proc resetAllPrevTransform*(_: typedesc[PandaNode]) {.importcpp: "PandaNode::reset_all_prev_transform()", header: "pandaNode.h".}

proc getOverallBit*(_: typedesc[PandaNode]): DrawMask {.importcpp: "PandaNode::get_overall_bit()", header: "pandaNode.h".}

proc getAllCameraMask*(_: typedesc[PandaNode]): DrawMask {.importcpp: "PandaNode::get_all_camera_mask()", header: "pandaNode.h".}

proc getClassType*(_: typedesc[PandaNode]): TypeHandle {.importcpp: "PandaNode::get_class_type()", header: "pandaNode.h".}

proc make*(_: typedesc[TransparencyAttrib], mode: TransparencyAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#TransparencyAttrib::make(#))", header: "#include \"transparencyAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[TransparencyAttrib]): RenderAttrib {.importcpp: "deconstify(TransparencyAttrib::make_default())", header: "#include \"transparencyAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[TransparencyAttrib]): int {.importcpp: "TransparencyAttrib::get_class_slot()", header: "transparencyAttrib.h".}

proc getClassType*(_: typedesc[TransparencyAttrib]): TypeHandle {.importcpp: "TransparencyAttrib::get_class_type()", header: "transparencyAttrib.h".}

proc makeOff*(_: typedesc[LogicOpAttrib]): RenderAttrib {.importcpp: "deconstify(LogicOpAttrib::make_off())", header: "#include \"logicOpAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[LogicOpAttrib], op: LogicOpAttrib_Operation): RenderAttrib {.importcpp: "deconstify(#LogicOpAttrib::make(#))", header: "#include \"logicOpAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[LogicOpAttrib]): RenderAttrib {.importcpp: "deconstify(LogicOpAttrib::make_default())", header: "#include \"logicOpAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[LogicOpAttrib]): int {.importcpp: "LogicOpAttrib::get_class_slot()", header: "logicOpAttrib.h".}

proc getClassType*(_: typedesc[LogicOpAttrib]): TypeHandle {.importcpp: "LogicOpAttrib::get_class_type()", header: "logicOpAttrib.h".}

proc getBlank*(_: typedesc[ShaderInput]): ShaderInput {.importcpp: "ShaderInput::get_blank()", header: "shaderInput.h".}

proc initShaderInput*(name: InternalName, tex: Texture, sampler: SamplerState, priority: int): ShaderInput {.importcpp: "ShaderInput(#, #, #, #)".}

proc initShaderInput*(name: InternalName, tex: Texture, sampler: SamplerState): ShaderInput {.importcpp: "ShaderInput(#, #, #)".}

proc initShaderInput*(name: InternalName, tex: Texture, read: bool, write: bool, z: int, n: int, priority: int): ShaderInput {.importcpp: "ShaderInput(#, #, #, #, #, #, #)".}

proc initShaderInput*(name: InternalName, tex: Texture, read: bool, write: bool, z: int, n: int): ShaderInput {.importcpp: "ShaderInput(#, #, #, #, #, #)".}

proc initShaderInput*(name: InternalName, tex: Texture, read: bool, write: bool, z: int): ShaderInput {.importcpp: "ShaderInput(#, #, #, #, #)".}

proc initShaderInput*(name: InternalName, tex: Texture, read: bool, write: bool): ShaderInput {.importcpp: "ShaderInput(#, #, #, #)".}

proc initShaderInput*(name: InternalName, priority: int): ShaderInput {.importcpp: "ShaderInput(#, #)".}

proc initShaderInput*(name: InternalName): ShaderInput {.importcpp: "ShaderInput(#)".}

proc initShaderInput*(param0: ShaderInput): ShaderInput {.importcpp: "ShaderInput(#)".}

proc initInternalNameCollection*(): InternalNameCollection {.importcpp: "InternalNameCollection()".}

proc initInternalNameCollection*(copy: InternalNameCollection): InternalNameCollection {.importcpp: "InternalNameCollection(#)".}

proc initMaterialCollection*(): MaterialCollection {.importcpp: "MaterialCollection()".}

proc initMaterialCollection*(copy: MaterialCollection): MaterialCollection {.importcpp: "MaterialCollection(#)".}

proc initTextureStageCollection*(): TextureStageCollection {.importcpp: "TextureStageCollection()".}

proc initTextureStageCollection*(copy: TextureStageCollection): TextureStageCollection {.importcpp: "TextureStageCollection(#)".}

proc initNodePath*(): NodePath {.importcpp: "NodePath()".}

proc initNodePath*(copy: NodePath): NodePath {.importcpp: "NodePath(#)".}

proc initNodePath*(parent: NodePath, childNode: PandaNode, currentThread: Thread): NodePath {.importcpp: "NodePath(#, #, #)".}

proc initNodePath*(parent: NodePath, childNode: PandaNode): NodePath {.importcpp: "NodePath(#, #)".}

proc initNodePath*(node: PandaNode, currentThread: Thread): NodePath {.importcpp: "NodePath(#, #)".}

proc initNodePath*(node: PandaNode): NodePath {.importcpp: "NodePath(#)".}

proc initNodePath*(topNodeName: string, currentThread: Thread): NodePath {.importcpp: "NodePath(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initNodePath*(topNodeName: string): NodePath {.importcpp: "NodePath(nimStringToStdString(#))", header: stringConversionCode.}

proc anyPath*(_: typedesc[NodePath], node: PandaNode, currentThread: Thread): NodePath {.importcpp: "#NodePath::any_path(#, #)", header: "nodePath.h".}

proc anyPath*(_: typedesc[NodePath], node: PandaNode): NodePath {.importcpp: "#NodePath::any_path(#)", header: "nodePath.h".}

proc notFound*(_: typedesc[NodePath]): NodePath {.importcpp: "NodePath::not_found()", header: "nodePath.h".}

proc removed*(_: typedesc[NodePath]): NodePath {.importcpp: "NodePath::removed()", header: "nodePath.h".}

proc fail*(_: typedesc[NodePath]): NodePath {.importcpp: "NodePath::fail()", header: "nodePath.h".}

proc setMaxSearchDepth*(_: typedesc[NodePath], maxSearchDepth: int) {.importcpp: "#NodePath::set_max_search_depth(#)", header: "nodePath.h".}

proc getMaxSearchDepth*(_: typedesc[NodePath]): int {.importcpp: "NodePath::get_max_search_depth()", header: "nodePath.h".}

proc initNodePathCollection*(): NodePathCollection {.importcpp: "NodePathCollection()".}

proc initNodePathCollection*(param0: NodePathCollection): NodePathCollection {.importcpp: "NodePathCollection(#)".}

proc getClassType*(_: typedesc[NodePath]): TypeHandle {.importcpp: "NodePath::get_class_type()", header: "nodePath.h".}

proc getGlobalPtr*(_: typedesc[AttribNodeRegistry]): AttribNodeRegistry {.importcpp: "AttribNodeRegistry::get_global_ptr()", header: "attribNodeRegistry.h".}

proc makeIdentity*(_: typedesc[AudioVolumeAttrib]): RenderAttrib {.importcpp: "deconstify(AudioVolumeAttrib::make_identity())", header: "#include \"audioVolumeAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[AudioVolumeAttrib], volume: float): RenderAttrib {.importcpp: "deconstify(#AudioVolumeAttrib::make(#))", header: "#include \"audioVolumeAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[AudioVolumeAttrib]): RenderAttrib {.importcpp: "deconstify(AudioVolumeAttrib::make_off())", header: "#include \"audioVolumeAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[AudioVolumeAttrib]): RenderAttrib {.importcpp: "deconstify(AudioVolumeAttrib::make_default())", header: "#include \"audioVolumeAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[AudioVolumeAttrib]): int {.importcpp: "AudioVolumeAttrib::get_class_slot()", header: "audioVolumeAttrib.h".}

proc getClassType*(_: typedesc[AudioVolumeAttrib]): TypeHandle {.importcpp: "AudioVolumeAttrib::get_class_type()", header: "audioVolumeAttrib.h".}

proc make*(_: typedesc[AuxBitplaneAttrib]): RenderAttrib {.importcpp: "deconstify(AuxBitplaneAttrib::make())", header: "#include \"auxBitplaneAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[AuxBitplaneAttrib], outputs: int): RenderAttrib {.importcpp: "deconstify(#AuxBitplaneAttrib::make(#))", header: "#include \"auxBitplaneAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[AuxBitplaneAttrib]): RenderAttrib {.importcpp: "deconstify(AuxBitplaneAttrib::make_default())", header: "#include \"auxBitplaneAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[AuxBitplaneAttrib]): int {.importcpp: "AuxBitplaneAttrib::get_class_slot()", header: "auxBitplaneAttrib.h".}

proc getClassType*(_: typedesc[AuxBitplaneAttrib]): TypeHandle {.importcpp: "AuxBitplaneAttrib::get_class_type()", header: "auxBitplaneAttrib.h".}

proc getClassType*(_: typedesc[AuxSceneData]): TypeHandle {.importcpp: "AuxSceneData::get_class_type()", header: "auxSceneData.h".}

proc newAuxSceneData*(param0: AuxSceneData): AuxSceneData {.importcpp: "new AuxSceneData(#)".}

proc initBamFile*(): BamFile {.importcpp: "BamFile()".}

proc make*(_: typedesc[BillboardEffect], upVector: LVector3, eyeRelative: bool, axialRotate: bool, offset: float, lookAt: NodePath, lookAtPoint: LPoint3, fixedDepth: bool): RenderEffect {.importcpp: "deconstify(#BillboardEffect::make((LVector3 const &)(#), #, #, #, #, (LPoint3 const &)(#), #))", header: "#include \"billboardEffect.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[BillboardEffect], upVector: LVector3, eyeRelative: bool, axialRotate: bool, offset: float, lookAt: NodePath, lookAtPoint: LPoint3): RenderEffect {.importcpp: "deconstify(#BillboardEffect::make((LVector3 const &)(#), #, #, #, #, (LPoint3 const &)(#)))", header: "#include \"billboardEffect.h\"\n" & deconstifyCode.}

proc makeAxis*(_: typedesc[BillboardEffect]): RenderEffect {.importcpp: "deconstify(BillboardEffect::make_axis())", header: "#include \"billboardEffect.h\"\n" & deconstifyCode.}

proc makePointEye*(_: typedesc[BillboardEffect]): RenderEffect {.importcpp: "deconstify(BillboardEffect::make_point_eye())", header: "#include \"billboardEffect.h\"\n" & deconstifyCode.}

proc makePointWorld*(_: typedesc[BillboardEffect]): RenderEffect {.importcpp: "deconstify(BillboardEffect::make_point_world())", header: "#include \"billboardEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[BillboardEffect]): TypeHandle {.importcpp: "BillboardEffect::get_class_type()", header: "billboardEffect.h".}

proc newLensNode*(name: string, lens: Lens): LensNode {.importcpp: "new LensNode(nimStringToStdString(#), #)", header: stringConversionCode.}

proc newLensNode*(name: string): LensNode {.importcpp: "new LensNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[LensNode]): TypeHandle {.importcpp: "LensNode::get_class_type()", header: "lensNode.h".}

proc initWeakNodePath*(nodePath: NodePath): WeakNodePath {.importcpp: "WeakNodePath(#)".}

proc initWeakNodePath*(copy: WeakNodePath): WeakNodePath {.importcpp: "WeakNodePath(#)".}

proc newCamera*(copy: Camera): Camera {.importcpp: "new Camera(#)".}

proc newCamera*(name: string, lens: Lens): Camera {.importcpp: "new Camera(nimStringToStdString(#), #)", header: stringConversionCode.}

proc newCamera*(name: string): Camera {.importcpp: "new Camera(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[Camera]): TypeHandle {.importcpp: "Camera::get_class_type()", header: "camera.h".}

proc newPlaneNode*(name: string, plane: LPlane): PlaneNode {.importcpp: "new PlaneNode(nimStringToStdString(#), #)", header: stringConversionCode.}

proc newPlaneNode*(name: string): PlaneNode {.importcpp: "new PlaneNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[PlaneNode]): TypeHandle {.importcpp: "PlaneNode::get_class_type()", header: "planeNode.h".}

proc make*(_: typedesc[ClipPlaneAttrib]): RenderAttrib {.importcpp: "deconstify(ClipPlaneAttrib::make())", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ClipPlaneAttrib], op: ClipPlaneAttrib_Operation, plane: PlaneNode): RenderAttrib {.importcpp: "deconstify(#ClipPlaneAttrib::make(#, #))", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ClipPlaneAttrib], op: ClipPlaneAttrib_Operation, plane1: PlaneNode, plane2: PlaneNode): RenderAttrib {.importcpp: "deconstify(#ClipPlaneAttrib::make(#, #, #))", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ClipPlaneAttrib], op: ClipPlaneAttrib_Operation, plane1: PlaneNode, plane2: PlaneNode, plane3: PlaneNode): RenderAttrib {.importcpp: "deconstify(#ClipPlaneAttrib::make(#, #, #, #))", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ClipPlaneAttrib], op: ClipPlaneAttrib_Operation, plane1: PlaneNode, plane2: PlaneNode, plane3: PlaneNode, plane4: PlaneNode): RenderAttrib {.importcpp: "deconstify(#ClipPlaneAttrib::make(#, #, #, #, #))", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ClipPlaneAttrib]): RenderAttrib {.importcpp: "deconstify(ClipPlaneAttrib::make_default())", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc makeAllOff*(_: typedesc[ClipPlaneAttrib]): RenderAttrib {.importcpp: "deconstify(ClipPlaneAttrib::make_all_off())", header: "#include \"clipPlaneAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[ClipPlaneAttrib]): int {.importcpp: "ClipPlaneAttrib::get_class_slot()", header: "clipPlaneAttrib.h".}

proc getClassType*(_: typedesc[ClipPlaneAttrib]): TypeHandle {.importcpp: "ClipPlaneAttrib::get_class_type()", header: "clipPlaneAttrib.h".}

proc makeVertex*(_: typedesc[ColorAttrib]): RenderAttrib {.importcpp: "deconstify(ColorAttrib::make_vertex())", header: "#include \"colorAttrib.h\"\n" & deconstifyCode.}

proc makeFlat*(_: typedesc[ColorAttrib], color: LColor): RenderAttrib {.importcpp: "deconstify(#ColorAttrib::make_flat(#))", header: "#include \"colorAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[ColorAttrib]): RenderAttrib {.importcpp: "deconstify(ColorAttrib::make_off())", header: "#include \"colorAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ColorAttrib]): RenderAttrib {.importcpp: "deconstify(ColorAttrib::make_default())", header: "#include \"colorAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[ColorAttrib]): int {.importcpp: "ColorAttrib::get_class_slot()", header: "colorAttrib.h".}

proc getClassType*(_: typedesc[ColorAttrib]): TypeHandle {.importcpp: "ColorAttrib::get_class_type()", header: "colorAttrib.h".}

proc makeOff*(_: typedesc[ColorBlendAttrib]): RenderAttrib {.importcpp: "deconstify(ColorBlendAttrib::make_off())", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ColorBlendAttrib], mode: ColorBlendAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#ColorBlendAttrib::make(#))", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ColorBlendAttrib], rgbMode: ColorBlendAttrib_Mode, rgbA: ColorBlendAttrib_Operand, rgbB: ColorBlendAttrib_Operand, alphaMode: ColorBlendAttrib_Mode, alphaA: ColorBlendAttrib_Operand, alphaB: ColorBlendAttrib_Operand, color: LColor): RenderAttrib {.importcpp: "deconstify(#ColorBlendAttrib::make(#, #, #, #, #, #, #))", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ColorBlendAttrib], rgbMode: ColorBlendAttrib_Mode, rgbA: ColorBlendAttrib_Operand, rgbB: ColorBlendAttrib_Operand, alphaMode: ColorBlendAttrib_Mode, alphaA: ColorBlendAttrib_Operand, alphaB: ColorBlendAttrib_Operand): RenderAttrib {.importcpp: "deconstify(#ColorBlendAttrib::make(#, #, #, #, #, #))", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ColorBlendAttrib], mode: ColorBlendAttrib_Mode, a: ColorBlendAttrib_Operand, b: ColorBlendAttrib_Operand, color: LColor): RenderAttrib {.importcpp: "deconstify(#ColorBlendAttrib::make(#, #, #, #))", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ColorBlendAttrib], mode: ColorBlendAttrib_Mode, a: ColorBlendAttrib_Operand, b: ColorBlendAttrib_Operand): RenderAttrib {.importcpp: "deconstify(#ColorBlendAttrib::make(#, #, #))", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ColorBlendAttrib]): RenderAttrib {.importcpp: "deconstify(ColorBlendAttrib::make_default())", header: "#include \"colorBlendAttrib.h\"\n" & deconstifyCode.}

proc involvesConstantColor*(_: typedesc[ColorBlendAttrib], operand: ColorBlendAttrib_Operand): bool {.importcpp: "#ColorBlendAttrib::involves_constant_color(#)", header: "colorBlendAttrib.h".}

proc involvesColorScale*(_: typedesc[ColorBlendAttrib], operand: ColorBlendAttrib_Operand): bool {.importcpp: "#ColorBlendAttrib::involves_color_scale(#)", header: "colorBlendAttrib.h".}

proc getClassSlot*(_: typedesc[ColorBlendAttrib]): int {.importcpp: "ColorBlendAttrib::get_class_slot()", header: "colorBlendAttrib.h".}

proc getClassType*(_: typedesc[ColorBlendAttrib]): TypeHandle {.importcpp: "ColorBlendAttrib::get_class_type()", header: "colorBlendAttrib.h".}

proc makeIdentity*(_: typedesc[ColorScaleAttrib]): RenderAttrib {.importcpp: "deconstify(ColorScaleAttrib::make_identity())", header: "#include \"colorScaleAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ColorScaleAttrib], scale: LVecBase4): RenderAttrib {.importcpp: "deconstify(#ColorScaleAttrib::make((LVecBase4 const &)(#)))", header: "#include \"colorScaleAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[ColorScaleAttrib]): RenderAttrib {.importcpp: "deconstify(ColorScaleAttrib::make_off())", header: "#include \"colorScaleAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ColorScaleAttrib]): RenderAttrib {.importcpp: "deconstify(ColorScaleAttrib::make_default())", header: "#include \"colorScaleAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[ColorScaleAttrib]): int {.importcpp: "ColorScaleAttrib::get_class_slot()", header: "colorScaleAttrib.h".}

proc getClassType*(_: typedesc[ColorScaleAttrib]): TypeHandle {.importcpp: "ColorScaleAttrib::get_class_type()", header: "colorScaleAttrib.h".}

proc make*(_: typedesc[ColorWriteAttrib], channels: int): RenderAttrib {.importcpp: "deconstify(#ColorWriteAttrib::make(#))", header: "#include \"colorWriteAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ColorWriteAttrib]): RenderAttrib {.importcpp: "deconstify(ColorWriteAttrib::make_default())", header: "#include \"colorWriteAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[ColorWriteAttrib]): int {.importcpp: "ColorWriteAttrib::get_class_slot()", header: "colorWriteAttrib.h".}

proc getClassType*(_: typedesc[ColorWriteAttrib]): TypeHandle {.importcpp: "ColorWriteAttrib::get_class_type()", header: "colorWriteAttrib.h".}

proc make*(_: typedesc[CompassEffect], reference: NodePath, properties: int): RenderEffect {.importcpp: "deconstify(#CompassEffect::make(#, #))", header: "#include \"compassEffect.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[CompassEffect], reference: NodePath): RenderEffect {.importcpp: "deconstify(#CompassEffect::make(#))", header: "#include \"compassEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[CompassEffect]): TypeHandle {.importcpp: "CompassEffect::get_class_type()", header: "compassEffect.h".}

proc initCullBinEnums*(): CullBinEnums {.importcpp: "CullBinEnums()".}

proc initCullBinEnums*(param0: CullBinEnums): CullBinEnums {.importcpp: "CullBinEnums(#)".}

proc newGeomNode*(name: string): GeomNode {.importcpp: "new GeomNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getDefaultCollideMask*(_: typedesc[GeomNode]): CollideMask {.importcpp: "GeomNode::get_default_collide_mask()", header: "geomNode.h".}

proc getClassType*(_: typedesc[GeomNode]): TypeHandle {.importcpp: "GeomNode::get_class_type()", header: "geomNode.h".}

proc make*(_: typedesc[CullBinAttrib], binName: string, drawOrder: int): RenderAttrib {.importcpp: "deconstify(#CullBinAttrib::make(nimStringToStdString(#), #))", header: "#include \"cullBinAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[CullBinAttrib]): RenderAttrib {.importcpp: "deconstify(CullBinAttrib::make_default())", header: "#include \"cullBinAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[CullBinAttrib]): int {.importcpp: "CullBinAttrib::get_class_slot()", header: "cullBinAttrib.h".}

proc getClassType*(_: typedesc[CullBinAttrib]): TypeHandle {.importcpp: "CullBinAttrib::get_class_type()", header: "cullBinAttrib.h".}

proc getGlobalPtr*(_: typedesc[CullBinManager]): CullBinManager {.importcpp: "CullBinManager::get_global_ptr()", header: "cullBinManager.h".}

proc make*(_: typedesc[CullFaceAttrib], mode: CullFaceAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#CullFaceAttrib::make(#))", header: "#include \"cullFaceAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[CullFaceAttrib]): RenderAttrib {.importcpp: "deconstify(CullFaceAttrib::make())", header: "#include \"cullFaceAttrib.h\"\n" & deconstifyCode.}

proc makeReverse*(_: typedesc[CullFaceAttrib]): RenderAttrib {.importcpp: "deconstify(CullFaceAttrib::make_reverse())", header: "#include \"cullFaceAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[CullFaceAttrib]): RenderAttrib {.importcpp: "deconstify(CullFaceAttrib::make_default())", header: "#include \"cullFaceAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[CullFaceAttrib]): int {.importcpp: "CullFaceAttrib::get_class_slot()", header: "cullFaceAttrib.h".}

proc getClassType*(_: typedesc[CullFaceAttrib]): TypeHandle {.importcpp: "CullFaceAttrib::get_class_type()", header: "cullFaceAttrib.h".}

proc initCullTraverserData*(param0: CullTraverserData): CullTraverserData {.importcpp: "CullTraverserData(#)".}

proc getClassType*(_: typedesc[SceneSetup]): TypeHandle {.importcpp: "SceneSetup::get_class_type()", header: "sceneSetup.h".}

proc newSceneSetup*(param0: SceneSetup): SceneSetup {.importcpp: "new SceneSetup(#)".}

proc newFog*(name: string): Fog {.importcpp: "new Fog(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[Fog]): TypeHandle {.importcpp: "Fog::get_class_type()", header: "fog.h".}

proc make*(_: typedesc[FogAttrib], fog: Fog): RenderAttrib {.importcpp: "deconstify(#FogAttrib::make(#))", header: "#include \"fogAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[FogAttrib]): RenderAttrib {.importcpp: "deconstify(FogAttrib::make_off())", header: "#include \"fogAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[FogAttrib]): RenderAttrib {.importcpp: "deconstify(FogAttrib::make_default())", header: "#include \"fogAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[FogAttrib]): int {.importcpp: "FogAttrib::get_class_slot()", header: "fogAttrib.h".}

proc getClassType*(_: typedesc[FogAttrib]): TypeHandle {.importcpp: "FogAttrib::get_class_type()", header: "fogAttrib.h".}

proc newCullTraverser*(): CullTraverser {.importcpp: "new CullTraverser()".}

proc newCullTraverser*(copy: CullTraverser): CullTraverser {.importcpp: "new CullTraverser(#)".}

proc flushLevel*(_: typedesc[CullTraverser]) {.importcpp: "CullTraverser::flush_level()", header: "cullTraverser.h".}

proc getClassType*(_: typedesc[CullTraverser]): TypeHandle {.importcpp: "CullTraverser::get_class_type()", header: "cullTraverser.h".}

proc getClassType*(_: typedesc[GeomDrawCallbackData]): TypeHandle {.importcpp: "GeomDrawCallbackData::get_class_type()", header: "geomDrawCallbackData.h".}

proc make*(_: typedesc[RescaleNormalAttrib], mode: RescaleNormalAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#RescaleNormalAttrib::make(#))", header: "#include \"rescaleNormalAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[RescaleNormalAttrib]): RenderAttrib {.importcpp: "deconstify(RescaleNormalAttrib::make_default())", header: "#include \"rescaleNormalAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[RescaleNormalAttrib]): int {.importcpp: "RescaleNormalAttrib::get_class_slot()", header: "rescaleNormalAttrib.h".}

proc getClassType*(_: typedesc[RescaleNormalAttrib]): TypeHandle {.importcpp: "RescaleNormalAttrib::get_class_type()", header: "rescaleNormalAttrib.h".}

proc getClassType*(_: typedesc[CullResult]): TypeHandle {.importcpp: "CullResult::get_class_type()", header: "cullResult.h".}

proc newCullResult*(param0: CullResult): CullResult {.importcpp: "new CullResult(#)".}

proc make*(_: typedesc[DecalEffect]): RenderEffect {.importcpp: "deconstify(DecalEffect::make())", header: "#include \"decalEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[DecalEffect]): TypeHandle {.importcpp: "DecalEffect::get_class_type()", header: "decalEffect.h".}

proc make*(_: typedesc[DepthOffsetAttrib], offset: int): RenderAttrib {.importcpp: "deconstify(#DepthOffsetAttrib::make(#))", header: "#include \"depthOffsetAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[DepthOffsetAttrib]): RenderAttrib {.importcpp: "deconstify(DepthOffsetAttrib::make())", header: "#include \"depthOffsetAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[DepthOffsetAttrib], offset: int, minValue: float, maxValue: float): RenderAttrib {.importcpp: "deconstify(#DepthOffsetAttrib::make(#, #, #))", header: "#include \"depthOffsetAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[DepthOffsetAttrib]): RenderAttrib {.importcpp: "deconstify(DepthOffsetAttrib::make_default())", header: "#include \"depthOffsetAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[DepthOffsetAttrib]): int {.importcpp: "DepthOffsetAttrib::get_class_slot()", header: "depthOffsetAttrib.h".}

proc getClassType*(_: typedesc[DepthOffsetAttrib]): TypeHandle {.importcpp: "DepthOffsetAttrib::get_class_type()", header: "depthOffsetAttrib.h".}

proc make*(_: typedesc[DepthTestAttrib], mode: RenderAttrib_PandaCompareFunc): RenderAttrib {.importcpp: "deconstify(#DepthTestAttrib::make(#))", header: "#include \"depthTestAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[DepthTestAttrib]): RenderAttrib {.importcpp: "deconstify(DepthTestAttrib::make_default())", header: "#include \"depthTestAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[DepthTestAttrib]): int {.importcpp: "DepthTestAttrib::get_class_slot()", header: "depthTestAttrib.h".}

proc getClassType*(_: typedesc[DepthTestAttrib]): TypeHandle {.importcpp: "DepthTestAttrib::get_class_type()", header: "depthTestAttrib.h".}

proc make*(_: typedesc[DepthWriteAttrib], mode: DepthWriteAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#DepthWriteAttrib::make(#))", header: "#include \"depthWriteAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[DepthWriteAttrib]): RenderAttrib {.importcpp: "deconstify(DepthWriteAttrib::make_default())", header: "#include \"depthWriteAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[DepthWriteAttrib]): int {.importcpp: "DepthWriteAttrib::get_class_slot()", header: "depthWriteAttrib.h".}

proc getClassType*(_: typedesc[DepthWriteAttrib]): TypeHandle {.importcpp: "DepthWriteAttrib::get_class_type()", header: "depthWriteAttrib.h".}

proc getClassType*(_: typedesc[Light]): TypeHandle {.importcpp: "Light::get_class_type()", header: "light.h".}

proc make*(_: typedesc[LightAttrib]): RenderAttrib {.importcpp: "deconstify(LightAttrib::make())", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[LightAttrib], op: LightAttrib_Operation, light: LightLensNode | LightNode | Light): RenderAttrib {.importcpp: "deconstify(#LightAttrib::make(#, #))", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[LightAttrib], op: LightAttrib_Operation, light1: LightLensNode | LightNode | Light, light2: LightLensNode | LightNode | Light): RenderAttrib {.importcpp: "deconstify(#LightAttrib::make(#, #, #))", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[LightAttrib], op: LightAttrib_Operation, light1: LightLensNode | LightNode | Light, light2: LightLensNode | LightNode | Light, light3: LightLensNode | LightNode | Light): RenderAttrib {.importcpp: "deconstify(#LightAttrib::make(#, #, #, #))", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[LightAttrib], op: LightAttrib_Operation, light1: LightLensNode | LightNode | Light, light2: LightLensNode | LightNode | Light, light3: LightLensNode | LightNode | Light, light4: LightLensNode | LightNode | Light): RenderAttrib {.importcpp: "deconstify(#LightAttrib::make(#, #, #, #, #))", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[LightAttrib]): RenderAttrib {.importcpp: "deconstify(LightAttrib::make_default())", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc makeAllOff*(_: typedesc[LightAttrib]): RenderAttrib {.importcpp: "deconstify(LightAttrib::make_all_off())", header: "#include \"lightAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[LightAttrib]): int {.importcpp: "LightAttrib::get_class_slot()", header: "lightAttrib.h".}

proc getClassType*(_: typedesc[LightAttrib]): TypeHandle {.importcpp: "LightAttrib::get_class_type()", header: "lightAttrib.h".}

proc makeDefault*(_: typedesc[LightRampAttrib]): RenderAttrib {.importcpp: "deconstify(LightRampAttrib::make_default())", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc makeIdentity*(_: typedesc[LightRampAttrib]): RenderAttrib {.importcpp: "deconstify(LightRampAttrib::make_identity())", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc makeSingleThreshold*(_: typedesc[LightRampAttrib], thresh0: float, lev0: float): RenderAttrib {.importcpp: "deconstify(#LightRampAttrib::make_single_threshold(#, #))", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc makeDoubleThreshold*(_: typedesc[LightRampAttrib], thresh0: float, lev0: float, thresh1: float, lev1: float): RenderAttrib {.importcpp: "deconstify(#LightRampAttrib::make_double_threshold(#, #, #, #))", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc makeHdr0*(_: typedesc[LightRampAttrib]): RenderAttrib {.importcpp: "deconstify(LightRampAttrib::make_hdr0())", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc makeHdr1*(_: typedesc[LightRampAttrib]): RenderAttrib {.importcpp: "deconstify(LightRampAttrib::make_hdr1())", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc makeHdr2*(_: typedesc[LightRampAttrib]): RenderAttrib {.importcpp: "deconstify(LightRampAttrib::make_hdr2())", header: "#include \"lightRampAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[LightRampAttrib]): int {.importcpp: "LightRampAttrib::get_class_slot()", header: "lightRampAttrib.h".}

proc getClassType*(_: typedesc[LightRampAttrib]): TypeHandle {.importcpp: "LightRampAttrib::get_class_type()", header: "lightRampAttrib.h".}

proc newLoader*(param0: Loader): Loader {.importcpp: "new Loader(#)".}

proc newLoader*(name: string): Loader {.importcpp: "new Loader(nimStringToStdString(#))", header: stringConversionCode.}

proc newLoader*(): Loader {.importcpp: "new Loader()".}

proc getGlobalPtr*(_: typedesc[Loader]): Loader {.importcpp: "Loader::get_global_ptr()", header: "loader.h".}

proc getClassType*(_: typedesc[Loader]): TypeHandle {.importcpp: "Loader::get_class_type()", header: "loader.h".}

proc getClassType*(_: typedesc[LoaderFileType]): TypeHandle {.importcpp: "LoaderFileType::get_class_type()", header: "loaderFileType.h".}

proc getGlobalPtr*(_: typedesc[LoaderFileTypeRegistry]): LoaderFileTypeRegistry {.importcpp: "LoaderFileTypeRegistry::get_global_ptr()", header: "loaderFileTypeRegistry.h".}

proc initLoaderFileTypeRegistry*(param0: LoaderFileTypeRegistry): LoaderFileTypeRegistry {.importcpp: "LoaderFileTypeRegistry(#)".}

proc make*(_: typedesc[MaterialAttrib], material: Material): RenderAttrib {.importcpp: "deconstify(#MaterialAttrib::make(#))", header: "#include \"materialAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[MaterialAttrib]): RenderAttrib {.importcpp: "deconstify(MaterialAttrib::make_off())", header: "#include \"materialAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[MaterialAttrib]): RenderAttrib {.importcpp: "deconstify(MaterialAttrib::make_default())", header: "#include \"materialAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[MaterialAttrib]): int {.importcpp: "MaterialAttrib::get_class_slot()", header: "materialAttrib.h".}

proc getClassType*(_: typedesc[MaterialAttrib]): TypeHandle {.importcpp: "MaterialAttrib::get_class_type()", header: "materialAttrib.h".}

proc newModelFlattenRequest*(param0: ModelFlattenRequest): ModelFlattenRequest {.importcpp: "new ModelFlattenRequest(#)".}

proc newModelFlattenRequest*(orig: PandaNode): ModelFlattenRequest {.importcpp: "new ModelFlattenRequest(#)".}

proc getClassType*(_: typedesc[ModelFlattenRequest]): TypeHandle {.importcpp: "ModelFlattenRequest::get_class_type()", header: "modelFlattenRequest.h".}

proc newModelLoadRequest*(param0: ModelLoadRequest): ModelLoadRequest {.importcpp: "new ModelLoadRequest(#)".}

proc newModelLoadRequest*(name: string, filename: Filename, options: LoaderOptions, loader: Loader): ModelLoadRequest {.importcpp: "new ModelLoadRequest(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[ModelLoadRequest]): TypeHandle {.importcpp: "ModelLoadRequest::get_class_type()", header: "modelLoadRequest.h".}

proc newModelNode*(name: string): ModelNode {.importcpp: "new ModelNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[ModelNode]): TypeHandle {.importcpp: "ModelNode::get_class_type()", header: "modelNode.h".}

proc newModelRoot*(fullpath: Filename, timestamp: Time): ModelRoot {.importcpp: "new ModelRoot(#, #)".}

proc newModelRoot*(name: string): ModelRoot {.importcpp: "new ModelRoot(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[ModelRoot]): TypeHandle {.importcpp: "ModelRoot::get_class_type()", header: "modelRoot.h".}

proc hasModel*(_: typedesc[ModelPool], filename: Filename): bool {.importcpp: "#ModelPool::has_model(#)", header: "modelPool.h".}

proc verifyModel*(_: typedesc[ModelPool], filename: Filename): bool {.importcpp: "#ModelPool::verify_model(#)", header: "modelPool.h".}

proc getModel*(_: typedesc[ModelPool], filename: Filename, verify: bool): ModelRoot {.importcpp: "#ModelPool::get_model(#, #)", header: "modelPool.h".}

proc loadModel*(_: typedesc[ModelPool], filename: Filename, options: LoaderOptions): ModelRoot {.importcpp: "#ModelPool::load_model(#, #)", header: "modelPool.h".}

proc loadModel*(_: typedesc[ModelPool], filename: Filename): ModelRoot {.importcpp: "#ModelPool::load_model(#)", header: "modelPool.h".}

proc addModel*(_: typedesc[ModelPool], filename: Filename, model: ModelRoot) {.importcpp: "#ModelPool::add_model(#, #)", header: "modelPool.h".}

proc addModel*(_: typedesc[ModelPool], model: ModelRoot) {.importcpp: "#ModelPool::add_model(#)", header: "modelPool.h".}

proc releaseModel*(_: typedesc[ModelPool], filename: Filename) {.importcpp: "#ModelPool::release_model(#)", header: "modelPool.h".}

proc releaseModel*(_: typedesc[ModelPool], model: ModelRoot) {.importcpp: "#ModelPool::release_model(#)", header: "modelPool.h".}

proc releaseAllModels*(_: typedesc[ModelPool]) {.importcpp: "ModelPool::release_all_models()", header: "modelPool.h".}

proc garbageCollect*(_: typedesc[ModelPool]): int {.importcpp: "ModelPool::garbage_collect()", header: "modelPool.h".}

proc listContents*(_: typedesc[ModelPool]) {.importcpp: "ModelPool::list_contents()", header: "modelPool.h".}

proc listContents*(_: typedesc[ModelPool], `out`: iostream | ostream) {.importcpp: "#ModelPool::list_contents(#)", header: "modelPool.h".}

proc write*(_: typedesc[ModelPool], `out`: iostream | ostream) {.importcpp: "#ModelPool::write(#)", header: "modelPool.h".}

proc newModelSaveRequest*(param0: ModelSaveRequest): ModelSaveRequest {.importcpp: "new ModelSaveRequest(#)".}

proc newModelSaveRequest*(name: string, filename: Filename, options: LoaderOptions, node: PandaNode, loader: Loader): ModelSaveRequest {.importcpp: "new ModelSaveRequest(nimStringToStdString(#), #, #, #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[ModelSaveRequest]): TypeHandle {.importcpp: "ModelSaveRequest::get_class_type()", header: "modelSaveRequest.h".}

proc make*(_: typedesc[TextureAttrib]): RenderAttrib {.importcpp: "deconstify(TextureAttrib::make())", header: "#include \"textureAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[TextureAttrib], tex: Texture): RenderAttrib {.importcpp: "deconstify(#TextureAttrib::make(#))", header: "#include \"textureAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[TextureAttrib]): RenderAttrib {.importcpp: "deconstify(TextureAttrib::make_off())", header: "#include \"textureAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[TextureAttrib]): RenderAttrib {.importcpp: "deconstify(TextureAttrib::make_default())", header: "#include \"textureAttrib.h\"\n" & deconstifyCode.}

proc makeAllOff*(_: typedesc[TextureAttrib]): RenderAttrib {.importcpp: "deconstify(TextureAttrib::make_all_off())", header: "#include \"textureAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[TextureAttrib]): int {.importcpp: "TextureAttrib::get_class_slot()", header: "textureAttrib.h".}

proc getClassType*(_: typedesc[TextureAttrib]): TypeHandle {.importcpp: "TextureAttrib::get_class_type()", header: "textureAttrib.h".}

proc make*(_: typedesc[TexGenAttrib]): RenderAttrib {.importcpp: "deconstify(TexGenAttrib::make())", header: "#include \"texGenAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[TexGenAttrib], stage: TextureStage, mode: RenderAttrib_TexGenMode): RenderAttrib {.importcpp: "deconstify(#TexGenAttrib::make(#, #))", header: "#include \"texGenAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[TexGenAttrib]): RenderAttrib {.importcpp: "deconstify(TexGenAttrib::make_default())", header: "#include \"texGenAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[TexGenAttrib]): int {.importcpp: "TexGenAttrib::get_class_slot()", header: "texGenAttrib.h".}

proc getClassType*(_: typedesc[TexGenAttrib]): TypeHandle {.importcpp: "TexGenAttrib::get_class_type()", header: "texGenAttrib.h".}

proc newOccluderNode*(name: string): OccluderNode {.importcpp: "new OccluderNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[OccluderNode]): TypeHandle {.importcpp: "OccluderNode::get_class_type()", header: "occluderNode.h".}

proc make*(_: typedesc[OccluderEffect]): RenderEffect {.importcpp: "deconstify(OccluderEffect::make())", header: "#include \"occluderEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[OccluderEffect]): TypeHandle {.importcpp: "OccluderEffect::get_class_type()", header: "occluderEffect.h".}

proc newPolylightNode*(param0: PolylightNode): PolylightNode {.importcpp: "new PolylightNode(#)".}

proc newPolylightNode*(name: string): PolylightNode {.importcpp: "new PolylightNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[PolylightNode]): TypeHandle {.importcpp: "PolylightNode::get_class_type()", header: "polylightNode.h".}

proc make*(_: typedesc[PolylightEffect]): RenderEffect {.importcpp: "deconstify(PolylightEffect::make())", header: "#include \"polylightEffect.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[PolylightEffect], weight: float, contrib: PolylightEffect_ContribType, effectCenter: LPoint3): RenderEffect {.importcpp: "deconstify(#PolylightEffect::make(#, #, (LPoint3 const &)(#)))", header: "#include \"polylightEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[PolylightEffect]): TypeHandle {.importcpp: "PolylightEffect::get_class_type()", header: "polylightEffect.h".}

proc make*(_: typedesc[ShaderAttrib], shader: Shader, priority: int): RenderAttrib {.importcpp: "deconstify(#ShaderAttrib::make(#, #))", header: "#include \"shaderAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ShaderAttrib], shader: Shader): RenderAttrib {.importcpp: "deconstify(#ShaderAttrib::make(#))", header: "#include \"shaderAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ShaderAttrib]): RenderAttrib {.importcpp: "deconstify(ShaderAttrib::make())", header: "#include \"shaderAttrib.h\"\n" & deconstifyCode.}

proc makeOff*(_: typedesc[ShaderAttrib]): RenderAttrib {.importcpp: "deconstify(ShaderAttrib::make_off())", header: "#include \"shaderAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ShaderAttrib]): RenderAttrib {.importcpp: "deconstify(ShaderAttrib::make_default())", header: "#include \"shaderAttrib.h\"\n" & deconstifyCode.}

proc registerWithReadFactory*(_: typedesc[ShaderAttrib]) {.importcpp: "ShaderAttrib::register_with_read_factory()", header: "shaderAttrib.h".}

proc getClassSlot*(_: typedesc[ShaderAttrib]): int {.importcpp: "ShaderAttrib::get_class_slot()", header: "shaderAttrib.h".}

proc getClassType*(_: typedesc[ShaderAttrib]): TypeHandle {.importcpp: "ShaderAttrib::get_class_type()", header: "shaderAttrib.h".}

proc make*(_: typedesc[ShowBoundsEffect], tight: bool): RenderEffect {.importcpp: "deconstify(#ShowBoundsEffect::make(#))", header: "#include \"showBoundsEffect.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ShowBoundsEffect]): RenderEffect {.importcpp: "deconstify(ShowBoundsEffect::make())", header: "#include \"showBoundsEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[ShowBoundsEffect]): TypeHandle {.importcpp: "ShowBoundsEffect::get_class_type()", header: "showBoundsEffect.h".}

proc make*(_: typedesc[TexProjectorEffect]): RenderEffect {.importcpp: "deconstify(TexProjectorEffect::make())", header: "#include \"texProjectorEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[TexProjectorEffect]): TypeHandle {.importcpp: "TexProjectorEffect::get_class_type()", header: "texProjectorEffect.h".}

proc makeScreen*(_: typedesc[ScissorEffect], frame: LVecBase4, clip: bool): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_screen((LVecBase4 const &)(#), #))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeScreen*(_: typedesc[ScissorEffect], frame: LVecBase4): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_screen((LVecBase4 const &)(#)))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeNode*(_: typedesc[ScissorEffect], a: LPoint3, b: LPoint3, c: LPoint3, d: LPoint3, node: NodePath): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_node((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), #))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeNode*(_: typedesc[ScissorEffect], a: LPoint3, b: LPoint3, c: LPoint3, d: LPoint3): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_node((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#)))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeNode*(_: typedesc[ScissorEffect], a: LPoint3, b: LPoint3, node: NodePath): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_node((LPoint3 const &)(#), (LPoint3 const &)(#), #))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeNode*(_: typedesc[ScissorEffect], a: LPoint3, b: LPoint3): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_node((LPoint3 const &)(#), (LPoint3 const &)(#)))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeNode*(_: typedesc[ScissorEffect], clip: bool): RenderEffect {.importcpp: "deconstify(#ScissorEffect::make_node(#))", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc makeNode*(_: typedesc[ScissorEffect]): RenderEffect {.importcpp: "deconstify(ScissorEffect::make_node())", header: "#include \"scissorEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[ScissorEffect]): TypeHandle {.importcpp: "ScissorEffect::get_class_type()", header: "scissorEffect.h".}

proc initSceneGraphReducer*(gsg: GraphicsStateGuardianBase): SceneGraphReducer {.importcpp: "SceneGraphReducer(#)".}

proc initSceneGraphReducer*(): SceneGraphReducer {.importcpp: "SceneGraphReducer()".}

proc initSceneGraphReducer*(param0: SceneGraphReducer): SceneGraphReducer {.importcpp: "SceneGraphReducer(#)".}

proc newPortalNode*(name: string): PortalNode {.importcpp: "new PortalNode(nimStringToStdString(#))", header: stringConversionCode.}

proc newPortalNode*(name: string, pos: LPoint3, scale: float): PortalNode {.importcpp: "new PortalNode(nimStringToStdString(#), (LPoint3 &)(#), #)", header: stringConversionCode.}

proc newPortalNode*(name: string, pos: LPoint3): PortalNode {.importcpp: "new PortalNode(nimStringToStdString(#), (LPoint3 &)(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[PortalNode]): TypeHandle {.importcpp: "PortalNode::get_class_type()", header: "portalNode.h".}

proc makeOff*(_: typedesc[ScissorAttrib]): RenderAttrib {.importcpp: "deconstify(ScissorAttrib::make_off())", header: "#include \"scissorAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ScissorAttrib], frame: LVecBase4): RenderAttrib {.importcpp: "deconstify(#ScissorAttrib::make((LVecBase4 const &)(#)))", header: "#include \"scissorAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[ScissorAttrib], left: float, right: float, bottom: float, top: float): RenderAttrib {.importcpp: "deconstify(#ScissorAttrib::make(#, #, #, #))", header: "#include \"scissorAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ScissorAttrib]): RenderAttrib {.importcpp: "deconstify(ScissorAttrib::make_default())", header: "#include \"scissorAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[ScissorAttrib]): int {.importcpp: "ScissorAttrib::get_class_slot()", header: "scissorAttrib.h".}

proc getClassType*(_: typedesc[ScissorAttrib]): TypeHandle {.importcpp: "ScissorAttrib::get_class_type()", header: "scissorAttrib.h".}

proc make*(_: typedesc[ShadeModelAttrib], mode: ShadeModelAttrib_Mode): RenderAttrib {.importcpp: "deconstify(#ShadeModelAttrib::make(#))", header: "#include \"shadeModelAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[ShadeModelAttrib]): RenderAttrib {.importcpp: "deconstify(ShadeModelAttrib::make_default())", header: "#include \"shadeModelAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[ShadeModelAttrib]): int {.importcpp: "ShadeModelAttrib::get_class_slot()", header: "shadeModelAttrib.h".}

proc getClassType*(_: typedesc[ShadeModelAttrib]): TypeHandle {.importcpp: "ShadeModelAttrib::get_class_type()", header: "shadeModelAttrib.h".}

proc makeOff*(_: typedesc[StencilAttrib]): RenderAttrib {.importcpp: "deconstify(StencilAttrib::make_off())", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc makeDefault*(_: typedesc[StencilAttrib]): RenderAttrib {.importcpp: "deconstify(StencilAttrib::make_default())", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[StencilAttrib], frontEnable: bool, frontComparisonFunction: RenderAttrib_PandaCompareFunc, stencilFailOperation: StencilAttrib_StencilOperation, stencilPassZFailOperation: StencilAttrib_StencilOperation, frontStencilPassZPassOperation: StencilAttrib_StencilOperation, reference: int, readMask: int, writeMask: int): RenderAttrib {.importcpp: "deconstify(#StencilAttrib::make(#, #, #, #, #, #, #, #))", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc make*(_: typedesc[StencilAttrib], frontEnable: bool, frontComparisonFunction: RenderAttrib_PandaCompareFunc, stencilFailOperation: StencilAttrib_StencilOperation, stencilPassZFailOperation: StencilAttrib_StencilOperation, frontStencilPassZPassOperation: StencilAttrib_StencilOperation, reference: int, readMask: int): RenderAttrib {.importcpp: "deconstify(#StencilAttrib::make(#, #, #, #, #, #, #))", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc make2Sided*(_: typedesc[StencilAttrib], frontEnable: bool, backEnable: bool, frontComparisonFunction: RenderAttrib_PandaCompareFunc, stencilFailOperation: StencilAttrib_StencilOperation, stencilPassZFailOperation: StencilAttrib_StencilOperation, frontStencilPassZPassOperation: StencilAttrib_StencilOperation, reference: int, readMask: int, writeMask: int, backComparisonFunction: RenderAttrib_PandaCompareFunc, backStencilFailOperation: StencilAttrib_StencilOperation, backStencilPassZFailOperation: StencilAttrib_StencilOperation, backStencilPassZPassOperation: StencilAttrib_StencilOperation): RenderAttrib {.importcpp: "deconstify(#StencilAttrib::make_2_sided(#, #, #, #, #, #, #, #, #, #, #, #, #))", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc makeWithClear*(_: typedesc[StencilAttrib], frontEnable: bool, frontComparisonFunction: RenderAttrib_PandaCompareFunc, stencilFailOperation: StencilAttrib_StencilOperation, stencilPassZFailOperation: StencilAttrib_StencilOperation, frontStencilPassZPassOperation: StencilAttrib_StencilOperation, reference: int, readMask: int, writeMask: int, clear: bool, clearValue: int): RenderAttrib {.importcpp: "deconstify(#StencilAttrib::make_with_clear(#, #, #, #, #, #, #, #, #, #))", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc make2SidedWithClear*(_: typedesc[StencilAttrib], frontEnable: bool, backEnable: bool, frontComparisonFunction: RenderAttrib_PandaCompareFunc, stencilFailOperation: StencilAttrib_StencilOperation, stencilPassZFailOperation: StencilAttrib_StencilOperation, frontStencilPassZPassOperation: StencilAttrib_StencilOperation, reference: int, readMask: int, writeMask: int, backComparisonFunction: RenderAttrib_PandaCompareFunc, backStencilFailOperation: StencilAttrib_StencilOperation, backStencilPassZFailOperation: StencilAttrib_StencilOperation, backStencilPassZPassOperation: StencilAttrib_StencilOperation, clear: bool, clearValue: int): RenderAttrib {.importcpp: "deconstify(#StencilAttrib::make_2_sided_with_clear(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #))", header: "#include \"stencilAttrib.h\"\n" & deconstifyCode.}

proc getClassSlot*(_: typedesc[StencilAttrib]): int {.importcpp: "StencilAttrib::get_class_slot()", header: "stencilAttrib.h".}

proc getClassType*(_: typedesc[StencilAttrib]): TypeHandle {.importcpp: "StencilAttrib::get_class_type()", header: "stencilAttrib.h".}

proc hasShader*(_: typedesc[ShaderPool], filename: Filename): bool {.importcpp: "#ShaderPool::has_shader(#)", header: "shaderPool.h".}

proc verifyShader*(_: typedesc[ShaderPool], filename: Filename): bool {.importcpp: "#ShaderPool::verify_shader(#)", header: "shaderPool.h".}

proc loadShader*(_: typedesc[ShaderPool], filename: Filename): Shader {.importcpp: "#ShaderPool::load_shader(#)", header: "shaderPool.h".}

proc addShader*(_: typedesc[ShaderPool], filename: Filename, shader: Shader) {.importcpp: "#ShaderPool::add_shader(#, #)", header: "shaderPool.h".}

proc releaseShader*(_: typedesc[ShaderPool], filename: Filename) {.importcpp: "#ShaderPool::release_shader(#)", header: "shaderPool.h".}

proc releaseAllShaders*(_: typedesc[ShaderPool]) {.importcpp: "ShaderPool::release_all_shaders()", header: "shaderPool.h".}

proc garbageCollect*(_: typedesc[ShaderPool]): int {.importcpp: "ShaderPool::garbage_collect()", header: "shaderPool.h".}

proc listContents*(_: typedesc[ShaderPool], `out`: iostream | ostream) {.importcpp: "#ShaderPool::list_contents(#)", header: "shaderPool.h".}

proc write*(_: typedesc[ShaderPool], `out`: iostream | ostream) {.importcpp: "#ShaderPool::write(#)", header: "shaderPool.h".}

proc newMovieAudio*(param0: MovieAudio): MovieAudio {.importcpp: "new MovieAudio(#)".}

proc newMovieAudio*(name: string): MovieAudio {.importcpp: "new MovieAudio(nimStringToStdString(#))", header: stringConversionCode.}

proc newMovieAudio*(): MovieAudio {.importcpp: "new MovieAudio()".}

proc get*(_: typedesc[MovieAudio], name: Filename): MovieAudio {.importcpp: "#MovieAudio::get(#)", header: "movieAudio.h".}

proc getClassType*(_: typedesc[MovieAudio]): TypeHandle {.importcpp: "MovieAudio::get_class_type()", header: "movieAudio.h".}

proc newFlacAudio*(name: Filename): FlacAudio {.importcpp: "new FlacAudio(#)".}

proc newFlacAudio*(param0: FlacAudio): FlacAudio {.importcpp: "new FlacAudio(#)".}

proc make*(_: typedesc[FlacAudio], name: Filename): MovieAudio {.importcpp: "#FlacAudio::make(#)", header: "flacAudio.h".}

proc getClassType*(_: typedesc[FlacAudio]): TypeHandle {.importcpp: "FlacAudio::get_class_type()", header: "flacAudio.h".}

proc newMovieAudioCursor*(src: MovieAudio): MovieAudioCursor {.importcpp: "new MovieAudioCursor(#)".}

proc newMovieAudioCursor*(param0: MovieAudioCursor): MovieAudioCursor {.importcpp: "new MovieAudioCursor(#)".}

proc getClassType*(_: typedesc[MovieAudioCursor]): TypeHandle {.importcpp: "MovieAudioCursor::get_class_type()", header: "movieAudioCursor.h".}

proc newFlacAudioCursor*(src: FlacAudio, stream: istream): FlacAudioCursor {.importcpp: "new FlacAudioCursor(#, #)".}

proc newFlacAudioCursor*(param0: FlacAudioCursor): FlacAudioCursor {.importcpp: "new FlacAudioCursor(#)".}

proc getClassType*(_: typedesc[FlacAudioCursor]): TypeHandle {.importcpp: "FlacAudioCursor::get_class_type()", header: "flacAudioCursor.h".}

proc newMovieVideo*(param0: MovieVideo): MovieVideo {.importcpp: "new MovieVideo(#)".}

proc newMovieVideo*(name: string): MovieVideo {.importcpp: "new MovieVideo(nimStringToStdString(#))", header: stringConversionCode.}

proc newMovieVideo*(): MovieVideo {.importcpp: "new MovieVideo()".}

proc get*(_: typedesc[MovieVideo], name: Filename): MovieVideo {.importcpp: "#MovieVideo::get(#)", header: "movieVideo.h".}

proc getClassType*(_: typedesc[MovieVideo]): TypeHandle {.importcpp: "MovieVideo::get_class_type()", header: "movieVideo.h".}

proc newInkblotVideo*(param0: InkblotVideo): InkblotVideo {.importcpp: "new InkblotVideo(#)".}

proc newInkblotVideo*(x: int, y: int, fps: int): InkblotVideo {.importcpp: "new InkblotVideo(#, #, #)".}

proc getClassType*(_: typedesc[InkblotVideo]): TypeHandle {.importcpp: "InkblotVideo::get_class_type()", header: "inkblotVideo.h".}

proc getClassType*(_: typedesc[MovieVideoCursor]): TypeHandle {.importcpp: "MovieVideoCursor::get_class_type()", header: "movieVideoCursor.h".}

proc newMovieVideoCursor*(param0: MovieVideoCursor): MovieVideoCursor {.importcpp: "new MovieVideoCursor(#)".}

proc newInkblotVideoCursor*(src: InkblotVideo): InkblotVideoCursor {.importcpp: "new InkblotVideoCursor(#)".}

proc newInkblotVideoCursor*(param0: InkblotVideoCursor): InkblotVideoCursor {.importcpp: "new InkblotVideoCursor(#)".}

proc getClassType*(_: typedesc[InkblotVideoCursor]): TypeHandle {.importcpp: "InkblotVideoCursor::get_class_type()", header: "inkblotVideoCursor.h".}

proc getNumOptions*(_: typedesc[MicrophoneAudio]): int {.importcpp: "MicrophoneAudio::get_num_options()", header: "microphoneAudio.h".}

proc getOption*(_: typedesc[MicrophoneAudio], n: int): MicrophoneAudio {.importcpp: "#MicrophoneAudio::get_option(#)", header: "microphoneAudio.h".}

proc getClassType*(_: typedesc[MicrophoneAudio]): TypeHandle {.importcpp: "MicrophoneAudio::get_class_type()", header: "microphoneAudio.h".}

proc newOpusAudio*(name: Filename): OpusAudio {.importcpp: "new OpusAudio(#)".}

proc newOpusAudio*(param0: OpusAudio): OpusAudio {.importcpp: "new OpusAudio(#)".}

proc make*(_: typedesc[OpusAudio], name: Filename): MovieAudio {.importcpp: "#OpusAudio::make(#)", header: "opusAudio.h".}

proc getClassType*(_: typedesc[OpusAudio]): TypeHandle {.importcpp: "OpusAudio::get_class_type()", header: "opusAudio.h".}

proc newOpusAudioCursor*(src: OpusAudio, stream: istream): OpusAudioCursor {.importcpp: "new OpusAudioCursor(#, #)".}

proc newOpusAudioCursor*(param0: OpusAudioCursor): OpusAudioCursor {.importcpp: "new OpusAudioCursor(#)".}

proc getClassType*(_: typedesc[OpusAudioCursor]): TypeHandle {.importcpp: "OpusAudioCursor::get_class_type()", header: "opusAudioCursor.h".}

proc newUserDataAudio*(param0: UserDataAudio): UserDataAudio {.importcpp: "new UserDataAudio(#)".}

proc newUserDataAudio*(rate: int, channels: int, removeAfterRead: bool): UserDataAudio {.importcpp: "new UserDataAudio(#, #, #)".}

proc newUserDataAudio*(rate: int, channels: int): UserDataAudio {.importcpp: "new UserDataAudio(#, #)".}

proc getClassType*(_: typedesc[UserDataAudio]): TypeHandle {.importcpp: "UserDataAudio::get_class_type()", header: "userDataAudio.h".}

proc newUserDataAudioCursor*(src: UserDataAudio): UserDataAudioCursor {.importcpp: "new UserDataAudioCursor(#)".}

proc newUserDataAudioCursor*(param0: UserDataAudioCursor): UserDataAudioCursor {.importcpp: "new UserDataAudioCursor(#)".}

proc getClassType*(_: typedesc[UserDataAudioCursor]): TypeHandle {.importcpp: "UserDataAudioCursor::get_class_type()", header: "userDataAudioCursor.h".}

proc newVorbisAudio*(name: Filename): VorbisAudio {.importcpp: "new VorbisAudio(#)".}

proc newVorbisAudio*(param0: VorbisAudio): VorbisAudio {.importcpp: "new VorbisAudio(#)".}

proc make*(_: typedesc[VorbisAudio], name: Filename): MovieAudio {.importcpp: "#VorbisAudio::make(#)", header: "vorbisAudio.h".}

proc getClassType*(_: typedesc[VorbisAudio]): TypeHandle {.importcpp: "VorbisAudio::get_class_type()", header: "vorbisAudio.h".}

proc newVorbisAudioCursor*(src: VorbisAudio, stream: istream): VorbisAudioCursor {.importcpp: "new VorbisAudioCursor(#, #)".}

proc newVorbisAudioCursor*(param0: VorbisAudioCursor): VorbisAudioCursor {.importcpp: "new VorbisAudioCursor(#)".}

proc getClassType*(_: typedesc[VorbisAudioCursor]): TypeHandle {.importcpp: "VorbisAudioCursor::get_class_type()", header: "vorbisAudioCursor.h".}

proc newWavAudio*(name: Filename): WavAudio {.importcpp: "new WavAudio(#)".}

proc newWavAudio*(param0: WavAudio): WavAudio {.importcpp: "new WavAudio(#)".}

proc make*(_: typedesc[WavAudio], name: Filename): MovieAudio {.importcpp: "#WavAudio::make(#)", header: "wavAudio.h".}

proc getClassType*(_: typedesc[WavAudio]): TypeHandle {.importcpp: "WavAudio::get_class_type()", header: "wavAudio.h".}

proc newWavAudioCursor*(src: WavAudio, stream: istream): WavAudioCursor {.importcpp: "new WavAudioCursor(#, #)".}

proc newWavAudioCursor*(param0: WavAudioCursor): WavAudioCursor {.importcpp: "new WavAudioCursor(#)".}

proc getClassType*(_: typedesc[WavAudioCursor]): TypeHandle {.importcpp: "WavAudioCursor::get_class_type()", header: "wavAudioCursor.h".}

proc newCardMaker*(param0: CardMaker): CardMaker {.importcpp: "new CardMaker(#)".}

proc newCardMaker*(name: string): CardMaker {.importcpp: "new CardMaker(nimStringToStdString(#))", header: stringConversionCode.}

proc newFisheyeMaker*(param0: FisheyeMaker): FisheyeMaker {.importcpp: "new FisheyeMaker(#)".}

proc newFisheyeMaker*(name: string): FisheyeMaker {.importcpp: "new FisheyeMaker(nimStringToStdString(#))", header: stringConversionCode.}

proc newFrameRateMeter*(param0: FrameRateMeter): FrameRateMeter {.importcpp: "new FrameRateMeter(#)".}

proc newFrameRateMeter*(name: string): FrameRateMeter {.importcpp: "new FrameRateMeter(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[FrameRateMeter]): TypeHandle {.importcpp: "FrameRateMeter::get_class_type()", header: "frameRateMeter.h".}

proc newGeoMipTerrain*(name: string): GeoMipTerrain {.importcpp: "new GeoMipTerrain(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[GeoMipTerrain]): TypeHandle {.importcpp: "GeoMipTerrain::get_class_type()", header: "geoMipTerrain.h".}

proc initHeightfieldTesselator*(param0: HeightfieldTesselator): HeightfieldTesselator {.importcpp: "HeightfieldTesselator(#)".}

proc initHeightfieldTesselator*(name: string): HeightfieldTesselator {.importcpp: "HeightfieldTesselator(nimStringToStdString(#))", header: stringConversionCode.}

proc initLineSegs*(param0: LineSegs): LineSegs {.importcpp: "LineSegs(#)".}

proc initLineSegs*(name: string): LineSegs {.importcpp: "LineSegs(nimStringToStdString(#))", header: stringConversionCode.}

proc initLineSegs*(): LineSegs {.importcpp: "LineSegs()".}

proc initMeshDrawer*(): MeshDrawer {.importcpp: "MeshDrawer()".}

proc getClassType*(_: typedesc[MeshDrawer]): TypeHandle {.importcpp: "MeshDrawer::get_class_type()", header: "meshDrawer.h".}

proc initMeshDrawer2D*(): MeshDrawer2D {.importcpp: "MeshDrawer2D()".}

proc getClassType*(_: typedesc[MeshDrawer2D]): TypeHandle {.importcpp: "MeshDrawer2D::get_class_type()", header: "meshDrawer2D.h".}

proc newMovieTexture*(video: MovieVideo): MovieTexture {.importcpp: "new MovieTexture(#)".}

proc newMovieTexture*(name: string): MovieTexture {.importcpp: "new MovieTexture(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[MovieTexture]): TypeHandle {.importcpp: "MovieTexture::get_class_type()", header: "movieTexture.h".}

proc initMultitexReducer*(): MultitexReducer {.importcpp: "MultitexReducer()".}

proc initMultitexReducer*(param0: MultitexReducer): MultitexReducer {.importcpp: "MultitexReducer(#)".}

proc newNodeVertexTransform*(node: PandaNode, prev: VertexTransform): NodeVertexTransform {.importcpp: "new NodeVertexTransform(#, #)".}

proc newNodeVertexTransform*(node: PandaNode): NodeVertexTransform {.importcpp: "new NodeVertexTransform(#)".}

proc getClassType*(_: typedesc[NodeVertexTransform]): TypeHandle {.importcpp: "NodeVertexTransform::get_class_type()", header: "nodeVertexTransform.h".}

proc newShaderTerrainMesh*(): ShaderTerrainMesh {.importcpp: "new ShaderTerrainMesh()".}

proc getClassType*(_: typedesc[ShaderTerrainMesh]): TypeHandle {.importcpp: "ShaderTerrainMesh::get_class_type()", header: "shaderTerrainMesh.h".}

proc newSceneGraphAnalyzerMeter*(param0: SceneGraphAnalyzerMeter): SceneGraphAnalyzerMeter {.importcpp: "new SceneGraphAnalyzerMeter(#)".}

proc newSceneGraphAnalyzerMeter*(name: string, node: PandaNode): SceneGraphAnalyzerMeter {.importcpp: "new SceneGraphAnalyzerMeter(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[SceneGraphAnalyzerMeter]): TypeHandle {.importcpp: "SceneGraphAnalyzerMeter::get_class_type()", header: "sceneGraphAnalyzerMeter.h".}

proc newRigidBodyCombiner*(name: string): RigidBodyCombiner {.importcpp: "new RigidBodyCombiner(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[RigidBodyCombiner]): TypeHandle {.importcpp: "RigidBodyCombiner::get_class_type()", header: "rigidBodyCombiner.h".}

proc newPipeOcclusionCullTraverser*(host: GraphicsOutput): PipeOcclusionCullTraverser {.importcpp: "new PipeOcclusionCullTraverser(#)".}

proc getClassType*(_: typedesc[PipeOcclusionCullTraverser]): TypeHandle {.importcpp: "PipeOcclusionCullTraverser::get_class_type()", header: "pipeOcclusionCullTraverser.h".}

proc initPfmVizzer*(pfm: PfmFile): PfmVizzer {.importcpp: "PfmVizzer(#)".}

proc initPfmVizzer*(param0: PfmVizzer): PfmVizzer {.importcpp: "PfmVizzer(#)".}

proc newAnimGroup*(parent: AnimGroup, name: string): AnimGroup {.importcpp: "new AnimGroup(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newAnimGroup*(param0: AnimGroup): AnimGroup {.importcpp: "new AnimGroup(#)".}

proc getClassType*(_: typedesc[AnimGroup]): TypeHandle {.importcpp: "AnimGroup::get_class_type()", header: "animGroup.h".}

proc newAnimBundle*(param0: AnimBundle): AnimBundle {.importcpp: "new AnimBundle(#)".}

proc newAnimBundle*(name: string, fps: float, numFrames: int): AnimBundle {.importcpp: "new AnimBundle(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[AnimBundle]): TypeHandle {.importcpp: "AnimBundle::get_class_type()", header: "animBundle.h".}

proc newAnimBundleNode*(name: string, bundle: AnimBundle): AnimBundleNode {.importcpp: "new AnimBundleNode(nimStringToStdString(#), #)", header: stringConversionCode.}

proc findAnimBundle*(_: typedesc[AnimBundleNode], root: PandaNode): AnimBundle {.importcpp: "#AnimBundleNode::find_anim_bundle(#)", header: "animBundleNode.h".}

proc getClassType*(_: typedesc[AnimBundleNode]): TypeHandle {.importcpp: "AnimBundleNode::get_class_type()", header: "animBundleNode.h".}

proc newPartGroup*(parent: PartGroup, name: string): PartGroup {.importcpp: "new PartGroup(#, nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[PartGroup]): TypeHandle {.importcpp: "PartGroup::get_class_type()", header: "partGroup.h".}

proc getClassType*(_: typedesc[AnimControl]): TypeHandle {.importcpp: "AnimControl::get_class_type()", header: "animControl.h".}

proc getClassType*(_: typedesc[AnimChannelBase]): TypeHandle {.importcpp: "AnimChannelBase::get_class_type()", header: "animChannelBase.h".}

proc getClassType*(_: typedesc[AnimChannelMatrixDynamic]): TypeHandle {.importcpp: "AnimChannelMatrixDynamic::get_class_type()", header: "animChannelMatrixDynamic.h".}

proc newAnimChannelMatrixXfmTable*(parent: AnimGroup, name: string): AnimChannelMatrixXfmTable {.importcpp: "new AnimChannelMatrixXfmTable(#, nimStringToStdString(#))", header: stringConversionCode.}

proc isValidId*(_: typedesc[AnimChannelMatrixXfmTable], tableId: char): bool {.importcpp: "#AnimChannelMatrixXfmTable::is_valid_id(#)", header: "animChannelMatrixXfmTable.h".}

proc getClassType*(_: typedesc[AnimChannelMatrixXfmTable]): TypeHandle {.importcpp: "AnimChannelMatrixXfmTable::get_class_type()", header: "animChannelMatrixXfmTable.h".}

proc getClassType*(_: typedesc[AnimChannelScalarDynamic]): TypeHandle {.importcpp: "AnimChannelScalarDynamic::get_class_type()", header: "animChannelScalarDynamic.h".}

proc newAnimChannelScalarTable*(parent: AnimGroup, name: string): AnimChannelScalarTable {.importcpp: "new AnimChannelScalarTable(#, nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[AnimChannelScalarTable]): TypeHandle {.importcpp: "AnimChannelScalarTable::get_class_type()", header: "animChannelScalarTable.h".}

proc initAnimControlCollection*(): AnimControlCollection {.importcpp: "AnimControlCollection()".}

proc initAnimControlCollection*(param0: AnimControlCollection): AnimControlCollection {.importcpp: "AnimControlCollection(#)".}

proc newAnimPreloadTable*(): AnimPreloadTable {.importcpp: "new AnimPreloadTable()".}

proc getClassType*(_: typedesc[AnimPreloadTable]): TypeHandle {.importcpp: "AnimPreloadTable::get_class_type()", header: "animPreloadTable.h".}

proc autoBind*(rootNode: PandaNode, controls: AnimControlCollection, hierarchyMatchFlags: int) {.importcpp: "auto_bind(#, #, #)", header: "auto_bind.h".}

proc autoBind*(rootNode: PandaNode, controls: AnimControlCollection) {.importcpp: "auto_bind(#, #)", header: "auto_bind.h".}

proc initPartSubset*(): PartSubset {.importcpp: "PartSubset()".}

proc initPartSubset*(copy: PartSubset): PartSubset {.importcpp: "PartSubset(#)".}

proc newBindAnimRequest*(param0: BindAnimRequest): BindAnimRequest {.importcpp: "new BindAnimRequest(#)".}

proc newBindAnimRequest*(name: string, filename: Filename, options: LoaderOptions, loader: Loader, control: AnimControl, hierarchyMatchFlags: int, subset: PartSubset): BindAnimRequest {.importcpp: "new BindAnimRequest(nimStringToStdString(#), #, #, #, #, #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[BindAnimRequest]): TypeHandle {.importcpp: "BindAnimRequest::get_class_type()", header: "bindAnimRequest.h".}

proc newPartBundle*(name: string): PartBundle {.importcpp: "new PartBundle(nimStringToStdString(#))", header: stringConversionCode.}

proc newPartBundle*(): PartBundle {.importcpp: "new PartBundle()".}

proc newPartBundleNode*(name: string, bundle: PartBundle): PartBundleNode {.importcpp: "new PartBundleNode(nimStringToStdString(#), #)", header: stringConversionCode.}

proc newPartBundleHandle*(bundle: PartBundle): PartBundleHandle {.importcpp: "new PartBundleHandle(#)".}

proc newPartBundleHandle*(param0: PartBundleHandle): PartBundleHandle {.importcpp: "new PartBundleHandle(#)".}

proc getClassType*(_: typedesc[PartBundleNode]): TypeHandle {.importcpp: "PartBundleNode::get_class_type()", header: "partBundleNode.h".}

proc getClassType*(_: typedesc[PartBundle]): TypeHandle {.importcpp: "PartBundle::get_class_type()", header: "partBundle.h".}

proc getClassType*(_: typedesc[MovingPartBase]): TypeHandle {.importcpp: "MovingPartBase::get_class_type()", header: "movingPartBase.h".}

proc getClassType*(_: typedesc[MovingPartMatrix]): TypeHandle {.importcpp: "MovingPartMatrix::get_class_type()", header: "movingPartMatrix.h".}

proc getClassType*(_: typedesc[MovingPartScalar]): TypeHandle {.importcpp: "MovingPartScalar::get_class_type()", header: "movingPartScalar.h".}

proc initPStatCollector*(copy: PStatCollector): PStatCollector {.importcpp: "PStatCollector(#)".}

proc initPStatCollector*(parent: PStatCollector, name: string): PStatCollector {.importcpp: "PStatCollector(#, nimStringToStdString(#))", header: stringConversionCode.}

proc initPStatCollector*(name: string, client: PStatClient): PStatCollector {.importcpp: "PStatCollector(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initPStatCollector*(name: string): PStatCollector {.importcpp: "PStatCollector(nimStringToStdString(#))", header: stringConversionCode.}

proc initPStatThread*(client: PStatClient, index: int): PStatThread {.importcpp: "PStatThread(#, #)".}

proc initPStatThread*(copy: PStatThread): PStatThread {.importcpp: "PStatThread(#)".}

proc initPStatThread*(thread: Thread, client: PStatClient): PStatThread {.importcpp: "PStatThread(#, #)".}

proc initPStatThread*(thread: Thread): PStatThread {.importcpp: "PStatThread(#)".}

proc connect*(_: typedesc[PStatClient], hostname: string, port: int): bool {.importcpp: "#PStatClient::connect(nimStringToStdString(#), #)", header: "pStatClient.h".}

proc connect*(_: typedesc[PStatClient], hostname: string): bool {.importcpp: "#PStatClient::connect(nimStringToStdString(#))", header: "pStatClient.h".}

proc connect*(_: typedesc[PStatClient]): bool {.importcpp: "PStatClient::connect()", header: "pStatClient.h".}

proc disconnect*(_: typedesc[PStatClient]) {.importcpp: "PStatClient::disconnect()", header: "pStatClient.h".}

proc isConnected*(_: typedesc[PStatClient]): bool {.importcpp: "PStatClient::is_connected()", header: "pStatClient.h".}

proc resumeAfterPause*(_: typedesc[PStatClient]) {.importcpp: "PStatClient::resume_after_pause()", header: "pStatClient.h".}

proc mainTick*(_: typedesc[PStatClient]) {.importcpp: "PStatClient::main_tick()", header: "pStatClient.h".}

proc threadTick*(_: typedesc[PStatClient], syncName: string) {.importcpp: "#PStatClient::thread_tick(nimStringToStdString(#))", header: "pStatClient.h".}

proc getGlobalPstats*(_: typedesc[PStatClient]): PStatClient {.importcpp: "PStatClient::get_global_pstats()", header: "pStatClient.h".}

proc newPStatCollectorForward*(col: PStatCollector): PStatCollectorForward {.importcpp: "new PStatCollectorForward(#)".}

proc newCharacterJoint*(character: Character, root: PartBundle, parent: PartGroup, name: string, defaultValue: LMatrix4): CharacterJoint {.importcpp: "new CharacterJoint(#, #, #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[CharacterJoint]): TypeHandle {.importcpp: "CharacterJoint::get_class_type()", header: "characterJoint.h".}

proc newCharacterSlider*(parent: PartGroup, name: string): CharacterSlider {.importcpp: "new CharacterSlider(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newCharacterSlider*(parent: PartGroup, name: string, defaultValue: float): CharacterSlider {.importcpp: "new CharacterSlider(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[CharacterSlider]): TypeHandle {.importcpp: "CharacterSlider::get_class_type()", header: "characterSlider.h".}

proc newCharacterVertexSlider*(charSlider: CharacterSlider): CharacterVertexSlider {.importcpp: "new CharacterVertexSlider(#)".}

proc getClassType*(_: typedesc[CharacterVertexSlider]): TypeHandle {.importcpp: "CharacterVertexSlider::get_class_type()", header: "characterVertexSlider.h".}

proc newJointVertexTransform*(joint: CharacterJoint): JointVertexTransform {.importcpp: "new JointVertexTransform(#)".}

proc getClassType*(_: typedesc[JointVertexTransform]): TypeHandle {.importcpp: "JointVertexTransform::get_class_type()", header: "jointVertexTransform.h".}

proc newCharacter*(param0: Character): Character {.importcpp: "new Character(#)".}

proc newCharacter*(name: string): Character {.importcpp: "new Character(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[Character]): TypeHandle {.importcpp: "Character::get_class_type()", header: "character.h".}

proc newCharacterJointBundle*(name: string): CharacterJointBundle {.importcpp: "new CharacterJointBundle(nimStringToStdString(#))", header: stringConversionCode.}

proc newCharacterJointBundle*(): CharacterJointBundle {.importcpp: "new CharacterJointBundle()".}

proc getClassType*(_: typedesc[CharacterJointBundle]): TypeHandle {.importcpp: "CharacterJointBundle::get_class_type()", header: "characterJointBundle.h".}

proc make*(_: typedesc[CharacterJointEffect], character: Character): RenderEffect {.importcpp: "deconstify(#CharacterJointEffect::make(#))", header: "#include \"characterJointEffect.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[CharacterJointEffect]): TypeHandle {.importcpp: "CharacterJointEffect::get_class_type()", header: "characterJointEffect.h".}

proc getClassType*(_: typedesc[CollisionSolid]): TypeHandle {.importcpp: "CollisionSolid::get_class_type()", header: "collisionSolid.h".}

proc newCollisionBox*(min: LPoint3, max: LPoint3): CollisionBox {.importcpp: "new CollisionBox((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc newCollisionBox*(center: LPoint3, x: float, y: float, z: float): CollisionBox {.importcpp: "new CollisionBox((LPoint3 const &)(#), #, #, #)".}

proc getClassType*(_: typedesc[CollisionBox]): TypeHandle {.importcpp: "CollisionBox::get_class_type()", header: "collisionBox.h".}

proc newCollisionCapsule*(a: LPoint3, db: LPoint3, radius: float): CollisionCapsule {.importcpp: "new CollisionCapsule((LPoint3 const &)(#), (LPoint3 const &)(#), #)".}

proc newCollisionCapsule*(ax: float, ay: float, az: float, bx: float, by: float, bz: float, radius: float): CollisionCapsule {.importcpp: "new CollisionCapsule(#, #, #, #, #, #, #)".}

proc getClassType*(_: typedesc[CollisionCapsule]): TypeHandle {.importcpp: "CollisionCapsule::get_class_type()", header: "collisionCapsule.h".}

proc getClassType*(_: typedesc[CollisionHandler]): TypeHandle {.importcpp: "CollisionHandler::get_class_type()", header: "collisionHandler.h".}

proc newCollisionHandler*(param0: CollisionHandler): CollisionHandler {.importcpp: "new CollisionHandler(#)".}

proc newCollisionNode*(name: string): CollisionNode {.importcpp: "new CollisionNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getDefaultCollideMask*(_: typedesc[CollisionNode]): CollideMask {.importcpp: "CollisionNode::get_default_collide_mask()", header: "collisionNode.h".}

proc getClassType*(_: typedesc[CollisionNode]): TypeHandle {.importcpp: "CollisionNode::get_class_type()", header: "collisionNode.h".}

proc initCollisionTraverser*(param0: CollisionTraverser): CollisionTraverser {.importcpp: "CollisionTraverser(#)".}

proc initCollisionTraverser*(name: string): CollisionTraverser {.importcpp: "CollisionTraverser(nimStringToStdString(#))", header: stringConversionCode.}

proc initCollisionTraverser*(): CollisionTraverser {.importcpp: "CollisionTraverser()".}

proc getClassType*(_: typedesc[CollisionRecorder]): TypeHandle {.importcpp: "CollisionRecorder::get_class_type()", header: "collisionRecorder.h".}

proc getClassType*(_: typedesc[CollisionTraverser]): TypeHandle {.importcpp: "CollisionTraverser::get_class_type()", header: "collisionTraverser.h".}

proc getClassType*(_: typedesc[CollisionEntry]): TypeHandle {.importcpp: "CollisionEntry::get_class_type()", header: "collisionEntry.h".}

proc newCollisionPlane*(copy: CollisionPlane): CollisionPlane {.importcpp: "new CollisionPlane(#)".}

proc newCollisionPlane*(plane: LPlane): CollisionPlane {.importcpp: "new CollisionPlane(#)".}

proc getClassType*(_: typedesc[CollisionPlane]): TypeHandle {.importcpp: "CollisionPlane::get_class_type()", header: "collisionPlane.h".}

proc newCollisionFloorMesh*(): CollisionFloorMesh {.importcpp: "new CollisionFloorMesh()".}

proc getClassType*(_: typedesc[CollisionFloorMesh]): TypeHandle {.importcpp: "CollisionFloorMesh::get_class_type()", header: "collisionFloorMesh.h".}

proc newCollisionPolygon*(a: LVecBase3, b: LVecBase3, c: LVecBase3): CollisionPolygon {.importcpp: "new CollisionPolygon((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc newCollisionPolygon*(a: LVecBase3, b: LVecBase3, c: LVecBase3, d: LVecBase3): CollisionPolygon {.importcpp: "new CollisionPolygon((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc verifyPoints*(_: typedesc[CollisionPolygon], a: LPoint3, b: LPoint3, c: LPoint3): bool {.importcpp: "#CollisionPolygon::verify_points((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#))", header: "collisionPolygon.h".}

proc verifyPoints*(_: typedesc[CollisionPolygon], a: LPoint3, b: LPoint3, c: LPoint3, d: LPoint3): bool {.importcpp: "#CollisionPolygon::verify_points((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#))", header: "collisionPolygon.h".}

proc getClassType*(_: typedesc[CollisionPolygon]): TypeHandle {.importcpp: "CollisionPolygon::get_class_type()", header: "collisionPolygon.h".}

proc newCollisionHandlerEvent*(): CollisionHandlerEvent {.importcpp: "new CollisionHandlerEvent()".}

proc newCollisionHandlerEvent*(param0: CollisionHandlerEvent): CollisionHandlerEvent {.importcpp: "new CollisionHandlerEvent(#)".}

proc getClassType*(_: typedesc[CollisionHandlerEvent]): TypeHandle {.importcpp: "CollisionHandlerEvent::get_class_type()", header: "collisionHandlerEvent.h".}

proc getClassType*(_: typedesc[CollisionHandlerPhysical]): TypeHandle {.importcpp: "CollisionHandlerPhysical::get_class_type()", header: "collisionHandlerPhysical.h".}

proc newCollisionHandlerFloor*(): CollisionHandlerFloor {.importcpp: "new CollisionHandlerFloor()".}

proc getClassType*(_: typedesc[CollisionHandlerFloor]): TypeHandle {.importcpp: "CollisionHandlerFloor::get_class_type()", header: "collisionHandlerFloor.h".}

proc newCollisionHandlerPusher*(): CollisionHandlerPusher {.importcpp: "new CollisionHandlerPusher()".}

proc getClassType*(_: typedesc[CollisionHandlerPusher]): TypeHandle {.importcpp: "CollisionHandlerPusher::get_class_type()", header: "collisionHandlerPusher.h".}

proc newCollisionHandlerFluidPusher*(): CollisionHandlerFluidPusher {.importcpp: "new CollisionHandlerFluidPusher()".}

proc getClassType*(_: typedesc[CollisionHandlerFluidPusher]): TypeHandle {.importcpp: "CollisionHandlerFluidPusher::get_class_type()", header: "collisionHandlerFluidPusher.h".}

proc newCollisionHandlerGravity*(): CollisionHandlerGravity {.importcpp: "new CollisionHandlerGravity()".}

proc getClassType*(_: typedesc[CollisionHandlerGravity]): TypeHandle {.importcpp: "CollisionHandlerGravity::get_class_type()", header: "collisionHandlerGravity.h".}

proc newCollisionHandlerHighestEvent*(): CollisionHandlerHighestEvent {.importcpp: "new CollisionHandlerHighestEvent()".}

proc newCollisionHandlerHighestEvent*(param0: CollisionHandlerHighestEvent): CollisionHandlerHighestEvent {.importcpp: "new CollisionHandlerHighestEvent(#)".}

proc getClassType*(_: typedesc[CollisionHandlerHighestEvent]): TypeHandle {.importcpp: "CollisionHandlerHighestEvent::get_class_type()", header: "collisionHandlerHighestEvent.h".}

proc newCollisionHandlerQueue*(): CollisionHandlerQueue {.importcpp: "new CollisionHandlerQueue()".}

proc newCollisionHandlerQueue*(param0: CollisionHandlerQueue): CollisionHandlerQueue {.importcpp: "new CollisionHandlerQueue(#)".}

proc getClassType*(_: typedesc[CollisionHandlerQueue]): TypeHandle {.importcpp: "CollisionHandlerQueue::get_class_type()", header: "collisionHandlerQueue.h".}

proc newCollisionSphere*(center: LPoint3, radius: float): CollisionSphere {.importcpp: "new CollisionSphere((LPoint3 const &)(#), #)".}

proc newCollisionSphere*(cx: float, cy: float, cz: float, radius: float): CollisionSphere {.importcpp: "new CollisionSphere(#, #, #, #)".}

proc getClassType*(_: typedesc[CollisionSphere]): TypeHandle {.importcpp: "CollisionSphere::get_class_type()", header: "collisionSphere.h".}

proc newCollisionInvSphere*(center: LPoint3, radius: float): CollisionInvSphere {.importcpp: "new CollisionInvSphere((LPoint3 const &)(#), #)".}

proc newCollisionInvSphere*(cx: float, cy: float, cz: float, radius: float): CollisionInvSphere {.importcpp: "new CollisionInvSphere(#, #, #, #)".}

proc getClassType*(_: typedesc[CollisionInvSphere]): TypeHandle {.importcpp: "CollisionInvSphere::get_class_type()", header: "collisionInvSphere.h".}

proc newCollisionRay*(): CollisionRay {.importcpp: "new CollisionRay()".}

proc newCollisionRay*(origin: LPoint3, direction: LVector3): CollisionRay {.importcpp: "new CollisionRay((LPoint3 const &)(#), (LVector3 const &)(#))".}

proc newCollisionRay*(ox: float, oy: float, oz: float, dx: float, dy: float, dz: float): CollisionRay {.importcpp: "new CollisionRay(#, #, #, #, #, #)".}

proc getClassType*(_: typedesc[CollisionRay]): TypeHandle {.importcpp: "CollisionRay::get_class_type()", header: "collisionRay.h".}

proc newCollisionLine*(): CollisionLine {.importcpp: "new CollisionLine()".}

proc newCollisionLine*(origin: LPoint3, direction: LVector3): CollisionLine {.importcpp: "new CollisionLine((LPoint3 const &)(#), (LVector3 const &)(#))".}

proc newCollisionLine*(ox: float, oy: float, oz: float, dx: float, dy: float, dz: float): CollisionLine {.importcpp: "new CollisionLine(#, #, #, #, #, #)".}

proc getClassType*(_: typedesc[CollisionLine]): TypeHandle {.importcpp: "CollisionLine::get_class_type()", header: "collisionLine.h".}

proc newCollisionParabola*(): CollisionParabola {.importcpp: "new CollisionParabola()".}

proc newCollisionParabola*(parabola: LParabola, t1: float, t2: float): CollisionParabola {.importcpp: "new CollisionParabola(#, #, #)".}

proc getClassType*(_: typedesc[CollisionParabola]): TypeHandle {.importcpp: "CollisionParabola::get_class_type()", header: "collisionParabola.h".}

proc newCollisionSegment*(): CollisionSegment {.importcpp: "new CollisionSegment()".}

proc newCollisionSegment*(a: LPoint3, db: LPoint3): CollisionSegment {.importcpp: "new CollisionSegment((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc newCollisionSegment*(ax: float, ay: float, az: float, bx: float, by: float, bz: float): CollisionSegment {.importcpp: "new CollisionSegment(#, #, #, #, #, #)".}

proc getClassType*(_: typedesc[CollisionSegment]): TypeHandle {.importcpp: "CollisionSegment::get_class_type()", header: "collisionSegment.h".}

proc newCollisionVisualizer*(copy: CollisionVisualizer): CollisionVisualizer {.importcpp: "new CollisionVisualizer(#)".}

proc newCollisionVisualizer*(name: string): CollisionVisualizer {.importcpp: "new CollisionVisualizer(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[CollisionVisualizer]): TypeHandle {.importcpp: "CollisionVisualizer::get_class_type()", header: "collisionVisualizer.h".}

proc getClassType*(_: typedesc[InputDevice]): TypeHandle {.importcpp: "InputDevice::get_class_type()", header: "inputDevice.h".}

proc getClassType*(_: typedesc[ClientBase]): TypeHandle {.importcpp: "ClientBase::get_class_type()", header: "clientBase.h".}

proc newAnalogNode*(param0: AnalogNode): AnalogNode {.importcpp: "new AnalogNode(#)".}

proc newAnalogNode*(client: ClientBase, deviceName: string): AnalogNode {.importcpp: "new AnalogNode(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newAnalogNode*(device: InputDevice): AnalogNode {.importcpp: "new AnalogNode(#)".}

proc getClassType*(_: typedesc[AnalogNode]): TypeHandle {.importcpp: "AnalogNode::get_class_type()", header: "analogNode.h".}

proc newButtonNode*(param0: ButtonNode): ButtonNode {.importcpp: "new ButtonNode(#)".}

proc newButtonNode*(client: ClientBase, deviceName: string): ButtonNode {.importcpp: "new ButtonNode(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newButtonNode*(device: InputDevice): ButtonNode {.importcpp: "new ButtonNode(#)".}

proc getClassType*(_: typedesc[ButtonNode]): TypeHandle {.importcpp: "ButtonNode::get_class_type()", header: "buttonNode.h".}

proc newDialNode*(client: ClientBase, deviceName: string): DialNode {.importcpp: "new DialNode(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newDialNode*(param0: DialNode): DialNode {.importcpp: "new DialNode(#)".}

proc getClassType*(_: typedesc[DialNode]): TypeHandle {.importcpp: "DialNode::get_class_type()", header: "dialNode.h".}

proc initInputDeviceSet*(): InputDeviceSet {.importcpp: "InputDeviceSet()".}

proc initInputDeviceSet*(copy: InputDeviceSet): InputDeviceSet {.importcpp: "InputDeviceSet(#)".}

proc getGlobalPtr*(_: typedesc[InputDeviceManager]): InputDeviceManager {.importcpp: "InputDeviceManager::get_global_ptr()", header: "inputDeviceManager.h".}

proc newInputDeviceNode*(device: InputDevice, name: string): InputDeviceNode {.importcpp: "new InputDeviceNode(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newInputDeviceNode*(param0: InputDeviceNode): InputDeviceNode {.importcpp: "new InputDeviceNode(#)".}

proc getClassType*(_: typedesc[InputDeviceNode]): TypeHandle {.importcpp: "InputDeviceNode::get_class_type()", header: "inputDeviceNode.h".}

proc getClassType*(_: typedesc[LinuxJoystickDevice]): TypeHandle {.importcpp: "LinuxJoystickDevice::get_class_type()", header: "linuxJoystickDevice.h".}

proc newTrackerNode*(client: ClientBase, deviceName: string): TrackerNode {.importcpp: "new TrackerNode(#, nimStringToStdString(#))", header: stringConversionCode.}

proc newTrackerNode*(device: InputDevice): TrackerNode {.importcpp: "new TrackerNode(#)".}

proc newTrackerNode*(param0: TrackerNode): TrackerNode {.importcpp: "new TrackerNode(#)".}

proc getClassType*(_: typedesc[TrackerNode]): TypeHandle {.importcpp: "TrackerNode::get_class_type()", header: "trackerNode.h".}

proc newVirtualMouse*(param0: VirtualMouse): VirtualMouse {.importcpp: "new VirtualMouse(#)".}

proc newVirtualMouse*(name: string): VirtualMouse {.importcpp: "new VirtualMouse(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[VirtualMouse]): TypeHandle {.importcpp: "VirtualMouse::get_class_type()", header: "virtualMouse.h".}

proc initDataGraphTraverser*(param0: DataGraphTraverser): DataGraphTraverser {.importcpp: "DataGraphTraverser(#)".}

proc initDataGraphTraverser*(currentThread: Thread): DataGraphTraverser {.importcpp: "DataGraphTraverser(#)".}

proc initDataGraphTraverser*(): DataGraphTraverser {.importcpp: "DataGraphTraverser()".}

proc newDataNode*(name: string): DataNode {.importcpp: "new DataNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[DataNode]): TypeHandle {.importcpp: "DataNode::get_class_type()", header: "dataNode.h".}

proc getClassType*(_: typedesc[GraphicsDevice]): TypeHandle {.importcpp: "GraphicsDevice::get_class_type()", header: "graphicsDevice.h".}

proc initDisplayInformation*(): DisplayInformation {.importcpp: "DisplayInformation()".}

proc initDisplayInformation*(param0: DisplayInformation): DisplayInformation {.importcpp: "DisplayInformation(#)".}

proc getCpuTime*(_: typedesc[DisplayInformation]): clonglong {.importcpp: "DisplayInformation::get_cpu_time()", header: "displayInformation.h".}

proc getClassType*(_: typedesc[GraphicsPipe]): TypeHandle {.importcpp: "GraphicsPipe::get_class_type()", header: "graphicsPipe.h".}

proc getRenderbufferType*(_: typedesc[DrawableRegion], plane: int): int {.importcpp: "#DrawableRegion::get_renderbuffer_type(#)", header: "drawableRegion.h".}

proc newWindowHandle*(copy: WindowHandle): WindowHandle {.importcpp: "new WindowHandle(#)".}

proc getClassType*(_: typedesc[WindowHandle]): TypeHandle {.importcpp: "WindowHandle::get_class_type()", header: "windowHandle.h".}

proc getConfigProperties*(_: typedesc[WindowProperties]): WindowProperties {.importcpp: "WindowProperties::get_config_properties()", header: "windowProperties.h".}

proc getDefault*(_: typedesc[WindowProperties]): WindowProperties {.importcpp: "WindowProperties::get_default()", header: "windowProperties.h".}

proc setDefault*(_: typedesc[WindowProperties], defaultProperties: WindowProperties) {.importcpp: "#WindowProperties::set_default(#)", header: "windowProperties.h".}

proc clearDefault*(_: typedesc[WindowProperties]) {.importcpp: "WindowProperties::clear_default()", header: "windowProperties.h".}

proc size*(_: typedesc[WindowProperties], size: LVecBase2i): WindowProperties {.importcpp: "#WindowProperties::size((LVecBase2i const &)(#))", header: "windowProperties.h".}

proc size*(_: typedesc[WindowProperties], xSize: int, ySize: int): WindowProperties {.importcpp: "#WindowProperties::size(#, #)", header: "windowProperties.h".}

proc getAlphaScaleTextureStage*(_: typedesc[GraphicsStateGuardian]): TextureStage {.importcpp: "GraphicsStateGuardian::get_alpha_scale_texture_stage()", header: "graphicsStateGuardian.h".}

proc getClassType*(_: typedesc[GraphicsStateGuardian]): TypeHandle {.importcpp: "GraphicsStateGuardian::get_class_type()", header: "graphicsStateGuardian.h".}

proc newGraphicsEngine*(): GraphicsEngine {.importcpp: "new GraphicsEngine()".}

proc initGraphicsThreadingModel*(copy: GraphicsThreadingModel): GraphicsThreadingModel {.importcpp: "GraphicsThreadingModel(#)".}

proc initGraphicsThreadingModel*(model: string): GraphicsThreadingModel {.importcpp: "GraphicsThreadingModel(nimStringToStdString(#))", header: stringConversionCode.}

proc initGraphicsThreadingModel*(): GraphicsThreadingModel {.importcpp: "GraphicsThreadingModel()".}

proc getGlobalPtr*(_: typedesc[GraphicsEngine]): GraphicsEngine {.importcpp: "GraphicsEngine::get_global_ptr()", header: "graphicsEngine.h".}

proc makeScreenshotFilename*(_: typedesc[GraphicsOutput], prefix: string): Filename {.importcpp: "#GraphicsOutput::make_screenshot_filename(nimStringToStdString(#))", header: "graphicsOutput.h".}

proc makeScreenshotFilename*(_: typedesc[GraphicsOutput]): Filename {.importcpp: "GraphicsOutput::make_screenshot_filename()", header: "graphicsOutput.h".}

proc getClassType*(_: typedesc[GraphicsOutput]): TypeHandle {.importcpp: "GraphicsOutput::get_class_type()", header: "graphicsOutput.h".}

proc makeScreenshotFilename*(_: typedesc[DisplayRegion], prefix: string): Filename {.importcpp: "#DisplayRegion::make_screenshot_filename(nimStringToStdString(#))", header: "displayRegion.h".}

proc makeScreenshotFilename*(_: typedesc[DisplayRegion]): Filename {.importcpp: "DisplayRegion::make_screenshot_filename()", header: "displayRegion.h".}

proc getClassType*(_: typedesc[DisplayRegion]): TypeHandle {.importcpp: "DisplayRegion::get_class_type()", header: "displayRegion.h".}

proc getClassType*(_: typedesc[StereoDisplayRegion]): TypeHandle {.importcpp: "StereoDisplayRegion::get_class_type()", header: "stereoDisplayRegion.h".}

proc initFrameBufferProperties*(): FrameBufferProperties {.importcpp: "FrameBufferProperties()".}

proc initFrameBufferProperties*(param0: FrameBufferProperties): FrameBufferProperties {.importcpp: "FrameBufferProperties(#)".}

proc getDefault*(_: typedesc[FrameBufferProperties]): FrameBufferProperties {.importcpp: "FrameBufferProperties::get_default()", header: "frameBufferProperties.h".}

proc getClassType*(_: typedesc[GraphicsWindowInputDevice]): TypeHandle {.importcpp: "GraphicsWindowInputDevice::get_class_type()", header: "graphicsWindowInputDevice.h".}

proc initTouchInfo*(param0: TouchInfo): TouchInfo {.importcpp: "TouchInfo(#)".}

proc getClassType*(_: typedesc[GraphicsWindowProcCallbackData]): TypeHandle {.importcpp: "GraphicsWindowProcCallbackData::get_class_type()", header: "graphicsWindowProcCallbackData.h".}

proc getClassType*(_: typedesc[GraphicsWindow]): TypeHandle {.importcpp: "GraphicsWindow::get_class_type()", header: "graphicsWindow.h".}

proc getClassType*(_: typedesc[CallbackGraphicsWindow]): TypeHandle {.importcpp: "CallbackGraphicsWindow::get_class_type()", header: "callbackGraphicsWindow.h".}

proc initDisplayMode*(): DisplayMode {.importcpp: "DisplayMode()".}

proc initDisplayMode*(param0: DisplayMode): DisplayMode {.importcpp: "DisplayMode(#)".}

proc getClassType*(_: typedesc[DisplayRegionCullCallbackData]): TypeHandle {.importcpp: "DisplayRegionCullCallbackData::get_class_type()", header: "displayRegionCullCallbackData.h".}

proc getClassType*(_: typedesc[DisplayRegionDrawCallbackData]): TypeHandle {.importcpp: "DisplayRegionDrawCallbackData::get_class_type()", header: "displayRegionDrawCallbackData.h".}

proc initDisplaySearchParameters*(): DisplaySearchParameters {.importcpp: "DisplaySearchParameters()".}

proc initDisplaySearchParameters*(param0: DisplaySearchParameters): DisplaySearchParameters {.importcpp: "DisplaySearchParameters(#)".}

proc getClassType*(_: typedesc[GraphicsBuffer]): TypeHandle {.importcpp: "GraphicsBuffer::get_class_type()", header: "graphicsBuffer.h".}

proc getGlobalPtr*(_: typedesc[GraphicsPipeSelection]): GraphicsPipeSelection {.importcpp: "GraphicsPipeSelection::get_global_ptr()", header: "graphicsPipeSelection.h".}

proc newMouseAndKeyboard*(window: GraphicsWindow, device: int, name: string): MouseAndKeyboard {.importcpp: "new MouseAndKeyboard(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc newMouseAndKeyboard*(param0: MouseAndKeyboard): MouseAndKeyboard {.importcpp: "new MouseAndKeyboard(#)".}

proc getClassType*(_: typedesc[MouseAndKeyboard]): TypeHandle {.importcpp: "MouseAndKeyboard::get_class_type()", header: "mouseAndKeyboard.h".}

proc makeInt*(_: typedesc[NativeWindowHandle], window: int): WindowHandle {.importcpp: "#NativeWindowHandle::make_int(#)", header: "nativeWindowHandle.h".}

proc makeSubprocess*(_: typedesc[NativeWindowHandle], filename: Filename): WindowHandle {.importcpp: "#NativeWindowHandle::make_subprocess(#)", header: "nativeWindowHandle.h".}

proc getClassType*(_: typedesc[NativeWindowHandle]): TypeHandle {.importcpp: "NativeWindowHandle::get_class_type()", header: "nativeWindowHandle.h".}

proc getClassType*(_: typedesc[ParasiteBuffer]): TypeHandle {.importcpp: "ParasiteBuffer::get_class_type()", header: "parasiteBuffer.h".}

proc bindThread*(_: typedesc[Thread], name: string, syncName: string): Thread {.importcpp: "#Thread::bind_thread(nimStringToStdString(#), nimStringToStdString(#))", header: "thread.h".}

proc getMainThread*(_: typedesc[Thread]): Thread {.importcpp: "Thread::get_main_thread()", header: "thread.h".}

proc getExternalThread*(_: typedesc[Thread]): Thread {.importcpp: "Thread::get_external_thread()", header: "thread.h".}

proc getCurrentThread*(_: typedesc[Thread]): Thread {.importcpp: "Thread::get_current_thread()", header: "thread.h".}

proc getCurrentPipelineStage*(_: typedesc[Thread]): int {.importcpp: "Thread::get_current_pipeline_stage()", header: "thread.h".}

proc isThreadingSupported*(_: typedesc[Thread]): bool {.importcpp: "Thread::is_threading_supported()", header: "thread.h".}

proc isTrueThreads*(_: typedesc[Thread]): bool {.importcpp: "Thread::is_true_threads()", header: "thread.h".}

proc isSimpleThreads*(_: typedesc[Thread]): bool {.importcpp: "Thread::is_simple_threads()", header: "thread.h".}

proc sleep*(_: typedesc[Thread], seconds: float64) {.importcpp: "#Thread::sleep(#)", header: "thread.h".}

proc forceYield*(_: typedesc[Thread]) {.importcpp: "Thread::force_yield()", header: "thread.h".}

proc considerYield*(_: typedesc[Thread]) {.importcpp: "Thread::consider_yield()", header: "thread.h".}

proc writeStatus*(_: typedesc[Thread], `out`: iostream | ostream) {.importcpp: "#Thread::write_status(#)", header: "thread.h".}

proc prepareForExit*(_: typedesc[Thread]) {.importcpp: "Thread::prepare_for_exit()", header: "thread.h".}

proc getClassType*(_: typedesc[Thread]): TypeHandle {.importcpp: "Thread::get_class_type()", header: "thread.h".}

proc initMutex*(): Mutex {.importcpp: "Mutex()".}

proc initMutex*(name: string): Mutex {.importcpp: "Mutex(nimStringToStdString(#))", header: stringConversionCode.}

proc initConditionVar*(mutex: Mutex): ConditionVar {.importcpp: "ConditionVar(#)".}

proc initConditionVarFull*(mutex: Mutex): ConditionVarFull {.importcpp: "ConditionVarFull(#)".}

proc initReMutex*(): ReMutex {.importcpp: "ReMutex()".}

proc initReMutex*(name: string): ReMutex {.importcpp: "ReMutex(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[ExternalThread]): TypeHandle {.importcpp: "ExternalThread::get_class_type()", header: "externalThread.h".}

proc initLightMutex*(): LightMutex {.importcpp: "LightMutex()".}

proc initLightMutex*(name: string): LightMutex {.importcpp: "LightMutex(nimStringToStdString(#))", header: stringConversionCode.}

proc initLightReMutex*(): LightReMutex {.importcpp: "LightReMutex()".}

proc initLightReMutex*(name: string): LightReMutex {.importcpp: "LightReMutex(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[MainThread]): TypeHandle {.importcpp: "MainThread::get_class_type()", header: "mainThread.h".}

proc initSemaphore*(initialCount: int): Semaphore {.importcpp: "Semaphore(#)".}

proc initSemaphore*(): Semaphore {.importcpp: "Semaphore()".}

proc initEventParameter*(): EventParameter {.importcpp: "EventParameter()".}

proc initEventParameter*(copy: EventParameter): EventParameter {.importcpp: "EventParameter(#)".}

proc initEventParameter*(`ptr`: TypedReferenceCount): EventParameter {.importcpp: "EventParameter(#)".}

proc initEventParameter*(`ptr`: TypedWritableReferenceCount): EventParameter {.importcpp: "EventParameter(#)".}

proc initEventParameter*(value: float64): EventParameter {.importcpp: "EventParameter(#)".}

proc initEventParameter*(value: int): EventParameter {.importcpp: "EventParameter(#)".}

proc initEventParameter*(param0: type(nil)): EventParameter {.importcpp: "EventParameter(#)".}

proc initEventParameter*(value: string): EventParameter {.importcpp: "EventParameter(nimStringToStdString(#))", header: stringConversionCode.}

proc newAsyncFuture*(): AsyncFuture {.importcpp: "new AsyncFuture()".}

proc newAsyncFuture*(param0: AsyncFuture): AsyncFuture {.importcpp: "new AsyncFuture(#)".}

proc getClassType*(_: typedesc[AsyncFuture]): TypeHandle {.importcpp: "AsyncFuture::get_class_type()", header: "asyncFuture.h".}

proc newAsyncTaskManager*(name: string): AsyncTaskManager {.importcpp: "new AsyncTaskManager(nimStringToStdString(#))", header: stringConversionCode.}

proc initAsyncTaskCollection*(): AsyncTaskCollection {.importcpp: "AsyncTaskCollection()".}

proc initAsyncTaskCollection*(copy: AsyncTaskSequence | AsyncTaskCollection): AsyncTaskCollection {.importcpp: "AsyncTaskCollection(#)".}

proc getGlobalPtr*(_: typedesc[AsyncTaskManager]): AsyncTaskManager {.importcpp: "AsyncTaskManager::get_global_ptr()", header: "asyncTaskManager.h".}

proc getClassType*(_: typedesc[AsyncTaskManager]): TypeHandle {.importcpp: "AsyncTaskManager::get_class_type()", header: "asyncTaskManager.h".}

proc getClassType*(_: typedesc[AsyncTask]): TypeHandle {.importcpp: "AsyncTask::get_class_type()", header: "asyncTask.h".}

proc newAsyncTask*(param0: AsyncTask): AsyncTask {.importcpp: "new AsyncTask(#)".}

proc getClassType*(_: typedesc[AsyncTaskChain]): TypeHandle {.importcpp: "AsyncTaskChain::get_class_type()", header: "asyncTaskChain.h".}

proc newAsyncTaskPause*(param0: AsyncTaskPause): AsyncTaskPause {.importcpp: "new AsyncTaskPause(#)".}

proc newAsyncTaskPause*(delay: float64): AsyncTaskPause {.importcpp: "new AsyncTaskPause(#)".}

proc getClassType*(_: typedesc[AsyncTaskPause]): TypeHandle {.importcpp: "AsyncTaskPause::get_class_type()", header: "asyncTaskPause.h".}

proc newAsyncTaskSequence*(param0: AsyncTaskSequence): AsyncTaskSequence {.importcpp: "new AsyncTaskSequence(#)".}

proc newAsyncTaskSequence*(name: string): AsyncTaskSequence {.importcpp: "new AsyncTaskSequence(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[AsyncTaskSequence]): TypeHandle {.importcpp: "AsyncTaskSequence::get_class_type()", header: "asyncTaskSequence.h".}

proc newButtonEventList*(): ButtonEventList {.importcpp: "new ButtonEventList()".}

proc newButtonEventList*(copy: ButtonEventList): ButtonEventList {.importcpp: "new ButtonEventList(#)".}

proc getClassType*(_: typedesc[ButtonEventList]): TypeHandle {.importcpp: "ButtonEventList::get_class_type()", header: "buttonEventList.h".}

proc newEvent*(copy: Event): Event {.importcpp: "new Event(#)".}

proc newEvent*(eventName: string): Event {.importcpp: "new Event(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[Event]): TypeHandle {.importcpp: "Event::get_class_type()", header: "event.h".}

proc initEventHandler*(evQueue: EventQueue): EventHandler {.importcpp: "EventHandler(#)".}

proc getGlobalEventHandler*(_: typedesc[EventHandler], queue: EventQueue): EventHandler {.importcpp: "#EventHandler::get_global_event_handler(#)", header: "eventHandler.h".}

proc getGlobalEventHandler*(_: typedesc[EventHandler]): EventHandler {.importcpp: "EventHandler::get_global_event_handler()", header: "eventHandler.h".}

proc getClassType*(_: typedesc[EventHandler]): TypeHandle {.importcpp: "EventHandler::get_class_type()", header: "eventHandler.h".}

proc newEventQueue*(): EventQueue {.importcpp: "new EventQueue()".}

proc getGlobalEventQueue*(_: typedesc[EventQueue]): EventQueue {.importcpp: "EventQueue::get_global_event_queue()", header: "eventQueue.h".}

proc newPointerEventList*(): PointerEventList {.importcpp: "new PointerEventList()".}

proc getClassType*(_: typedesc[PointerEventList]): TypeHandle {.importcpp: "PointerEventList::get_class_type()", header: "pointerEventList.h".}

proc initAdaptiveLru*(name: string, maxSize: int): AdaptiveLru {.importcpp: "AdaptiveLru(nimStringToStdString(#), #)", header: stringConversionCode.}

proc newAdaptiveLruPage*(copy: IndexBufferContext | VertexBufferContext | AdaptiveLruPage | TextureContext): AdaptiveLruPage {.importcpp: "new AdaptiveLruPage(#)".}

proc newAdaptiveLruPage*(lruSize: int): AdaptiveLruPage {.importcpp: "new AdaptiveLruPage(#)".}

proc initGeomEnums*(): GeomEnums {.importcpp: "GeomEnums()".}

proc initGeomEnums*(param0: GeomVertexFormat | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayFormat | GeomVertexArrayDataHandle | GeomEnums | Geom | ShaderBuffer | GeomVertexData): GeomEnums {.importcpp: "GeomEnums(#)".}

proc initGeomVertexAnimationSpec*(): GeomVertexAnimationSpec {.importcpp: "GeomVertexAnimationSpec()".}

proc initGeomVertexAnimationSpec*(other: GeomVertexAnimationSpec): GeomVertexAnimationSpec {.importcpp: "GeomVertexAnimationSpec(#)".}

proc make*(_: typedesc[InternalName], name: string, index: int): InternalName {.importcpp: "#InternalName::make(nimStringToStdString(#), #)", header: "internalName.h".}

proc getRoot*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_root()", header: "internalName.h".}

proc getError*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_error()", header: "internalName.h".}

proc getVertex*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_vertex()", header: "internalName.h".}

proc getNormal*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_normal()", header: "internalName.h".}

proc getTangent*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_tangent()", header: "internalName.h".}

proc getTangentName*(_: typedesc[InternalName], name: string): InternalName {.importcpp: "#InternalName::get_tangent_name(nimStringToStdString(#))", header: "internalName.h".}

proc getBinormal*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_binormal()", header: "internalName.h".}

proc getBinormalName*(_: typedesc[InternalName], name: string): InternalName {.importcpp: "#InternalName::get_binormal_name(nimStringToStdString(#))", header: "internalName.h".}

proc getTexcoord*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_texcoord()", header: "internalName.h".}

proc getTexcoordName*(_: typedesc[InternalName], name: string): InternalName {.importcpp: "#InternalName::get_texcoord_name(nimStringToStdString(#))", header: "internalName.h".}

proc getColor*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_color()", header: "internalName.h".}

proc getRotate*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_rotate()", header: "internalName.h".}

proc getSize*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_size()", header: "internalName.h".}

proc getAspectRatio*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_aspect_ratio()", header: "internalName.h".}

proc getTransformBlend*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_transform_blend()", header: "internalName.h".}

proc getTransformWeight*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_transform_weight()", header: "internalName.h".}

proc getTransformIndex*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_transform_index()", header: "internalName.h".}

proc getMorph*(_: typedesc[InternalName], column: InternalName, slider: string): InternalName {.importcpp: "#InternalName::get_morph(#, nimStringToStdString(#))", header: "internalName.h".}

proc getIndex*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_index()", header: "internalName.h".}

proc getWorld*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_world()", header: "internalName.h".}

proc getCamera*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_camera()", header: "internalName.h".}

proc getModel*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_model()", header: "internalName.h".}

proc getView*(_: typedesc[InternalName]): InternalName {.importcpp: "InternalName::get_view()", header: "internalName.h".}

proc getClassType*(_: typedesc[InternalName]): TypeHandle {.importcpp: "InternalName::get_class_type()", header: "internalName.h".}

proc initGeomVertexColumn*(name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents, start: int, columnAlignment: int, numElements: int, elementStride: int): GeomVertexColumn {.importcpp: "GeomVertexColumn(#, #, #, #, #, #, #, #)".}

proc initGeomVertexColumn*(name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents, start: int, columnAlignment: int, numElements: int): GeomVertexColumn {.importcpp: "GeomVertexColumn(#, #, #, #, #, #, #)".}

proc initGeomVertexColumn*(name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents, start: int, columnAlignment: int): GeomVertexColumn {.importcpp: "GeomVertexColumn(#, #, #, #, #, #)".}

proc initGeomVertexColumn*(name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents, start: int): GeomVertexColumn {.importcpp: "GeomVertexColumn(#, #, #, #, #)".}

proc initGeomVertexColumn*(copy: GeomVertexColumn): GeomVertexColumn {.importcpp: "GeomVertexColumn(#)".}

proc newGeomVertexArrayFormat*(): GeomVertexArrayFormat {.importcpp: "new GeomVertexArrayFormat()".}

proc newGeomVertexArrayFormat*(name0: InternalName, numComponents0: int, numericType0: GeomEnums_NumericType, contents0: GeomEnums_Contents): GeomVertexArrayFormat {.importcpp: "new GeomVertexArrayFormat(#, #, #, #)".}

proc newGeomVertexArrayFormat*(name0: InternalName, numComponents0: int, numericType0: GeomEnums_NumericType, contents0: GeomEnums_Contents, name1: InternalName, numComponents1: int, numericType1: GeomEnums_NumericType, contents1: GeomEnums_Contents): GeomVertexArrayFormat {.importcpp: "new GeomVertexArrayFormat(#, #, #, #, #, #, #, #)".}

proc newGeomVertexArrayFormat*(name0: InternalName, numComponents0: int, numericType0: GeomEnums_NumericType, contents0: GeomEnums_Contents, name1: InternalName, numComponents1: int, numericType1: GeomEnums_NumericType, contents1: GeomEnums_Contents, name2: InternalName, numComponents2: int, numericType2: GeomEnums_NumericType, contents2: GeomEnums_Contents): GeomVertexArrayFormat {.importcpp: "new GeomVertexArrayFormat(#, #, #, #, #, #, #, #, #, #, #, #)".}

proc newGeomVertexArrayFormat*(name0: InternalName, numComponents0: int, numericType0: GeomEnums_NumericType, contents0: GeomEnums_Contents, name1: InternalName, numComponents1: int, numericType1: GeomEnums_NumericType, contents1: GeomEnums_Contents, name2: InternalName, numComponents2: int, numericType2: GeomEnums_NumericType, contents2: GeomEnums_Contents, name3: InternalName, numComponents3: int, numericType3: GeomEnums_NumericType, contents3: GeomEnums_Contents): GeomVertexArrayFormat {.importcpp: "new GeomVertexArrayFormat(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc newGeomVertexArrayFormat*(copy: GeomVertexArrayFormat): GeomVertexArrayFormat {.importcpp: "new GeomVertexArrayFormat(#)".}

proc registerFormat*(_: typedesc[GeomVertexArrayFormat], format: GeomVertexArrayFormat): GeomVertexArrayFormat {.importcpp: "deconstify(#GeomVertexArrayFormat::register_format(#))", header: "#include \"geomVertexArrayFormat.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[GeomVertexArrayFormat]): TypeHandle {.importcpp: "GeomVertexArrayFormat::get_class_type()", header: "geomVertexArrayFormat.h".}

proc newGeomVertexFormat*(): GeomVertexFormat {.importcpp: "new GeomVertexFormat()".}

proc newGeomVertexFormat*(arrayFormat: GeomVertexArrayFormat): GeomVertexFormat {.importcpp: "new GeomVertexFormat(#)".}

proc newGeomVertexFormat*(copy: GeomVertexFormat): GeomVertexFormat {.importcpp: "new GeomVertexFormat(#)".}

proc registerFormat*(_: typedesc[GeomVertexFormat], format: GeomVertexArrayFormat): GeomVertexFormat {.importcpp: "deconstify(#GeomVertexFormat::register_format(#))", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc registerFormat*(_: typedesc[GeomVertexFormat], format: GeomVertexFormat): GeomVertexFormat {.importcpp: "deconstify(#GeomVertexFormat::register_format(#))", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getEmpty*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_empty())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3n3*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3n3())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3t2*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3t2())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3n3t2*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3n3t2())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3cp*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3cp())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3cpt2*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3cpt2())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3n3cp*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3n3cp())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3n3cpt2*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3n3cpt2())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3c4*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3c4())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3c4t2*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3c4t2())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3n3c4*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3n3c4())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getV3n3c4t2*(_: typedesc[GeomVertexFormat]): GeomVertexFormat {.importcpp: "deconstify(GeomVertexFormat::get_v3n3c4t2())", header: "#include \"geomVertexFormat.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[GeomVertexFormat]): TypeHandle {.importcpp: "GeomVertexFormat::get_class_type()", header: "geomVertexFormat.h".}

proc initSimpleLru*(name: string, maxSize: int): SimpleLru {.importcpp: "SimpleLru(nimStringToStdString(#), #)", header: stringConversionCode.}

proc newSimpleLruPage*(copy: GeomVertexArrayData | SimpleLruPage | VertexDataPage): SimpleLruPage {.importcpp: "new SimpleLruPage(#)".}

proc newSimpleLruPage*(lruSize: int): SimpleLruPage {.importcpp: "new SimpleLruPage(#)".}

proc newSimpleAllocator*(maxSize: int, lock: Mutex): SimpleAllocator {.importcpp: "new SimpleAllocator(#, #)".}

proc getGlobalLru*(_: typedesc[VertexDataPage], rclass: VertexDataPage_RamClass): SimpleLru {.importcpp: "#VertexDataPage::get_global_lru(#)", header: "vertexDataPage.h".}

proc getPendingLru*(_: typedesc[VertexDataPage]): SimpleLru {.importcpp: "VertexDataPage::get_pending_lru()", header: "vertexDataPage.h".}

proc getSaveFile*(_: typedesc[VertexDataPage]): VertexDataSaveFile {.importcpp: "VertexDataPage::get_save_file()", header: "vertexDataPage.h".}

proc getNumThreads*(_: typedesc[VertexDataPage]): int {.importcpp: "VertexDataPage::get_num_threads()", header: "vertexDataPage.h".}

proc getNumPendingReads*(_: typedesc[VertexDataPage]): int {.importcpp: "VertexDataPage::get_num_pending_reads()", header: "vertexDataPage.h".}

proc getNumPendingWrites*(_: typedesc[VertexDataPage]): int {.importcpp: "VertexDataPage::get_num_pending_writes()", header: "vertexDataPage.h".}

proc stopThreads*(_: typedesc[VertexDataPage]) {.importcpp: "VertexDataPage::stop_threads()", header: "vertexDataPage.h".}

proc flushThreads*(_: typedesc[VertexDataPage]) {.importcpp: "VertexDataPage::flush_threads()", header: "vertexDataPage.h".}

proc getClassType*(_: typedesc[VertexDataPage]): TypeHandle {.importcpp: "VertexDataPage::get_class_type()", header: "vertexDataPage.h".}

proc initVertexDataBook*(blockSize: int): VertexDataBook {.importcpp: "VertexDataBook(#)".}

proc newGeomVertexArrayData*(copy: GeomVertexArrayData): GeomVertexArrayData {.importcpp: "new GeomVertexArrayData(#)".}

proc newGeomVertexArrayData*(arrayFormat: GeomVertexArrayFormat, usageHint: GeomEnums_UsageHint): GeomVertexArrayData {.importcpp: "new GeomVertexArrayData(#, #)".}

proc getIndependentLru*(_: typedesc[GeomVertexArrayData]): SimpleLru {.importcpp: "GeomVertexArrayData::get_independent_lru()", header: "geomVertexArrayData.h".}

proc getSmallLru*(_: typedesc[GeomVertexArrayData]): SimpleLru {.importcpp: "GeomVertexArrayData::get_small_lru()", header: "geomVertexArrayData.h".}

proc lruEpoch*(_: typedesc[GeomVertexArrayData]) {.importcpp: "GeomVertexArrayData::lru_epoch()", header: "geomVertexArrayData.h".}

proc getBook*(_: typedesc[GeomVertexArrayData]): VertexDataBook {.importcpp: "GeomVertexArrayData::get_book()", header: "geomVertexArrayData.h".}

proc getClassType*(_: typedesc[GeomVertexArrayData]): TypeHandle {.importcpp: "GeomVertexArrayData::get_class_type()", header: "geomVertexArrayData.h".}

proc getClassType*(_: typedesc[GeomVertexArrayDataHandle]): TypeHandle {.importcpp: "GeomVertexArrayDataHandle::get_class_type()", header: "geomVertexArrayData.h".}

proc getGlobalPtr*(_: typedesc[GeomCacheManager]): GeomCacheManager {.importcpp: "GeomCacheManager::get_global_ptr()", header: "geomCacheManager.h".}

proc getNextModified*(_: typedesc[VertexTransform], currentThread: Thread): UpdateSeq {.importcpp: "#VertexTransform::get_next_modified(#)", header: "vertexTransform.h".}

proc getGlobalModified*(_: typedesc[VertexTransform], currentThread: Thread): UpdateSeq {.importcpp: "#VertexTransform::get_global_modified(#)", header: "vertexTransform.h".}

proc getClassType*(_: typedesc[VertexTransform]): TypeHandle {.importcpp: "VertexTransform::get_class_type()", header: "vertexTransform.h".}

proc newTransformTable*(): TransformTable {.importcpp: "new TransformTable()".}

proc newTransformTable*(copy: TransformTable): TransformTable {.importcpp: "new TransformTable(#)".}

proc registerTable*(_: typedesc[TransformTable], table: TransformTable): TransformTable {.importcpp: "deconstify(#TransformTable::register_table(#))", header: "#include \"transformTable.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[TransformTable]): TypeHandle {.importcpp: "TransformTable::get_class_type()", header: "transformTable.h".}

proc initTransformBlend*(): TransformBlend {.importcpp: "TransformBlend()".}

proc initTransformBlend*(copy: TransformBlend): TransformBlend {.importcpp: "TransformBlend(#)".}

proc initTransformBlend*(transform0: VertexTransform, weight0: float): TransformBlend {.importcpp: "TransformBlend(#, #)".}

proc initTransformBlend*(transform0: VertexTransform, weight0: float, transform1: VertexTransform, weight1: float): TransformBlend {.importcpp: "TransformBlend(#, #, #, #)".}

proc initTransformBlend*(transform0: VertexTransform, weight0: float, transform1: VertexTransform, weight1: float, transform2: VertexTransform, weight2: float): TransformBlend {.importcpp: "TransformBlend(#, #, #, #, #, #)".}

proc initTransformBlend*(transform0: VertexTransform, weight0: float, transform1: VertexTransform, weight1: float, transform2: VertexTransform, weight2: float, transform3: VertexTransform, weight3: float): TransformBlend {.importcpp: "TransformBlend(#, #, #, #, #, #, #, #)".}

proc getClassType*(_: typedesc[TransformBlend]): TypeHandle {.importcpp: "TransformBlend::get_class_type()", header: "transformBlend.h".}

proc newTransformBlendTable*(): TransformBlendTable {.importcpp: "new TransformBlendTable()".}

proc newTransformBlendTable*(copy: TransformBlendTable): TransformBlendTable {.importcpp: "new TransformBlendTable(#)".}

proc getClassType*(_: typedesc[TransformBlendTable]): TypeHandle {.importcpp: "TransformBlendTable::get_class_type()", header: "transformBlendTable.h".}

proc getClassType*(_: typedesc[VertexSlider]): TypeHandle {.importcpp: "VertexSlider::get_class_type()", header: "vertexSlider.h".}

proc newSliderTable*(): SliderTable {.importcpp: "new SliderTable()".}

proc newSliderTable*(copy: SliderTable): SliderTable {.importcpp: "new SliderTable(#)".}

proc registerTable*(_: typedesc[SliderTable], table: SliderTable): SliderTable {.importcpp: "deconstify(#SliderTable::register_table(#))", header: "#include \"sliderTable.h\"\n" & deconstifyCode.}

proc getClassType*(_: typedesc[SliderTable]): TypeHandle {.importcpp: "SliderTable::get_class_type()", header: "sliderTable.h".}

proc newGeomVertexData*(copy: GeomVertexData): GeomVertexData {.importcpp: "new GeomVertexData(#)".}

proc newGeomVertexData*(copy: GeomVertexData, format: GeomVertexFormat): GeomVertexData {.importcpp: "new GeomVertexData(#, #)".}

proc newGeomVertexData*(name: string, format: GeomVertexFormat, usageHint: GeomEnums_UsageHint): GeomVertexData {.importcpp: "new GeomVertexData(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[GeomVertexData]): TypeHandle {.importcpp: "GeomVertexData::get_class_type()", header: "geomVertexData.h".}

proc newAnimateVerticesRequest*(param0: AnimateVerticesRequest): AnimateVerticesRequest {.importcpp: "new AnimateVerticesRequest(#)".}

proc newAnimateVerticesRequest*(geomVertexData: GeomVertexData): AnimateVerticesRequest {.importcpp: "new AnimateVerticesRequest(#)".}

proc getClassType*(_: typedesc[AnimateVerticesRequest]): TypeHandle {.importcpp: "AnimateVerticesRequest::get_class_type()", header: "animateVerticesRequest.h".}

proc getClassType*(_: typedesc[SavedContext]): TypeHandle {.importcpp: "SavedContext::get_class_type()", header: "savedContext.h".}

proc getClassType*(_: typedesc[BufferContext]): TypeHandle {.importcpp: "BufferContext::get_class_type()", header: "bufferContext.h".}

proc getClassType*(_: typedesc[GeomPrimitive]): TypeHandle {.importcpp: "GeomPrimitive::get_class_type()", header: "geomPrimitive.h".}

proc newTextureStage*(copy: TextureStage): TextureStage {.importcpp: "new TextureStage(#)".}

proc newTextureStage*(name: string): TextureStage {.importcpp: "new TextureStage(nimStringToStdString(#))", header: stringConversionCode.}

proc getDefault*(_: typedesc[TextureStage]): TextureStage {.importcpp: "TextureStage::get_default()", header: "textureStage.h".}

proc getClassType*(_: typedesc[TextureStage]): TypeHandle {.importcpp: "TextureStage::get_class_type()", header: "textureStage.h".}

proc newGeom*(data: GeomVertexData): Geom {.importcpp: "new Geom(#)".}

proc getClassType*(_: typedesc[Geom]): TypeHandle {.importcpp: "Geom::get_class_type()", header: "geom.h".}

proc getClassType*(_: typedesc[GeomContext]): TypeHandle {.importcpp: "GeomContext::get_class_type()", header: "geomContext.h".}

proc newGeomLines*(usageHint: GeomEnums_UsageHint): GeomLines {.importcpp: "new GeomLines(#)".}

proc newGeomLines*(copy: GeomLines): GeomLines {.importcpp: "new GeomLines(#)".}

proc getClassType*(_: typedesc[GeomLines]): TypeHandle {.importcpp: "GeomLines::get_class_type()", header: "geomLines.h".}

proc newGeomLinesAdjacency*(usageHint: GeomEnums_UsageHint): GeomLinesAdjacency {.importcpp: "new GeomLinesAdjacency(#)".}

proc newGeomLinesAdjacency*(copy: GeomLinesAdjacency): GeomLinesAdjacency {.importcpp: "new GeomLinesAdjacency(#)".}

proc getClassType*(_: typedesc[GeomLinesAdjacency]): TypeHandle {.importcpp: "GeomLinesAdjacency::get_class_type()", header: "geomLinesAdjacency.h".}

proc newGeomLinestrips*(usageHint: GeomEnums_UsageHint): GeomLinestrips {.importcpp: "new GeomLinestrips(#)".}

proc newGeomLinestrips*(copy: GeomLinestrips): GeomLinestrips {.importcpp: "new GeomLinestrips(#)".}

proc getClassType*(_: typedesc[GeomLinestrips]): TypeHandle {.importcpp: "GeomLinestrips::get_class_type()", header: "geomLinestrips.h".}

proc newGeomLinestripsAdjacency*(usageHint: GeomEnums_UsageHint): GeomLinestripsAdjacency {.importcpp: "new GeomLinestripsAdjacency(#)".}

proc newGeomLinestripsAdjacency*(copy: GeomLinestripsAdjacency): GeomLinestripsAdjacency {.importcpp: "new GeomLinestripsAdjacency(#)".}

proc getClassType*(_: typedesc[GeomLinestripsAdjacency]): TypeHandle {.importcpp: "GeomLinestripsAdjacency::get_class_type()", header: "geomLinestripsAdjacency.h".}

proc newGeomPatches*(copy: GeomPatches): GeomPatches {.importcpp: "new GeomPatches(#)".}

proc newGeomPatches*(numVerticesPerPatch: int, usageHint: GeomEnums_UsageHint): GeomPatches {.importcpp: "new GeomPatches(#, #)".}

proc getClassType*(_: typedesc[GeomPatches]): TypeHandle {.importcpp: "GeomPatches::get_class_type()", header: "geomPatches.h".}

proc newGeomPoints*(usageHint: GeomEnums_UsageHint): GeomPoints {.importcpp: "new GeomPoints(#)".}

proc newGeomPoints*(copy: GeomPoints): GeomPoints {.importcpp: "new GeomPoints(#)".}

proc getClassType*(_: typedesc[GeomPoints]): TypeHandle {.importcpp: "GeomPoints::get_class_type()", header: "geomPoints.h".}

proc newGeomTriangles*(usageHint: GeomEnums_UsageHint): GeomTriangles {.importcpp: "new GeomTriangles(#)".}

proc newGeomTriangles*(copy: GeomTriangles): GeomTriangles {.importcpp: "new GeomTriangles(#)".}

proc getClassType*(_: typedesc[GeomTriangles]): TypeHandle {.importcpp: "GeomTriangles::get_class_type()", header: "geomTriangles.h".}

proc newGeomTrianglesAdjacency*(usageHint: GeomEnums_UsageHint): GeomTrianglesAdjacency {.importcpp: "new GeomTrianglesAdjacency(#)".}

proc newGeomTrianglesAdjacency*(copy: GeomTrianglesAdjacency): GeomTrianglesAdjacency {.importcpp: "new GeomTrianglesAdjacency(#)".}

proc getClassType*(_: typedesc[GeomTrianglesAdjacency]): TypeHandle {.importcpp: "GeomTrianglesAdjacency::get_class_type()", header: "geomTrianglesAdjacency.h".}

proc newGeomTrifans*(usageHint: GeomEnums_UsageHint): GeomTrifans {.importcpp: "new GeomTrifans(#)".}

proc newGeomTrifans*(copy: GeomTrifans): GeomTrifans {.importcpp: "new GeomTrifans(#)".}

proc getClassType*(_: typedesc[GeomTrifans]): TypeHandle {.importcpp: "GeomTrifans::get_class_type()", header: "geomTrifans.h".}

proc newGeomTristrips*(usageHint: GeomEnums_UsageHint): GeomTristrips {.importcpp: "new GeomTristrips(#)".}

proc newGeomTristrips*(copy: GeomTristrips): GeomTristrips {.importcpp: "new GeomTristrips(#)".}

proc getClassType*(_: typedesc[GeomTristrips]): TypeHandle {.importcpp: "GeomTristrips::get_class_type()", header: "geomTristrips.h".}

proc newGeomTristripsAdjacency*(usageHint: GeomEnums_UsageHint): GeomTristripsAdjacency {.importcpp: "new GeomTristripsAdjacency(#)".}

proc newGeomTristripsAdjacency*(copy: GeomTristripsAdjacency): GeomTristripsAdjacency {.importcpp: "new GeomTristripsAdjacency(#)".}

proc getClassType*(_: typedesc[GeomTristripsAdjacency]): TypeHandle {.importcpp: "GeomTristripsAdjacency::get_class_type()", header: "geomTristripsAdjacency.h".}

proc initGeomVertexReader*(arrayData: GeomVertexArrayData, currentThread: Thread): GeomVertexReader {.importcpp: "GeomVertexReader(#, #)".}

proc initGeomVertexReader*(arrayData: GeomVertexArrayData): GeomVertexReader {.importcpp: "GeomVertexReader(#)".}

proc initGeomVertexReader*(arrayData: GeomVertexArrayData, column: int, currentThread: Thread): GeomVertexReader {.importcpp: "GeomVertexReader(#, #, #)".}

proc initGeomVertexReader*(arrayData: GeomVertexArrayData, column: int): GeomVertexReader {.importcpp: "GeomVertexReader(#, #)".}

proc initGeomVertexReader*(vertexData: GeomVertexData, name: InternalName, currentThread: Thread): GeomVertexReader {.importcpp: "GeomVertexReader(#, #, #)".}

proc initGeomVertexReader*(vertexData: GeomVertexData, name: InternalName): GeomVertexReader {.importcpp: "GeomVertexReader(#, #)".}

proc initGeomVertexReader*(vertexData: GeomVertexData, currentThread: Thread): GeomVertexReader {.importcpp: "GeomVertexReader(#, #)".}

proc initGeomVertexReader*(vertexData: GeomVertexData): GeomVertexReader {.importcpp: "GeomVertexReader(#)".}

proc initGeomVertexReader*(copy: GeomVertexReader | GeomVertexRewriter): GeomVertexReader {.importcpp: "GeomVertexReader(#)".}

proc initGeomVertexReader*(currentThread: Thread): GeomVertexReader {.importcpp: "GeomVertexReader(#)".}

proc initGeomVertexReader*(): GeomVertexReader {.importcpp: "GeomVertexReader()".}

proc initGeomVertexWriter*(arrayData: GeomVertexArrayData, currentThread: Thread): GeomVertexWriter {.importcpp: "GeomVertexWriter(#, #)".}

proc initGeomVertexWriter*(arrayData: GeomVertexArrayData): GeomVertexWriter {.importcpp: "GeomVertexWriter(#)".}

proc initGeomVertexWriter*(arrayData: GeomVertexArrayData, column: int, currentThread: Thread): GeomVertexWriter {.importcpp: "GeomVertexWriter(#, #, #)".}

proc initGeomVertexWriter*(arrayData: GeomVertexArrayData, column: int): GeomVertexWriter {.importcpp: "GeomVertexWriter(#, #)".}

proc initGeomVertexWriter*(vertexData: GeomVertexData, name: InternalName, currentThread: Thread): GeomVertexWriter {.importcpp: "GeomVertexWriter(#, #, #)".}

proc initGeomVertexWriter*(vertexData: GeomVertexData, name: InternalName): GeomVertexWriter {.importcpp: "GeomVertexWriter(#, #)".}

proc initGeomVertexWriter*(vertexData: GeomVertexData, currentThread: Thread): GeomVertexWriter {.importcpp: "GeomVertexWriter(#, #)".}

proc initGeomVertexWriter*(vertexData: GeomVertexData): GeomVertexWriter {.importcpp: "GeomVertexWriter(#)".}

proc initGeomVertexWriter*(copy: GeomVertexWriter): GeomVertexWriter {.importcpp: "GeomVertexWriter(#)".}

proc initGeomVertexWriter*(currentThread: Thread): GeomVertexWriter {.importcpp: "GeomVertexWriter(#)".}

proc initGeomVertexWriter*(): GeomVertexWriter {.importcpp: "GeomVertexWriter()".}

proc initGeomVertexRewriter*(arrayData: GeomVertexArrayData, currentThread: Thread): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#, #)".}

proc initGeomVertexRewriter*(arrayData: GeomVertexArrayData): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#)".}

proc initGeomVertexRewriter*(arrayData: GeomVertexArrayData, column: int, currentThread: Thread): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#, #, #)".}

proc initGeomVertexRewriter*(arrayData: GeomVertexArrayData, column: int): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#, #)".}

proc initGeomVertexRewriter*(vertexData: GeomVertexData, name: InternalName, currentThread: Thread): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#, #, #)".}

proc initGeomVertexRewriter*(vertexData: GeomVertexData, name: InternalName): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#, #)".}

proc initGeomVertexRewriter*(vertexData: GeomVertexData, currentThread: Thread): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#, #)".}

proc initGeomVertexRewriter*(vertexData: GeomVertexData): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#)".}

proc initGeomVertexRewriter*(copy: GeomVertexRewriter): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#)".}

proc initGeomVertexRewriter*(currentThread: Thread): GeomVertexRewriter {.importcpp: "GeomVertexRewriter(#)".}

proc initGeomVertexRewriter*(): GeomVertexRewriter {.importcpp: "GeomVertexRewriter()".}

proc initSamplerState*(): SamplerState {.importcpp: "SamplerState()".}

proc initSamplerState*(param0: SamplerState): SamplerState {.importcpp: "SamplerState(#)".}

proc getDefault*(_: typedesc[SamplerState]): SamplerState {.importcpp: "SamplerState::get_default()", header: "samplerState.h".}

proc isMipmap*(_: typedesc[SamplerState], `type`: SamplerState_FilterType): bool {.importcpp: "#SamplerState::is_mipmap(#)", header: "samplerState.h".}

proc formatFilterType*(_: typedesc[SamplerState], ft: SamplerState_FilterType): string {.importcpp: "nimStringFromStdString(#SamplerState::format_filter_type(#))", header: "samplerState.h".}

proc stringFilterType*(_: typedesc[SamplerState], str: string): SamplerState_FilterType {.importcpp: "#SamplerState::string_filter_type(nimStringToStdString(#))", header: "samplerState.h".}

proc formatWrapMode*(_: typedesc[SamplerState], wm: SamplerState_WrapMode): string {.importcpp: "nimStringFromStdString(#SamplerState::format_wrap_mode(#))", header: "samplerState.h".}

proc stringWrapMode*(_: typedesc[SamplerState], str: string): SamplerState_WrapMode {.importcpp: "#SamplerState::string_wrap_mode(nimStringToStdString(#))", header: "samplerState.h".}

proc getClassType*(_: typedesc[SamplerState]): TypeHandle {.importcpp: "SamplerState::get_class_type()", header: "samplerState.h".}

proc newTexture*(name: string): Texture {.importcpp: "new Texture(nimStringToStdString(#))", header: stringConversionCode.}

proc newTexture*(): Texture {.importcpp: "new Texture()".}

proc makeFromTxo*(_: typedesc[Texture], `in`: istream, filename: string): Texture {.importcpp: "#Texture::make_from_txo(#, nimStringToStdString(#))", header: "texture.h".}

proc makeFromTxo*(_: typedesc[Texture], `in`: istream): Texture {.importcpp: "#Texture::make_from_txo(#)", header: "texture.h".}

proc setTexturesPower2*(_: typedesc[Texture], scale: AutoTextureScale) {.importcpp: "#Texture::set_textures_power_2(#)", header: "texture.h".}

proc getTexturesPower2*(_: typedesc[Texture]): AutoTextureScale {.importcpp: "Texture::get_textures_power_2()", header: "texture.h".}

proc hasTexturesPower2*(_: typedesc[Texture]): bool {.importcpp: "Texture::has_textures_power_2()", header: "texture.h".}

proc upToPower2*(_: typedesc[Texture], value: int): int {.importcpp: "#Texture::up_to_power_2(#)", header: "texture.h".}

proc downToPower2*(_: typedesc[Texture], value: int): int {.importcpp: "#Texture::down_to_power_2(#)", header: "texture.h".}

proc considerRescale*(_: typedesc[Texture], pnmimage: PNMImage, name: string, autoTextureScale: AutoTextureScale) {.importcpp: "#Texture::consider_rescale(#, nimStringToStdString(#), #)", header: "texture.h".}

proc considerRescale*(_: typedesc[Texture], pnmimage: PNMImage, name: string) {.importcpp: "#Texture::consider_rescale(#, nimStringToStdString(#))", header: "texture.h".}

proc formatTextureType*(_: typedesc[Texture], tt: Texture_TextureType): string {.importcpp: "nimStringFromStdString(#Texture::format_texture_type(#))", header: "texture.h".}

proc stringTextureType*(_: typedesc[Texture], str: string): Texture_TextureType {.importcpp: "#Texture::string_texture_type(nimStringToStdString(#))", header: "texture.h".}

proc formatComponentType*(_: typedesc[Texture], ct: Texture_ComponentType): string {.importcpp: "nimStringFromStdString(#Texture::format_component_type(#))", header: "texture.h".}

proc stringComponentType*(_: typedesc[Texture], str: string): Texture_ComponentType {.importcpp: "#Texture::string_component_type(nimStringToStdString(#))", header: "texture.h".}

proc formatFormat*(_: typedesc[Texture], f: Texture_Format): string {.importcpp: "nimStringFromStdString(#Texture::format_format(#))", header: "texture.h".}

proc stringFormat*(_: typedesc[Texture], str: string): Texture_Format {.importcpp: "#Texture::string_format(nimStringToStdString(#))", header: "texture.h".}

proc formatCompressionMode*(_: typedesc[Texture], cm: Texture_CompressionMode): string {.importcpp: "nimStringFromStdString(#Texture::format_compression_mode(#))", header: "texture.h".}

proc stringCompressionMode*(_: typedesc[Texture], str: string): Texture_CompressionMode {.importcpp: "#Texture::string_compression_mode(nimStringToStdString(#))", header: "texture.h".}

proc formatQualityLevel*(_: typedesc[Texture], tql: Texture_QualityLevel): string {.importcpp: "nimStringFromStdString(#Texture::format_quality_level(#))", header: "texture.h".}

proc stringQualityLevel*(_: typedesc[Texture], str: string): Texture_QualityLevel {.importcpp: "#Texture::string_quality_level(nimStringToStdString(#))", header: "texture.h".}

proc getClassType*(_: typedesc[Texture]): TypeHandle {.importcpp: "Texture::get_class_type()", header: "texture.h".}

proc load*(_: typedesc[Shader], file: Filename, lang: Shader_ShaderLanguage): Shader {.importcpp: "#Shader::load(#, #)", header: "shader.h".}

proc load*(_: typedesc[Shader], file: Filename): Shader {.importcpp: "#Shader::load(#)", header: "shader.h".}

proc load*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: Filename, fragment: Filename, geometry: Filename, tessControl: Filename, tessEvaluation: Filename): Shader {.importcpp: "#Shader::load(#, #, #, #, #, #)", header: "shader.h".}

proc load*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: Filename, fragment: Filename, geometry: Filename, tessControl: Filename): Shader {.importcpp: "#Shader::load(#, #, #, #, #)", header: "shader.h".}

proc load*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: Filename, fragment: Filename, geometry: Filename): Shader {.importcpp: "#Shader::load(#, #, #, #)", header: "shader.h".}

proc load*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: Filename, fragment: Filename): Shader {.importcpp: "#Shader::load(#, #, #)", header: "shader.h".}

proc make*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: string, fragment: string, geometry: string, tessControl: string, tessEvaluation: string): Shader {.importcpp: "#Shader::make(#, nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: "shader.h".}

proc make*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: string, fragment: string, geometry: string, tessControl: string): Shader {.importcpp: "#Shader::make(#, nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: "shader.h".}

proc make*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: string, fragment: string, geometry: string): Shader {.importcpp: "#Shader::make(#, nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: "shader.h".}

proc make*(_: typedesc[Shader], lang: Shader_ShaderLanguage, vertex: string, fragment: string): Shader {.importcpp: "#Shader::make(#, nimStringToStdString(#), nimStringToStdString(#))", header: "shader.h".}

proc make*(_: typedesc[Shader], body: string, lang: Shader_ShaderLanguage): Shader {.importcpp: "#Shader::make(nimStringToStdString(#), #)", header: "shader.h".}

proc make*(_: typedesc[Shader], body: string): Shader {.importcpp: "#Shader::make(nimStringToStdString(#))", header: "shader.h".}

proc loadCompute*(_: typedesc[Shader], lang: Shader_ShaderLanguage, fn: Filename): Shader {.importcpp: "#Shader::load_compute(#, #)", header: "shader.h".}

proc makeCompute*(_: typedesc[Shader], lang: Shader_ShaderLanguage, body: string): Shader {.importcpp: "#Shader::make_compute(#, nimStringToStdString(#))", header: "shader.h".}

proc getClassType*(_: typedesc[Shader]): TypeHandle {.importcpp: "Shader::get_class_type()", header: "shader.h".}

proc newShader*(param0: Shader): Shader {.importcpp: "new Shader(#)".}

proc newShaderBuffer*(param0: ShaderBuffer): ShaderBuffer {.importcpp: "new ShaderBuffer(#)".}

proc newShaderBuffer*(name: string, size: clonglong, usageHint: GeomEnums_UsageHint): ShaderBuffer {.importcpp: "new ShaderBuffer(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[ShaderBuffer]): TypeHandle {.importcpp: "ShaderBuffer::get_class_type()", header: "shaderBuffer.h".}

proc getClassType*(_: typedesc[IndexBufferContext]): TypeHandle {.importcpp: "IndexBufferContext::get_class_type()", header: "indexBufferContext.h".}

proc getDefaultNear*(_: typedesc[Lens]): float {.importcpp: "Lens::get_default_near()", header: "lens.h".}

proc getDefaultFar*(_: typedesc[Lens]): float {.importcpp: "Lens::get_default_far()", header: "lens.h".}

proc getClassType*(_: typedesc[Lens]): TypeHandle {.importcpp: "Lens::get_class_type()", header: "lens.h".}

proc newMaterial*(copy: Material): Material {.importcpp: "new Material(#)".}

proc newMaterial*(name: string): Material {.importcpp: "new Material(nimStringToStdString(#))", header: stringConversionCode.}

proc newMaterial*(): Material {.importcpp: "new Material()".}

proc getDefault*(_: typedesc[Material]): Material {.importcpp: "Material::get_default()", header: "material.h".}

proc getClassType*(_: typedesc[Material]): TypeHandle {.importcpp: "Material::get_class_type()", header: "material.h".}

proc getMaterial*(_: typedesc[MaterialPool], temp: Material): Material {.importcpp: "#MaterialPool::get_material(#)", header: "materialPool.h".}

proc releaseMaterial*(_: typedesc[MaterialPool], temp: Material) {.importcpp: "#MaterialPool::release_material(#)", header: "materialPool.h".}

proc releaseAllMaterials*(_: typedesc[MaterialPool]) {.importcpp: "MaterialPool::release_all_materials()", header: "materialPool.h".}

proc garbageCollect*(_: typedesc[MaterialPool]): int {.importcpp: "MaterialPool::garbage_collect()", header: "materialPool.h".}

proc listContents*(_: typedesc[MaterialPool], `out`: iostream | ostream) {.importcpp: "#MaterialPool::list_contents(#)", header: "materialPool.h".}

proc write*(_: typedesc[MaterialPool], `out`: iostream | ostream) {.importcpp: "#MaterialPool::write(#)", header: "materialPool.h".}

proc newMatrixLens*(): MatrixLens {.importcpp: "new MatrixLens()".}

proc getClassType*(_: typedesc[MatrixLens]): TypeHandle {.importcpp: "MatrixLens::get_class_type()", header: "matrixLens.h".}

proc newOrthographicLens*(): OrthographicLens {.importcpp: "new OrthographicLens()".}

proc getClassType*(_: typedesc[OrthographicLens]): TypeHandle {.importcpp: "OrthographicLens::get_class_type()", header: "orthographicLens.h".}

proc newParamTextureSampler*(tex: Texture, sampler: SamplerState): ParamTextureSampler {.importcpp: "new ParamTextureSampler(#, #)".}

proc getClassType*(_: typedesc[ParamTextureSampler]): TypeHandle {.importcpp: "ParamTextureSampler::get_class_type()", header: "paramTexture.h".}

proc newParamTextureImage*(tex: Texture, read: bool, write: bool, z: int, n: int): ParamTextureImage {.importcpp: "new ParamTextureImage(#, #, #, #, #)".}

proc newParamTextureImage*(tex: Texture, read: bool, write: bool, z: int): ParamTextureImage {.importcpp: "new ParamTextureImage(#, #, #, #)".}

proc newParamTextureImage*(tex: Texture, read: bool, write: bool): ParamTextureImage {.importcpp: "new ParamTextureImage(#, #, #)".}

proc getClassType*(_: typedesc[ParamTextureImage]): TypeHandle {.importcpp: "ParamTextureImage::get_class_type()", header: "paramTexture.h".}

proc newPerspectiveLens*(): PerspectiveLens {.importcpp: "new PerspectiveLens()".}

proc newPerspectiveLens*(hfov: float, vfov: float): PerspectiveLens {.importcpp: "new PerspectiveLens(#, #)".}

proc getClassType*(_: typedesc[PerspectiveLens]): TypeHandle {.importcpp: "PerspectiveLens::get_class_type()", header: "perspectiveLens.h".}

proc newTextureReloadRequest*(param0: TextureReloadRequest): TextureReloadRequest {.importcpp: "new TextureReloadRequest(#)".}

proc newTextureReloadRequest*(name: string, pgo: PreparedGraphicsObjects, texture: Texture, allowCompressed: bool): TextureReloadRequest {.importcpp: "new TextureReloadRequest(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[TextureReloadRequest]): TypeHandle {.importcpp: "TextureReloadRequest::get_class_type()", header: "textureReloadRequest.h".}

proc getClassType*(_: typedesc[TextureContext]): TypeHandle {.importcpp: "TextureContext::get_class_type()", header: "textureContext.h".}

proc getClassType*(_: typedesc[ShaderContext]): TypeHandle {.importcpp: "ShaderContext::get_class_type()", header: "shaderContext.h".}

proc newUserVertexSlider*(name: InternalName): UserVertexSlider {.importcpp: "new UserVertexSlider(#)".}

proc newUserVertexSlider*(name: string): UserVertexSlider {.importcpp: "new UserVertexSlider(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[UserVertexSlider]): TypeHandle {.importcpp: "UserVertexSlider::get_class_type()", header: "userVertexSlider.h".}

proc newUserVertexTransform*(name: string): UserVertexTransform {.importcpp: "new UserVertexTransform(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[UserVertexTransform]): TypeHandle {.importcpp: "UserVertexTransform::get_class_type()", header: "userVertexTransform.h".}

proc getClassType*(_: typedesc[VideoTexture]): TypeHandle {.importcpp: "VideoTexture::get_class_type()", header: "videoTexture.h".}

proc getClassType*(_: typedesc[VertexBufferContext]): TypeHandle {.importcpp: "VertexBufferContext::get_class_type()", header: "vertexBufferContext.h".}

proc initTextureCollection*(): TextureCollection {.importcpp: "TextureCollection()".}

proc initTextureCollection*(copy: TextureCollection): TextureCollection {.importcpp: "TextureCollection(#)".}

proc hasTexture*(_: typedesc[TexturePool], filename: Filename): bool {.importcpp: "#TexturePool::has_texture(#)", header: "texturePool.h".}

proc verifyTexture*(_: typedesc[TexturePool], filename: Filename): bool {.importcpp: "#TexturePool::verify_texture(#)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int, alphaFileChannel: int, readMipmaps: bool): Texture {.importcpp: "#TexturePool::get_texture(#, #, #, #, #)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int, alphaFileChannel: int): Texture {.importcpp: "#TexturePool::get_texture(#, #, #, #)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int): Texture {.importcpp: "#TexturePool::get_texture(#, #, #)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename): Texture {.importcpp: "#TexturePool::get_texture(#, #)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename, primaryFileNumChannels: int, readMipmaps: bool): Texture {.importcpp: "#TexturePool::get_texture(#, #, #)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename, primaryFileNumChannels: int): Texture {.importcpp: "#TexturePool::get_texture(#, #)", header: "texturePool.h".}

proc getTexture*(_: typedesc[TexturePool], filename: Filename): Texture {.importcpp: "#TexturePool::get_texture(#)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int, alphaFileChannel: int, readMipmaps: bool, options: LoaderOptions): Texture {.importcpp: "#TexturePool::load_texture(#, #, #, #, #, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int, alphaFileChannel: int, readMipmaps: bool): Texture {.importcpp: "#TexturePool::load_texture(#, #, #, #, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int, alphaFileChannel: int): Texture {.importcpp: "#TexturePool::load_texture(#, #, #, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename, primaryFileNumChannels: int): Texture {.importcpp: "#TexturePool::load_texture(#, #, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, alphaFilename: Filename): Texture {.importcpp: "#TexturePool::load_texture(#, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, primaryFileNumChannels: int, readMipmaps: bool, options: LoaderOptions): Texture {.importcpp: "#TexturePool::load_texture(#, #, #, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, primaryFileNumChannels: int, readMipmaps: bool): Texture {.importcpp: "#TexturePool::load_texture(#, #, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename, primaryFileNumChannels: int): Texture {.importcpp: "#TexturePool::load_texture(#, #)", header: "texturePool.h".}

proc loadTexture*(_: typedesc[TexturePool], filename: Filename): Texture {.importcpp: "#TexturePool::load_texture(#)", header: "texturePool.h".}

proc load3dTexture*(_: typedesc[TexturePool], filenamePattern: Filename, readMipmaps: bool, options: LoaderOptions): Texture {.importcpp: "#TexturePool::load_3d_texture(#, #, #)", header: "texturePool.h".}

proc load3dTexture*(_: typedesc[TexturePool], filenamePattern: Filename, readMipmaps: bool): Texture {.importcpp: "#TexturePool::load_3d_texture(#, #)", header: "texturePool.h".}

proc load3dTexture*(_: typedesc[TexturePool], filenamePattern: Filename): Texture {.importcpp: "#TexturePool::load_3d_texture(#)", header: "texturePool.h".}

proc load2dTextureArray*(_: typedesc[TexturePool], filenamePattern: Filename, readMipmaps: bool, options: LoaderOptions): Texture {.importcpp: "#TexturePool::load_2d_texture_array(#, #, #)", header: "texturePool.h".}

proc load2dTextureArray*(_: typedesc[TexturePool], filenamePattern: Filename, readMipmaps: bool): Texture {.importcpp: "#TexturePool::load_2d_texture_array(#, #)", header: "texturePool.h".}

proc load2dTextureArray*(_: typedesc[TexturePool], filenamePattern: Filename): Texture {.importcpp: "#TexturePool::load_2d_texture_array(#)", header: "texturePool.h".}

proc loadCubeMap*(_: typedesc[TexturePool], filenamePattern: Filename, readMipmaps: bool, options: LoaderOptions): Texture {.importcpp: "#TexturePool::load_cube_map(#, #, #)", header: "texturePool.h".}

proc loadCubeMap*(_: typedesc[TexturePool], filenamePattern: Filename, readMipmaps: bool): Texture {.importcpp: "#TexturePool::load_cube_map(#, #)", header: "texturePool.h".}

proc loadCubeMap*(_: typedesc[TexturePool], filenamePattern: Filename): Texture {.importcpp: "#TexturePool::load_cube_map(#)", header: "texturePool.h".}

proc getNormalizationCubeMap*(_: typedesc[TexturePool], size: int): Texture {.importcpp: "#TexturePool::get_normalization_cube_map(#)", header: "texturePool.h".}

proc getAlphaScaleMap*(_: typedesc[TexturePool]): Texture {.importcpp: "TexturePool::get_alpha_scale_map()", header: "texturePool.h".}

proc addTexture*(_: typedesc[TexturePool], texture: Texture) {.importcpp: "#TexturePool::add_texture(#)", header: "texturePool.h".}

proc releaseTexture*(_: typedesc[TexturePool], texture: Texture) {.importcpp: "#TexturePool::release_texture(#)", header: "texturePool.h".}

proc releaseAllTextures*(_: typedesc[TexturePool]) {.importcpp: "TexturePool::release_all_textures()", header: "texturePool.h".}

proc rehash*(_: typedesc[TexturePool]) {.importcpp: "TexturePool::rehash()", header: "texturePool.h".}

proc garbageCollect*(_: typedesc[TexturePool]): int {.importcpp: "TexturePool::garbage_collect()", header: "texturePool.h".}

proc listContents*(_: typedesc[TexturePool]) {.importcpp: "TexturePool::list_contents()", header: "texturePool.h".}

proc listContents*(_: typedesc[TexturePool], `out`: iostream | ostream) {.importcpp: "#TexturePool::list_contents(#)", header: "texturePool.h".}

proc findTexture*(_: typedesc[TexturePool], name: string): Texture {.importcpp: "#TexturePool::find_texture(nimStringToStdString(#))", header: "texturePool.h".}

proc findAllTextures*(_: typedesc[TexturePool], name: string): TextureCollection {.importcpp: "#TexturePool::find_all_textures(nimStringToStdString(#))", header: "texturePool.h".}

proc findAllTextures*(_: typedesc[TexturePool]): TextureCollection {.importcpp: "TexturePool::find_all_textures()", header: "texturePool.h".}

proc setFakeTextureImage*(_: typedesc[TexturePool], filename: Filename) {.importcpp: "#TexturePool::set_fake_texture_image(#)", header: "texturePool.h".}

proc clearFakeTextureImage*(_: typedesc[TexturePool]) {.importcpp: "TexturePool::clear_fake_texture_image()", header: "texturePool.h".}

proc hasFakeTextureImage*(_: typedesc[TexturePool]): bool {.importcpp: "TexturePool::has_fake_texture_image()", header: "texturePool.h".}

proc getFakeTextureImage*(_: typedesc[TexturePool]): Filename {.importcpp: "TexturePool::get_fake_texture_image()", header: "texturePool.h".}

proc makeTexture*(_: typedesc[TexturePool], extension: string): Texture {.importcpp: "#TexturePool::make_texture(nimStringToStdString(#))", header: "texturePool.h".}

proc write*(_: typedesc[TexturePool], `out`: iostream | ostream) {.importcpp: "#TexturePool::write(#)", header: "texturePool.h".}

proc newTexturePeeker*(param0: TexturePeeker): TexturePeeker {.importcpp: "new TexturePeeker(#)".}

proc getStage*(_: typedesc[TextureStagePool], temp: TextureStage): TextureStage {.importcpp: "#TextureStagePool::get_stage(#)", header: "textureStagePool.h".}

proc releaseStage*(_: typedesc[TextureStagePool], temp: TextureStage) {.importcpp: "#TextureStagePool::release_stage(#)", header: "textureStagePool.h".}

proc releaseAllStages*(_: typedesc[TextureStagePool]) {.importcpp: "TextureStagePool::release_all_stages()", header: "textureStagePool.h".}

proc setMode*(_: typedesc[TextureStagePool], mode: TextureStagePool_Mode) {.importcpp: "#TextureStagePool::set_mode(#)", header: "textureStagePool.h".}

proc getMode*(_: typedesc[TextureStagePool]): TextureStagePool_Mode {.importcpp: "TextureStagePool::get_mode()", header: "textureStagePool.h".}

proc garbageCollect*(_: typedesc[TextureStagePool]): int {.importcpp: "TextureStagePool::garbage_collect()", header: "textureStagePool.h".}

proc listContents*(_: typedesc[TextureStagePool], `out`: iostream | ostream) {.importcpp: "#TextureStagePool::list_contents(#)", header: "textureStagePool.h".}

proc write*(_: typedesc[TextureStagePool], `out`: iostream | ostream) {.importcpp: "#TextureStagePool::write(#)", header: "textureStagePool.h".}

proc getClassType*(_: typedesc[GraphicsOutputBase]): TypeHandle {.importcpp: "GraphicsOutputBase::get_class_type()", header: "graphicsOutputBase.h".}

proc getDefaultGsg*(_: typedesc[GraphicsStateGuardianBase]): GraphicsStateGuardianBase {.importcpp: "GraphicsStateGuardianBase::get_default_gsg()", header: "graphicsStateGuardianBase.h".}

proc setDefaultGsg*(_: typedesc[GraphicsStateGuardianBase], defaultGsg: GraphicsStateGuardianBase) {.importcpp: "#GraphicsStateGuardianBase::set_default_gsg(#)", header: "graphicsStateGuardianBase.h".}

proc getNumGsgs*(_: typedesc[GraphicsStateGuardianBase]): int {.importcpp: "GraphicsStateGuardianBase::get_num_gsgs()", header: "graphicsStateGuardianBase.h".}

proc getGsg*(_: typedesc[GraphicsStateGuardianBase], n: int): GraphicsStateGuardianBase {.importcpp: "#GraphicsStateGuardianBase::get_gsg(#)", header: "graphicsStateGuardianBase.h".}

proc getClassType*(_: typedesc[GraphicsStateGuardianBase]): TypeHandle {.importcpp: "GraphicsStateGuardianBase::get_class_type()", header: "graphicsStateGuardianBase.h".}

proc initMathNumbers*(): MathNumbers {.importcpp: "MathNumbers()".}

proc initMathNumbers*(param0: MathNumbers): MathNumbers {.importcpp: "MathNumbers(#)".}

proc deg2Rad*(f: float64): float64 {.importcpp: "deg_2_rad(#)", header: "deg_2_rad.h".}

proc deg2Rad*(f: float32): float32 {.importcpp: "deg_2_rad(#)", header: "deg_2_rad.h".}

proc rad2Deg*(f: float64): float64 {.importcpp: "rad_2_deg(#)", header: "deg_2_rad.h".}

proc rad2Deg*(f: float32): float32 {.importcpp: "rad_2_deg(#)", header: "deg_2_rad.h".}

proc zero*(_: typedesc[LVecBase2f]): LVecBase2f {.importcpp: "LVecBase2f::zero()", header: "lvecBase2.h".}

proc unitX*(_: typedesc[LVecBase2f]): LVecBase2f {.importcpp: "LVecBase2f::unit_x()", header: "lvecBase2.h".}

proc unitY*(_: typedesc[LVecBase2f]): LVecBase2f {.importcpp: "LVecBase2f::unit_y()", header: "lvecBase2.h".}

func len*(_: typedesc[LVecBase2f] or LVecBase2f): int {.importcpp: "LVecBase2f::size()", header: "lvecBase2.h".}

proc getNumComponents*(_: typedesc[LVecBase2f]): int {.importcpp: "LVecBase2f::get_num_components()", header: "lvecBase2.h".}

proc getClassType*(_: typedesc[LVecBase2f]): TypeHandle {.importcpp: "LVecBase2f::get_class_type()", header: "lvecBase2.h".}

proc zero*(_: typedesc[LVecBase2d]): LVecBase2d {.importcpp: "LVecBase2d::zero()", header: "lvecBase2.h".}

proc unitX*(_: typedesc[LVecBase2d]): LVecBase2d {.importcpp: "LVecBase2d::unit_x()", header: "lvecBase2.h".}

proc unitY*(_: typedesc[LVecBase2d]): LVecBase2d {.importcpp: "LVecBase2d::unit_y()", header: "lvecBase2.h".}

func len*(_: typedesc[LVecBase2d] or LVecBase2d): int {.importcpp: "LVecBase2d::size()", header: "lvecBase2.h".}

proc getNumComponents*(_: typedesc[LVecBase2d]): int {.importcpp: "LVecBase2d::get_num_components()", header: "lvecBase2.h".}

proc getClassType*(_: typedesc[LVecBase2d]): TypeHandle {.importcpp: "LVecBase2d::get_class_type()", header: "lvecBase2.h".}

proc zero*(_: typedesc[LVecBase2i]): LVecBase2i {.importcpp: "LVecBase2i::zero()", header: "lvecBase2.h".}

proc unitX*(_: typedesc[LVecBase2i]): LVecBase2i {.importcpp: "LVecBase2i::unit_x()", header: "lvecBase2.h".}

proc unitY*(_: typedesc[LVecBase2i]): LVecBase2i {.importcpp: "LVecBase2i::unit_y()", header: "lvecBase2.h".}

func len*(_: typedesc[LVecBase2i] or LVecBase2i): int {.importcpp: "LVecBase2i::size()", header: "lvecBase2.h".}

proc getNumComponents*(_: typedesc[LVecBase2i]): int {.importcpp: "LVecBase2i::get_num_components()", header: "lvecBase2.h".}

proc getClassType*(_: typedesc[LVecBase2i]): TypeHandle {.importcpp: "LVecBase2i::get_class_type()", header: "lvecBase2.h".}

proc initLVector2f*(): LVector2f {.importcpp: "LVector2f()".}

proc initLVector2f*(copy: LVecBase2f): LVector2f {.importcpp: "LVector2f((LVecBase2f const &)(#))".}

proc initLVector2f*(param0: LVector2f): LVector2f {.importcpp: "LVector2f((LVector2f const &)(#))".}

proc initLVector2f*(fillValue: float32): LVector2f {.importcpp: "LVector2f(#)".}

proc initLVector2f*(x: float32, y: float32): LVector2f {.importcpp: "LVector2f(#, #)".}

proc zero*(_: typedesc[LVector2f]): LVector2f {.importcpp: "LVector2f::zero()", header: "lvector2.h".}

proc unitX*(_: typedesc[LVector2f]): LVector2f {.importcpp: "LVector2f::unit_x()", header: "lvector2.h".}

proc unitY*(_: typedesc[LVector2f]): LVector2f {.importcpp: "LVector2f::unit_y()", header: "lvector2.h".}

proc getClassType*(_: typedesc[LVector2f]): TypeHandle {.importcpp: "LVector2f::get_class_type()", header: "lvector2.h".}

proc initLVector2d*(): LVector2d {.importcpp: "LVector2d()".}

proc initLVector2d*(copy: LVecBase2d): LVector2d {.importcpp: "LVector2d((LVecBase2d const &)(#))".}

proc initLVector2d*(param0: LVector2d): LVector2d {.importcpp: "LVector2d((LVector2d const &)(#))".}

proc initLVector2d*(fillValue: float64): LVector2d {.importcpp: "LVector2d(#)".}

proc initLVector2d*(x: float64, y: float64): LVector2d {.importcpp: "LVector2d(#, #)".}

proc zero*(_: typedesc[LVector2d]): LVector2d {.importcpp: "LVector2d::zero()", header: "lvector2.h".}

proc unitX*(_: typedesc[LVector2d]): LVector2d {.importcpp: "LVector2d::unit_x()", header: "lvector2.h".}

proc unitY*(_: typedesc[LVector2d]): LVector2d {.importcpp: "LVector2d::unit_y()", header: "lvector2.h".}

proc getClassType*(_: typedesc[LVector2d]): TypeHandle {.importcpp: "LVector2d::get_class_type()", header: "lvector2.h".}

proc initLVector2i*(): LVector2i {.importcpp: "LVector2i()".}

proc initLVector2i*(copy: LVecBase2i): LVector2i {.importcpp: "LVector2i((LVecBase2i const &)(#))".}

proc initLVector2i*(param0: LVector2i): LVector2i {.importcpp: "LVector2i((LVector2i const &)(#))".}

proc initLVector2i*(fillValue: int): LVector2i {.importcpp: "LVector2i(#)".}

proc initLVector2i*(x: int, y: int): LVector2i {.importcpp: "LVector2i(#, #)".}

proc zero*(_: typedesc[LVector2i]): LVector2i {.importcpp: "LVector2i::zero()", header: "lvector2.h".}

proc unitX*(_: typedesc[LVector2i]): LVector2i {.importcpp: "LVector2i::unit_x()", header: "lvector2.h".}

proc unitY*(_: typedesc[LVector2i]): LVector2i {.importcpp: "LVector2i::unit_y()", header: "lvector2.h".}

proc getClassType*(_: typedesc[LVector2i]): TypeHandle {.importcpp: "LVector2i::get_class_type()", header: "lvector2.h".}

proc initLPoint2f*(): LPoint2f {.importcpp: "LPoint2f()".}

proc initLPoint2f*(param0: LPoint2f): LPoint2f {.importcpp: "LPoint2f((LPoint2f const &)(#))".}

proc initLPoint2f*(copy: LVecBase2f): LPoint2f {.importcpp: "LPoint2f((LVecBase2f const &)(#))".}

proc initLPoint2f*(fillValue: float32): LPoint2f {.importcpp: "LPoint2f(#)".}

proc initLPoint2f*(x: float32, y: float32): LPoint2f {.importcpp: "LPoint2f(#, #)".}

proc zero*(_: typedesc[LPoint2f]): LPoint2f {.importcpp: "LPoint2f::zero()", header: "lpoint2.h".}

proc unitX*(_: typedesc[LPoint2f]): LPoint2f {.importcpp: "LPoint2f::unit_x()", header: "lpoint2.h".}

proc unitY*(_: typedesc[LPoint2f]): LPoint2f {.importcpp: "LPoint2f::unit_y()", header: "lpoint2.h".}

proc getClassType*(_: typedesc[LPoint2f]): TypeHandle {.importcpp: "LPoint2f::get_class_type()", header: "lpoint2.h".}

proc initLPoint2d*(): LPoint2d {.importcpp: "LPoint2d()".}

proc initLPoint2d*(param0: LPoint2d): LPoint2d {.importcpp: "LPoint2d((LPoint2d const &)(#))".}

proc initLPoint2d*(copy: LVecBase2d): LPoint2d {.importcpp: "LPoint2d((LVecBase2d const &)(#))".}

proc initLPoint2d*(fillValue: float64): LPoint2d {.importcpp: "LPoint2d(#)".}

proc initLPoint2d*(x: float64, y: float64): LPoint2d {.importcpp: "LPoint2d(#, #)".}

proc zero*(_: typedesc[LPoint2d]): LPoint2d {.importcpp: "LPoint2d::zero()", header: "lpoint2.h".}

proc unitX*(_: typedesc[LPoint2d]): LPoint2d {.importcpp: "LPoint2d::unit_x()", header: "lpoint2.h".}

proc unitY*(_: typedesc[LPoint2d]): LPoint2d {.importcpp: "LPoint2d::unit_y()", header: "lpoint2.h".}

proc getClassType*(_: typedesc[LPoint2d]): TypeHandle {.importcpp: "LPoint2d::get_class_type()", header: "lpoint2.h".}

proc initLPoint2i*(): LPoint2i {.importcpp: "LPoint2i()".}

proc initLPoint2i*(param0: LPoint2i): LPoint2i {.importcpp: "LPoint2i((LPoint2i const &)(#))".}

proc initLPoint2i*(copy: LVecBase2i): LPoint2i {.importcpp: "LPoint2i((LVecBase2i const &)(#))".}

proc initLPoint2i*(fillValue: int): LPoint2i {.importcpp: "LPoint2i(#)".}

proc initLPoint2i*(x: int, y: int): LPoint2i {.importcpp: "LPoint2i(#, #)".}

proc zero*(_: typedesc[LPoint2i]): LPoint2i {.importcpp: "LPoint2i::zero()", header: "lpoint2.h".}

proc unitX*(_: typedesc[LPoint2i]): LPoint2i {.importcpp: "LPoint2i::unit_x()", header: "lpoint2.h".}

proc unitY*(_: typedesc[LPoint2i]): LPoint2i {.importcpp: "LPoint2i::unit_y()", header: "lpoint2.h".}

proc getClassType*(_: typedesc[LPoint2i]): TypeHandle {.importcpp: "LPoint2i::get_class_type()", header: "lpoint2.h".}

proc zero*(_: typedesc[LVecBase3f]): LVecBase3f {.importcpp: "LVecBase3f::zero()", header: "lvecBase3.h".}

proc unitX*(_: typedesc[LVecBase3f]): LVecBase3f {.importcpp: "LVecBase3f::unit_x()", header: "lvecBase3.h".}

proc unitY*(_: typedesc[LVecBase3f]): LVecBase3f {.importcpp: "LVecBase3f::unit_y()", header: "lvecBase3.h".}

proc unitZ*(_: typedesc[LVecBase3f]): LVecBase3f {.importcpp: "LVecBase3f::unit_z()", header: "lvecBase3.h".}

func len*(_: typedesc[LVecBase3f] or LVecBase3f): int {.importcpp: "LVecBase3f::size()", header: "lvecBase3.h".}

proc getNumComponents*(_: typedesc[LVecBase3f]): int {.importcpp: "LVecBase3f::get_num_components()", header: "lvecBase3.h".}

proc getClassType*(_: typedesc[LVecBase3f]): TypeHandle {.importcpp: "LVecBase3f::get_class_type()", header: "lvecBase3.h".}

proc zero*(_: typedesc[LVecBase3d]): LVecBase3d {.importcpp: "LVecBase3d::zero()", header: "lvecBase3.h".}

proc unitX*(_: typedesc[LVecBase3d]): LVecBase3d {.importcpp: "LVecBase3d::unit_x()", header: "lvecBase3.h".}

proc unitY*(_: typedesc[LVecBase3d]): LVecBase3d {.importcpp: "LVecBase3d::unit_y()", header: "lvecBase3.h".}

proc unitZ*(_: typedesc[LVecBase3d]): LVecBase3d {.importcpp: "LVecBase3d::unit_z()", header: "lvecBase3.h".}

func len*(_: typedesc[LVecBase3d] or LVecBase3d): int {.importcpp: "LVecBase3d::size()", header: "lvecBase3.h".}

proc getNumComponents*(_: typedesc[LVecBase3d]): int {.importcpp: "LVecBase3d::get_num_components()", header: "lvecBase3.h".}

proc getClassType*(_: typedesc[LVecBase3d]): TypeHandle {.importcpp: "LVecBase3d::get_class_type()", header: "lvecBase3.h".}

proc zero*(_: typedesc[LVecBase3i]): LVecBase3i {.importcpp: "LVecBase3i::zero()", header: "lvecBase3.h".}

proc unitX*(_: typedesc[LVecBase3i]): LVecBase3i {.importcpp: "LVecBase3i::unit_x()", header: "lvecBase3.h".}

proc unitY*(_: typedesc[LVecBase3i]): LVecBase3i {.importcpp: "LVecBase3i::unit_y()", header: "lvecBase3.h".}

proc unitZ*(_: typedesc[LVecBase3i]): LVecBase3i {.importcpp: "LVecBase3i::unit_z()", header: "lvecBase3.h".}

func len*(_: typedesc[LVecBase3i] or LVecBase3i): int {.importcpp: "LVecBase3i::size()", header: "lvecBase3.h".}

proc getNumComponents*(_: typedesc[LVecBase3i]): int {.importcpp: "LVecBase3i::get_num_components()", header: "lvecBase3.h".}

proc getClassType*(_: typedesc[LVecBase3i]): TypeHandle {.importcpp: "LVecBase3i::get_class_type()", header: "lvecBase3.h".}

proc getDefaultCoordinateSystem*(): CoordinateSystem {.importcpp: "get_default_coordinate_system()", header: "coordinateSystem.h".}

proc parseCoordinateSystemString*(str: string): CoordinateSystem {.importcpp: "parse_coordinate_system_string(nimStringToStdString(#))", header: "coordinateSystem.h".}

proc formatCoordinateSystem*(cs: CoordinateSystem): string {.importcpp: "nimStringFromStdString(format_coordinate_system(#))", header: "coordinateSystem.h".}

proc isRightHanded*(cs: CoordinateSystem): bool {.importcpp: "is_right_handed(#)", header: "coordinateSystem.h".}

proc isRightHanded*(): bool {.importcpp: "is_right_handed()", header: "coordinateSystem.h".}

proc initLVector3f*(): LVector3f {.importcpp: "LVector3f()".}

proc initLVector3f*(copy: LVecBase2f, z: float32): LVector3f {.importcpp: "LVector3f((LVecBase2f const &)(#), #)".}

proc initLVector3f*(copy: LVecBase3f): LVector3f {.importcpp: "LVector3f((LVecBase3f const &)(#))".}

proc initLVector3f*(param0: LVector3f): LVector3f {.importcpp: "LVector3f((LVector3f const &)(#))".}

proc initLVector3f*(fillValue: float32): LVector3f {.importcpp: "LVector3f(#)".}

proc initLVector3f*(x: float32, y: float32, z: float32): LVector3f {.importcpp: "LVector3f(#, #, #)".}

proc zero*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::zero()", header: "lvector3.h".}

proc unitX*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::unit_x()", header: "lvector3.h".}

proc unitY*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::unit_y()", header: "lvector3.h".}

proc unitZ*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::unit_z()", header: "lvector3.h".}

proc up*(_: typedesc[LVector3f], cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::up(#)", header: "lvector3.h".}

proc up*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::up()", header: "lvector3.h".}

proc right*(_: typedesc[LVector3f], cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::right(#)", header: "lvector3.h".}

proc right*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::right()", header: "lvector3.h".}

proc forward*(_: typedesc[LVector3f], cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::forward(#)", header: "lvector3.h".}

proc forward*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::forward()", header: "lvector3.h".}

proc down*(_: typedesc[LVector3f], cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::down(#)", header: "lvector3.h".}

proc down*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::down()", header: "lvector3.h".}

proc left*(_: typedesc[LVector3f], cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::left(#)", header: "lvector3.h".}

proc left*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::left()", header: "lvector3.h".}

proc back*(_: typedesc[LVector3f], cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::back(#)", header: "lvector3.h".}

proc back*(_: typedesc[LVector3f]): LVector3f {.importcpp: "LVector3f::back()", header: "lvector3.h".}

proc rfu*(_: typedesc[LVector3f], right: float32, fwd: float32, up: float32, cs: CoordinateSystem): LVector3f {.importcpp: "#LVector3f::rfu(#, #, #, #)", header: "lvector3.h".}

proc rfu*(_: typedesc[LVector3f], right: float32, fwd: float32, up: float32): LVector3f {.importcpp: "#LVector3f::rfu(#, #, #)", header: "lvector3.h".}

proc getClassType*(_: typedesc[LVector3f]): TypeHandle {.importcpp: "LVector3f::get_class_type()", header: "lvector3.h".}

proc initLVector3d*(): LVector3d {.importcpp: "LVector3d()".}

proc initLVector3d*(copy: LVecBase2d, z: float64): LVector3d {.importcpp: "LVector3d((LVecBase2d const &)(#), #)".}

proc initLVector3d*(copy: LVecBase3d): LVector3d {.importcpp: "LVector3d((LVecBase3d const &)(#))".}

proc initLVector3d*(param0: LVector3d): LVector3d {.importcpp: "LVector3d((LVector3d const &)(#))".}

proc initLVector3d*(fillValue: float64): LVector3d {.importcpp: "LVector3d(#)".}

proc initLVector3d*(x: float64, y: float64, z: float64): LVector3d {.importcpp: "LVector3d(#, #, #)".}

proc zero*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::zero()", header: "lvector3.h".}

proc unitX*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::unit_x()", header: "lvector3.h".}

proc unitY*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::unit_y()", header: "lvector3.h".}

proc unitZ*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::unit_z()", header: "lvector3.h".}

proc up*(_: typedesc[LVector3d], cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::up(#)", header: "lvector3.h".}

proc up*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::up()", header: "lvector3.h".}

proc right*(_: typedesc[LVector3d], cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::right(#)", header: "lvector3.h".}

proc right*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::right()", header: "lvector3.h".}

proc forward*(_: typedesc[LVector3d], cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::forward(#)", header: "lvector3.h".}

proc forward*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::forward()", header: "lvector3.h".}

proc down*(_: typedesc[LVector3d], cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::down(#)", header: "lvector3.h".}

proc down*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::down()", header: "lvector3.h".}

proc left*(_: typedesc[LVector3d], cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::left(#)", header: "lvector3.h".}

proc left*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::left()", header: "lvector3.h".}

proc back*(_: typedesc[LVector3d], cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::back(#)", header: "lvector3.h".}

proc back*(_: typedesc[LVector3d]): LVector3d {.importcpp: "LVector3d::back()", header: "lvector3.h".}

proc rfu*(_: typedesc[LVector3d], right: float64, fwd: float64, up: float64, cs: CoordinateSystem): LVector3d {.importcpp: "#LVector3d::rfu(#, #, #, #)", header: "lvector3.h".}

proc rfu*(_: typedesc[LVector3d], right: float64, fwd: float64, up: float64): LVector3d {.importcpp: "#LVector3d::rfu(#, #, #)", header: "lvector3.h".}

proc getClassType*(_: typedesc[LVector3d]): TypeHandle {.importcpp: "LVector3d::get_class_type()", header: "lvector3.h".}

proc initLVector3i*(): LVector3i {.importcpp: "LVector3i()".}

proc initLVector3i*(copy: LVecBase2i, z: int): LVector3i {.importcpp: "LVector3i((LVecBase2i const &)(#), #)".}

proc initLVector3i*(copy: LVecBase3i): LVector3i {.importcpp: "LVector3i((LVecBase3i const &)(#))".}

proc initLVector3i*(param0: LVector3i): LVector3i {.importcpp: "LVector3i((LVector3i const &)(#))".}

proc initLVector3i*(fillValue: int): LVector3i {.importcpp: "LVector3i(#)".}

proc initLVector3i*(x: int, y: int, z: int): LVector3i {.importcpp: "LVector3i(#, #, #)".}

proc zero*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::zero()", header: "lvector3.h".}

proc unitX*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::unit_x()", header: "lvector3.h".}

proc unitY*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::unit_y()", header: "lvector3.h".}

proc unitZ*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::unit_z()", header: "lvector3.h".}

proc up*(_: typedesc[LVector3i], cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::up(#)", header: "lvector3.h".}

proc up*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::up()", header: "lvector3.h".}

proc right*(_: typedesc[LVector3i], cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::right(#)", header: "lvector3.h".}

proc right*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::right()", header: "lvector3.h".}

proc forward*(_: typedesc[LVector3i], cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::forward(#)", header: "lvector3.h".}

proc forward*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::forward()", header: "lvector3.h".}

proc down*(_: typedesc[LVector3i], cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::down(#)", header: "lvector3.h".}

proc down*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::down()", header: "lvector3.h".}

proc left*(_: typedesc[LVector3i], cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::left(#)", header: "lvector3.h".}

proc left*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::left()", header: "lvector3.h".}

proc back*(_: typedesc[LVector3i], cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::back(#)", header: "lvector3.h".}

proc back*(_: typedesc[LVector3i]): LVector3i {.importcpp: "LVector3i::back()", header: "lvector3.h".}

proc rfu*(_: typedesc[LVector3i], right: int, fwd: int, up: int, cs: CoordinateSystem): LVector3i {.importcpp: "#LVector3i::rfu(#, #, #, #)", header: "lvector3.h".}

proc rfu*(_: typedesc[LVector3i], right: int, fwd: int, up: int): LVector3i {.importcpp: "#LVector3i::rfu(#, #, #)", header: "lvector3.h".}

proc getClassType*(_: typedesc[LVector3i]): TypeHandle {.importcpp: "LVector3i::get_class_type()", header: "lvector3.h".}

proc initLPoint3f*(): LPoint3f {.importcpp: "LPoint3f()".}

proc initLPoint3f*(param0: LPoint3f): LPoint3f {.importcpp: "LPoint3f((LPoint3f const &)(#))".}

proc initLPoint3f*(copy: LVecBase2f, z: float32): LPoint3f {.importcpp: "LPoint3f((LVecBase2f const &)(#), #)".}

proc initLPoint3f*(copy: LVecBase3f): LPoint3f {.importcpp: "LPoint3f((LVecBase3f const &)(#))".}

proc initLPoint3f*(fillValue: float32): LPoint3f {.importcpp: "LPoint3f(#)".}

proc initLPoint3f*(x: float32, y: float32, z: float32): LPoint3f {.importcpp: "LPoint3f(#, #, #)".}

proc zero*(_: typedesc[LPoint3f]): LPoint3f {.importcpp: "LPoint3f::zero()", header: "lpoint3.h".}

proc unitX*(_: typedesc[LPoint3f]): LPoint3f {.importcpp: "LPoint3f::unit_x()", header: "lpoint3.h".}

proc unitY*(_: typedesc[LPoint3f]): LPoint3f {.importcpp: "LPoint3f::unit_y()", header: "lpoint3.h".}

proc unitZ*(_: typedesc[LPoint3f]): LPoint3f {.importcpp: "LPoint3f::unit_z()", header: "lpoint3.h".}

proc origin*(_: typedesc[LPoint3f], cs: CoordinateSystem): LPoint3f {.importcpp: "#LPoint3f::origin(#)", header: "lpoint3.h".}

proc origin*(_: typedesc[LPoint3f]): LPoint3f {.importcpp: "LPoint3f::origin()", header: "lpoint3.h".}

proc rfu*(_: typedesc[LPoint3f], right: float32, fwd: float32, up: float32, cs: CoordinateSystem): LPoint3f {.importcpp: "#LPoint3f::rfu(#, #, #, #)", header: "lpoint3.h".}

proc rfu*(_: typedesc[LPoint3f], right: float32, fwd: float32, up: float32): LPoint3f {.importcpp: "#LPoint3f::rfu(#, #, #)", header: "lpoint3.h".}

proc getClassType*(_: typedesc[LPoint3f]): TypeHandle {.importcpp: "LPoint3f::get_class_type()", header: "lpoint3.h".}

proc initLPoint3d*(): LPoint3d {.importcpp: "LPoint3d()".}

proc initLPoint3d*(param0: LPoint3d): LPoint3d {.importcpp: "LPoint3d((LPoint3d const &)(#))".}

proc initLPoint3d*(copy: LVecBase2d, z: float64): LPoint3d {.importcpp: "LPoint3d((LVecBase2d const &)(#), #)".}

proc initLPoint3d*(copy: LVecBase3d): LPoint3d {.importcpp: "LPoint3d((LVecBase3d const &)(#))".}

proc initLPoint3d*(fillValue: float64): LPoint3d {.importcpp: "LPoint3d(#)".}

proc initLPoint3d*(x: float64, y: float64, z: float64): LPoint3d {.importcpp: "LPoint3d(#, #, #)".}

proc zero*(_: typedesc[LPoint3d]): LPoint3d {.importcpp: "LPoint3d::zero()", header: "lpoint3.h".}

proc unitX*(_: typedesc[LPoint3d]): LPoint3d {.importcpp: "LPoint3d::unit_x()", header: "lpoint3.h".}

proc unitY*(_: typedesc[LPoint3d]): LPoint3d {.importcpp: "LPoint3d::unit_y()", header: "lpoint3.h".}

proc unitZ*(_: typedesc[LPoint3d]): LPoint3d {.importcpp: "LPoint3d::unit_z()", header: "lpoint3.h".}

proc origin*(_: typedesc[LPoint3d], cs: CoordinateSystem): LPoint3d {.importcpp: "#LPoint3d::origin(#)", header: "lpoint3.h".}

proc origin*(_: typedesc[LPoint3d]): LPoint3d {.importcpp: "LPoint3d::origin()", header: "lpoint3.h".}

proc rfu*(_: typedesc[LPoint3d], right: float64, fwd: float64, up: float64, cs: CoordinateSystem): LPoint3d {.importcpp: "#LPoint3d::rfu(#, #, #, #)", header: "lpoint3.h".}

proc rfu*(_: typedesc[LPoint3d], right: float64, fwd: float64, up: float64): LPoint3d {.importcpp: "#LPoint3d::rfu(#, #, #)", header: "lpoint3.h".}

proc getClassType*(_: typedesc[LPoint3d]): TypeHandle {.importcpp: "LPoint3d::get_class_type()", header: "lpoint3.h".}

proc initLPoint3i*(): LPoint3i {.importcpp: "LPoint3i()".}

proc initLPoint3i*(param0: LPoint3i): LPoint3i {.importcpp: "LPoint3i((LPoint3i const &)(#))".}

proc initLPoint3i*(copy: LVecBase2i, z: int): LPoint3i {.importcpp: "LPoint3i((LVecBase2i const &)(#), #)".}

proc initLPoint3i*(copy: LVecBase3i): LPoint3i {.importcpp: "LPoint3i((LVecBase3i const &)(#))".}

proc initLPoint3i*(fillValue: int): LPoint3i {.importcpp: "LPoint3i(#)".}

proc initLPoint3i*(x: int, y: int, z: int): LPoint3i {.importcpp: "LPoint3i(#, #, #)".}

proc zero*(_: typedesc[LPoint3i]): LPoint3i {.importcpp: "LPoint3i::zero()", header: "lpoint3.h".}

proc unitX*(_: typedesc[LPoint3i]): LPoint3i {.importcpp: "LPoint3i::unit_x()", header: "lpoint3.h".}

proc unitY*(_: typedesc[LPoint3i]): LPoint3i {.importcpp: "LPoint3i::unit_y()", header: "lpoint3.h".}

proc unitZ*(_: typedesc[LPoint3i]): LPoint3i {.importcpp: "LPoint3i::unit_z()", header: "lpoint3.h".}

proc origin*(_: typedesc[LPoint3i], cs: CoordinateSystem): LPoint3i {.importcpp: "#LPoint3i::origin(#)", header: "lpoint3.h".}

proc origin*(_: typedesc[LPoint3i]): LPoint3i {.importcpp: "LPoint3i::origin()", header: "lpoint3.h".}

proc rfu*(_: typedesc[LPoint3i], right: int, fwd: int, up: int, cs: CoordinateSystem): LPoint3i {.importcpp: "#LPoint3i::rfu(#, #, #, #)", header: "lpoint3.h".}

proc rfu*(_: typedesc[LPoint3i], right: int, fwd: int, up: int): LPoint3i {.importcpp: "#LPoint3i::rfu(#, #, #)", header: "lpoint3.h".}

proc getClassType*(_: typedesc[LPoint3i]): TypeHandle {.importcpp: "LPoint3i::get_class_type()", header: "lpoint3.h".}

proc zero*(_: typedesc[LVecBase4f]): LVecBase4f {.importcpp: "LVecBase4f::zero()", header: "lvecBase4.h".}

proc unitX*(_: typedesc[LVecBase4f]): LVecBase4f {.importcpp: "LVecBase4f::unit_x()", header: "lvecBase4.h".}

proc unitY*(_: typedesc[LVecBase4f]): LVecBase4f {.importcpp: "LVecBase4f::unit_y()", header: "lvecBase4.h".}

proc unitZ*(_: typedesc[LVecBase4f]): LVecBase4f {.importcpp: "LVecBase4f::unit_z()", header: "lvecBase4.h".}

proc unitW*(_: typedesc[LVecBase4f]): LVecBase4f {.importcpp: "LVecBase4f::unit_w()", header: "lvecBase4.h".}

func len*(_: typedesc[LVecBase4f] or LVecBase4f): int {.importcpp: "LVecBase4f::size()", header: "lvecBase4.h".}

proc getNumComponents*(_: typedesc[LVecBase4f]): int {.importcpp: "LVecBase4f::get_num_components()", header: "lvecBase4.h".}

proc getClassType*(_: typedesc[LVecBase4f]): TypeHandle {.importcpp: "LVecBase4f::get_class_type()", header: "lvecBase4.h".}

func len*(_: typedesc[UnalignedLVecBase4f] or UnalignedLVecBase4f): int {.importcpp: "UnalignedLVecBase4f::size()", header: "lvecBase4.h".}

proc getNumComponents*(_: typedesc[UnalignedLVecBase4f]): int {.importcpp: "UnalignedLVecBase4f::get_num_components()", header: "lvecBase4.h".}

proc getClassType*(_: typedesc[UnalignedLVecBase4f]): TypeHandle {.importcpp: "UnalignedLVecBase4f::get_class_type()", header: "lvecBase4.h".}

proc zero*(_: typedesc[LVecBase4d]): LVecBase4d {.importcpp: "LVecBase4d::zero()", header: "lvecBase4.h".}

proc unitX*(_: typedesc[LVecBase4d]): LVecBase4d {.importcpp: "LVecBase4d::unit_x()", header: "lvecBase4.h".}

proc unitY*(_: typedesc[LVecBase4d]): LVecBase4d {.importcpp: "LVecBase4d::unit_y()", header: "lvecBase4.h".}

proc unitZ*(_: typedesc[LVecBase4d]): LVecBase4d {.importcpp: "LVecBase4d::unit_z()", header: "lvecBase4.h".}

proc unitW*(_: typedesc[LVecBase4d]): LVecBase4d {.importcpp: "LVecBase4d::unit_w()", header: "lvecBase4.h".}

func len*(_: typedesc[LVecBase4d] or LVecBase4d): int {.importcpp: "LVecBase4d::size()", header: "lvecBase4.h".}

proc getNumComponents*(_: typedesc[LVecBase4d]): int {.importcpp: "LVecBase4d::get_num_components()", header: "lvecBase4.h".}

proc getClassType*(_: typedesc[LVecBase4d]): TypeHandle {.importcpp: "LVecBase4d::get_class_type()", header: "lvecBase4.h".}

func len*(_: typedesc[UnalignedLVecBase4d] or UnalignedLVecBase4d): int {.importcpp: "UnalignedLVecBase4d::size()", header: "lvecBase4.h".}

proc getNumComponents*(_: typedesc[UnalignedLVecBase4d]): int {.importcpp: "UnalignedLVecBase4d::get_num_components()", header: "lvecBase4.h".}

proc getClassType*(_: typedesc[UnalignedLVecBase4d]): TypeHandle {.importcpp: "UnalignedLVecBase4d::get_class_type()", header: "lvecBase4.h".}

proc zero*(_: typedesc[LVecBase4i]): LVecBase4i {.importcpp: "LVecBase4i::zero()", header: "lvecBase4.h".}

proc unitX*(_: typedesc[LVecBase4i]): LVecBase4i {.importcpp: "LVecBase4i::unit_x()", header: "lvecBase4.h".}

proc unitY*(_: typedesc[LVecBase4i]): LVecBase4i {.importcpp: "LVecBase4i::unit_y()", header: "lvecBase4.h".}

proc unitZ*(_: typedesc[LVecBase4i]): LVecBase4i {.importcpp: "LVecBase4i::unit_z()", header: "lvecBase4.h".}

proc unitW*(_: typedesc[LVecBase4i]): LVecBase4i {.importcpp: "LVecBase4i::unit_w()", header: "lvecBase4.h".}

func len*(_: typedesc[LVecBase4i] or LVecBase4i): int {.importcpp: "LVecBase4i::size()", header: "lvecBase4.h".}

proc getNumComponents*(_: typedesc[LVecBase4i]): int {.importcpp: "LVecBase4i::get_num_components()", header: "lvecBase4.h".}

proc getClassType*(_: typedesc[LVecBase4i]): TypeHandle {.importcpp: "LVecBase4i::get_class_type()", header: "lvecBase4.h".}

func len*(_: typedesc[UnalignedLVecBase4i] or UnalignedLVecBase4i): int {.importcpp: "UnalignedLVecBase4i::size()", header: "lvecBase4.h".}

proc getNumComponents*(_: typedesc[UnalignedLVecBase4i]): int {.importcpp: "UnalignedLVecBase4i::get_num_components()", header: "lvecBase4.h".}

proc getClassType*(_: typedesc[UnalignedLVecBase4i]): TypeHandle {.importcpp: "UnalignedLVecBase4i::get_class_type()", header: "lvecBase4.h".}

proc initLVector4f*(): LVector4f {.importcpp: "LVector4f()".}

proc initLVector4f*(copy: LVecBase3f, w: float32): LVector4f {.importcpp: "LVector4f((LVecBase3f const &)(#), #)".}

proc initLVector4f*(copy: LVecBase4f): LVector4f {.importcpp: "LVector4f((LVecBase4f const &)(#))".}

proc initLVector4f*(param0: LVector4f): LVector4f {.importcpp: "LVector4f((LVector4f const &)(#))".}

proc initLVector4f*(fillValue: float32): LVector4f {.importcpp: "LVector4f(#)".}

proc initLVector4f*(x: float32, y: float32, z: float32, w: float32): LVector4f {.importcpp: "LVector4f(#, #, #, #)".}

proc zero*(_: typedesc[LVector4f]): LVector4f {.importcpp: "LVector4f::zero()", header: "lvector4.h".}

proc unitX*(_: typedesc[LVector4f]): LVector4f {.importcpp: "LVector4f::unit_x()", header: "lvector4.h".}

proc unitY*(_: typedesc[LVector4f]): LVector4f {.importcpp: "LVector4f::unit_y()", header: "lvector4.h".}

proc unitZ*(_: typedesc[LVector4f]): LVector4f {.importcpp: "LVector4f::unit_z()", header: "lvector4.h".}

proc unitW*(_: typedesc[LVector4f]): LVector4f {.importcpp: "LVector4f::unit_w()", header: "lvector4.h".}

proc getClassType*(_: typedesc[LVector4f]): TypeHandle {.importcpp: "LVector4f::get_class_type()", header: "lvector4.h".}

proc initLVector4d*(): LVector4d {.importcpp: "LVector4d()".}

proc initLVector4d*(copy: LVecBase3d, w: float64): LVector4d {.importcpp: "LVector4d((LVecBase3d const &)(#), #)".}

proc initLVector4d*(copy: LVecBase4d): LVector4d {.importcpp: "LVector4d((LVecBase4d const &)(#))".}

proc initLVector4d*(param0: LVector4d): LVector4d {.importcpp: "LVector4d((LVector4d const &)(#))".}

proc initLVector4d*(fillValue: float64): LVector4d {.importcpp: "LVector4d(#)".}

proc initLVector4d*(x: float64, y: float64, z: float64, w: float64): LVector4d {.importcpp: "LVector4d(#, #, #, #)".}

proc zero*(_: typedesc[LVector4d]): LVector4d {.importcpp: "LVector4d::zero()", header: "lvector4.h".}

proc unitX*(_: typedesc[LVector4d]): LVector4d {.importcpp: "LVector4d::unit_x()", header: "lvector4.h".}

proc unitY*(_: typedesc[LVector4d]): LVector4d {.importcpp: "LVector4d::unit_y()", header: "lvector4.h".}

proc unitZ*(_: typedesc[LVector4d]): LVector4d {.importcpp: "LVector4d::unit_z()", header: "lvector4.h".}

proc unitW*(_: typedesc[LVector4d]): LVector4d {.importcpp: "LVector4d::unit_w()", header: "lvector4.h".}

proc getClassType*(_: typedesc[LVector4d]): TypeHandle {.importcpp: "LVector4d::get_class_type()", header: "lvector4.h".}

proc initLVector4i*(): LVector4i {.importcpp: "LVector4i()".}

proc initLVector4i*(copy: LVecBase3i, w: int): LVector4i {.importcpp: "LVector4i((LVecBase3i const &)(#), #)".}

proc initLVector4i*(copy: LVecBase4i): LVector4i {.importcpp: "LVector4i((LVecBase4i const &)(#))".}

proc initLVector4i*(param0: LVector4i): LVector4i {.importcpp: "LVector4i((LVector4i const &)(#))".}

proc initLVector4i*(fillValue: int): LVector4i {.importcpp: "LVector4i(#)".}

proc initLVector4i*(x: int, y: int, z: int, w: int): LVector4i {.importcpp: "LVector4i(#, #, #, #)".}

proc zero*(_: typedesc[LVector4i]): LVector4i {.importcpp: "LVector4i::zero()", header: "lvector4.h".}

proc unitX*(_: typedesc[LVector4i]): LVector4i {.importcpp: "LVector4i::unit_x()", header: "lvector4.h".}

proc unitY*(_: typedesc[LVector4i]): LVector4i {.importcpp: "LVector4i::unit_y()", header: "lvector4.h".}

proc unitZ*(_: typedesc[LVector4i]): LVector4i {.importcpp: "LVector4i::unit_z()", header: "lvector4.h".}

proc unitW*(_: typedesc[LVector4i]): LVector4i {.importcpp: "LVector4i::unit_w()", header: "lvector4.h".}

proc getClassType*(_: typedesc[LVector4i]): TypeHandle {.importcpp: "LVector4i::get_class_type()", header: "lvector4.h".}

proc initLPoint4f*(): LPoint4f {.importcpp: "LPoint4f()".}

proc initLPoint4f*(param0: LPoint4f): LPoint4f {.importcpp: "LPoint4f((LPoint4f const &)(#))".}

proc initLPoint4f*(copy: LVecBase3f, w: float32): LPoint4f {.importcpp: "LPoint4f((LVecBase3f const &)(#), #)".}

proc initLPoint4f*(copy: LVecBase4f): LPoint4f {.importcpp: "LPoint4f((LVecBase4f const &)(#))".}

proc initLPoint4f*(fillValue: float32): LPoint4f {.importcpp: "LPoint4f(#)".}

proc initLPoint4f*(x: float32, y: float32, z: float32, w: float32): LPoint4f {.importcpp: "LPoint4f(#, #, #, #)".}

proc zero*(_: typedesc[LPoint4f]): LPoint4f {.importcpp: "LPoint4f::zero()", header: "lpoint4.h".}

proc unitX*(_: typedesc[LPoint4f]): LPoint4f {.importcpp: "LPoint4f::unit_x()", header: "lpoint4.h".}

proc unitY*(_: typedesc[LPoint4f]): LPoint4f {.importcpp: "LPoint4f::unit_y()", header: "lpoint4.h".}

proc unitZ*(_: typedesc[LPoint4f]): LPoint4f {.importcpp: "LPoint4f::unit_z()", header: "lpoint4.h".}

proc unitW*(_: typedesc[LPoint4f]): LPoint4f {.importcpp: "LPoint4f::unit_w()", header: "lpoint4.h".}

proc getClassType*(_: typedesc[LPoint4f]): TypeHandle {.importcpp: "LPoint4f::get_class_type()", header: "lpoint4.h".}

proc initLPoint4d*(): LPoint4d {.importcpp: "LPoint4d()".}

proc initLPoint4d*(param0: LPoint4d): LPoint4d {.importcpp: "LPoint4d((LPoint4d const &)(#))".}

proc initLPoint4d*(copy: LVecBase3d, w: float64): LPoint4d {.importcpp: "LPoint4d((LVecBase3d const &)(#), #)".}

proc initLPoint4d*(copy: LVecBase4d): LPoint4d {.importcpp: "LPoint4d((LVecBase4d const &)(#))".}

proc initLPoint4d*(fillValue: float64): LPoint4d {.importcpp: "LPoint4d(#)".}

proc initLPoint4d*(x: float64, y: float64, z: float64, w: float64): LPoint4d {.importcpp: "LPoint4d(#, #, #, #)".}

proc zero*(_: typedesc[LPoint4d]): LPoint4d {.importcpp: "LPoint4d::zero()", header: "lpoint4.h".}

proc unitX*(_: typedesc[LPoint4d]): LPoint4d {.importcpp: "LPoint4d::unit_x()", header: "lpoint4.h".}

proc unitY*(_: typedesc[LPoint4d]): LPoint4d {.importcpp: "LPoint4d::unit_y()", header: "lpoint4.h".}

proc unitZ*(_: typedesc[LPoint4d]): LPoint4d {.importcpp: "LPoint4d::unit_z()", header: "lpoint4.h".}

proc unitW*(_: typedesc[LPoint4d]): LPoint4d {.importcpp: "LPoint4d::unit_w()", header: "lpoint4.h".}

proc getClassType*(_: typedesc[LPoint4d]): TypeHandle {.importcpp: "LPoint4d::get_class_type()", header: "lpoint4.h".}

proc initLPoint4i*(): LPoint4i {.importcpp: "LPoint4i()".}

proc initLPoint4i*(param0: LPoint4i): LPoint4i {.importcpp: "LPoint4i((LPoint4i const &)(#))".}

proc initLPoint4i*(copy: LVecBase3i, w: int): LPoint4i {.importcpp: "LPoint4i((LVecBase3i const &)(#), #)".}

proc initLPoint4i*(copy: LVecBase4i): LPoint4i {.importcpp: "LPoint4i((LVecBase4i const &)(#))".}

proc initLPoint4i*(fillValue: int): LPoint4i {.importcpp: "LPoint4i(#)".}

proc initLPoint4i*(x: int, y: int, z: int, w: int): LPoint4i {.importcpp: "LPoint4i(#, #, #, #)".}

proc zero*(_: typedesc[LPoint4i]): LPoint4i {.importcpp: "LPoint4i::zero()", header: "lpoint4.h".}

proc unitX*(_: typedesc[LPoint4i]): LPoint4i {.importcpp: "LPoint4i::unit_x()", header: "lpoint4.h".}

proc unitY*(_: typedesc[LPoint4i]): LPoint4i {.importcpp: "LPoint4i::unit_y()", header: "lpoint4.h".}

proc unitZ*(_: typedesc[LPoint4i]): LPoint4i {.importcpp: "LPoint4i::unit_z()", header: "lpoint4.h".}

proc unitW*(_: typedesc[LPoint4i]): LPoint4i {.importcpp: "LPoint4i::unit_w()", header: "lpoint4.h".}

proc getClassType*(_: typedesc[LPoint4i]): TypeHandle {.importcpp: "LPoint4i::get_class_type()", header: "lpoint4.h".}

proc initLMatrix3f*(): LMatrix3f {.importcpp: "LMatrix3f()".}

proc initLMatrix3f*(other: LMatrix3f): LMatrix3f {.importcpp: "LMatrix3f(#)".}

proc initLMatrix3f*(param0: LVecBase3f, param1: LVecBase3f, param2: LVecBase3f): LMatrix3f {.importcpp: "LMatrix3f((LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#))".}

proc initLMatrix3f*(param0: float32, param1: float32, param2: float32, param3: float32, param4: float32, param5: float32, param6: float32, param7: float32, param8: float32): LMatrix3f {.importcpp: "LMatrix3f(#, #, #, #, #, #, #, #, #)".}

func len*(_: typedesc[LMatrix3f] or LMatrix3f): int {.importcpp: "LMatrix3f::size()", header: "lmatrix.h".}

proc identMat*(_: typedesc[LMatrix3f]): LMatrix3f {.importcpp: "LMatrix3f::ident_mat()", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix3f], trans: LVecBase2f): LMatrix3f {.importcpp: "#LMatrix3f::translate_mat((LVecBase2f const &)(#))", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix3f], tx: float32, ty: float32): LMatrix3f {.importcpp: "#LMatrix3f::translate_mat(#, #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix3f], angle: float32): LMatrix3f {.importcpp: "#LMatrix3f::rotate_mat(#)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix3f], angle: float32, axis: LVecBase3f, cs: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::rotate_mat(#, (LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix3f], angle: float32, axis: LVecBase3f): LMatrix3f {.importcpp: "#LMatrix3f::rotate_mat(#, (LVecBase3f const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3f], scale: LVecBase2f): LMatrix3f {.importcpp: "#LMatrix3f::scale_mat((LVecBase2f const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3f], scale: LVecBase3f): LMatrix3f {.importcpp: "#LMatrix3f::scale_mat((LVecBase3f const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3f], sx: float32, sy: float32): LMatrix3f {.importcpp: "#LMatrix3f::scale_mat(#, #)", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3f], sx: float32, sy: float32, sz: float32): LMatrix3f {.importcpp: "#LMatrix3f::scale_mat(#, #, #)", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix3f], angle: float32, axis: LVecBase3f, cs: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::rotate_mat_normaxis(#, (LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix3f], angle: float32, axis: LVecBase3f): LMatrix3f {.importcpp: "#LMatrix3f::rotate_mat_normaxis(#, (LVecBase3f const &)(#))", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3f], shear: LVecBase3f, cs: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::shear_mat((LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3f], shear: LVecBase3f): LMatrix3f {.importcpp: "#LMatrix3f::shear_mat((LVecBase3f const &)(#))", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3f], shxy: float32, shxz: float32, shyz: float32, cs: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::shear_mat(#, #, #, #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3f], shxy: float32, shxz: float32, shyz: float32): LMatrix3f {.importcpp: "#LMatrix3f::shear_mat(#, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3f], scale: LVecBase3f, shear: LVecBase3f, cs: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::scale_shear_mat((LVecBase3f const &)(#), (LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3f], scale: LVecBase3f, shear: LVecBase3f): LMatrix3f {.importcpp: "#LMatrix3f::scale_shear_mat((LVecBase3f const &)(#), (LVecBase3f const &)(#))", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3f], sx: float32, sy: float32, sz: float32, shxy: float32, shxz: float32, shyz: float32, cs: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::scale_shear_mat(#, #, #, #, #, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3f], sx: float32, sy: float32, sz: float32, shxy: float32, shxz: float32, shyz: float32): LMatrix3f {.importcpp: "#LMatrix3f::scale_shear_mat(#, #, #, #, #, #)", header: "lmatrix.h".}

proc convertMat*(_: typedesc[LMatrix3f], `from`: CoordinateSystem, to: CoordinateSystem): LMatrix3f {.importcpp: "#LMatrix3f::convert_mat(#, #)", header: "lmatrix.h".}

proc getClassType*(_: typedesc[LMatrix3f]): TypeHandle {.importcpp: "LMatrix3f::get_class_type()", header: "lmatrix.h".}

proc transpose*(a: LMatrix3d): LMatrix3d {.importcpp: "transpose(#)", header: "lmatrix.h".}

proc transpose*(a: LMatrix3f): LMatrix3f {.importcpp: "transpose(#)", header: "lmatrix.h".}

proc transpose*(a: LMatrix4d): LMatrix4d {.importcpp: "transpose(#)", header: "lmatrix.h".}

proc transpose*(a: LMatrix4f): LMatrix4f {.importcpp: "transpose(#)", header: "lmatrix.h".}

proc invert*(a: LMatrix3d): LMatrix3d {.importcpp: "invert(#)", header: "lmatrix.h".}

proc invert*(a: LMatrix3f): LMatrix3f {.importcpp: "invert(#)", header: "lmatrix.h".}

proc invert*(a: LMatrix4d): LMatrix4d {.importcpp: "invert(#)", header: "lmatrix.h".}

proc invert*(a: LMatrix4f): LMatrix4f {.importcpp: "invert(#)", header: "lmatrix.h".}

proc invert*(a: LQuaterniond): LQuaterniond {.importcpp: "invert(#)", header: "lmatrix.h".}

proc invert*(a: LQuaternionf): LQuaternionf {.importcpp: "invert(#)", header: "lmatrix.h".}

proc initLMatrix4f*(): LMatrix4f {.importcpp: "LMatrix4f()".}

proc initLMatrix4f*(upper3: LMatrix3f): LMatrix4f {.importcpp: "LMatrix4f(#)".}

proc initLMatrix4f*(upper3: LMatrix3f, trans: LVecBase3f): LMatrix4f {.importcpp: "LMatrix4f(#, (LVecBase3f const &)(#))".}

proc initLMatrix4f*(other: LMatrix4f): LMatrix4f {.importcpp: "LMatrix4f(#)".}

proc initLMatrix4f*(param0: LVecBase4f, param1: LVecBase4f, param2: LVecBase4f, param3: LVecBase4f): LMatrix4f {.importcpp: "LMatrix4f((LVecBase4f const &)(#), (LVecBase4f const &)(#), (LVecBase4f const &)(#), (LVecBase4f const &)(#))".}

proc initLMatrix4f*(other: UnalignedLMatrix4f): LMatrix4f {.importcpp: "LMatrix4f(#)".}

proc initLMatrix4f*(param0: float32, param1: float32, param2: float32, param3: float32, param4: float32, param5: float32, param6: float32, param7: float32, param8: float32, param9: float32, param10: float32, param11: float32, param12: float32, param13: float32, param14: float32, param15: float32): LMatrix4f {.importcpp: "LMatrix4f(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

func len*(_: typedesc[LMatrix4f] or LMatrix4f): int {.importcpp: "LMatrix4f::size()", header: "lmatrix.h".}

proc identMat*(_: typedesc[LMatrix4f]): LMatrix4f {.importcpp: "LMatrix4f::ident_mat()", header: "lmatrix.h".}

proc onesMat*(_: typedesc[LMatrix4f]): LMatrix4f {.importcpp: "LMatrix4f::ones_mat()", header: "lmatrix.h".}

proc zerosMat*(_: typedesc[LMatrix4f]): LMatrix4f {.importcpp: "LMatrix4f::zeros_mat()", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix4f], trans: LVecBase3f): LMatrix4f {.importcpp: "#LMatrix4f::translate_mat((LVecBase3f const &)(#))", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix4f], tx: float32, ty: float32, tz: float32): LMatrix4f {.importcpp: "#LMatrix4f::translate_mat(#, #, #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix4f], angle: float32, axis: LVecBase3f, cs: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::rotate_mat(#, (LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix4f], angle: float32, axis: LVecBase3f): LMatrix4f {.importcpp: "#LMatrix4f::rotate_mat(#, (LVecBase3f const &)(#))", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix4f], angle: float32, axis: LVecBase3f, cs: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::rotate_mat_normaxis(#, (LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix4f], angle: float32, axis: LVecBase3f): LMatrix4f {.importcpp: "#LMatrix4f::rotate_mat_normaxis(#, (LVecBase3f const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix4f], scale: LVecBase3f): LMatrix4f {.importcpp: "#LMatrix4f::scale_mat((LVecBase3f const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix4f], scale: float32): LMatrix4f {.importcpp: "#LMatrix4f::scale_mat(#)", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix4f], sx: float32, sy: float32, sz: float32): LMatrix4f {.importcpp: "#LMatrix4f::scale_mat(#, #, #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4f], shear: LVecBase3f, cs: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::shear_mat((LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4f], shear: LVecBase3f): LMatrix4f {.importcpp: "#LMatrix4f::shear_mat((LVecBase3f const &)(#))", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4f], shxy: float32, shxz: float32, shyz: float32, cs: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::shear_mat(#, #, #, #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4f], shxy: float32, shxz: float32, shyz: float32): LMatrix4f {.importcpp: "#LMatrix4f::shear_mat(#, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4f], scale: LVecBase3f, shear: LVecBase3f, cs: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::scale_shear_mat((LVecBase3f const &)(#), (LVecBase3f const &)(#), #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4f], scale: LVecBase3f, shear: LVecBase3f): LMatrix4f {.importcpp: "#LMatrix4f::scale_shear_mat((LVecBase3f const &)(#), (LVecBase3f const &)(#))", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4f], sx: float32, sy: float32, sz: float32, shxy: float32, shxz: float32, shyz: float32, cs: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::scale_shear_mat(#, #, #, #, #, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4f], sx: float32, sy: float32, sz: float32, shxy: float32, shxz: float32, shyz: float32): LMatrix4f {.importcpp: "#LMatrix4f::scale_shear_mat(#, #, #, #, #, #)", header: "lmatrix.h".}

proc yToZUpMat*(_: typedesc[LMatrix4f]): LMatrix4f {.importcpp: "LMatrix4f::y_to_z_up_mat()", header: "lmatrix.h".}

proc zToYUpMat*(_: typedesc[LMatrix4f]): LMatrix4f {.importcpp: "LMatrix4f::z_to_y_up_mat()", header: "lmatrix.h".}

proc convertMat*(_: typedesc[LMatrix4f], `from`: CoordinateSystem, to: CoordinateSystem): LMatrix4f {.importcpp: "#LMatrix4f::convert_mat(#, #)", header: "lmatrix.h".}

proc getClassType*(_: typedesc[LMatrix4f]): TypeHandle {.importcpp: "LMatrix4f::get_class_type()", header: "lmatrix.h".}

proc initUnalignedLMatrix4f*(): UnalignedLMatrix4f {.importcpp: "UnalignedLMatrix4f()".}

proc initUnalignedLMatrix4f*(copy: LMatrix4f): UnalignedLMatrix4f {.importcpp: "UnalignedLMatrix4f(#)".}

proc initUnalignedLMatrix4f*(copy: UnalignedLMatrix4f): UnalignedLMatrix4f {.importcpp: "UnalignedLMatrix4f(#)".}

proc initUnalignedLMatrix4f*(e00: float32, e01: float32, e02: float32, e03: float32, e10: float32, e11: float32, e12: float32, e13: float32, e20: float32, e21: float32, e22: float32, e23: float32, e30: float32, e31: float32, e32: float32, e33: float32): UnalignedLMatrix4f {.importcpp: "UnalignedLMatrix4f(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc getClassType*(_: typedesc[UnalignedLMatrix4f]): TypeHandle {.importcpp: "UnalignedLMatrix4f::get_class_type()", header: "lmatrix.h".}

proc initLMatrix3d*(): LMatrix3d {.importcpp: "LMatrix3d()".}

proc initLMatrix3d*(other: LMatrix3d): LMatrix3d {.importcpp: "LMatrix3d(#)".}

proc initLMatrix3d*(param0: LVecBase3d, param1: LVecBase3d, param2: LVecBase3d): LMatrix3d {.importcpp: "LMatrix3d((LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#))".}

proc initLMatrix3d*(param0: float64, param1: float64, param2: float64, param3: float64, param4: float64, param5: float64, param6: float64, param7: float64, param8: float64): LMatrix3d {.importcpp: "LMatrix3d(#, #, #, #, #, #, #, #, #)".}

func len*(_: typedesc[LMatrix3d] or LMatrix3d): int {.importcpp: "LMatrix3d::size()", header: "lmatrix.h".}

proc identMat*(_: typedesc[LMatrix3d]): LMatrix3d {.importcpp: "LMatrix3d::ident_mat()", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix3d], trans: LVecBase2d): LMatrix3d {.importcpp: "#LMatrix3d::translate_mat((LVecBase2d const &)(#))", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix3d], tx: float64, ty: float64): LMatrix3d {.importcpp: "#LMatrix3d::translate_mat(#, #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix3d], angle: float64): LMatrix3d {.importcpp: "#LMatrix3d::rotate_mat(#)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix3d], angle: float64, axis: LVecBase3d, cs: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::rotate_mat(#, (LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix3d], angle: float64, axis: LVecBase3d): LMatrix3d {.importcpp: "#LMatrix3d::rotate_mat(#, (LVecBase3d const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3d], scale: LVecBase2d): LMatrix3d {.importcpp: "#LMatrix3d::scale_mat((LVecBase2d const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3d], scale: LVecBase3d): LMatrix3d {.importcpp: "#LMatrix3d::scale_mat((LVecBase3d const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3d], sx: float64, sy: float64): LMatrix3d {.importcpp: "#LMatrix3d::scale_mat(#, #)", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix3d], sx: float64, sy: float64, sz: float64): LMatrix3d {.importcpp: "#LMatrix3d::scale_mat(#, #, #)", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix3d], angle: float64, axis: LVecBase3d, cs: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::rotate_mat_normaxis(#, (LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix3d], angle: float64, axis: LVecBase3d): LMatrix3d {.importcpp: "#LMatrix3d::rotate_mat_normaxis(#, (LVecBase3d const &)(#))", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3d], shear: LVecBase3d, cs: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::shear_mat((LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3d], shear: LVecBase3d): LMatrix3d {.importcpp: "#LMatrix3d::shear_mat((LVecBase3d const &)(#))", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3d], shxy: float64, shxz: float64, shyz: float64, cs: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::shear_mat(#, #, #, #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix3d], shxy: float64, shxz: float64, shyz: float64): LMatrix3d {.importcpp: "#LMatrix3d::shear_mat(#, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3d], scale: LVecBase3d, shear: LVecBase3d, cs: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::scale_shear_mat((LVecBase3d const &)(#), (LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3d], scale: LVecBase3d, shear: LVecBase3d): LMatrix3d {.importcpp: "#LMatrix3d::scale_shear_mat((LVecBase3d const &)(#), (LVecBase3d const &)(#))", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3d], sx: float64, sy: float64, sz: float64, shxy: float64, shxz: float64, shyz: float64, cs: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::scale_shear_mat(#, #, #, #, #, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix3d], sx: float64, sy: float64, sz: float64, shxy: float64, shxz: float64, shyz: float64): LMatrix3d {.importcpp: "#LMatrix3d::scale_shear_mat(#, #, #, #, #, #)", header: "lmatrix.h".}

proc convertMat*(_: typedesc[LMatrix3d], `from`: CoordinateSystem, to: CoordinateSystem): LMatrix3d {.importcpp: "#LMatrix3d::convert_mat(#, #)", header: "lmatrix.h".}

proc getClassType*(_: typedesc[LMatrix3d]): TypeHandle {.importcpp: "LMatrix3d::get_class_type()", header: "lmatrix.h".}

proc initLMatrix4d*(): LMatrix4d {.importcpp: "LMatrix4d()".}

proc initLMatrix4d*(upper3: LMatrix3d): LMatrix4d {.importcpp: "LMatrix4d(#)".}

proc initLMatrix4d*(upper3: LMatrix3d, trans: LVecBase3d): LMatrix4d {.importcpp: "LMatrix4d(#, (LVecBase3d const &)(#))".}

proc initLMatrix4d*(other: LMatrix4d): LMatrix4d {.importcpp: "LMatrix4d(#)".}

proc initLMatrix4d*(param0: LVecBase4d, param1: LVecBase4d, param2: LVecBase4d, param3: LVecBase4d): LMatrix4d {.importcpp: "LMatrix4d((LVecBase4d const &)(#), (LVecBase4d const &)(#), (LVecBase4d const &)(#), (LVecBase4d const &)(#))".}

proc initLMatrix4d*(other: UnalignedLMatrix4d): LMatrix4d {.importcpp: "LMatrix4d(#)".}

proc initLMatrix4d*(param0: float64, param1: float64, param2: float64, param3: float64, param4: float64, param5: float64, param6: float64, param7: float64, param8: float64, param9: float64, param10: float64, param11: float64, param12: float64, param13: float64, param14: float64, param15: float64): LMatrix4d {.importcpp: "LMatrix4d(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

func len*(_: typedesc[LMatrix4d] or LMatrix4d): int {.importcpp: "LMatrix4d::size()", header: "lmatrix.h".}

proc identMat*(_: typedesc[LMatrix4d]): LMatrix4d {.importcpp: "LMatrix4d::ident_mat()", header: "lmatrix.h".}

proc onesMat*(_: typedesc[LMatrix4d]): LMatrix4d {.importcpp: "LMatrix4d::ones_mat()", header: "lmatrix.h".}

proc zerosMat*(_: typedesc[LMatrix4d]): LMatrix4d {.importcpp: "LMatrix4d::zeros_mat()", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix4d], trans: LVecBase3d): LMatrix4d {.importcpp: "#LMatrix4d::translate_mat((LVecBase3d const &)(#))", header: "lmatrix.h".}

proc translateMat*(_: typedesc[LMatrix4d], tx: float64, ty: float64, tz: float64): LMatrix4d {.importcpp: "#LMatrix4d::translate_mat(#, #, #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix4d], angle: float64, axis: LVecBase3d, cs: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::rotate_mat(#, (LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc rotateMat*(_: typedesc[LMatrix4d], angle: float64, axis: LVecBase3d): LMatrix4d {.importcpp: "#LMatrix4d::rotate_mat(#, (LVecBase3d const &)(#))", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix4d], angle: float64, axis: LVecBase3d, cs: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::rotate_mat_normaxis(#, (LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc rotateMatNormaxis*(_: typedesc[LMatrix4d], angle: float64, axis: LVecBase3d): LMatrix4d {.importcpp: "#LMatrix4d::rotate_mat_normaxis(#, (LVecBase3d const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix4d], scale: LVecBase3d): LMatrix4d {.importcpp: "#LMatrix4d::scale_mat((LVecBase3d const &)(#))", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix4d], scale: float64): LMatrix4d {.importcpp: "#LMatrix4d::scale_mat(#)", header: "lmatrix.h".}

proc scaleMat*(_: typedesc[LMatrix4d], sx: float64, sy: float64, sz: float64): LMatrix4d {.importcpp: "#LMatrix4d::scale_mat(#, #, #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4d], shear: LVecBase3d, cs: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::shear_mat((LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4d], shear: LVecBase3d): LMatrix4d {.importcpp: "#LMatrix4d::shear_mat((LVecBase3d const &)(#))", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4d], shxy: float64, shxz: float64, shyz: float64, cs: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::shear_mat(#, #, #, #)", header: "lmatrix.h".}

proc shearMat*(_: typedesc[LMatrix4d], shxy: float64, shxz: float64, shyz: float64): LMatrix4d {.importcpp: "#LMatrix4d::shear_mat(#, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4d], scale: LVecBase3d, shear: LVecBase3d, cs: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::scale_shear_mat((LVecBase3d const &)(#), (LVecBase3d const &)(#), #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4d], scale: LVecBase3d, shear: LVecBase3d): LMatrix4d {.importcpp: "#LMatrix4d::scale_shear_mat((LVecBase3d const &)(#), (LVecBase3d const &)(#))", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4d], sx: float64, sy: float64, sz: float64, shxy: float64, shxz: float64, shyz: float64, cs: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::scale_shear_mat(#, #, #, #, #, #, #)", header: "lmatrix.h".}

proc scaleShearMat*(_: typedesc[LMatrix4d], sx: float64, sy: float64, sz: float64, shxy: float64, shxz: float64, shyz: float64): LMatrix4d {.importcpp: "#LMatrix4d::scale_shear_mat(#, #, #, #, #, #)", header: "lmatrix.h".}

proc yToZUpMat*(_: typedesc[LMatrix4d]): LMatrix4d {.importcpp: "LMatrix4d::y_to_z_up_mat()", header: "lmatrix.h".}

proc zToYUpMat*(_: typedesc[LMatrix4d]): LMatrix4d {.importcpp: "LMatrix4d::z_to_y_up_mat()", header: "lmatrix.h".}

proc convertMat*(_: typedesc[LMatrix4d], `from`: CoordinateSystem, to: CoordinateSystem): LMatrix4d {.importcpp: "#LMatrix4d::convert_mat(#, #)", header: "lmatrix.h".}

proc getClassType*(_: typedesc[LMatrix4d]): TypeHandle {.importcpp: "LMatrix4d::get_class_type()", header: "lmatrix.h".}

proc initUnalignedLMatrix4d*(): UnalignedLMatrix4d {.importcpp: "UnalignedLMatrix4d()".}

proc initUnalignedLMatrix4d*(copy: LMatrix4d): UnalignedLMatrix4d {.importcpp: "UnalignedLMatrix4d(#)".}

proc initUnalignedLMatrix4d*(copy: UnalignedLMatrix4d): UnalignedLMatrix4d {.importcpp: "UnalignedLMatrix4d(#)".}

proc initUnalignedLMatrix4d*(e00: float64, e01: float64, e02: float64, e03: float64, e10: float64, e11: float64, e12: float64, e13: float64, e20: float64, e21: float64, e22: float64, e23: float64, e30: float64, e31: float64, e32: float64, e33: float64): UnalignedLMatrix4d {.importcpp: "UnalignedLMatrix4d(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc getClassType*(_: typedesc[UnalignedLMatrix4d]): TypeHandle {.importcpp: "UnalignedLMatrix4d::get_class_type()", header: "lmatrix.h".}

proc `*`*(m: LMatrix3d, q: LQuaterniond): LMatrix3d {.importcpp: "operator *(#, #)".}

proc `*`*(m: LMatrix3f, q: LQuaternionf): LMatrix3f {.importcpp: "operator *(#, #)".}

proc `*`*(m: LMatrix4d, q: LQuaterniond): LMatrix4d {.importcpp: "operator *(#, #)".}

proc `*`*(m: LMatrix4f, q: LQuaternionf): LMatrix4f {.importcpp: "operator *(#, #)".}

proc `*`*(v: LPoint2d, m: LMatrix3d): LPoint2d {.importcpp: "operator *((LPoint2d const &)(#), #)".}

proc `*`*(v: LPoint2f, m: LMatrix3f): LPoint2f {.importcpp: "operator *((LPoint2f const &)(#), #)".}

proc `*`*(v: LPoint3d, m: LMatrix3d): LPoint3d {.importcpp: "operator *((LPoint3d const &)(#), #)".}

proc `*`*(v: LPoint3d, m: LMatrix4d): LPoint3d {.importcpp: "operator *((LPoint3d const &)(#), #)".}

proc `*`*(v: LPoint3f, m: LMatrix3f): LPoint3f {.importcpp: "operator *((LPoint3f const &)(#), #)".}

proc `*`*(v: LPoint3f, m: LMatrix4f): LPoint3f {.importcpp: "operator *((LPoint3f const &)(#), #)".}

proc `*`*(v: LPoint4d, m: LMatrix4d): LPoint4d {.importcpp: "operator *((LPoint4d const &)(#), #)".}

proc `*`*(v: LPoint4f, m: LMatrix4f): LPoint4f {.importcpp: "operator *((LPoint4f const &)(#), #)".}

proc `*`*(v: LVecBase3d, m: LMatrix3d): LVecBase3d {.importcpp: "operator *((LVecBase3d const &)(#), #)".}

proc `*`*(v: LVecBase3f, m: LMatrix3f): LVecBase3f {.importcpp: "operator *((LVecBase3f const &)(#), #)".}

proc `*`*(v: LVecBase4d, m: LMatrix4d): LVecBase4d {.importcpp: "operator *((LVecBase4d const &)(#), #)".}

proc `*`*(v: LVecBase4f, m: LMatrix4f): LVecBase4f {.importcpp: "operator *((LVecBase4f const &)(#), #)".}

proc `*`*(v: LVector2d, m: LMatrix3d): LVector2d {.importcpp: "operator *((LVector2d const &)(#), #)".}

proc `*`*(v: LVector2f, m: LMatrix3f): LVector2f {.importcpp: "operator *((LVector2f const &)(#), #)".}

proc `*`*(v: LVector3d, m: LMatrix3d): LVector3d {.importcpp: "operator *((LVector3d const &)(#), #)".}

proc `*`*(v: LVector3d, m: LMatrix4d): LVector3d {.importcpp: "operator *((LVector3d const &)(#), #)".}

proc `*`*(v: LVector3f, m: LMatrix3f): LVector3f {.importcpp: "operator *((LVector3f const &)(#), #)".}

proc `*`*(v: LVector3f, m: LMatrix4f): LVector3f {.importcpp: "operator *((LVector3f const &)(#), #)".}

proc `*`*(v: LVector4d, m: LMatrix4d): LVector4d {.importcpp: "operator *((LVector4d const &)(#), #)".}

proc `*`*(v: LVector4f, m: LMatrix4f): LVector4f {.importcpp: "operator *((LVector4f const &)(#), #)".}

proc `*=`*(v: LPoint2d, m: LMatrix3d) {.importcpp: "operator *=((LPoint2d &)(#), #)".}

proc `*=`*(v: LPoint2f, m: LMatrix3f) {.importcpp: "operator *=((LPoint2f &)(#), #)".}

proc `*=`*(v: LPoint3d, m: LMatrix3d) {.importcpp: "operator *=((LPoint3d &)(#), #)".}

proc `*=`*(v: LPoint3d, m: LMatrix4d) {.importcpp: "operator *=((LPoint3d &)(#), #)".}

proc `*=`*(v: LPoint3f, m: LMatrix3f) {.importcpp: "operator *=((LPoint3f &)(#), #)".}

proc `*=`*(v: LPoint3f, m: LMatrix4f) {.importcpp: "operator *=((LPoint3f &)(#), #)".}

proc `*=`*(v: LVecBase3d, m: LMatrix3d) {.importcpp: "operator *=((LVecBase3d &)(#), #)".}

proc `*=`*(v: LVecBase3f, m: LMatrix3f) {.importcpp: "operator *=((LVecBase3f &)(#), #)".}

proc `*=`*(v: LVecBase4d, m: LMatrix4d) {.importcpp: "operator *=((LVecBase4d &)(#), #)".}

proc `*=`*(v: LVecBase4f, m: LMatrix4f) {.importcpp: "operator *=((LVecBase4f &)(#), #)".}

proc `*=`*(v: LVector2d, m: LMatrix3d) {.importcpp: "operator *=((LVector2d &)(#), #)".}

proc `*=`*(v: LVector2f, m: LMatrix3f) {.importcpp: "operator *=((LVector2f &)(#), #)".}

proc `*=`*(v: LVector3d, m: LMatrix3d) {.importcpp: "operator *=((LVector3d &)(#), #)".}

proc `*=`*(v: LVector3d, m: LMatrix4d) {.importcpp: "operator *=((LVector3d &)(#), #)".}

proc `*=`*(v: LVector3f, m: LMatrix3f) {.importcpp: "operator *=((LVector3f &)(#), #)".}

proc `*=`*(v: LVector3f, m: LMatrix4f) {.importcpp: "operator *=((LVector3f &)(#), #)".}

proc genericWriteDatagram*(dest: Datagram, value: LMatrix3d) {.importcpp: "generic_write_datagram(#, #)", header: "datagramIterator.h".}

proc genericWriteDatagram*(dest: Datagram, value: LMatrix3f) {.importcpp: "generic_write_datagram(#, #)", header: "datagramIterator.h".}

proc genericWriteDatagram*(dest: Datagram, value: LMatrix4d) {.importcpp: "generic_write_datagram(#, #)", header: "datagramIterator.h".}

proc genericWriteDatagram*(dest: Datagram, value: LMatrix4f) {.importcpp: "generic_write_datagram(#, #)", header: "datagramIterator.h".}

proc genericReadDatagram*(result: LMatrix3d, source: DatagramIterator) {.importcpp: "generic_read_datagram(#, #)", header: "datagramIterator.h".}

proc genericReadDatagram*(result: LMatrix3f, source: DatagramIterator) {.importcpp: "generic_read_datagram(#, #)", header: "datagramIterator.h".}

proc genericReadDatagram*(result: LMatrix4d, source: DatagramIterator) {.importcpp: "generic_read_datagram(#, #)", header: "datagramIterator.h".}

proc genericReadDatagram*(result: LMatrix4f, source: DatagramIterator) {.importcpp: "generic_read_datagram(#, #)", header: "datagramIterator.h".}

proc composeMatrix*(mat: LMatrix3d, scale: LVecBase3d, hpr: LVecBase3d, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3d, scale: LVecBase3d, hpr: LVecBase3d) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3f, scale: LVecBase3f, hpr: LVecBase3f, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3f, scale: LVecBase3f, hpr: LVecBase3f) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix3f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4d, scale: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4d, scale: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d) {.importcpp: "compose_matrix(#, (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4f, scale: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4f, scale: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#))", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f, cs: CoordinateSystem) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#), #)", header: "compose_matrix.h".}

proc composeMatrix*(mat: LMatrix4f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f) {.importcpp: "compose_matrix(#, (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3d, scale: LVecBase3d, hpr: LVecBase3d, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3d, scale: LVecBase3d, hpr: LVecBase3d): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3f, scale: LVecBase3f, hpr: LVecBase3f, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3f, scale: LVecBase3f, hpr: LVecBase3f): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix3f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4d, scale: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4d, scale: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, translate: LVecBase3d): bool {.importcpp: "decompose_matrix(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4f, scale: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4f, scale: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#))", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrix*(mat: LMatrix4f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, translate: LVecBase3f): bool {.importcpp: "decompose_matrix(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#))", header: "compose_matrix.h".}

proc decomposeMatrixOldHpr*(mat: LMatrix3d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix_old_hpr(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrixOldHpr*(mat: LMatrix3d, scale: LVecBase3d, shear: LVecBase3d, hpr: LVecBase3d): bool {.importcpp: "decompose_matrix_old_hpr(#, (LVecBase3d &)(#), (LVecBase3d &)(#), (LVecBase3d &)(#))", header: "compose_matrix.h".}

proc decomposeMatrixOldHpr*(mat: LMatrix3f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f, cs: CoordinateSystem): bool {.importcpp: "decompose_matrix_old_hpr(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#), #)", header: "compose_matrix.h".}

proc decomposeMatrixOldHpr*(mat: LMatrix3f, scale: LVecBase3f, shear: LVecBase3f, hpr: LVecBase3f): bool {.importcpp: "decompose_matrix_old_hpr(#, (LVecBase3f &)(#), (LVecBase3f &)(#), (LVecBase3f &)(#))", header: "compose_matrix.h".}

proc oldToNewHpr*(oldHpr: LVecBase3d): LVecBase3d {.importcpp: "old_to_new_hpr((LVecBase3d const &)(#))", header: "compose_matrix.h".}

proc oldToNewHpr*(oldHpr: LVecBase3f): LVecBase3f {.importcpp: "old_to_new_hpr((LVecBase3f const &)(#))", header: "compose_matrix.h".}

proc initLQuaternionf*(): LQuaternionf {.importcpp: "LQuaternionf()".}

proc initLQuaternionf*(param0: LQuaternionf): LQuaternionf {.importcpp: "LQuaternionf(#)".}

proc initLQuaternionf*(copy: LVecBase4f): LQuaternionf {.importcpp: "LQuaternionf((LVecBase4f const &)(#))".}

proc initLQuaternionf*(r: float32, copy: LVecBase3f): LQuaternionf {.importcpp: "LQuaternionf(#, (LVecBase3f const &)(#))".}

proc initLQuaternionf*(r: float32, i: float32, j: float32, k: float32): LQuaternionf {.importcpp: "LQuaternionf(#, #, #, #)".}

proc pureImaginary*(_: typedesc[LQuaternionf], v: LVector3f): LQuaternionf {.importcpp: "#LQuaternionf::pure_imaginary((LVector3f const &)(#))", header: "lquaternion.h".}

proc identQuat*(_: typedesc[LQuaternionf]): LQuaternionf {.importcpp: "LQuaternionf::ident_quat()", header: "lquaternion.h".}

proc getClassType*(_: typedesc[LQuaternionf]): TypeHandle {.importcpp: "LQuaternionf::get_class_type()", header: "lquaternion.h".}

proc initLQuaterniond*(): LQuaterniond {.importcpp: "LQuaterniond()".}

proc initLQuaterniond*(param0: LQuaterniond): LQuaterniond {.importcpp: "LQuaterniond(#)".}

proc initLQuaterniond*(copy: LVecBase4d): LQuaterniond {.importcpp: "LQuaterniond((LVecBase4d const &)(#))".}

proc initLQuaterniond*(r: float64, copy: LVecBase3d): LQuaterniond {.importcpp: "LQuaterniond(#, (LVecBase3d const &)(#))".}

proc initLQuaterniond*(r: float64, i: float64, j: float64, k: float64): LQuaterniond {.importcpp: "LQuaterniond(#, #, #, #)".}

proc pureImaginary*(_: typedesc[LQuaterniond], v: LVector3d): LQuaterniond {.importcpp: "#LQuaterniond::pure_imaginary((LVector3d const &)(#))", header: "lquaternion.h".}

proc identQuat*(_: typedesc[LQuaterniond]): LQuaterniond {.importcpp: "LQuaterniond::ident_quat()", header: "lquaternion.h".}

proc getClassType*(_: typedesc[LQuaterniond]): TypeHandle {.importcpp: "LQuaterniond::get_class_type()", header: "lquaternion.h".}

proc initLRotationf*(): LRotationf {.importcpp: "LRotationf()".}

proc initLRotationf*(m: LMatrix3f): LRotationf {.importcpp: "LRotationf(#)".}

proc initLRotationf*(m: LMatrix4f): LRotationf {.importcpp: "LRotationf(#)".}

proc initLRotationf*(c: LQuaternionf): LRotationf {.importcpp: "LRotationf(#)".}

proc initLRotationf*(param0: LRotationf): LRotationf {.importcpp: "LRotationf(#)".}

proc initLRotationf*(copy: LVecBase4f): LRotationf {.importcpp: "LRotationf((LVecBase4f const &)(#))".}

proc initLRotationf*(axis: LVector3f, angle: float32): LRotationf {.importcpp: "LRotationf((LVector3f const &)(#), #)".}

proc initLRotationf*(h: float32, p: float32, r: float32): LRotationf {.importcpp: "LRotationf(#, #, #)".}

proc initLRotationf*(r: float32, i: float32, j: float32, k: float32): LRotationf {.importcpp: "LRotationf(#, #, #, #)".}

proc getClassType*(_: typedesc[LRotationf]): TypeHandle {.importcpp: "LRotationf::get_class_type()", header: "lrotation.h".}

proc initLRotationd*(): LRotationd {.importcpp: "LRotationd()".}

proc initLRotationd*(m: LMatrix3d): LRotationd {.importcpp: "LRotationd(#)".}

proc initLRotationd*(m: LMatrix4d): LRotationd {.importcpp: "LRotationd(#)".}

proc initLRotationd*(c: LQuaterniond): LRotationd {.importcpp: "LRotationd(#)".}

proc initLRotationd*(param0: LRotationd): LRotationd {.importcpp: "LRotationd(#)".}

proc initLRotationd*(copy: LVecBase4d): LRotationd {.importcpp: "LRotationd((LVecBase4d const &)(#))".}

proc initLRotationd*(axis: LVector3d, angle: float64): LRotationd {.importcpp: "LRotationd((LVector3d const &)(#), #)".}

proc initLRotationd*(h: float64, p: float64, r: float64): LRotationd {.importcpp: "LRotationd(#, #, #)".}

proc initLRotationd*(r: float64, i: float64, j: float64, k: float64): LRotationd {.importcpp: "LRotationd(#, #, #, #)".}

proc getClassType*(_: typedesc[LRotationd]): TypeHandle {.importcpp: "LRotationd::get_class_type()", header: "lrotation.h".}

proc initLOrientationf*(): LOrientationf {.importcpp: "LOrientationf()".}

proc initLOrientationf*(m: LMatrix3f): LOrientationf {.importcpp: "LOrientationf(#)".}

proc initLOrientationf*(m: LMatrix4f): LOrientationf {.importcpp: "LOrientationf(#)".}

proc initLOrientationf*(param0: LOrientationf): LOrientationf {.importcpp: "LOrientationf(#)".}

proc initLOrientationf*(c: LQuaternionf): LOrientationf {.importcpp: "LOrientationf(#)".}

proc initLOrientationf*(pointAt: LVector3f, twist: float32): LOrientationf {.importcpp: "LOrientationf((LVector3f const &)(#), #)".}

proc initLOrientationf*(r: float32, i: float32, j: float32, k: float32): LOrientationf {.importcpp: "LOrientationf(#, #, #, #)".}

proc getClassType*(_: typedesc[LOrientationf]): TypeHandle {.importcpp: "LOrientationf::get_class_type()", header: "lorientation.h".}

proc initLOrientationd*(): LOrientationd {.importcpp: "LOrientationd()".}

proc initLOrientationd*(m: LMatrix3d): LOrientationd {.importcpp: "LOrientationd(#)".}

proc initLOrientationd*(m: LMatrix4d): LOrientationd {.importcpp: "LOrientationd(#)".}

proc initLOrientationd*(param0: LOrientationd): LOrientationd {.importcpp: "LOrientationd(#)".}

proc initLOrientationd*(c: LQuaterniond): LOrientationd {.importcpp: "LOrientationd(#)".}

proc initLOrientationd*(pointAt: LVector3d, twist: float64): LOrientationd {.importcpp: "LOrientationd((LVector3d const &)(#), #)".}

proc initLOrientationd*(r: float64, i: float64, j: float64, k: float64): LOrientationd {.importcpp: "LOrientationd(#, #, #, #)".}

proc getClassType*(_: typedesc[LOrientationd]): TypeHandle {.importcpp: "LOrientationd::get_class_type()", header: "lorientation.h".}

proc initConfigVariableColor*(param0: ConfigVariableColor): ConfigVariableColor {.importcpp: "ConfigVariableColor(#)".}

proc initConfigVariableColor*(name: string): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableColor*(name: string, defaultValue: LColor, description: string, flags: int): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#), #, nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableColor*(name: string, defaultValue: LColor, description: string): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableColor*(name: string, defaultValue: LColor): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableColor*(name: string, defaultValue: string, description: string, flags: int): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc initConfigVariableColor*(name: string, defaultValue: string, description: string): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc initConfigVariableColor*(name: string, defaultValue: string): ConfigVariableColor {.importcpp: "ConfigVariableColor(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[BoundingVolume]): TypeHandle {.importcpp: "BoundingVolume::get_class_type()", header: "boundingVolume.h".}

proc getClassType*(_: typedesc[GeometricBoundingVolume]): TypeHandle {.importcpp: "GeometricBoundingVolume::get_class_type()", header: "geometricBoundingVolume.h".}

proc getClassType*(_: typedesc[FiniteBoundingVolume]): TypeHandle {.importcpp: "FiniteBoundingVolume::get_class_type()", header: "finiteBoundingVolume.h".}

proc initLParabolaf*(): LParabolaf {.importcpp: "LParabolaf()".}

proc initLParabolaf*(copy: LParabolaf): LParabolaf {.importcpp: "LParabolaf(#)".}

proc initLParabolaf*(a: LVecBase3f, b: LVecBase3f, c: LVecBase3f): LParabolaf {.importcpp: "LParabolaf((LVecBase3f const &)(#), (LVecBase3f const &)(#), (LVecBase3f const &)(#))".}

proc initLParabolad*(): LParabolad {.importcpp: "LParabolad()".}

proc initLParabolad*(copy: LParabolad): LParabolad {.importcpp: "LParabolad(#)".}

proc initLParabolad*(a: LVecBase3d, b: LVecBase3d, c: LVecBase3d): LParabolad {.importcpp: "LParabolad((LVecBase3d const &)(#), (LVecBase3d const &)(#), (LVecBase3d const &)(#))".}

proc initLPlanef*(): LPlanef {.importcpp: "LPlanef()".}

proc initLPlanef*(param0: LPlanef): LPlanef {.importcpp: "LPlanef(#)".}

proc initLPlanef*(a: LPoint3f, b: LPoint3f, c: LPoint3f): LPlanef {.importcpp: "LPlanef((LPoint3f const &)(#), (LPoint3f const &)(#), (LPoint3f const &)(#))".}

proc initLPlanef*(copy: LVecBase4f): LPlanef {.importcpp: "LPlanef((LVecBase4f const &)(#))".}

proc initLPlanef*(normal: LVector3f, point: LPoint3f): LPlanef {.importcpp: "LPlanef((LVector3f const &)(#), (LPoint3f const &)(#))".}

proc initLPlanef*(a: float32, b: float32, c: float32, d: float32): LPlanef {.importcpp: "LPlanef(#, #, #, #)".}

proc initLPlaned*(): LPlaned {.importcpp: "LPlaned()".}

proc initLPlaned*(param0: LPlaned): LPlaned {.importcpp: "LPlaned(#)".}

proc initLPlaned*(a: LPoint3d, b: LPoint3d, c: LPoint3d): LPlaned {.importcpp: "LPlaned((LPoint3d const &)(#), (LPoint3d const &)(#), (LPoint3d const &)(#))".}

proc initLPlaned*(copy: LVecBase4d): LPlaned {.importcpp: "LPlaned((LVecBase4d const &)(#))".}

proc initLPlaned*(normal: LVector3d, point: LPoint3d): LPlaned {.importcpp: "LPlaned((LVector3d const &)(#), (LPoint3d const &)(#))".}

proc initLPlaned*(a: float64, b: float64, c: float64, d: float64): LPlaned {.importcpp: "LPlaned(#, #, #, #)".}

proc newBoundingBox*(): BoundingBox {.importcpp: "new BoundingBox()".}

proc newBoundingBox*(min: LPoint3, max: LPoint3): BoundingBox {.importcpp: "new BoundingBox((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc getClassType*(_: typedesc[BoundingBox]): TypeHandle {.importcpp: "BoundingBox::get_class_type()", header: "boundingBox.h".}

proc initLFrustumf*(): LFrustumf {.importcpp: "LFrustumf()".}

proc initLFrustumf*(param0: LFrustumf): LFrustumf {.importcpp: "LFrustumf(#)".}

proc initLFrustumd*(): LFrustumd {.importcpp: "LFrustumd()".}

proc initLFrustumd*(param0: LFrustumd): LFrustumd {.importcpp: "LFrustumd(#)".}

proc newBoundingHexahedron*(frustum: LFrustum, isOrtho: bool, cs: CoordinateSystem): BoundingHexahedron {.importcpp: "new BoundingHexahedron(#, #, #)".}

proc newBoundingHexahedron*(frustum: LFrustum, isOrtho: bool): BoundingHexahedron {.importcpp: "new BoundingHexahedron(#, #)".}

proc newBoundingHexahedron*(fll: LPoint3, flr: LPoint3, fur: LPoint3, ful: LPoint3, nll: LPoint3, nlr: LPoint3, nur: LPoint3, nul: LPoint3): BoundingHexahedron {.importcpp: "new BoundingHexahedron((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc getClassType*(_: typedesc[BoundingHexahedron]): TypeHandle {.importcpp: "BoundingHexahedron::get_class_type()", header: "boundingHexahedron.h".}

proc newBoundingLine*(a: LPoint3, b: LPoint3): BoundingLine {.importcpp: "new BoundingLine((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc getClassType*(_: typedesc[BoundingLine]): TypeHandle {.importcpp: "BoundingLine::get_class_type()", header: "boundingLine.h".}

proc newBoundingPlane*(): BoundingPlane {.importcpp: "new BoundingPlane()".}

proc newBoundingPlane*(plane: LPlane): BoundingPlane {.importcpp: "new BoundingPlane(#)".}

proc getClassType*(_: typedesc[BoundingPlane]): TypeHandle {.importcpp: "BoundingPlane::get_class_type()", header: "boundingPlane.h".}

proc newBoundingSphere*(): BoundingSphere {.importcpp: "new BoundingSphere()".}

proc newBoundingSphere*(center: LPoint3, radius: float): BoundingSphere {.importcpp: "new BoundingSphere((LPoint3 const &)(#), #)".}

proc getClassType*(_: typedesc[BoundingSphere]): TypeHandle {.importcpp: "BoundingSphere::get_class_type()", header: "boundingSphere.h".}

proc newIntersectionBoundingVolume*(): IntersectionBoundingVolume {.importcpp: "new IntersectionBoundingVolume()".}

proc getClassType*(_: typedesc[IntersectionBoundingVolume]): TypeHandle {.importcpp: "IntersectionBoundingVolume::get_class_type()", header: "intersectionBoundingVolume.h".}

proc headsUp*(mat: LMatrix3d, fwd: LVector3d, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3d const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix3d, fwd: LVector3d, up: LVector3d, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3d const &)(#), (LVector3d const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix3d, fwd: LVector3d, up: LVector3d) {.importcpp: "heads_up(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix3d, fwd: LVector3d) {.importcpp: "heads_up(#, (LVector3d const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix3f, fwd: LVector3f, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3f const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix3f, fwd: LVector3f, up: LVector3f, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3f const &)(#), (LVector3f const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix3f, fwd: LVector3f, up: LVector3f) {.importcpp: "heads_up(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix3f, fwd: LVector3f) {.importcpp: "heads_up(#, (LVector3f const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix4d, fwd: LVector3d, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3d const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix4d, fwd: LVector3d, up: LVector3d, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3d const &)(#), (LVector3d const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix4d, fwd: LVector3d, up: LVector3d) {.importcpp: "heads_up(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix4d, fwd: LVector3d) {.importcpp: "heads_up(#, (LVector3d const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix4f, fwd: LVector3f, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3f const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix4f, fwd: LVector3f, up: LVector3f, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3f const &)(#), (LVector3f const &)(#), #)", header: "look_at.h".}

proc headsUp*(mat: LMatrix4f, fwd: LVector3f, up: LVector3f) {.importcpp: "heads_up(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "look_at.h".}

proc headsUp*(mat: LMatrix4f, fwd: LVector3f) {.importcpp: "heads_up(#, (LVector3f const &)(#))", header: "look_at.h".}

proc headsUp*(quat: LQuaterniond, fwd: LVector3d, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3d const &)(#), #)", header: "look_at.h".}

proc headsUp*(quat: LQuaterniond, fwd: LVector3d, up: LVector3d, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3d const &)(#), (LVector3d const &)(#), #)", header: "look_at.h".}

proc headsUp*(quat: LQuaterniond, fwd: LVector3d, up: LVector3d) {.importcpp: "heads_up(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "look_at.h".}

proc headsUp*(quat: LQuaterniond, fwd: LVector3d) {.importcpp: "heads_up(#, (LVector3d const &)(#))", header: "look_at.h".}

proc headsUp*(quat: LQuaternionf, fwd: LVector3f, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3f const &)(#), #)", header: "look_at.h".}

proc headsUp*(quat: LQuaternionf, fwd: LVector3f, up: LVector3f, cs: CoordinateSystem) {.importcpp: "heads_up(#, (LVector3f const &)(#), (LVector3f const &)(#), #)", header: "look_at.h".}

proc headsUp*(quat: LQuaternionf, fwd: LVector3f, up: LVector3f) {.importcpp: "heads_up(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "look_at.h".}

proc headsUp*(quat: LQuaternionf, fwd: LVector3f) {.importcpp: "heads_up(#, (LVector3f const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix3d, fwd: LVector3d, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3d const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix3d, fwd: LVector3d, up: LVector3d, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3d const &)(#), (LVector3d const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix3d, fwd: LVector3d, up: LVector3d) {.importcpp: "look_at(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix3d, fwd: LVector3d) {.importcpp: "look_at(#, (LVector3d const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix3f, fwd: LVector3f, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3f const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix3f, fwd: LVector3f, up: LVector3f, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3f const &)(#), (LVector3f const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix3f, fwd: LVector3f, up: LVector3f) {.importcpp: "look_at(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix3f, fwd: LVector3f) {.importcpp: "look_at(#, (LVector3f const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix4d, fwd: LVector3d, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3d const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix4d, fwd: LVector3d, up: LVector3d, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3d const &)(#), (LVector3d const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix4d, fwd: LVector3d, up: LVector3d) {.importcpp: "look_at(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix4d, fwd: LVector3d) {.importcpp: "look_at(#, (LVector3d const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix4f, fwd: LVector3f, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3f const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix4f, fwd: LVector3f, up: LVector3f, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3f const &)(#), (LVector3f const &)(#), #)", header: "look_at.h".}

proc lookAt*(mat: LMatrix4f, fwd: LVector3f, up: LVector3f) {.importcpp: "look_at(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "look_at.h".}

proc lookAt*(mat: LMatrix4f, fwd: LVector3f) {.importcpp: "look_at(#, (LVector3f const &)(#))", header: "look_at.h".}

proc lookAt*(quat: LQuaterniond, fwd: LVector3d, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3d const &)(#), #)", header: "look_at.h".}

proc lookAt*(quat: LQuaterniond, fwd: LVector3d, up: LVector3d, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3d const &)(#), (LVector3d const &)(#), #)", header: "look_at.h".}

proc lookAt*(quat: LQuaterniond, fwd: LVector3d, up: LVector3d) {.importcpp: "look_at(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "look_at.h".}

proc lookAt*(quat: LQuaterniond, fwd: LVector3d) {.importcpp: "look_at(#, (LVector3d const &)(#))", header: "look_at.h".}

proc lookAt*(quat: LQuaternionf, fwd: LVector3f, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3f const &)(#), #)", header: "look_at.h".}

proc lookAt*(quat: LQuaternionf, fwd: LVector3f, up: LVector3f, cs: CoordinateSystem) {.importcpp: "look_at(#, (LVector3f const &)(#), (LVector3f const &)(#), #)", header: "look_at.h".}

proc lookAt*(quat: LQuaternionf, fwd: LVector3f, up: LVector3f) {.importcpp: "look_at(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "look_at.h".}

proc lookAt*(quat: LQuaternionf, fwd: LVector3f) {.importcpp: "look_at(#, (LVector3f const &)(#))", header: "look_at.h".}

proc initMersenne*(param0: Mersenne): Mersenne {.importcpp: "Mersenne(#)".}

proc initMersenne*(seed: int): Mersenne {.importcpp: "Mersenne(#)".}

proc newOmniBoundingVolume*(): OmniBoundingVolume {.importcpp: "new OmniBoundingVolume()".}

proc getClassType*(_: typedesc[OmniBoundingVolume]): TypeHandle {.importcpp: "OmniBoundingVolume::get_class_type()", header: "omniBoundingVolume.h".}

proc newUnionBoundingVolume*(): UnionBoundingVolume {.importcpp: "new UnionBoundingVolume()".}

proc getClassType*(_: typedesc[UnionBoundingVolume]): TypeHandle {.importcpp: "UnionBoundingVolume::get_class_type()", header: "unionBoundingVolume.h".}

proc initRandomizer*(copy: Randomizer): Randomizer {.importcpp: "Randomizer(#)".}

proc initRandomizer*(seed: int): Randomizer {.importcpp: "Randomizer(#)".}

proc initRandomizer*(): Randomizer {.importcpp: "Randomizer()".}

proc getNextSeed*(_: typedesc[Randomizer]): int {.importcpp: "Randomizer::get_next_seed()", header: "randomizer.h".}

proc initPerlinNoise2*(): PerlinNoise2 {.importcpp: "PerlinNoise2()".}

proc initPerlinNoise2*(copy: PerlinNoise2): PerlinNoise2 {.importcpp: "PerlinNoise2(#)".}

proc initPerlinNoise2*(sx: float64, sy: float64, tableSize: int, seed: int): PerlinNoise2 {.importcpp: "PerlinNoise2(#, #, #, #)".}

proc initPerlinNoise2*(sx: float64, sy: float64, tableSize: int): PerlinNoise2 {.importcpp: "PerlinNoise2(#, #, #)".}

proc initPerlinNoise2*(sx: float64, sy: float64): PerlinNoise2 {.importcpp: "PerlinNoise2(#, #)".}

proc initPerlinNoise3*(): PerlinNoise3 {.importcpp: "PerlinNoise3()".}

proc initPerlinNoise3*(copy: PerlinNoise3): PerlinNoise3 {.importcpp: "PerlinNoise3(#)".}

proc initPerlinNoise3*(sx: float64, sy: float64, sz: float64, tableSize: int, seed: int): PerlinNoise3 {.importcpp: "PerlinNoise3(#, #, #, #, #)".}

proc initPerlinNoise3*(sx: float64, sy: float64, sz: float64, tableSize: int): PerlinNoise3 {.importcpp: "PerlinNoise3(#, #, #, #)".}

proc initPerlinNoise3*(sx: float64, sy: float64, sz: float64): PerlinNoise3 {.importcpp: "PerlinNoise3(#, #, #)".}

proc rotateTo*(mat: LMatrix3d, a: LVector3d, b: LVector3d) {.importcpp: "rotate_to(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "rotate_to.h".}

proc rotateTo*(mat: LMatrix3f, a: LVector3f, b: LVector3f) {.importcpp: "rotate_to(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "rotate_to.h".}

proc rotateTo*(mat: LMatrix4d, a: LVector3d, b: LVector3d) {.importcpp: "rotate_to(#, (LVector3d const &)(#), (LVector3d const &)(#))", header: "rotate_to.h".}

proc rotateTo*(mat: LMatrix4f, a: LVector3f, b: LVector3f) {.importcpp: "rotate_to(#, (LVector3f const &)(#), (LVector3f const &)(#))", header: "rotate_to.h".}

proc initStackedPerlinNoise2*(): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2()".}

proc initStackedPerlinNoise2*(copy: StackedPerlinNoise2): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#)".}

proc initStackedPerlinNoise2*(sx: float64, sy: float64, numLevels: int, scaleFactor: float64, ampScale: float64, tableSize: int, seed: int): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#, #, #, #, #, #, #)".}

proc initStackedPerlinNoise2*(sx: float64, sy: float64, numLevels: int, scaleFactor: float64, ampScale: float64, tableSize: int): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#, #, #, #, #, #)".}

proc initStackedPerlinNoise2*(sx: float64, sy: float64, numLevels: int, scaleFactor: float64, ampScale: float64): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#, #, #, #, #)".}

proc initStackedPerlinNoise2*(sx: float64, sy: float64, numLevels: int, scaleFactor: float64): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#, #, #, #)".}

proc initStackedPerlinNoise2*(sx: float64, sy: float64, numLevels: int): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#, #, #)".}

proc initStackedPerlinNoise2*(sx: float64, sy: float64): StackedPerlinNoise2 {.importcpp: "StackedPerlinNoise2(#, #)".}

proc initStackedPerlinNoise3*(): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3()".}

proc initStackedPerlinNoise3*(copy: StackedPerlinNoise3): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#)".}

proc initStackedPerlinNoise3*(sx: float64, sy: float64, sz: float64, numLevels: int, scaleFactor: float64, ampScale: float64, tableSize: int, seed: int): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#, #, #, #, #, #, #, #)".}

proc initStackedPerlinNoise3*(sx: float64, sy: float64, sz: float64, numLevels: int, scaleFactor: float64, ampScale: float64, tableSize: int): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#, #, #, #, #, #, #)".}

proc initStackedPerlinNoise3*(sx: float64, sy: float64, sz: float64, numLevels: int, scaleFactor: float64, ampScale: float64): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#, #, #, #, #, #)".}

proc initStackedPerlinNoise3*(sx: float64, sy: float64, sz: float64, numLevels: int, scaleFactor: float64): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#, #, #, #, #)".}

proc initStackedPerlinNoise3*(sx: float64, sy: float64, sz: float64, numLevels: int): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#, #, #, #)".}

proc initStackedPerlinNoise3*(sx: float64, sy: float64, sz: float64): StackedPerlinNoise3 {.importcpp: "StackedPerlinNoise3(#, #, #)".}

proc initTriangulator*(): Triangulator {.importcpp: "Triangulator()".}

proc initTriangulator*(param0: Triangulator): Triangulator {.importcpp: "Triangulator(#)".}

proc initTriangulator3*(): Triangulator3 {.importcpp: "Triangulator3()".}

proc initTriangulator3*(param0: Triangulator3): Triangulator3 {.importcpp: "Triangulator3(#)".}

proc getClassType*(_: typedesc[ParametricCurve]): TypeHandle {.importcpp: "ParametricCurve::get_class_type()", header: "parametricCurve.h".}

proc getClassType*(_: typedesc[CubicCurveseg]): TypeHandle {.importcpp: "CubicCurveseg::get_class_type()", header: "cubicCurveseg.h".}

proc newParametricCurveCollection*(): ParametricCurveCollection {.importcpp: "new ParametricCurveCollection()".}

proc newParametricCurveCollection*(param0: ParametricCurveCollection): ParametricCurveCollection {.importcpp: "new ParametricCurveCollection(#)".}

proc initCurveFitter*(): CurveFitter {.importcpp: "CurveFitter()".}

proc initCurveFitter*(param0: CurveFitter): CurveFitter {.importcpp: "CurveFitter(#)".}

proc getClassType*(_: typedesc[CurveFitter]): TypeHandle {.importcpp: "CurveFitter::get_class_type()", header: "curveFitter.h".}

proc newPiecewiseCurve*(): PiecewiseCurve {.importcpp: "new PiecewiseCurve()".}

proc getClassType*(_: typedesc[PiecewiseCurve]): TypeHandle {.importcpp: "PiecewiseCurve::get_class_type()", header: "piecewiseCurve.h".}

proc newHermiteCurve*(): HermiteCurve {.importcpp: "new HermiteCurve()".}

proc newHermiteCurve*(pc: ParametricCurve): HermiteCurve {.importcpp: "new HermiteCurve(#)".}

proc getClassType*(_: typedesc[HermiteCurve]): TypeHandle {.importcpp: "HermiteCurve::get_class_type()", header: "hermiteCurve.h".}

proc getClassType*(_: typedesc[NurbsCurveInterface]): TypeHandle {.importcpp: "NurbsCurveInterface::get_class_type()", header: "nurbsCurveInterface.h".}

proc newNurbsCurve*(): NurbsCurve {.importcpp: "new NurbsCurve()".}

proc newNurbsCurve*(pc: ParametricCurve): NurbsCurve {.importcpp: "new NurbsCurve(#)".}

proc getClassType*(_: typedesc[NurbsCurve]): TypeHandle {.importcpp: "NurbsCurve::get_class_type()", header: "nurbsCurve.h".}

proc newNurbsCurveResult*(param0: NurbsCurveResult): NurbsCurveResult {.importcpp: "new NurbsCurveResult(#)".}

proc newNurbsCurveEvaluator*(): NurbsCurveEvaluator {.importcpp: "new NurbsCurveEvaluator()".}

proc newNurbsCurveEvaluator*(param0: NurbsCurveEvaluator): NurbsCurveEvaluator {.importcpp: "new NurbsCurveEvaluator(#)".}

proc newNurbsSurfaceResult*(param0: NurbsSurfaceResult): NurbsSurfaceResult {.importcpp: "new NurbsSurfaceResult(#)".}

proc newNurbsSurfaceEvaluator*(): NurbsSurfaceEvaluator {.importcpp: "new NurbsSurfaceEvaluator()".}

proc newNurbsSurfaceEvaluator*(param0: NurbsSurfaceEvaluator): NurbsSurfaceEvaluator {.importcpp: "new NurbsSurfaceEvaluator(#)".}

proc newRopeNode*(name: string): RopeNode {.importcpp: "new RopeNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getVertexColorDimension*(_: typedesc[RopeNode]): int {.importcpp: "RopeNode::get_vertex_color_dimension()", header: "ropeNode.h".}

proc getVertexThicknessDimension*(_: typedesc[RopeNode]): int {.importcpp: "RopeNode::get_vertex_thickness_dimension()", header: "ropeNode.h".}

proc getClassType*(_: typedesc[RopeNode]): TypeHandle {.importcpp: "RopeNode::get_class_type()", header: "ropeNode.h".}

proc newSheetNode*(name: string): SheetNode {.importcpp: "new SheetNode(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[SheetNode]): TypeHandle {.importcpp: "SheetNode::get_class_type()", header: "sheetNode.h".}

proc initpixel*(): pixel {.importcpp: "pixel()".}

proc initpixel*(fill: int): pixel {.importcpp: "pixel(#)".}

proc initpixel*(r: int, g: int, b: int): pixel {.importcpp: "pixel(#, #, #)".}

proc initpixel*(param0: pixel): pixel {.importcpp: "pixel(#)".}

func len*(_: typedesc[pixel] or pixel): int {.importcpp: "pixel::size()", header: "pnmimage_base.h".}

proc decodeSRGBFloat*(val: float32): float32 {.importcpp: "decode_sRGB_float(#)", header: "convert_srgb.h".}

proc decodeSRGBFloat*(val: char): float32 {.importcpp: "decode_sRGB_float(#)", header: "convert_srgb.h".}

proc decodeSRGBUchar*(val: float32): char {.importcpp: "decode_sRGB_uchar(#)", header: "convert_srgb.h".}

proc decodeSRGBUchar*(val: char): char {.importcpp: "decode_sRGB_uchar(#)", header: "convert_srgb.h".}

proc encodeSRGBFloat*(val: float32): float32 {.importcpp: "encode_sRGB_float(#)", header: "convert_srgb.h".}

proc encodeSRGBFloat*(val: char): float32 {.importcpp: "encode_sRGB_float(#)", header: "convert_srgb.h".}

proc encodeSRGBUchar*(val: float32): char {.importcpp: "encode_sRGB_uchar(#)", header: "convert_srgb.h".}

proc encodeSRGBUchar*(val: char): char {.importcpp: "encode_sRGB_uchar(#)", header: "convert_srgb.h".}

proc getClassType*(_: typedesc[PNMFileType]): TypeHandle {.importcpp: "PNMFileType::get_class_type()", header: "pnmFileType.h".}

proc getGlobalPtr*(_: typedesc[PNMFileTypeRegistry]): PNMFileTypeRegistry {.importcpp: "PNMFileTypeRegistry::get_global_ptr()", header: "pnmFileTypeRegistry.h".}

proc initPNMFileTypeRegistry*(param0: PNMFileTypeRegistry): PNMFileTypeRegistry {.importcpp: "PNMFileTypeRegistry(#)".}

proc initPNMImageHeader*(): PNMImageHeader {.importcpp: "PNMImageHeader()".}

proc initPNMImageHeader*(copy: PNMImageHeader): PNMImageHeader {.importcpp: "PNMImageHeader(#)".}

proc isGrayscale*(_: typedesc[PNMImageHeader], colorType: PNMImageHeader_ColorType): bool {.importcpp: "#PNMImageHeader::is_grayscale(#)", header: "pnmImageHeader.h".}

proc hasAlpha*(_: typedesc[PNMImageHeader], colorType: PNMImageHeader_ColorType): bool {.importcpp: "#PNMImageHeader::has_alpha(#)", header: "pnmImageHeader.h".}

proc initPfmFile*(): PfmFile {.importcpp: "PfmFile()".}

proc initPfmFile*(copy: PfmFile): PfmFile {.importcpp: "PfmFile(#)".}

proc makeTransparent*(_: typedesc[PNMBrush]): PNMBrush {.importcpp: "PNMBrush::make_transparent()", header: "pnmBrush.h".}

proc makePixel*(_: typedesc[PNMBrush], color: LColorf, effect: PNMBrush_BrushEffect): PNMBrush {.importcpp: "#PNMBrush::make_pixel(#, #)", header: "pnmBrush.h".}

proc makePixel*(_: typedesc[PNMBrush], color: LColorf): PNMBrush {.importcpp: "#PNMBrush::make_pixel(#)", header: "pnmBrush.h".}

proc makeSpot*(_: typedesc[PNMBrush], color: LColorf, radius: float32, fuzzy: bool, effect: PNMBrush_BrushEffect): PNMBrush {.importcpp: "#PNMBrush::make_spot(#, #, #, #)", header: "pnmBrush.h".}

proc makeSpot*(_: typedesc[PNMBrush], color: LColorf, radius: float32, fuzzy: bool): PNMBrush {.importcpp: "#PNMBrush::make_spot(#, #, #)", header: "pnmBrush.h".}

proc makeImage*(_: typedesc[PNMBrush], image: PNMImage, xc: float32, yc: float32, effect: PNMBrush_BrushEffect): PNMBrush {.importcpp: "#PNMBrush::make_image(#, #, #, #)", header: "pnmBrush.h".}

proc makeImage*(_: typedesc[PNMBrush], image: PNMImage, xc: float32, yc: float32): PNMBrush {.importcpp: "#PNMBrush::make_image(#, #, #)", header: "pnmBrush.h".}

proc initPNMImage*(): PNMImage {.importcpp: "PNMImage()".}

proc initPNMImage*(filename: Filename, `type`: PNMFileType): PNMImage {.importcpp: "PNMImage(#, #)".}

proc initPNMImage*(filename: Filename): PNMImage {.importcpp: "PNMImage(#)".}

proc initPNMImage*(copy: PNMImage): PNMImage {.importcpp: "PNMImage(#)".}

proc initPNMImage*(xSize: int, ySize: int, numChannels: int, maxval: int, `type`: PNMFileType, colorSpace: ColorSpace): PNMImage {.importcpp: "PNMImage(#, #, #, #, #, #)".}

proc initPNMImage*(xSize: int, ySize: int, numChannels: int, maxval: int, `type`: PNMFileType): PNMImage {.importcpp: "PNMImage(#, #, #, #, #)".}

proc initPNMImage*(xSize: int, ySize: int, numChannels: int, maxval: int): PNMImage {.importcpp: "PNMImage(#, #, #, #)".}

proc initPNMImage*(xSize: int, ySize: int, numChannels: int): PNMImage {.importcpp: "PNMImage(#, #, #)".}

proc initPNMImage*(xSize: int, ySize: int): PNMImage {.importcpp: "PNMImage(#, #)".}

proc initPNMPainter*(image: PNMImage, xo: int, yo: int): PNMPainter {.importcpp: "PNMPainter(#, #, #)".}

proc initPNMPainter*(image: PNMImage, xo: int): PNMPainter {.importcpp: "PNMPainter(#, #)".}

proc initPNMPainter*(image: PNMImage): PNMPainter {.importcpp: "PNMPainter(#)".}

proc initPNMPainter*(param0: PNMPainter): PNMPainter {.importcpp: "PNMPainter(#)".}

proc getClassType*(_: typedesc[TextGlyph]): TypeHandle {.importcpp: "TextGlyph::get_class_type()", header: "textGlyph.h".}

proc getClassType*(_: typedesc[TextFont]): TypeHandle {.importcpp: "TextFont::get_class_type()", header: "textFont.h".}

proc getClassType*(_: typedesc[DynamicTextPage]): TypeHandle {.importcpp: "DynamicTextPage::get_class_type()", header: "dynamicTextPage.h".}

proc newDynamicTextPage*(param0: DynamicTextPage): DynamicTextPage {.importcpp: "new DynamicTextPage(#)".}

proc getClassType*(_: typedesc[DynamicTextGlyph]): TypeHandle {.importcpp: "DynamicTextGlyph::get_class_type()", header: "dynamicTextGlyph.h".}

proc newDynamicTextFont*(copy: DynamicTextFont): DynamicTextFont {.importcpp: "new DynamicTextFont(#)".}

proc newDynamicTextFont*(fontFilename: Filename, faceIndex: int): DynamicTextFont {.importcpp: "new DynamicTextFont(#, #)".}

proc newDynamicTextFont*(fontFilename: Filename): DynamicTextFont {.importcpp: "new DynamicTextFont(#)".}

proc newDynamicTextFont*(fontData: string, dataLength: int, faceIndex: int): DynamicTextFont {.importcpp: "new DynamicTextFont(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[DynamicTextFont]): TypeHandle {.importcpp: "DynamicTextFont::get_class_type()", header: "dynamicTextFont.h".}

proc hasFont*(_: typedesc[FontPool], filename: string): bool {.importcpp: "#FontPool::has_font(nimStringToStdString(#))", header: "fontPool.h".}

proc verifyFont*(_: typedesc[FontPool], filename: string): bool {.importcpp: "#FontPool::verify_font(nimStringToStdString(#))", header: "fontPool.h".}

proc loadFont*(_: typedesc[FontPool], filename: string): TextFont {.importcpp: "#FontPool::load_font(nimStringToStdString(#))", header: "fontPool.h".}

proc addFont*(_: typedesc[FontPool], filename: string, font: TextFont) {.importcpp: "#FontPool::add_font(nimStringToStdString(#), #)", header: "fontPool.h".}

proc releaseFont*(_: typedesc[FontPool], filename: string) {.importcpp: "#FontPool::release_font(nimStringToStdString(#))", header: "fontPool.h".}

proc releaseAllFonts*(_: typedesc[FontPool]) {.importcpp: "FontPool::release_all_fonts()", header: "fontPool.h".}

proc garbageCollect*(_: typedesc[FontPool]): int {.importcpp: "FontPool::garbage_collect()", header: "fontPool.h".}

proc listContents*(_: typedesc[FontPool], `out`: iostream | ostream) {.importcpp: "#FontPool::list_contents(#)", header: "fontPool.h".}

proc write*(_: typedesc[FontPool], `out`: iostream | ostream) {.importcpp: "#FontPool::write(#)", header: "fontPool.h".}

proc getClassType*(_: typedesc[GeomTextGlyph]): TypeHandle {.importcpp: "GeomTextGlyph::get_class_type()", header: "geomTextGlyph.h".}

proc newStaticTextFont*(fontDef: PandaNode, cs: CoordinateSystem): StaticTextFont {.importcpp: "new StaticTextFont(#, #)".}

proc newStaticTextFont*(fontDef: PandaNode): StaticTextFont {.importcpp: "new StaticTextFont(#)".}

proc getClassType*(_: typedesc[StaticTextFont]): TypeHandle {.importcpp: "StaticTextFont::get_class_type()", header: "staticTextFont.h".}

proc newTextProperties*(): TextProperties {.importcpp: "new TextProperties()".}

proc newTextProperties*(copy: TextNode | TextProperties): TextProperties {.importcpp: "new TextProperties(#)".}

proc setDefaultFont*(_: typedesc[TextProperties], param0: TextFont) {.importcpp: "#TextProperties::set_default_font(#)", header: "textProperties.h".}

proc getDefaultFont*(_: typedesc[TextProperties]): TextFont {.importcpp: "TextProperties::get_default_font()", header: "textProperties.h".}

proc getClassType*(_: typedesc[TextProperties]): TypeHandle {.importcpp: "TextProperties::get_class_type()", header: "textProperties.h".}

proc initTextGraphic*(): TextGraphic {.importcpp: "TextGraphic()".}

proc initTextGraphic*(model: NodePath, frame: LVecBase4): TextGraphic {.importcpp: "TextGraphic(#, (LVecBase4 const &)(#))".}

proc initTextGraphic*(model: NodePath, left: float, right: float, bottom: float, top: float): TextGraphic {.importcpp: "TextGraphic(#, #, #, #, #)".}

proc initTextGraphic*(param0: TextGraphic): TextGraphic {.importcpp: "TextGraphic(#)".}

proc getGlobalPtr*(_: typedesc[TextPropertiesManager]): TextPropertiesManager {.importcpp: "TextPropertiesManager::get_global_ptr()", header: "textPropertiesManager.h".}

proc initTextAssembler*(copy: TextAssembler): TextAssembler {.importcpp: "TextAssembler(#)".}

proc initTextAssembler*(encoder: TextNode | TextEncoder): TextAssembler {.importcpp: "TextAssembler(#)".}

proc calcWidth*(_: typedesc[TextAssembler], graphic: TextGraphic, properties: TextNode | TextProperties): float {.importcpp: "#TextAssembler::calc_width(#, #)", header: "textAssembler.h".}

proc calcWidth*(_: typedesc[TextAssembler], character: int, properties: TextNode | TextProperties): float {.importcpp: "#TextAssembler::calc_width(#, #)", header: "textAssembler.h".}

proc hasExactCharacter*(_: typedesc[TextAssembler], character: int, properties: TextNode | TextProperties): bool {.importcpp: "#TextAssembler::has_exact_character(#, #)", header: "textAssembler.h".}

proc hasCharacter*(_: typedesc[TextAssembler], character: int, properties: TextNode | TextProperties): bool {.importcpp: "#TextAssembler::has_character(#, #)", header: "textAssembler.h".}

proc isWhitespace*(_: typedesc[TextAssembler], character: int, properties: TextNode | TextProperties): bool {.importcpp: "#TextAssembler::is_whitespace(#, #)", header: "textAssembler.h".}

proc newTextNode*(name: string): TextNode {.importcpp: "new TextNode(nimStringToStdString(#))", header: stringConversionCode.}

proc newTextNode*(name: string, copy: TextNode | TextProperties): TextNode {.importcpp: "new TextNode(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[TextNode]): TypeHandle {.importcpp: "TextNode::get_class_type()", header: "textNode.h".}

proc newButtonThrower*(param0: ButtonThrower): ButtonThrower {.importcpp: "new ButtonThrower(#)".}

proc newButtonThrower*(name: string): ButtonThrower {.importcpp: "new ButtonThrower(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[ButtonThrower]): TypeHandle {.importcpp: "ButtonThrower::get_class_type()", header: "buttonThrower.h".}

proc getClassType*(_: typedesc[MouseInterfaceNode]): TypeHandle {.importcpp: "MouseInterfaceNode::get_class_type()", header: "mouseInterfaceNode.h".}

proc newMouseInterfaceNode*(param0: MouseInterfaceNode): MouseInterfaceNode {.importcpp: "new MouseInterfaceNode(#)".}

proc newDriveInterface*(param0: DriveInterface): DriveInterface {.importcpp: "new DriveInterface(#)".}

proc newDriveInterface*(name: string): DriveInterface {.importcpp: "new DriveInterface(nimStringToStdString(#))", header: stringConversionCode.}

proc newDriveInterface*(): DriveInterface {.importcpp: "new DriveInterface()".}

proc getClassType*(_: typedesc[DriveInterface]): TypeHandle {.importcpp: "DriveInterface::get_class_type()", header: "driveInterface.h".}

proc newMouseSubregion*(param0: MouseSubregion): MouseSubregion {.importcpp: "new MouseSubregion(#)".}

proc newMouseSubregion*(name: string): MouseSubregion {.importcpp: "new MouseSubregion(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[MouseSubregion]): TypeHandle {.importcpp: "MouseSubregion::get_class_type()", header: "mouseSubregion.h".}

proc newMouseWatcherRegion*(param0: MouseWatcherRegion): MouseWatcherRegion {.importcpp: "new MouseWatcherRegion(#)".}

proc newMouseWatcherRegion*(name: string, frame: LVecBase4): MouseWatcherRegion {.importcpp: "new MouseWatcherRegion(nimStringToStdString(#), (LVecBase4 const &)(#))", header: stringConversionCode.}

proc newMouseWatcherRegion*(name: string, left: float, right: float, bottom: float, top: float): MouseWatcherRegion {.importcpp: "new MouseWatcherRegion(nimStringToStdString(#), #, #, #, #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[MouseWatcherRegion]): TypeHandle {.importcpp: "MouseWatcherRegion::get_class_type()", header: "mouseWatcherRegion.h".}

proc getClassType*(_: typedesc[MouseWatcherBase]): TypeHandle {.importcpp: "MouseWatcherBase::get_class_type()", header: "mouseWatcherBase.h".}

proc getClassType*(_: typedesc[MouseWatcherGroup]): TypeHandle {.importcpp: "MouseWatcherGroup::get_class_type()", header: "mouseWatcherGroup.h".}

proc newMouseWatcher*(name: string): MouseWatcher {.importcpp: "new MouseWatcher(nimStringToStdString(#))", header: stringConversionCode.}

proc newMouseWatcher*(): MouseWatcher {.importcpp: "new MouseWatcher()".}

proc getClassType*(_: typedesc[MouseWatcher]): TypeHandle {.importcpp: "MouseWatcher::get_class_type()", header: "mouseWatcher.h".}

proc newTrackball*(param0: Trackball): Trackball {.importcpp: "new Trackball(#)".}

proc newTrackball*(name: string): Trackball {.importcpp: "new Trackball(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[Trackball]): TypeHandle {.importcpp: "Trackball::get_class_type()", header: "trackball.h".}

proc newTransform2SG*(param0: Transform2SG): Transform2SG {.importcpp: "new Transform2SG(#)".}

proc newTransform2SG*(name: string): Transform2SG {.importcpp: "new Transform2SG(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[Transform2SG]): TypeHandle {.importcpp: "Transform2SG::get_class_type()", header: "transform2sg.h".}

proc getClassType*(_: typedesc[AnimInterface]): TypeHandle {.importcpp: "AnimInterface::get_class_type()", header: "animInterface.h".}

proc initUpdateSeq*(): UpdateSeq {.importcpp: "UpdateSeq()".}

proc initUpdateSeq*(copy: UpdateSeq): UpdateSeq {.importcpp: "UpdateSeq(#)".}

proc initial*(_: typedesc[UpdateSeq]): UpdateSeq {.importcpp: "UpdateSeq::initial()", header: "updateSeq.h".}

proc old*(_: typedesc[UpdateSeq]): UpdateSeq {.importcpp: "UpdateSeq::old()", header: "updateSeq.h".}

proc fresh*(_: typedesc[UpdateSeq]): UpdateSeq {.importcpp: "UpdateSeq::fresh()", header: "updateSeq.h".}

proc getClassType*(_: typedesc[TypedWritable]): TypeHandle {.importcpp: "TypedWritable::get_class_type()", header: "typedWritable.h".}

proc getClassType*(_: typedesc[TypedWritableReferenceCount]): TypeHandle {.importcpp: "TypedWritableReferenceCount::get_class_type()", header: "typedWritableReferenceCount.h".}

proc getClassType*(_: typedesc[BamCacheRecord]): TypeHandle {.importcpp: "BamCacheRecord::get_class_type()", header: "bamCacheRecord.h".}

proc initBamCache*(): BamCache {.importcpp: "BamCache()".}

proc getGlobalPtr*(_: typedesc[BamCache]): BamCache {.importcpp: "BamCache::get_global_ptr()", header: "bamCache.h".}

proc considerFlushGlobalIndex*(_: typedesc[BamCache]) {.importcpp: "BamCache::consider_flush_global_index()", header: "bamCache.h".}

proc flushGlobalIndex*(_: typedesc[BamCache]) {.importcpp: "BamCache::flush_global_index()", header: "bamCache.h".}

proc initBamEnums*(): BamEnums {.importcpp: "BamEnums()".}

proc initBamEnums*(param0: BamEnums): BamEnums {.importcpp: "BamEnums(#)".}

proc initLoaderOptions*(param0: LoaderOptions): LoaderOptions {.importcpp: "LoaderOptions(#)".}

proc initLoaderOptions*(flags: int): LoaderOptions {.importcpp: "LoaderOptions(#)".}

proc initLoaderOptions*(): LoaderOptions {.importcpp: "LoaderOptions()".}

proc initLoaderOptions*(flags: int, textureFlags: int): LoaderOptions {.importcpp: "LoaderOptions(#, #)".}

proc initBamReader*(source: DatagramBuffer | DatagramGenerator): BamReader {.importcpp: "BamReader(#)".}

proc initBamReader*(): BamReader {.importcpp: "BamReader()".}

proc initBamWriter*(param0: BamWriter): BamWriter {.importcpp: "BamWriter(#)".}

proc initBamWriter*(target: DatagramSink): BamWriter {.importcpp: "BamWriter(#)".}

proc initBamWriter*(): BamWriter {.importcpp: "BamWriter()".}

proc initBitMask16*(): BitMask16 {.importcpp: "BitMask16()".}

proc initBitMask16*(param0: BitMask[uint16, 16]): BitMask16 {.importcpp: "BitMask16(#)".}

proc initBitMask16*(initValue: int): BitMask16 {.importcpp: "BitMask16(#)".}

proc allOn*(_: typedesc[BitMask[uint16, 16]]): BitMask16 {.importcpp: "BitMask< uint16_t, 16 >::all_on()", header: "bitMask.h".}

proc allOff*(_: typedesc[BitMask[uint16, 16]]): BitMask16 {.importcpp: "BitMask< uint16_t, 16 >::all_off()", header: "bitMask.h".}

proc lowerOn*(_: typedesc[BitMask[uint16, 16]], onBits: int): BitMask16 {.importcpp: "#BitMask< uint16_t, 16 >::lower_on(#)", header: "bitMask.h".}

proc bit*(_: typedesc[BitMask[uint16, 16]], index: int): BitMask16 {.importcpp: "#BitMask< uint16_t, 16 >::bit(#)", header: "bitMask.h".}

proc range*(_: typedesc[BitMask[uint16, 16]], lowBit: int, size: int): BitMask16 {.importcpp: "#BitMask< uint16_t, 16 >::range(#, #)", header: "bitMask.h".}

proc hasMaxNumBits*(_: typedesc[BitMask[uint16, 16]]): bool {.importcpp: "BitMask< uint16_t, 16 >::has_max_num_bits()", header: "bitMask.h".}

proc getMaxNumBits*(_: typedesc[BitMask[uint16, 16]]): int {.importcpp: "BitMask< uint16_t, 16 >::get_max_num_bits()", header: "bitMask.h".}

proc getClassType*(_: typedesc[BitMask[uint16, 16]]): TypeHandle {.importcpp: "BitMask< uint16_t, 16 >::get_class_type()", header: "bitMask.h".}

proc initBitMask32*(): BitMask32 {.importcpp: "BitMask32()".}

proc initBitMask32*(param0: BitMask[uint32, 32]): BitMask32 {.importcpp: "BitMask32(#)".}

proc initBitMask32*(initValue: int): BitMask32 {.importcpp: "BitMask32(#)".}

proc allOn*(_: typedesc[BitMask[uint32, 32]]): BitMask32 {.importcpp: "BitMask< uint32_t, 32 >::all_on()", header: "bitMask.h".}

proc allOff*(_: typedesc[BitMask[uint32, 32]]): BitMask32 {.importcpp: "BitMask< uint32_t, 32 >::all_off()", header: "bitMask.h".}

proc lowerOn*(_: typedesc[BitMask[uint32, 32]], onBits: int): BitMask32 {.importcpp: "#BitMask< uint32_t, 32 >::lower_on(#)", header: "bitMask.h".}

proc bit*(_: typedesc[BitMask[uint32, 32]], index: int): BitMask32 {.importcpp: "#BitMask< uint32_t, 32 >::bit(#)", header: "bitMask.h".}

proc range*(_: typedesc[BitMask[uint32, 32]], lowBit: int, size: int): BitMask32 {.importcpp: "#BitMask< uint32_t, 32 >::range(#, #)", header: "bitMask.h".}

proc hasMaxNumBits*(_: typedesc[BitMask[uint32, 32]]): bool {.importcpp: "BitMask< uint32_t, 32 >::has_max_num_bits()", header: "bitMask.h".}

proc getMaxNumBits*(_: typedesc[BitMask[uint32, 32]]): int {.importcpp: "BitMask< uint32_t, 32 >::get_max_num_bits()", header: "bitMask.h".}

proc getClassType*(_: typedesc[BitMask[uint32, 32]]): TypeHandle {.importcpp: "BitMask< uint32_t, 32 >::get_class_type()", header: "bitMask.h".}

proc initBitMask64*(): BitMask64 {.importcpp: "BitMask64()".}

proc initBitMask64*(param0: BitMask[uint64, 64]): BitMask64 {.importcpp: "BitMask64(#)".}

proc initBitMask64*(initValue: clonglong): BitMask64 {.importcpp: "BitMask64(#)".}

proc allOn*(_: typedesc[BitMask[uint64, 64]]): BitMask64 {.importcpp: "BitMask< uint64_t, 64 >::all_on()", header: "bitMask.h".}

proc allOff*(_: typedesc[BitMask[uint64, 64]]): BitMask64 {.importcpp: "BitMask< uint64_t, 64 >::all_off()", header: "bitMask.h".}

proc lowerOn*(_: typedesc[BitMask[uint64, 64]], onBits: int): BitMask64 {.importcpp: "#BitMask< uint64_t, 64 >::lower_on(#)", header: "bitMask.h".}

proc bit*(_: typedesc[BitMask[uint64, 64]], index: int): BitMask64 {.importcpp: "#BitMask< uint64_t, 64 >::bit(#)", header: "bitMask.h".}

proc range*(_: typedesc[BitMask[uint64, 64]], lowBit: int, size: int): BitMask64 {.importcpp: "#BitMask< uint64_t, 64 >::range(#, #)", header: "bitMask.h".}

proc hasMaxNumBits*(_: typedesc[BitMask[uint64, 64]]): bool {.importcpp: "BitMask< uint64_t, 64 >::has_max_num_bits()", header: "bitMask.h".}

proc getMaxNumBits*(_: typedesc[BitMask[uint64, 64]]): int {.importcpp: "BitMask< uint64_t, 64 >::get_max_num_bits()", header: "bitMask.h".}

proc getClassType*(_: typedesc[BitMask[uint64, 64]]): TypeHandle {.importcpp: "BitMask< uint64_t, 64 >::get_class_type()", header: "bitMask.h".}

proc initBitArray*(): BitArray {.importcpp: "BitArray()".}

proc initBitArray*(param0: BitArray): BitArray {.importcpp: "BitArray(#)".}

proc initBitArray*(initValue: clonglong): BitArray {.importcpp: "BitArray(#)".}

proc initBitArray*(`from`: SparseArray): BitArray {.importcpp: "BitArray(#)".}

proc allOn*(_: typedesc[BitArray]): BitArray {.importcpp: "BitArray::all_on()", header: "bitArray.h".}

proc allOff*(_: typedesc[BitArray]): BitArray {.importcpp: "BitArray::all_off()", header: "bitArray.h".}

proc lowerOn*(_: typedesc[BitArray], onBits: int): BitArray {.importcpp: "#BitArray::lower_on(#)", header: "bitArray.h".}

proc bit*(_: typedesc[BitArray], index: int): BitArray {.importcpp: "#BitArray::bit(#)", header: "bitArray.h".}

proc range*(_: typedesc[BitArray], lowBit: int, size: int): BitArray {.importcpp: "#BitArray::range(#, #)", header: "bitArray.h".}

proc hasMaxNumBits*(_: typedesc[BitArray]): bool {.importcpp: "BitArray::has_max_num_bits()", header: "bitArray.h".}

proc getMaxNumBits*(_: typedesc[BitArray]): int {.importcpp: "BitArray::get_max_num_bits()", header: "bitArray.h".}

proc getNumBitsPerWord*(_: typedesc[BitArray]): int {.importcpp: "BitArray::get_num_bits_per_word()", header: "bitArray.h".}

proc getClassType*(_: typedesc[BitArray]): TypeHandle {.importcpp: "BitArray::get_class_type()", header: "bitArray.h".}

proc initButtonHandle*(): ButtonHandle {.importcpp: "ButtonHandle()".}

proc initButtonHandle*(param0: ButtonHandle): ButtonHandle {.importcpp: "ButtonHandle(#)".}

proc initButtonHandle*(index: int): ButtonHandle {.importcpp: "ButtonHandle(#)".}

proc initButtonHandle*(name: string): ButtonHandle {.importcpp: "ButtonHandle(nimStringToStdString(#))", header: stringConversionCode.}

proc none*(_: typedesc[ButtonHandle]): ButtonHandle {.importcpp: "ButtonHandle::none()", header: "buttonHandle.h".}

proc getClassType*(_: typedesc[ButtonHandle]): TypeHandle {.importcpp: "ButtonHandle::get_class_type()", header: "buttonHandle.h".}

proc initButtonRegistry*(param0: ButtonRegistry): ButtonRegistry {.importcpp: "ButtonRegistry(#)".}

proc getClassType*(_: typedesc[ButtonMap]): TypeHandle {.importcpp: "ButtonMap::get_class_type()", header: "buttonMap.h".}

proc newButtonMap*(): ButtonMap {.importcpp: "new ButtonMap()".}

proc newButtonMap*(param0: ButtonMap): ButtonMap {.importcpp: "new ButtonMap(#)".}

proc getClassType*(_: typedesc[CallbackObject]): TypeHandle {.importcpp: "CallbackObject::get_class_type()", header: "callbackObject.h".}

proc newCallbackObject*(param0: CallbackObject): CallbackObject {.importcpp: "new CallbackObject(#)".}

proc getClassType*(_: typedesc[CachedTypedWritableReferenceCount]): TypeHandle {.importcpp: "CachedTypedWritableReferenceCount::get_class_type()", header: "cachedTypedWritableReferenceCount.h".}

proc getClassType*(_: typedesc[CallbackData]): TypeHandle {.importcpp: "CallbackData::get_class_type()", header: "callbackData.h".}

proc initTimeVal*(): TimeVal {.importcpp: "TimeVal()".}

proc initTimeVal*(param0: TimeVal): TimeVal {.importcpp: "TimeVal(#)".}

proc newClockObject*(copy: ClockObject): ClockObject {.importcpp: "new ClockObject(#)".}

proc newClockObject*(mode: ClockObject_Mode): ClockObject {.importcpp: "new ClockObject(#)".}

proc newClockObject*(): ClockObject {.importcpp: "new ClockObject()".}

proc getGlobalClock*(_: typedesc[ClockObject]): ClockObject {.importcpp: "ClockObject::get_global_clock()", header: "clockObject.h".}

proc getClassType*(_: typedesc[ClockObject]): TypeHandle {.importcpp: "ClockObject::get_class_type()", header: "clockObject.h".}

proc parseColorSpaceString*(str: string): ColorSpace {.importcpp: "parse_color_space_string(nimStringToStdString(#))", header: "colorSpace.h".}

proc formatColorSpace*(cs: ColorSpace): string {.importcpp: "nimStringFromStdString(format_color_space(#))", header: "colorSpace.h".}

proc getModelPath*(): ConfigVariableSearchPath {.importcpp: "get_model_path()", header: "config_putil.h".}

proc getPluginPath*(): ConfigVariableSearchPath {.importcpp: "get_plugin_path()", header: "config_putil.h".}

proc getClassType*(_: typedesc[CopyOnWriteObject]): TypeHandle {.importcpp: "CopyOnWriteObject::get_class_type()", header: "copyOnWriteObject.h".}

proc initDatagramBuffer*(): DatagramBuffer {.importcpp: "DatagramBuffer()".}

proc initDatagramInputFile*(): DatagramInputFile {.importcpp: "DatagramInputFile()".}

proc initDatagramOutputFile*(): DatagramOutputFile {.importcpp: "DatagramOutputFile()".}

proc lstick*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::lstick()", header: "gamepadButton.h".}

proc rstick*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::rstick()", header: "gamepadButton.h".}

proc lshoulder*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::lshoulder()", header: "gamepadButton.h".}

proc rshoulder*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::rshoulder()", header: "gamepadButton.h".}

proc ltrigger*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::ltrigger()", header: "gamepadButton.h".}

proc rtrigger*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::rtrigger()", header: "gamepadButton.h".}

proc lgrip*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::lgrip()", header: "gamepadButton.h".}

proc rgrip*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::rgrip()", header: "gamepadButton.h".}

proc dpadLeft*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::dpad_left()", header: "gamepadButton.h".}

proc dpadRight*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::dpad_right()", header: "gamepadButton.h".}

proc dpadUp*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::dpad_up()", header: "gamepadButton.h".}

proc dpadDown*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::dpad_down()", header: "gamepadButton.h".}

proc back*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::back()", header: "gamepadButton.h".}

proc guide*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::guide()", header: "gamepadButton.h".}

proc start*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::start()", header: "gamepadButton.h".}

proc next*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::next()", header: "gamepadButton.h".}

proc previous*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::previous()", header: "gamepadButton.h".}

proc faceA*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_a()", header: "gamepadButton.h".}

proc faceB*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_b()", header: "gamepadButton.h".}

proc faceC*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_c()", header: "gamepadButton.h".}

proc faceX*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_x()", header: "gamepadButton.h".}

proc faceY*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_y()", header: "gamepadButton.h".}

proc faceZ*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_z()", header: "gamepadButton.h".}

proc face1*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_1()", header: "gamepadButton.h".}

proc face2*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::face_2()", header: "gamepadButton.h".}

proc trigger*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::trigger()", header: "gamepadButton.h".}

proc joystick*(_: typedesc[GamepadButton], buttonNumber: int): ButtonHandle {.importcpp: "#GamepadButton::joystick(#)", header: "gamepadButton.h".}

proc hatUp*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::hat_up()", header: "gamepadButton.h".}

proc hatDown*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::hat_down()", header: "gamepadButton.h".}

proc hatLeft*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::hat_left()", header: "gamepadButton.h".}

proc hatRight*(_: typedesc[GamepadButton]): ButtonHandle {.importcpp: "GamepadButton::hat_right()", header: "gamepadButton.h".}

proc initGamepadButton*(): GamepadButton {.importcpp: "GamepadButton()".}

proc initGamepadButton*(param0: GamepadButton): GamepadButton {.importcpp: "GamepadButton(#)".}

proc asciiKey*(_: typedesc[KeyboardButton], asciiEquivalent: char): ButtonHandle {.importcpp: "#KeyboardButton::ascii_key(#)", header: "keyboardButton.h".}

proc space*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::space()", header: "keyboardButton.h".}

proc backspace*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::backspace()", header: "keyboardButton.h".}

proc tab*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::tab()", header: "keyboardButton.h".}

proc enter*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::enter()", header: "keyboardButton.h".}

proc escape*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::escape()", header: "keyboardButton.h".}

proc f1*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f1()", header: "keyboardButton.h".}

proc f2*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f2()", header: "keyboardButton.h".}

proc f3*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f3()", header: "keyboardButton.h".}

proc f4*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f4()", header: "keyboardButton.h".}

proc f5*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f5()", header: "keyboardButton.h".}

proc f6*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f6()", header: "keyboardButton.h".}

proc f7*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f7()", header: "keyboardButton.h".}

proc f8*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f8()", header: "keyboardButton.h".}

proc f9*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f9()", header: "keyboardButton.h".}

proc f10*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f10()", header: "keyboardButton.h".}

proc f11*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f11()", header: "keyboardButton.h".}

proc f12*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f12()", header: "keyboardButton.h".}

proc f13*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f13()", header: "keyboardButton.h".}

proc f14*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f14()", header: "keyboardButton.h".}

proc f15*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f15()", header: "keyboardButton.h".}

proc f16*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::f16()", header: "keyboardButton.h".}

proc left*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::left()", header: "keyboardButton.h".}

proc right*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::right()", header: "keyboardButton.h".}

proc up*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::up()", header: "keyboardButton.h".}

proc down*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::down()", header: "keyboardButton.h".}

proc pageUp*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::page_up()", header: "keyboardButton.h".}

proc pageDown*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::page_down()", header: "keyboardButton.h".}

proc home*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::home()", header: "keyboardButton.h".}

proc insert*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::insert()", header: "keyboardButton.h".}

proc del*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::del()", header: "keyboardButton.h".}

proc help*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::help()", header: "keyboardButton.h".}

proc menu*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::menu()", header: "keyboardButton.h".}

proc shift*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::shift()", header: "keyboardButton.h".}

proc control*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::control()", header: "keyboardButton.h".}

proc alt*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::alt()", header: "keyboardButton.h".}

proc meta*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::meta()", header: "keyboardButton.h".}

proc capsLock*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::caps_lock()", header: "keyboardButton.h".}

proc shiftLock*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::shift_lock()", header: "keyboardButton.h".}

proc numLock*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::num_lock()", header: "keyboardButton.h".}

proc scrollLock*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::scroll_lock()", header: "keyboardButton.h".}

proc printScreen*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::print_screen()", header: "keyboardButton.h".}

proc pause*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::pause()", header: "keyboardButton.h".}

proc lshift*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::lshift()", header: "keyboardButton.h".}

proc rshift*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::rshift()", header: "keyboardButton.h".}

proc lcontrol*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::lcontrol()", header: "keyboardButton.h".}

proc rcontrol*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::rcontrol()", header: "keyboardButton.h".}

proc lalt*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::lalt()", header: "keyboardButton.h".}

proc ralt*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::ralt()", header: "keyboardButton.h".}

proc lmeta*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::lmeta()", header: "keyboardButton.h".}

proc rmeta*(_: typedesc[KeyboardButton]): ButtonHandle {.importcpp: "KeyboardButton::rmeta()", header: "keyboardButton.h".}

proc initKeyboardButton*(): KeyboardButton {.importcpp: "KeyboardButton()".}

proc initKeyboardButton*(param0: KeyboardButton): KeyboardButton {.importcpp: "KeyboardButton(#)".}

proc loadPrcFile*(filename: Filename): ConfigPage {.importcpp: "load_prc_file(#)", header: "load_prc_file.h".}

proc loadPrcFileData*(name: string, data: string): ConfigPage {.importcpp: "load_prc_file_data(nimStringToStdString(#), nimStringToStdString(#))", header: "load_prc_file.h".}

proc unloadPrcFile*(page: ConfigPage): bool {.importcpp: "unload_prc_file(#)", header: "load_prc_file.h".}

proc hashPrcVariables*(hash: HashVal) {.importcpp: "hash_prc_variables(#)", header: "load_prc_file.h".}

proc initModifierButtons*(): ModifierButtons {.importcpp: "ModifierButtons()".}

proc initModifierButtons*(copy: ModifierButtons): ModifierButtons {.importcpp: "ModifierButtons(#)".}

proc button*(_: typedesc[MouseButton], buttonNumber: int): ButtonHandle {.importcpp: "#MouseButton::button(#)", header: "mouseButton.h".}

proc one*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::one()", header: "mouseButton.h".}

proc two*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::two()", header: "mouseButton.h".}

proc three*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::three()", header: "mouseButton.h".}

proc four*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::four()", header: "mouseButton.h".}

proc five*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::five()", header: "mouseButton.h".}

proc wheelUp*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::wheel_up()", header: "mouseButton.h".}

proc wheelDown*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::wheel_down()", header: "mouseButton.h".}

proc wheelLeft*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::wheel_left()", header: "mouseButton.h".}

proc wheelRight*(_: typedesc[MouseButton]): ButtonHandle {.importcpp: "MouseButton::wheel_right()", header: "mouseButton.h".}

proc isMouseButton*(_: typedesc[MouseButton], button: ButtonHandle): bool {.importcpp: "#MouseButton::is_mouse_button(#)", header: "mouseButton.h".}

proc initMouseButton*(): MouseButton {.importcpp: "MouseButton()".}

proc initMouseButton*(param0: MouseButton): MouseButton {.importcpp: "MouseButton(#)".}

proc initPointerData*(): PointerData {.importcpp: "PointerData()".}

proc initPointerData*(param0: PointerData): PointerData {.importcpp: "PointerData(#)".}

proc getClassType*(_: typedesc[NodeCachedReferenceCount]): TypeHandle {.importcpp: "NodeCachedReferenceCount::get_class_type()", header: "nodeCachedReferenceCount.h".}

proc initSparseArray*(): SparseArray {.importcpp: "SparseArray()".}

proc initSparseArray*(`from`: BitArray): SparseArray {.importcpp: "SparseArray(#)".}

proc initSparseArray*(param0: SparseArray): SparseArray {.importcpp: "SparseArray(#)".}

proc allOn*(_: typedesc[SparseArray]): SparseArray {.importcpp: "SparseArray::all_on()", header: "sparseArray.h".}

proc allOff*(_: typedesc[SparseArray]): SparseArray {.importcpp: "SparseArray::all_off()", header: "sparseArray.h".}

proc lowerOn*(_: typedesc[SparseArray], onBits: int): SparseArray {.importcpp: "#SparseArray::lower_on(#)", header: "sparseArray.h".}

proc bit*(_: typedesc[SparseArray], index: int): SparseArray {.importcpp: "#SparseArray::bit(#)", header: "sparseArray.h".}

proc range*(_: typedesc[SparseArray], lowBit: int, size: int): SparseArray {.importcpp: "#SparseArray::range(#, #)", header: "sparseArray.h".}

proc hasMaxNumBits*(_: typedesc[SparseArray]): bool {.importcpp: "SparseArray::has_max_num_bits()", header: "sparseArray.h".}

proc getMaxNumBits*(_: typedesc[SparseArray]): int {.importcpp: "SparseArray::get_max_num_bits()", header: "sparseArray.h".}

proc getClassType*(_: typedesc[SparseArray]): TypeHandle {.importcpp: "SparseArray::get_class_type()", header: "sparseArray.h".}

proc getClassType*(_: typedesc[ParamValueBase]): TypeHandle {.importcpp: "ParamValueBase::get_class_type()", header: "paramValue.h".}

proc newParamTypedRefCount*(value: TypedReferenceCount): ParamTypedRefCount {.importcpp: "new ParamTypedRefCount(#)".}

proc getClassType*(_: typedesc[ParamTypedRefCount]): TypeHandle {.importcpp: "ParamTypedRefCount::get_class_type()", header: "paramValue.h".}

proc getClassType*(_: typedesc[WritableConfigurable]): TypeHandle {.importcpp: "WritableConfigurable::get_class_type()", header: "writableConfigurable.h".}

proc initUniqueIdAllocator*(param0: UniqueIdAllocator): UniqueIdAllocator {.importcpp: "UniqueIdAllocator(#)".}

proc initUniqueIdAllocator*(min: int, max: int): UniqueIdAllocator {.importcpp: "UniqueIdAllocator(#, #)".}

proc initUniqueIdAllocator*(min: int): UniqueIdAllocator {.importcpp: "UniqueIdAllocator(#)".}

proc initUniqueIdAllocator*(): UniqueIdAllocator {.importcpp: "UniqueIdAllocator()".}

proc newFilterProperties*(): FilterProperties {.importcpp: "new FilterProperties()".}

proc newFilterProperties*(param0: FilterProperties): FilterProperties {.importcpp: "new FilterProperties(#)".}

proc getClassType*(_: typedesc[FilterProperties]): TypeHandle {.importcpp: "FilterProperties::get_class_type()", header: "filterProperties.h".}

proc getClassType*(_: typedesc[AudioSound]): TypeHandle {.importcpp: "AudioSound::get_class_type()", header: "audioSound.h".}

proc createAudioManager*(_: typedesc[AudioManager]): AudioManager {.importcpp: "AudioManager::create_AudioManager()", header: "audioManager.h".}

proc getDlsPathname*(_: typedesc[AudioManager]): Filename {.importcpp: "AudioManager::get_dls_pathname()", header: "audioManager.h".}

proc getClassType*(_: typedesc[AudioManager]): TypeHandle {.importcpp: "AudioManager::get_class_type()", header: "audioManager.h".}

proc newAudioLoadRequest*(param0: AudioLoadRequest): AudioLoadRequest {.importcpp: "new AudioLoadRequest(#)".}

proc newAudioLoadRequest*(audioManager: AudioManager, filename: string, positional: bool): AudioLoadRequest {.importcpp: "new AudioLoadRequest(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc getClassType*(_: typedesc[AudioLoadRequest]): TypeHandle {.importcpp: "AudioLoadRequest::get_class_type()", header: "audioLoadRequest.h".}

proc initPGFrameStyle*(): PGFrameStyle {.importcpp: "PGFrameStyle()".}

proc initPGFrameStyle*(copy: PGFrameStyle): PGFrameStyle {.importcpp: "PGFrameStyle(#)".}

proc newPGItem*(name: string): PGItem {.importcpp: "new PGItem(nimStringToStdString(#))", header: stringConversionCode.}

proc getEnterPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_enter_prefix())", header: "pgItem.h".}

proc getExitPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_exit_prefix())", header: "pgItem.h".}

proc getWithinPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_within_prefix())", header: "pgItem.h".}

proc getWithoutPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_without_prefix())", header: "pgItem.h".}

proc getFocusInPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_focus_in_prefix())", header: "pgItem.h".}

proc getFocusOutPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_focus_out_prefix())", header: "pgItem.h".}

proc getPressPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_press_prefix())", header: "pgItem.h".}

proc getRepeatPrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_repeat_prefix())", header: "pgItem.h".}

proc getReleasePrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_release_prefix())", header: "pgItem.h".}

proc getKeystrokePrefix*(_: typedesc[PGItem]): string {.importcpp: "nimStringFromStdString(PGItem::get_keystroke_prefix())", header: "pgItem.h".}

proc getTextNode*(_: typedesc[PGItem]): TextNode {.importcpp: "PGItem::get_text_node()", header: "pgItem.h".}

proc setTextNode*(_: typedesc[PGItem], node: TextNode) {.importcpp: "#PGItem::set_text_node(#)", header: "pgItem.h".}

proc getFocusItem*(_: typedesc[PGItem]): PGItem {.importcpp: "PGItem::get_focus_item()", header: "pgItem.h".}

proc getClassType*(_: typedesc[PGItem]): TypeHandle {.importcpp: "PGItem::get_class_type()", header: "pgItem.h".}

proc newPGButton*(name: string): PGButton {.importcpp: "new PGButton(nimStringToStdString(#))", header: stringConversionCode.}

proc getClickPrefix*(_: typedesc[PGButton]): string {.importcpp: "nimStringFromStdString(PGButton::get_click_prefix())", header: "pgButton.h".}

proc getClassType*(_: typedesc[PGButton]): TypeHandle {.importcpp: "PGButton::get_class_type()", header: "pgButton.h".}

proc newPGTop*(name: string): PGTop {.importcpp: "new PGTop(nimStringToStdString(#))", header: stringConversionCode.}

proc getClassType*(_: typedesc[PGTop]): TypeHandle {.importcpp: "PGTop::get_class_type()", header: "pgTop.h".}

proc newPGEntry*(name: string): PGEntry {.importcpp: "new PGEntry(nimStringToStdString(#))", header: stringConversionCode.}

proc getAcceptPrefix*(_: typedesc[PGEntry]): string {.importcpp: "nimStringFromStdString(PGEntry::get_accept_prefix())", header: "pgEntry.h".}

proc getAcceptFailedPrefix*(_: typedesc[PGEntry]): string {.importcpp: "nimStringFromStdString(PGEntry::get_accept_failed_prefix())", header: "pgEntry.h".}

proc getOverflowPrefix*(_: typedesc[PGEntry]): string {.importcpp: "nimStringFromStdString(PGEntry::get_overflow_prefix())", header: "pgEntry.h".}

proc getTypePrefix*(_: typedesc[PGEntry]): string {.importcpp: "nimStringFromStdString(PGEntry::get_type_prefix())", header: "pgEntry.h".}

proc getErasePrefix*(_: typedesc[PGEntry]): string {.importcpp: "nimStringFromStdString(PGEntry::get_erase_prefix())", header: "pgEntry.h".}

proc getCursormovePrefix*(_: typedesc[PGEntry]): string {.importcpp: "nimStringFromStdString(PGEntry::get_cursormove_prefix())", header: "pgEntry.h".}

proc getClassType*(_: typedesc[PGEntry]): TypeHandle {.importcpp: "PGEntry::get_class_type()", header: "pgEntry.h".}

proc getClassType*(_: typedesc[PGMouseWatcherParameter]): TypeHandle {.importcpp: "PGMouseWatcherParameter::get_class_type()", header: "pgMouseWatcherParameter.h".}

proc newPGMouseWatcherParameter*(param0: PGMouseWatcherParameter): PGMouseWatcherParameter {.importcpp: "new PGMouseWatcherParameter(#)".}

proc newPGMouseWatcherBackground*(): PGMouseWatcherBackground {.importcpp: "new PGMouseWatcherBackground()".}

proc newPGMouseWatcherBackground*(param0: PGMouseWatcherBackground): PGMouseWatcherBackground {.importcpp: "new PGMouseWatcherBackground(#)".}

proc getClassType*(_: typedesc[PGMouseWatcherBackground]): TypeHandle {.importcpp: "PGMouseWatcherBackground::get_class_type()", header: "pgMouseWatcherBackground.h".}

proc newPGVirtualFrame*(name: string): PGVirtualFrame {.importcpp: "new PGVirtualFrame(nimStringToStdString(#))", header: stringConversionCode.}

proc newPGVirtualFrame*(): PGVirtualFrame {.importcpp: "new PGVirtualFrame()".}

proc getClassType*(_: typedesc[PGVirtualFrame]): TypeHandle {.importcpp: "PGVirtualFrame::get_class_type()", header: "pgVirtualFrame.h".}

proc newPGSliderBar*(name: string): PGSliderBar {.importcpp: "new PGSliderBar(nimStringToStdString(#))", header: stringConversionCode.}

proc newPGSliderBar*(): PGSliderBar {.importcpp: "new PGSliderBar()".}

proc getAdjustPrefix*(_: typedesc[PGSliderBar]): string {.importcpp: "nimStringFromStdString(PGSliderBar::get_adjust_prefix())", header: "pgSliderBar.h".}

proc getClassType*(_: typedesc[PGSliderBar]): TypeHandle {.importcpp: "PGSliderBar::get_class_type()", header: "pgSliderBar.h".}

proc newPGScrollFrame*(name: string): PGScrollFrame {.importcpp: "new PGScrollFrame(nimStringToStdString(#))", header: stringConversionCode.}

proc newPGScrollFrame*(): PGScrollFrame {.importcpp: "new PGScrollFrame()".}

proc getClassType*(_: typedesc[PGScrollFrame]): TypeHandle {.importcpp: "PGScrollFrame::get_class_type()", header: "pgScrollFrame.h".}

proc newPGWaitBar*(name: string): PGWaitBar {.importcpp: "new PGWaitBar(nimStringToStdString(#))", header: stringConversionCode.}

proc newPGWaitBar*(): PGWaitBar {.importcpp: "new PGWaitBar()".}

proc getClassType*(_: typedesc[PGWaitBar]): TypeHandle {.importcpp: "PGWaitBar::get_class_type()", header: "pgWaitBar.h".}

proc initNetAddress*(): NetAddress {.importcpp: "NetAddress()".}

proc initNetAddress*(param0: NetAddress): NetAddress {.importcpp: "NetAddress(#)".}

proc initNetAddress*(`addr`: Socket_Address): NetAddress {.importcpp: "NetAddress(#)".}

proc newConnection*(manager: ConnectionManager, socket: Socket_IP): Connection {.importcpp: "new Connection(#, #)".}

proc initNetDatagram*(): NetDatagram {.importcpp: "NetDatagram()".}

proc initNetDatagram*(copy: Datagram): NetDatagram {.importcpp: "NetDatagram(#)".}

proc initNetDatagram*(copy: NetDatagram): NetDatagram {.importcpp: "NetDatagram(#)".}

proc getClassType*(_: typedesc[NetDatagram]): TypeHandle {.importcpp: "NetDatagram::get_class_type()", header: "netDatagram.h".}

proc newConnectionManager*(): ConnectionManager {.importcpp: "new ConnectionManager()".}

proc getHostName*(_: typedesc[ConnectionManager]): string {.importcpp: "nimStringFromStdString(ConnectionManager::get_host_name())", header: "connectionManager.h".}

proc initConnectionWriter*(manager: ConnectionManager, numThreads: int, threadName: string): ConnectionWriter {.importcpp: "ConnectionWriter(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc initConnectionWriter*(manager: ConnectionManager, numThreads: int): ConnectionWriter {.importcpp: "ConnectionWriter(#, #)".}

proc newDatagramGeneratorNet*(manager: ConnectionManager, numThreads: int): DatagramGeneratorNet {.importcpp: "new DatagramGeneratorNet(#, #)".}

proc initDatagramSinkNet*(manager: ConnectionManager, numThreads: int): DatagramSinkNet {.importcpp: "DatagramSinkNet(#, #)".}

proc newQueuedConnectionListener*(manager: ConnectionManager, numThreads: int): QueuedConnectionListener {.importcpp: "new QueuedConnectionListener(#, #)".}

proc newQueuedConnectionManager*(): QueuedConnectionManager {.importcpp: "new QueuedConnectionManager()".}

proc newQueuedConnectionReader*(manager: ConnectionManager, numThreads: int): QueuedConnectionReader {.importcpp: "new QueuedConnectionReader(#, #)".}

proc newRecentConnectionReader*(manager: ConnectionManager): RecentConnectionReader {.importcpp: "new RecentConnectionReader(#)".}

proc newSocketAddress*(inaddr: Socket_Address): Socket_Address {.importcpp: "new Socket_Address(#)".}

proc newSocketAddress*(port: int): Socket_Address {.importcpp: "new Socket_Address(#)".}

proc newSocketAddress*(): Socket_Address {.importcpp: "new Socket_Address()".}

proc initSocketIP*(): Socket_IP {.importcpp: "Socket_IP()".}

proc initSocketIP*(`in`: int): Socket_IP {.importcpp: "Socket_IP(#)".}

proc GetLastError*(_: typedesc[Socket_IP]): int {.importcpp: "Socket_IP::GetLastError()", header: "socket_ip.h".}

proc InitNetworkDriver*(_: typedesc[Socket_IP]): int {.importcpp: "Socket_IP::InitNetworkDriver()", header: "socket_ip.h".}

proc getClassType*(_: typedesc[Socket_IP]): TypeHandle {.importcpp: "Socket_IP::get_class_type()", header: "socket_ip.h".}

proc initSocketTCP*(): Socket_TCP {.importcpp: "Socket_TCP()".}

proc initSocketTCP*(param0: int): Socket_TCP {.importcpp: "Socket_TCP(#)".}

proc getClassType*(_: typedesc[Socket_TCP]): TypeHandle {.importcpp: "Socket_TCP::get_class_type()", header: "socket_tcp.h".}

proc initSocketTCPListen*(): Socket_TCP_Listen {.importcpp: "Socket_TCP_Listen()".}

proc getClassType*(_: typedesc[Socket_TCP_Listen]): TypeHandle {.importcpp: "Socket_TCP_Listen::get_class_type()", header: "socket_tcp_listen.h".}

proc initSocketUDPIncoming*(): Socket_UDP_Incoming {.importcpp: "Socket_UDP_Incoming()".}

proc getClassType*(_: typedesc[Socket_UDP_Incoming]): TypeHandle {.importcpp: "Socket_UDP_Incoming::get_class_type()", header: "socket_udp_incoming.h".}

proc initSocketUDPOutgoing*(): Socket_UDP_Outgoing {.importcpp: "Socket_UDP_Outgoing()".}

proc getClassType*(_: typedesc[Socket_UDP_Outgoing]): TypeHandle {.importcpp: "Socket_UDP_Outgoing::get_class_type()", header: "socket_udp_outgoing.h".}

proc initSocketFdset*(): Socket_fdset {.importcpp: "Socket_fdset()".}

proc initSocketFdset*(param0: Socket_fdset): Socket_fdset {.importcpp: "Socket_fdset(#)".}

proc initBufferedDatagramConnection*(rbufsize: int, wbufsize: int, writeFlushPoint: int): Buffered_DatagramConnection {.importcpp: "Buffered_DatagramConnection(#, #, #)".}

proc getClassType*(_: typedesc[Buffered_DatagramConnection]): TypeHandle {.importcpp: "Buffered_DatagramConnection::get_class_type()", header: "buffered_datagramconnection.h".}

proc initSocketUDP*(): Socket_UDP {.importcpp: "Socket_UDP()".}

proc getClassType*(_: typedesc[Socket_UDP]): TypeHandle {.importcpp: "Socket_UDP::get_class_type()", header: "socket_udp.h".}

proc getPointsPerUnit*(_: typedesc[FreetypeFont]): float {.importcpp: "FreetypeFont::get_points_per_unit()", header: "freetypeFont.h".}

proc getPointsPerInch*(_: typedesc[FreetypeFont]): float {.importcpp: "FreetypeFont::get_points_per_inch()", header: "freetypeFont.h".}

proc initPNMTextGlyph*(param0: PNMTextGlyph): PNMTextGlyph {.importcpp: "PNMTextGlyph(#)".}

proc initPNMTextGlyph*(advance: float64): PNMTextGlyph {.importcpp: "PNMTextGlyph(#)".}

proc initPNMTextMaker*(fontFilename: Filename, faceIndex: int): PNMTextMaker {.importcpp: "PNMTextMaker(#, #)".}

proc initPNMTextMaker*(copy: FreetypeFont | DynamicTextFont): PNMTextMaker {.importcpp: "PNMTextMaker(#)".}

proc initPNMTextMaker*(copy: PNMTextMaker): PNMTextMaker {.importcpp: "PNMTextMaker(#)".}

proc initPNMTextMaker*(fontData: string, dataLength: int, faceIndex: int): PNMTextMaker {.importcpp: "PNMTextMaker(nimStringToStdString(#), #, #)", header: stringConversionCode.}

func index*(this: ButtonHandle | PStatThread | TypeHandle): int {.importcpp: "#.get_index()".}

func name*(this: ButtonHandle | ConfigPage | ConfigVariableBase | ConfigVariableCore | HTTPCookie | NodePath | PNMFileType | TypeHandle): string {.importcpp: "nimStringFromStdString(#.get_name())", header: stringConversionCode.}

proc `[]`*(this: TypeHandle_parentClasses, index: int): TypeHandle {.importcpp: "#.get_parent_class(#)".}

func len*(this: TypeHandle_parentClasses): int {.importcpp: "#.get_num_parent_classes()".}

proc `[]`*(this: TypeHandle_childClasses, index: int): TypeHandle {.importcpp: "#.get_child_class(#)".}

func len*(this: TypeHandle_childClasses): int {.importcpp: "#.get_num_child_classes()".}

proc `[]`*(this: TypeRegistry_typehandles, n: int): TypeHandle {.importcpp: "#.get_typehandle(#)".}

func len*(this: TypeRegistry_typehandles): int {.importcpp: "#.get_num_typehandles()".}

proc `[]`*(this: TypeRegistry_rootClasses, n: int): TypeHandle {.importcpp: "#.get_root_class(#)".}

func len*(this: TypeRegistry_rootClasses): int {.importcpp: "#.get_num_root_classes()".}

proc `[]`*(this: PandaSystem_systems, n: int): string {.importcpp: "nimStringFromStdString(#->get_system(#))", header: stringConversionCode.}

func len*(this: PandaSystem_systems): int {.importcpp: "#->get_num_systems()".}

proc `[]`*(this: ConfigVariableSearchPath_directories | DSearchPath_directories, n: int): Filename {.importcpp: "#.get_directory(#)".}

func len*(this: ConfigVariableSearchPath_directories | DSearchPath_directories): int {.importcpp: "#.get_num_directories()".}

func pattern*(this: GlobPattern): string {.importcpp: "nimStringFromStdString(#.get_pattern())", header: stringConversionCode.}

proc `pattern=`*(this: var GlobPattern, pattern: string) {.importcpp: "#.set_pattern(nimStringToStdString(#))", header: stringConversionCode.}

func caseSensitive*(this: GlobPattern): bool {.importcpp: "#.get_case_sensitive()".}

proc `caseSensitive=`*(this: var GlobPattern, caseSensitive: bool) {.importcpp: "#.set_case_sensitive(#)".}

func nomatchChars*(this: GlobPattern): string {.importcpp: "nimStringFromStdString(#.get_nomatch_chars())", header: stringConversionCode.}

proc `nomatchChars=`*(this: var GlobPattern, nomatchChars: string) {.importcpp: "#.set_nomatch_chars(nimStringToStdString(#))", header: stringConversionCode.}

func special*(this: ConfigPage): bool {.importcpp: "#.is_special()".}

func implicit*(this: ConfigPage): bool {.importcpp: "#.is_implicit()".}

func sort*(this: ConfigPage | NodePath): int {.importcpp: "#.get_sort()".}

proc `sort=`*(this: ConfigPage, sort: int) {.importcpp: "#.set_sort(#)".}

func pageSeq*(this: ConfigPage): int {.importcpp: "#.get_page_seq()".}

func trustLevel*(this: ConfigPage | ConfigVariableBase | ConfigVariableCore): int {.importcpp: "#.get_trust_level()".}

proc `trustLevel=`*(this: ConfigPage, trustLevel: int) {.importcpp: "#.set_trust_level(#)".}

func signature*(this: ConfigPage): string {.importcpp: "nimStringFromStdString(#.get_signature())", header: stringConversionCode.}

proc `[]`*(this: ConfigPage_declarations, n: int): ConfigDeclaration {.importcpp: "#.modify_declaration(#)".}

func len*(this: ConfigPage_declarations | ConfigVariableCore_declarations): int {.importcpp: "#.get_num_declarations()".}

func page*(this: ConfigDeclaration): ConfigPage {.importcpp: "#.get_page()".}

func variable*(this: ConfigDeclaration): ConfigVariableCore {.importcpp: "#.get_variable()".}

proc `[]`*(this: ConfigVariableCore_declarations, n: int): ConfigDeclaration {.importcpp: "#.get_declaration(#)".}

func used*(this: ConfigVariableCore): bool {.importcpp: "#.is_used()".}

func closed*(this: ConfigVariableBase | ConfigVariableCore): bool {.importcpp: "#.is_closed()".}

func dynamic*(this: ConfigVariableBase | ConfigVariableCore): bool {.importcpp: "#.is_dynamic()".}

func valueType*(this: ConfigVariableBase | ConfigVariableCore): ConfigFlags_ValueType {.importcpp: "#.get_value_type()".}

proc `valueType=`*(this: ConfigVariableCore, valueType: ConfigFlags_ValueType) {.importcpp: "#.set_value_type(#)".}

func description*(this: ConfigVariableBase | ConfigVariableCore): string {.importcpp: "nimStringFromStdString(#.get_description())", header: stringConversionCode.}

proc `description=`*(this: ConfigVariableCore, description: string) {.importcpp: "#.set_description(nimStringToStdString(#))", header: stringConversionCode.}

func defaultValue*(this: ConfigVariableCore): ConfigDeclaration {.importcpp: "#.get_default_value()".}

proc `defaultValue=`*(this: ConfigVariableCore, defaultValue: string) {.importcpp: "#.set_default_value(nimStringToStdString(#))", header: stringConversionCode.}

proc `[]`*(this: ConfigVariableCore_references, n: int): ConfigDeclaration {.importcpp: "#.get_reference(#)".}

func len*(this: ConfigVariableCore_references): int {.importcpp: "#.get_num_references()".}

proc `[]`*(this: ConfigVariableCore_trustedReferences, n: int): ConfigDeclaration {.importcpp: "#.get_trusted_reference(#)".}

func len*(this: ConfigVariableCore_trustedReferences): int {.importcpp: "#.get_num_trusted_references()".}

proc `[]`*(this: ConfigVariableCore_uniqueReferences, n: int): ConfigDeclaration {.importcpp: "#.get_unique_reference(#)".}

func len*(this: ConfigVariableCore_uniqueReferences): int {.importcpp: "#.get_num_unique_references()".}

func searchPath*(this: ConfigPageManager): DSearchPath {.importcpp: "#.get_search_path()".}

proc `[]`*(this: ConfigPageManager_prcPatterns, n: int): string {.importcpp: "nimStringFromStdString(#.get_prc_pattern(#))", header: stringConversionCode.}

func len*(this: ConfigPageManager_prcPatterns): int {.importcpp: "#.get_num_prc_patterns()".}

proc `[]`*(this: ConfigPageManager_prcEncryptedPatterns, n: int): string {.importcpp: "nimStringFromStdString(#.get_prc_encrypted_pattern(#))", header: stringConversionCode.}

func len*(this: ConfigPageManager_prcEncryptedPatterns): int {.importcpp: "#.get_num_prc_encrypted_patterns()".}

proc `[]`*(this: ConfigPageManager_prcExecutablePatterns, n: int): string {.importcpp: "nimStringFromStdString(#.get_prc_executable_pattern(#))", header: stringConversionCode.}

func len*(this: ConfigPageManager_prcExecutablePatterns): int {.importcpp: "#.get_num_prc_executable_patterns()".}

proc `[]`*(this: ConfigPageManager_implicitPages, n: int): ConfigPage {.importcpp: "#.get_implicit_page(#)".}

func len*(this: ConfigPageManager_implicitPages): int {.importcpp: "#.get_num_implicit_pages()".}

proc `[]`*(this: ConfigPageManager_explicitPages, n: int): ConfigPage {.importcpp: "#.get_explicit_page(#)".}

func len*(this: ConfigPageManager_explicitPages): int {.importcpp: "#.get_num_explicit_pages()".}

proc `[]`*(this: ConfigVariableManager_variables, n: int): ConfigVariableCore {.importcpp: "#.get_variable(#)".}

func len*(this: ConfigVariableManager_variables): int {.importcpp: "#.get_num_variables()".}

func value*(this: ConfigVariableBool): bool {.importcpp: "#.get_value()".}

proc `value=`*(this: ConfigVariableBool, value: bool) {.importcpp: "#.set_value(#)".}

func defaultValue*(this: ConfigVariableBool): bool {.importcpp: "#.get_default_value()".}

func value*(this: ConfigVariableDouble): float64 {.importcpp: "#.get_value()".}

proc `value=`*(this: ConfigVariableDouble, value: float64) {.importcpp: "#.set_value(#)".}

func defaultValue*(this: ConfigVariableDouble): float64 {.importcpp: "#.get_default_value()".}

func value*(this: ConfigVariableFilename): Filename {.importcpp: "#.get_value()".}

proc `value=`*(this: ConfigVariableFilename, value: Filename) {.importcpp: "#.set_value(#)".}

func defaultValue*(this: ConfigVariableFilename): Filename {.importcpp: "#.get_default_value()".}

func value*(this: ConfigVariableInt): int {.importcpp: "#.get_value()".}

proc `value=`*(this: ConfigVariableInt, value: int) {.importcpp: "#.set_value(#)".}

func defaultValue*(this: ConfigVariableInt): int {.importcpp: "#.get_default_value()".}

func value*(this: ConfigVariableInt64): clonglong {.importcpp: "#.get_value()".}

proc `value=`*(this: ConfigVariableInt64, value: clonglong) {.importcpp: "#.set_value(#)".}

func defaultValue*(this: ConfigVariableInt64): clonglong {.importcpp: "#.get_default_value()".}

func value*(this: ConfigVariableSearchPath): DSearchPath {.importcpp: "#.get_value()".}

func defaultValue*(this: ConfigVariableSearchPath): DSearchPath {.importcpp: "#.get_default_value()".}

func value*(this: ConfigVariableString | HTTPCookie): string {.importcpp: "nimStringFromStdString(#.get_value())", header: stringConversionCode.}

proc `value=`*(this: ConfigVariableString | HTTPCookie, value: string) {.importcpp: "#.set_value(nimStringToStdString(#))", header: stringConversionCode.}

func defaultValue*(this: ConfigVariableString): string {.importcpp: "nimStringFromStdString(#.get_default_value())", header: stringConversionCode.}

func fullname*(this: NotifyCategory): string {.importcpp: "nimStringFromStdString(#.get_fullname())", header: stringConversionCode.}

func basename*(this: NotifyCategory): string {.importcpp: "nimStringFromStdString(#.get_basename())", header: stringConversionCode.}

func severity*(this: NotifyCategory): NotifySeverity {.importcpp: "#.get_severity()".}

proc `severity=`*(this: NotifyCategory, severity: NotifySeverity) {.importcpp: "#.set_severity(#)".}

proc `[]`*(this: NotifyCategory_children, i: int): NotifyCategory {.importcpp: "#.get_child(#)".}

func len*(this: NotifyCategory_children): int {.importcpp: "#.get_num_children()".}

func algorithm*(this: IDecryptStream): string {.importcpp: "nimStringFromStdString(#.get_algorithm())", header: stringConversionCode.}

func keyLength*(this: IDecryptStream): int {.importcpp: "#.get_key_length()".}

func iterationCount*(this: IDecryptStream): int {.importcpp: "#.get_iteration_count()".}

proc `algorithm=`*(this: OEncryptStream, algorithm: string) {.importcpp: "#.set_algorithm(nimStringToStdString(#))", header: stringConversionCode.}

proc `keyLength=`*(this: OEncryptStream, keyLength: int) {.importcpp: "#.set_key_length(#)".}

proc `iterationCount=`*(this: OEncryptStream, iterationCount: int) {.importcpp: "#.set_iteration_count(#)".}

func scheme*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_scheme())", header: stringConversionCode.}

proc `scheme=`*(this: var URLSpec, scheme: string) {.importcpp: "#.set_scheme(nimStringToStdString(#))", header: stringConversionCode.}

func authority*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_authority())", header: stringConversionCode.}

proc `authority=`*(this: var URLSpec, authority: string) {.importcpp: "#.set_authority(nimStringToStdString(#))", header: stringConversionCode.}

func username*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_username())", header: stringConversionCode.}

proc `username=`*(this: var URLSpec, username: string) {.importcpp: "#.set_username(nimStringToStdString(#))", header: stringConversionCode.}

func server*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_server())", header: stringConversionCode.}

proc `server=`*(this: var URLSpec, server: string) {.importcpp: "#.set_server(nimStringToStdString(#))", header: stringConversionCode.}

func port*(this: URLSpec): int {.importcpp: "#.get_port()".}

proc `port=`*(this: var URLSpec, port: string) {.importcpp: "#.set_port(nimStringToStdString(#))", header: stringConversionCode.}

proc `port=`*(this: var URLSpec, port: int) {.importcpp: "#.set_port(#)".}

func serverAndPort*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_server_and_port())", header: stringConversionCode.}

proc `serverAndPort=`*(this: var URLSpec, serverAndPort: string) {.importcpp: "#.set_server_and_port(nimStringToStdString(#))", header: stringConversionCode.}

func path*(this: HTTPCookie | URLSpec): string {.importcpp: "nimStringFromStdString(#.get_path())", header: stringConversionCode.}

proc `path=`*(this: HTTPCookie | var URLSpec, path: string) {.importcpp: "#.set_path(nimStringToStdString(#))", header: stringConversionCode.}

func query*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_query())", header: stringConversionCode.}

proc `query=`*(this: var URLSpec, query: string) {.importcpp: "#.set_query(nimStringToStdString(#))", header: stringConversionCode.}

func ssl*(this: URLSpec): bool {.importcpp: "#.is_ssl()".}

proc `name=`*(this: HTTPCookie | NodePath, name: string) {.importcpp: "#.set_name(nimStringToStdString(#))", header: stringConversionCode.}

func domain*(this: HTTPCookie): string {.importcpp: "nimStringFromStdString(#.get_domain())", header: stringConversionCode.}

proc `domain=`*(this: HTTPCookie, domain: string) {.importcpp: "#.set_domain(nimStringToStdString(#))", header: stringConversionCode.}

func expires*(this: HTTPCookie): HTTPDate {.importcpp: "#.get_expires()".}

proc `expires=`*(this: HTTPCookie, expires: HTTPDate) {.importcpp: "#.set_expires(#)".}

func secure*(this: HTTPCookie): bool {.importcpp: "#.get_secure()".}

proc `secure=`*(this: HTTPCookie, flag: bool) {.importcpp: "#.set_secure(#)".}

func refCount*(this: MouseWatcherGroup | ReferenceCount | SocketStreamRecorder | TypedReferenceCount | TypedWritableReferenceCount | VertexDataBlock): int {.importcpp: "#->get_ref_count()".}

func url*(this: DocumentSpec): URLSpec {.importcpp: "#.get_url()".}

proc `url=`*(this: DocumentSpec, url: URLSpec) {.importcpp: "#.set_url(#)".}

func tag*(this: DocumentSpec): HTTPEntityTag {.importcpp: "#.get_tag()".}

proc `tag=`*(this: DocumentSpec, tag: HTTPEntityTag) {.importcpp: "#.set_tag(#)".}

func date*(this: DocumentSpec): HTTPDate {.importcpp: "#.get_date()".}

proc `date=`*(this: DocumentSpec, date: HTTPDate) {.importcpp: "#.set_date(#)".}

func requestMode*(this: DocumentSpec): DocumentSpec_RequestMode {.importcpp: "#.get_request_mode()".}

proc `requestMode=`*(this: DocumentSpec, requestMode: DocumentSpec_RequestMode) {.importcpp: "#.set_request_mode(#)".}

func cacheControl*(this: DocumentSpec): DocumentSpec_CacheControl {.importcpp: "#.get_cache_control()".}

proc `cacheControl=`*(this: DocumentSpec, cacheControl: DocumentSpec_CacheControl) {.importcpp: "#.set_cache_control(#)".}

func progress*(this: Decompressor | Extractor | Patchfile): float {.importcpp: "#.get_progress()".}

func filename*(this: DatagramSink | ModelLoadRequest | ModelSaveRequest | MovieAudio | MovieVideo | Texture): Filename {.importcpp: "#->get_filename()".}

func file*(this: DatagramSink): FileReference {.importcpp: "deconstify(#->get_file())", header: deconstifyCode.}

func filePos*(this: DatagramSink): clonglong {.importcpp: "#->get_file_pos()".}

func name*(this: AnimControl | AnimGroup | AsyncTask | AsyncTaskChain | AsyncTaskManager | Event | GeomVertexData | GraphicsOutput | InternalName | Loader | Material | MouseWatcherRegion | MovieAudio | MovieVideo | Namable | PandaNode | PartGroup | ShaderBuffer | TextFont | Texture | TextureStage | Thread): string {.importcpp: "nimStringFromStdString(#->get_name())", header: stringConversionCode.}

proc `name=`*(this: AnimControl | AnimGroup | AsyncTask | AsyncTaskChain | AsyncTaskManager | Event | GeomVertexData | Loader | Material | MouseWatcherRegion | MovieAudio | MovieVideo | Namable | PandaNode | PartGroup | ShaderBuffer | TextFont | Texture | TextureStage | Thread, name: string) {.importcpp: "#->set_name(nimStringToStdString(#))", header: stringConversionCode.}

proc `[]`*(this: VirtualFileSystem_mounts, n: int): VirtualFileMount {.importcpp: "#.get_mount(#)".}

func len*(this: VirtualFileSystem_mounts): int {.importcpp: "#.get_num_mounts()".}

func longTime*(this: TrueClock): float64 {.importcpp: "#.get_long_time()".}

func shortTime*(this: TrueClock): float64 {.importcpp: "#.get_short_time()".}

func shortRawTime*(this: TrueClock): float64 {.importcpp: "#.get_short_raw_time()".}

func errorCount*(this: TrueClock): int {.importcpp: "#.get_error_count()".}

func allowMultifile*(this: Patchfile): bool {.importcpp: "#.get_allow_multifile()".}

proc `allowMultifile=`*(this: Patchfile, allowMultifile: bool) {.importcpp: "#.set_allow_multifile(#)".}

func footprintLength*(this: Patchfile): int {.importcpp: "#.get_footprint_length()".}

proc `footprintLength=`*(this: Patchfile, length: int) {.importcpp: "#.set_footprint_length(#)".}

func sourceHash*(this: Patchfile): HashVal {.importcpp: "#.get_source_hash()".}

func resultHash*(this: Patchfile): HashVal {.importcpp: "#.get_result_hash()".}

func state*(this: PandaNode | TextGlyph): RenderState {.importcpp: "deconstify(#->get_state())", header: deconstifyCode.}

proc `state=`*(this: PandaNode, state: RenderState) {.importcpp: "#->set_state(#)".}

func effects*(this: PandaNode): RenderEffects {.importcpp: "deconstify(#->get_effects())", header: deconstifyCode.}

proc `effects=`*(this: PandaNode, effects: RenderEffects) {.importcpp: "#->set_effects(#)".}

func transform*(this: PandaNode): TransformState {.importcpp: "deconstify(#->get_transform())", header: deconstifyCode.}

proc `transform=`*(this: PandaNode, transform: TransformState) {.importcpp: "#->set_transform(#)".}

func prevTransform*(this: PandaNode): TransformState {.importcpp: "deconstify(#->get_prev_transform())", header: deconstifyCode.}

proc `[]`*(this: PandaNode_tags, key: string): string {.importcpp: "nimStringFromStdString(#->get_tag(nimStringToStdString(#)))", header: stringConversionCode.}

proc hasKey*(this: PandaNode_tags, key: string): bool {.importcpp: "#->has_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc contains*(this: PandaNode_tags, key: string): bool {.importcpp: "#->has_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc `[]=`*(this: PandaNode_tags, key: string, value: string) {.importcpp: "#->set_tag(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc del*(this: PandaNode_tags, key: string) {.importcpp: "#->clear_tag(nimStringToStdString(#))", header: stringConversionCode.}

func overallHidden*(this: PandaNode): bool {.importcpp: "#->is_overall_hidden()".}

proc `overallHidden=`*(this: PandaNode, overallHidden: bool) {.importcpp: "#->set_overall_hidden(#)".}

func drawControlMask*(this: PandaNode): DrawMask {.importcpp: "#->get_draw_control_mask()".}

func drawShowMask*(this: PandaNode): DrawMask {.importcpp: "#->get_draw_show_mask()".}

func intoCollideMask*(this: CollisionNode | PandaNode): CollideMask {.importcpp: "#->get_into_collide_mask()".}

proc `intoCollideMask=`*(this: CollisionNode | PandaNode, mask: CollideMask) {.importcpp: "#->set_into_collide_mask(#)".}

func legalCollideMask*(this: PandaNode): CollideMask {.importcpp: "#->get_legal_collide_mask()".}

func boundsType*(this: Geom | PandaNode): BoundingVolume_BoundsType {.importcpp: "#->get_bounds_type()".}

proc `boundsType=`*(this: Geom | PandaNode, boundsType: BoundingVolume_BoundsType) {.importcpp: "#->set_bounds_type(#)".}

func nestedVertices*(this: PandaNode): int {.importcpp: "#->get_nested_vertices()".}

func internalBounds*(this: PandaNode): BoundingVolume {.importcpp: "deconstify(#->get_internal_bounds())", header: deconstifyCode.}

func internalVertices*(this: PandaNode): int {.importcpp: "#->get_internal_vertices()".}

func boundsStale*(this: PandaNode): bool {.importcpp: "#->is_bounds_stale()".}

func final*(this: PandaNode): bool {.importcpp: "#->is_final()".}

proc `final=`*(this: PandaNode, flag: bool) {.importcpp: "#->set_final(#)".}

func color*(this: ColorAttrib | ColorBlendAttrib | Fog | Light | LightLensNode | LightNode | TextureStage): LColor {.importcpp: "#->get_color()".}

proc `color=`*(this: Fog | Light | LightLensNode | LightNode | TextureStage, color: LColor) {.importcpp: "#->set_color(#)".}

func colorTemperature*(this: Light | LightLensNode | LightNode): float {.importcpp: "#->get_color_temperature()".}

proc `colorTemperature=`*(this: Light | LightLensNode | LightNode, temperature: float) {.importcpp: "#->set_color_temperature(#)".}

func priority*(this: AsyncTask | Light | LightLensNode | LightNode | PlaneNode | TextureStage): int {.importcpp: "#->get_priority()".}

proc `priority=`*(this: AsyncTask | Light | LightLensNode | LightNode | PlaneNode | TextureStage, priority: int) {.importcpp: "#->set_priority(#)".}

func cullCallback*(this: CallbackNode | DisplayRegion): CallbackObject {.importcpp: "#->get_cull_callback()".}

proc `cullCallback=`*(this: CallbackNode | DisplayRegion, `object`: CallbackObject) {.importcpp: "#->set_cull_callback(#)".}

func drawCallback*(this: CallbackNode | DisplayRegion): CallbackObject {.importcpp: "#->get_draw_callback()".}

proc `drawCallback=`*(this: CallbackNode | DisplayRegion, `object`: CallbackObject) {.importcpp: "#->set_draw_callback(#)".}

proc `[]`*(this: ComputeNode_dispatches, i: int): LVecBase3i {.importcpp: "#->get_dispatch(#)".}

func len*(this: ComputeNode_dispatches): int {.importcpp: "#->get_num_dispatches()".}

proc `[]=`*(this: ComputeNode_dispatches, i: int, numGroups: LVecBase3i) {.importcpp: "#->set_dispatch(#, (LVecBase3i const &)(#))".}

func active*(this: Camera | DisplayRegion | GraphicsOutput | GraphicsStateGuardian): bool {.importcpp: "#->is_active()".}

proc `active=`*(this: Camera | DisplayRegion | GraphicsOutput | GraphicsStateGuardian | MouseWatcherRegion, active: bool) {.importcpp: "#->set_active(#)".}

func scene*(this: Camera): NodePath {.importcpp: "#->get_scene()".}

proc `scene=`*(this: Camera, scene: NodePath) {.importcpp: "#->set_scene(#)".}

proc `[]`*(this: Camera_displayRegions | GraphicsOutput_displayRegions, n: int): DisplayRegion {.importcpp: "#->get_display_region(#)".}

func len*(this: Camera_displayRegions | GraphicsOutput_displayRegions): int {.importcpp: "#->get_num_display_regions()".}

func cameraMask*(this: Camera): DrawMask {.importcpp: "#->get_camera_mask()".}

proc `cameraMask=`*(this: Camera, mask: DrawMask) {.importcpp: "#->set_camera_mask(#)".}

func cullCenter*(this: Camera): NodePath {.importcpp: "#->get_cull_center()".}

proc `cullCenter=`*(this: Camera, cullCenter: NodePath) {.importcpp: "#->set_cull_center(#)".}

func cullBounds*(this: Camera): BoundingVolume {.importcpp: "#->get_cull_bounds()".}

proc `cullBounds=`*(this: Camera, cullBounds: BoundingVolume) {.importcpp: "#->set_cull_bounds(#)".}

func lodCenter*(this: Camera): NodePath {.importcpp: "#->get_lod_center()".}

proc `lodCenter=`*(this: Camera, lodCenter: NodePath) {.importcpp: "#->set_lod_center(#)".}

func initialState*(this: Camera): RenderState {.importcpp: "deconstify(#->get_initial_state())", header: deconstifyCode.}

proc `initialState=`*(this: Camera, state: RenderState) {.importcpp: "#->set_initial_state(#)".}

func tagStateKey*(this: Camera): string {.importcpp: "nimStringFromStdString(#->get_tag_state_key())", header: stringConversionCode.}

proc `tagStateKey=`*(this: Camera, tagStateKey: string) {.importcpp: "#->set_tag_state_key(nimStringToStdString(#))", header: stringConversionCode.}

func lodScale*(this: Camera | LODNode): float {.importcpp: "#->get_lod_scale()".}

proc `lodScale=`*(this: Camera | LODNode, value: float) {.importcpp: "#->set_lod_scale(#)".}

proc `[]`*(this: Camera_tagStates, tagState: string): RenderState {.importcpp: "deconstify(#->get_tag_state(nimStringToStdString(#)))", header: deconstifyCode.}

proc hasKey*(this: Camera_tagStates, tagState: string): bool {.importcpp: "#->has_tag_state(nimStringToStdString(#))", header: stringConversionCode.}

proc contains*(this: Camera_tagStates, tagState: string): bool {.importcpp: "#->has_tag_state(nimStringToStdString(#))", header: stringConversionCode.}

proc `[]=`*(this: Camera_tagStates, tagState: string, state: RenderState) {.importcpp: "#->set_tag_state(nimStringToStdString(#), #)", header: stringConversionCode.}

proc del*(this: Camera_tagStates, tagState: string) {.importcpp: "#->clear_tag_state(nimStringToStdString(#))", header: stringConversionCode.}

proc `[]`*(this: Camera_auxSceneData, nodePath: NodePath): AuxSceneData {.importcpp: "#->get_aux_scene_data(#)".}

proc hasKey*(this: Camera_auxSceneData, nodePath: NodePath): AuxSceneData {.importcpp: "#->get_aux_scene_data(#)".}

proc contains*(this: Camera_auxSceneData, nodePath: NodePath): AuxSceneData {.importcpp: "#->get_aux_scene_data(#)".}

proc `[]=`*(this: Camera_auxSceneData, nodePath: NodePath, data: AuxSceneData) {.importcpp: "#->set_aux_scene_data(#, #)".}

proc del*(this: Camera_auxSceneData, nodePath: NodePath): bool {.importcpp: "#->clear_aux_scene_data(#)".}

func shadowCaster*(this: LightLensNode): bool {.importcpp: "#->is_shadow_caster()".}

func shadowBufferSize*(this: LightLensNode): LVecBase2i {.importcpp: "#->get_shadow_buffer_size()".}

proc `shadowBufferSize=`*(this: LightLensNode, size: LVecBase2i) {.importcpp: "#->set_shadow_buffer_size((LVecBase2i const &)(#))".}

proc `specularColor=`*(this: DirectionalLight | PointLight | Spotlight, color: LColor) {.importcpp: "#->set_specular_color(#)".}

func point*(this: DirectionalLight | PointLight): LPoint3 {.importcpp: "#->get_point()".}

proc `point=`*(this: DirectionalLight | PointLight, point: LPoint3) {.importcpp: "#->set_point((LPoint3 const &)(#))".}

func direction*(this: CollisionRay | DirectionalLight): LVector3 {.importcpp: "#->get_direction()".}

proc `direction=`*(this: CollisionRay | DirectionalLight, direction: LVector3) {.importcpp: "#->set_direction((LVector3 const &)(#))".}

proc `[]`*(this: LODNode_ins, index: int): float {.importcpp: "#->get_in(#)".}

func len*(this: LODNode_ins | LODNode_outs): int {.importcpp: "#->get_num_switches()".}

proc `[]`*(this: LODNode_outs, index: int): float {.importcpp: "#->get_out(#)".}

func lowestSwitch*(this: LODNode): int {.importcpp: "#->get_lowest_switch()".}

func highestSwitch*(this: LODNode): int {.importcpp: "#->get_highest_switch()".}

func center*(this: BoundingSphere | CollisionBox | CollisionSphere | LODNode): LPoint3 {.importcpp: "#->get_center()".}

proc `center=`*(this: BoundingSphere | CollisionSphere | LODNode, center: LPoint3) {.importcpp: "#->set_center((LPoint3 const &)(#))".}

func fadeTime*(this: FadeLODNode): float {.importcpp: "#->get_fade_time()".}

proc `fadeTime=`*(this: FadeLODNode, t: float) {.importcpp: "#->set_fade_time(#)".}

func fadeBinName*(this: FadeLODNode): string {.importcpp: "nimStringFromStdString(#->get_fade_bin_name())", header: stringConversionCode.}

func fadeBinDrawOrder*(this: FadeLODNode): int {.importcpp: "#->get_fade_bin_draw_order()".}

func fadeStateOverride*(this: FadeLODNode): int {.importcpp: "#->get_fade_state_override()".}

proc `fadeStateOverride=`*(this: FadeLODNode, override: int) {.importcpp: "#->set_fade_state_override(#)".}

proc `attenuation=`*(this: PointLight | Spotlight, attenuation: LVecBase3) {.importcpp: "#->set_attenuation((LVecBase3 const &)(#))".}

func maxDistance*(this: PointLight | RectangleLight | Spotlight): float {.importcpp: "#->get_max_distance()".}

proc `maxDistance=`*(this: PointLight | RectangleLight | Spotlight, maxDistance: float) {.importcpp: "#->set_max_distance(#)".}

func playRate*(this: AnimControl | AnimInterface | MovieTexture | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_play_rate()".}

proc `playRate=`*(this: AnimControl | AnimInterface | MovieTexture | SequenceNode | VideoTexture, playRate: float64) {.importcpp: "#->set_play_rate(#)".}

func frameRate*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_frame_rate()".}

func numFrames*(this: AnimBundle | AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_num_frames()".}

func frame*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_frame()".}

func nextFrame*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_next_frame()".}

func frac*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_frac()".}

func fullFrame*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_full_frame()".}

func fullFframe*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_full_fframe()".}

func playing*(this: AnimControl | AnimInterface | MovieTexture | SequenceNode | VideoTexture): bool {.importcpp: "#->is_playing()".}

proc `frameRate=`*(this: SequenceNode, frameRate: float64) {.importcpp: "#->set_frame_rate(#)".}

func radius*(this: BoundingSphere | CollisionCapsule | CollisionSphere | SphereLight): float {.importcpp: "#->get_radius()".}

proc `radius=`*(this: BoundingSphere | CollisionCapsule | CollisionSphere | SphereLight, radius: float) {.importcpp: "#->set_radius(#)".}

proc `exponent=`*(this: Spotlight, exponent: float) {.importcpp: "#->set_exponent(#)".}

func visibleChild*(this: SwitchNode): int {.importcpp: "#->get_visible_child()".}

proc `visibleChild=`*(this: SwitchNode, index: int) {.importcpp: "#->set_visible_child(#)".}

func uSpeed*(this: UvScrollNode): float {.importcpp: "#->get_u_speed()".}

proc `uSpeed=`*(this: UvScrollNode, uSpeed: float) {.importcpp: "#->set_u_speed(#)".}

func vSpeed*(this: UvScrollNode): float {.importcpp: "#->get_v_speed()".}

proc `vSpeed=`*(this: UvScrollNode, vSpeed: float) {.importcpp: "#->set_v_speed(#)".}

func wSpeed*(this: UvScrollNode): float {.importcpp: "#->get_w_speed()".}

proc `wSpeed=`*(this: UvScrollNode, wSpeed: float) {.importcpp: "#->set_w_speed(#)".}

func rSpeed*(this: UvScrollNode): float {.importcpp: "#->get_r_speed()".}

proc `rSpeed=`*(this: UvScrollNode, rSpeed: float) {.importcpp: "#->set_r_speed(#)".}

func cacheRefCount*(this: CachedTypedWritableReferenceCount): int {.importcpp: "#->get_cache_ref_count()".}

func pos*(this: TransformState): LPoint3 {.importcpp: "#->get_pos()".}

func hpr*(this: TransformState): LVecBase3 {.importcpp: "#->get_hpr()".}

func quat*(this: TransformState): LQuaternion {.importcpp: "#->get_quat()".}

func normQuat*(this: TransformState): LQuaternion {.importcpp: "#->get_norm_quat()".}

func scale*(this: TransformState): LVecBase3 {.importcpp: "#->get_scale()".}

func shear*(this: TransformState): LVecBase3 {.importcpp: "#->get_shear()".}

func mat*(this: TransformState): LMatrix4 {.importcpp: "#->get_mat()".}

func slot*(this: RenderAttrib): int {.importcpp: "#->get_slot()".}

func mode*(this: RenderModeAttrib): RenderModeAttrib_Mode {.importcpp: "#->get_mode()".}

func thickness*(this: RenderModeAttrib | RopeNode): float {.importcpp: "#->get_thickness()".}

func perspective*(this: RenderModeAttrib): bool {.importcpp: "#->get_perspective()".}

func wireframeColor*(this: RenderModeAttrib): LColor {.importcpp: "#->get_wireframe_color()".}

proc `[]`*(this: RenderState_attribs, `type`: TypeHandle): RenderAttrib {.importcpp: "deconstify(#->get_attrib(#))", header: deconstifyCode.}

proc hasKey*(this: RenderState_attribs, `type`: TypeHandle): bool {.importcpp: "#->has_attrib(#)".}

proc contains*(this: RenderState_attribs, `type`: TypeHandle): bool {.importcpp: "#->has_attrib(#)".}

proc hasKey*(this: RenderState_attribs, slot: int): bool {.importcpp: "#->has_attrib(#)".}

proc contains*(this: RenderState_attribs, slot: int): bool {.importcpp: "#->has_attrib(#)".}

func referenceAlpha*(this: AlphaTestAttrib): float {.importcpp: "#->get_reference_alpha()".}

func mode*(this: AlphaTestAttrib | DepthTestAttrib): RenderAttrib_PandaCompareFunc {.importcpp: "#->get_mode()".}

func mode*(this: AntialiasAttrib): int {.importcpp: "#->get_mode()".}

func modeType*(this: AntialiasAttrib): int {.importcpp: "#->get_mode_type()".}

func modeQuality*(this: AntialiasAttrib): int {.importcpp: "#->get_mode_quality()".}

func mode*(this: TransparencyAttrib): TransparencyAttrib_Mode {.importcpp: "#->get_mode()".}

func operation*(this: LogicOpAttrib): LogicOpAttrib_Operation {.importcpp: "#->get_operation()".}

proc `[]`*(this: NodePath_nodes, index: int): PandaNode {.importcpp: "#.get_node(#)".}

func len*(this: NodePath_ancestors | NodePath_nodes): int {.importcpp: "#.get_num_nodes()".}

proc `[]`*(this: NodePath_ancestors, index: int): NodePath {.importcpp: "#.get_ancestor(#)".}

func errorType*(this: NodePath): NodePath_ErrorType {.importcpp: "#.get_error_type()".}

func children*(this: NodePath): NodePathCollection {.importcpp: "#.get_children()".}

func stashedChildren*(this: NodePath): NodePathCollection {.importcpp: "#.get_stashed_children()".}

func parent*(this: NodePath): NodePath {.importcpp: "#.get_parent()".}

proc `[]`*(this: NodePath_netTags, key: string): string {.importcpp: "nimStringFromStdString(#.get_net_tag(nimStringToStdString(#)))", header: stringConversionCode.}

proc hasKey*(this: NodePath_netTags, key: string): bool {.importcpp: "#.has_net_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc contains*(this: NodePath_netTags, key: string): bool {.importcpp: "#.has_net_tag(nimStringToStdString(#))", header: stringConversionCode.}

func volume*(this: AudioVolumeAttrib | FiniteBoundingVolume): float {.importcpp: "#->get_volume()".}

func outputs*(this: AuxBitplaneAttrib): int {.importcpp: "#->get_outputs()".}

func fileEndian*(this: BamFile | BamReader | BamWriter): BamEnums_BamEndian {.importcpp: "#.get_file_endian()".}

func fileStdfloatDouble*(this: BamFile | BamReader | BamWriter): bool {.importcpp: "#.get_file_stdfloat_double()".}

func reader*(this: BamFile): BamReader {.importcpp: "#.get_reader()".}

func writer*(this: BamFile): BamWriter {.importcpp: "#.get_writer()".}

func plane*(this: BoundingPlane | CollisionPlane | PlaneNode): LPlane {.importcpp: "#->get_plane()".}

proc `plane=`*(this: CollisionPlane | PlaneNode, plane: LPlane) {.importcpp: "#->set_plane(#)".}

func vizScale*(this: PlaneNode): float {.importcpp: "#->get_viz_scale()".}

proc `vizScale=`*(this: PlaneNode, vizScale: float) {.importcpp: "#->set_viz_scale(#)".}

func clipEffect*(this: PlaneNode): int {.importcpp: "#->get_clip_effect()".}

proc `clipEffect=`*(this: PlaneNode, clipEffect: int) {.importcpp: "#->set_clip_effect(#)".}

func colorType*(this: ColorAttrib): ColorAttrib_Type {.importcpp: "#->get_color_type()".}

func rgbMode*(this: ColorBlendAttrib): ColorBlendAttrib_Mode {.importcpp: "#->get_mode()".}

func rgbOperandA*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_operand_a()".}

func rgbOperandB*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_operand_b()".}

func alphaMode*(this: ColorBlendAttrib): ColorBlendAttrib_Mode {.importcpp: "#->get_alpha_mode()".}

func alphaOperandA*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_alpha_operand_a()".}

func alphaOperandB*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_alpha_operand_b()".}

func scale*(this: ColorScaleAttrib): LVecBase4 {.importcpp: "#->get_scale()".}

func channels*(this: ColorWriteAttrib | MicrophoneAudio): int {.importcpp: "#->get_channels()".}

func binName*(this: CullBinAttrib): string {.importcpp: "nimStringFromStdString(#->get_bin_name())", header: stringConversionCode.}

func drawOrder*(this: CullBinAttrib | TextNode | TextProperties): int {.importcpp: "#->get_draw_order()".}

func mode*(this: CullFaceAttrib): CullFaceAttrib_Mode {.importcpp: "#->get_actual_mode()".}

func reverse*(this: CullFaceAttrib): bool {.importcpp: "#->get_reverse()".}

func effectiveMode*(this: CullFaceAttrib): CullFaceAttrib_Mode {.importcpp: "#->get_effective_mode()".}

func mode*(this: Fog): Fog_Mode {.importcpp: "#->get_mode()".}

proc `mode=`*(this: Fog, mode: Fog_Mode) {.importcpp: "#->set_mode(#)".}

func linearOnsetPoint*(this: Fog): LPoint3 {.importcpp: "#->get_linear_onset_point()".}

proc `linearOnsetPoint=`*(this: Fog, linearOnsetPoint: LPoint3) {.importcpp: "#->set_linear_onset_point((LPoint3 const &)(#))".}

func linearOpaquePoint*(this: Fog): LPoint3 {.importcpp: "#->get_linear_opaque_point()".}

proc `linearOpaquePoint=`*(this: Fog, linearOpaquePoint: LPoint3) {.importcpp: "#->set_linear_opaque_point((LPoint3 const &)(#))".}

func expDensity*(this: Fog): float {.importcpp: "#->get_exp_density()".}

proc `expDensity=`*(this: Fog, expDensity: float) {.importcpp: "#->set_exp_density(#)".}

func fog*(this: FogAttrib): Fog {.importcpp: "#->get_fog()".}

func mode*(this: RescaleNormalAttrib): RescaleNormalAttrib_Mode {.importcpp: "#->get_mode()".}

func offset*(this: DepthOffsetAttrib): int {.importcpp: "#->get_offset()".}

func minValue*(this: DepthOffsetAttrib): float {.importcpp: "#->get_min_value()".}

func maxValue*(this: DepthOffsetAttrib): float {.importcpp: "#->get_max_value()".}

func mode*(this: DepthWriteAttrib): DepthWriteAttrib_Mode {.importcpp: "#->get_mode()".}

proc `[]`*(this: LightAttrib_onLights, n: int): NodePath {.importcpp: "#->get_on_light(#)".}

func len*(this: LightAttrib_onLights): int {.importcpp: "#->get_num_on_lights()".}

proc `[]`*(this: LightAttrib_offLights, n: int): NodePath {.importcpp: "#->get_off_light(#)".}

func len*(this: LightAttrib_offLights): int {.importcpp: "#->get_num_off_lights()".}

func mode*(this: LightRampAttrib): LightRampAttrib_LightRampMode {.importcpp: "#->get_mode()".}

proc `[]`*(this: LoaderFileTypeRegistry_types, n: int): LoaderFileType {.importcpp: "#.get_type(#)".}

func len*(this: LoaderFileTypeRegistry_types | PNMFileTypeRegistry_types): int {.importcpp: "#.get_num_types()".}

func material*(this: MaterialAttrib): Material {.importcpp: "#->get_material()".}

func doneEvent*(this: AsyncFuture): string {.importcpp: "nimStringFromStdString(#->get_done_event())", header: stringConversionCode.}

proc `doneEvent=`*(this: AsyncFuture | AsyncTask, doneEvent: string) {.importcpp: "#->set_done_event(nimStringToStdString(#))", header: stringConversionCode.}

func state*(this: AsyncTask): AsyncTask_State {.importcpp: "#->get_state()".}

func alive*(this: AsyncTask): bool {.importcpp: "#->is_alive()".}

func manager*(this: AsyncTask): AsyncTaskManager {.importcpp: "#->get_manager()".}

func id*(this: AsyncTask): int {.importcpp: "#->get_task_id()".}

func taskChain*(this: AsyncTask): string {.importcpp: "nimStringFromStdString(#->get_task_chain())", header: stringConversionCode.}

proc `taskChain=`*(this: AsyncTask, chainName: string) {.importcpp: "#->set_task_chain(nimStringToStdString(#))", header: stringConversionCode.}

func sort*(this: AsyncTask | DisplayRegion | GraphicsOutput | MouseWatcherRegion | TextureStage): int {.importcpp: "#->get_sort()".}

proc `sort=`*(this: AsyncTask | DisplayRegion | GraphicsOutput | MouseWatcherRegion | TextureStage, sort: int) {.importcpp: "#->set_sort(#)".}

func dt*(this: AsyncTask | ClockObject): float64 {.importcpp: "#->get_dt()".}

func maxDt*(this: AsyncTask | ClockObject): float64 {.importcpp: "#->get_max_dt()".}

func averageDt*(this: AsyncTask): float64 {.importcpp: "#->get_average_dt()".}

func orig*(this: ModelFlattenRequest): PandaNode {.importcpp: "#->get_orig()".}

func options*(this: ModelLoadRequest | ModelSaveRequest): LoaderOptions {.importcpp: "#->get_options()".}

func loader*(this: GraphicsStateGuardian | ModelLoadRequest | ModelSaveRequest): Loader {.importcpp: "#->get_loader()".}

func modelRefCount*(this: ModelRoot): int {.importcpp: "#->get_model_ref_count()".}

func fullpath*(this: ModelRoot | Texture): Filename {.importcpp: "#->get_fullpath()".}

proc `fullpath=`*(this: ModelRoot | Texture, fullpath: Filename) {.importcpp: "#->set_fullpath(#)".}

func timestamp*(this: ModelRoot): Time {.importcpp: "#->get_timestamp()".}

proc `timestamp=`*(this: ModelRoot, timestamp: Time) {.importcpp: "#->set_timestamp(#)".}

func node*(this: ModelSaveRequest): PandaNode {.importcpp: "#->get_node()".}

proc `[]`*(this: TextureAttrib_onStages, n: int): TextureStage {.importcpp: "#->get_on_stage(#)".}

func len*(this: TextureAttrib_onStages): int {.importcpp: "#->get_num_on_stages()".}

proc `[]`*(this: TextureAttrib_textures, stage: TextureStage): Texture {.importcpp: "#->get_on_texture(#)".}

proc hasKey*(this: TextureAttrib_samplers | TextureAttrib_textures, stage: TextureStage): bool {.importcpp: "#->has_on_stage(#)".}

proc contains*(this: TextureAttrib_samplers | TextureAttrib_textures, stage: TextureStage): bool {.importcpp: "#->has_on_stage(#)".}

proc `[]`*(this: TextureAttrib_samplers, stage: TextureStage): SamplerState {.importcpp: "#->get_on_sampler(#)".}

proc `[]`*(this: TextureAttrib_offStages, n: int): TextureStage {.importcpp: "#->get_off_stage(#)".}

func len*(this: TextureAttrib_offStages): int {.importcpp: "#->get_num_off_stages()".}

func doubleSided*(this: OccluderNode): bool {.importcpp: "#->is_double_sided()".}

proc `doubleSided=`*(this: OccluderNode, value: bool) {.importcpp: "#->set_double_sided(#)".}

func minCoverage*(this: OccluderNode): float {.importcpp: "#->get_min_coverage()".}

proc `minCoverage=`*(this: OccluderNode, value: float) {.importcpp: "#->set_min_coverage(#)".}

proc `[]`*(this: OccluderNode_vertices | PortalNode_vertices, n: int): LPoint3 {.importcpp: "#->get_vertex(#)".}

func len*(this: CollisionFloorMesh_vertices | OccluderNode_vertices | PortalNode_vertices): int {.importcpp: "#->get_num_vertices()".}

proc `[]=`*(this: OccluderNode_vertices, n: int, v: LPoint3) {.importcpp: "#->set_vertex(#, (LPoint3 const &)(#))".}

func shader*(this: ShaderAttrib): Shader {.importcpp: "deconstify(#->get_shader())", header: deconstifyCode.}

func instanceCount*(this: ShaderAttrib): int {.importcpp: "#->get_instance_count()".}

func intoPortalMask*(this: PortalNode): PortalMask {.importcpp: "#->get_into_portal_mask()".}

proc `intoPortalMask=`*(this: PortalNode, mask: PortalMask) {.importcpp: "#->set_into_portal_mask(#)".}

func fromPortalMask*(this: PortalNode): PortalMask {.importcpp: "#->get_from_portal_mask()".}

proc `fromPortalMask=`*(this: PortalNode, mask: PortalMask) {.importcpp: "#->set_from_portal_mask(#)".}

func portalGeom*(this: PortalNode): bool {.importcpp: "#->get_portal_geom()".}

proc `portalGeom=`*(this: PortalNode, flag: bool) {.importcpp: "#->set_portal_geom(#)".}

func cellIn*(this: PortalNode): NodePath {.importcpp: "#->get_cell_in()".}

proc `cellIn=`*(this: PortalNode, cell: NodePath) {.importcpp: "#->set_cell_in(#)".}

func cellOut*(this: PortalNode): NodePath {.importcpp: "#->get_cell_out()".}

proc `cellOut=`*(this: PortalNode, cell: NodePath) {.importcpp: "#->set_cell_out(#)".}

func clipPlane*(this: PortalNode): bool {.importcpp: "#->is_clip_plane()".}

proc `clipPlane=`*(this: PortalNode, value: bool) {.importcpp: "#->set_clip_plane(#)".}

func visible*(this: PortalNode): bool {.importcpp: "#->is_visible()".}

proc `visible=`*(this: PortalNode, value: bool) {.importcpp: "#->set_visible(#)".}

func maxDepth*(this: PortalNode): int {.importcpp: "#->get_max_depth()".}

proc `maxDepth=`*(this: PortalNode, value: int) {.importcpp: "#->set_max_depth(#)".}

func open*(this: PortalNode): bool {.importcpp: "#->is_open()".}

proc `open=`*(this: PortalNode, value: bool) {.importcpp: "#->set_open(#)".}

func frame*(this: MouseWatcherRegion | ScissorAttrib): LVecBase4 {.importcpp: "#->get_frame()".}

func mode*(this: ShadeModelAttrib): ShadeModelAttrib_Mode {.importcpp: "#->get_mode()".}

func subfileInfo*(this: MovieVideo): SubfileInfo {.importcpp: "#->get_subfile_info()".}

func rate*(this: MicrophoneAudio): int {.importcpp: "#->get_rate()".}

func font*(this: TextNode | TextProperties): TextFont {.importcpp: "#->get_font()".}

proc `font=`*(this: TextNode | TextProperties, font: TextFont) {.importcpp: "#->set_font(#)".}

func smallCaps*(this: TextNode | TextProperties): bool {.importcpp: "#->get_small_caps()".}

proc `smallCaps=`*(this: TextNode | TextProperties, smallCaps: bool) {.importcpp: "#->set_small_caps(#)".}

func smallCapsScale*(this: TextNode | TextProperties): float {.importcpp: "#->get_small_caps_scale()".}

proc `smallCapsScale=`*(this: TextNode | TextProperties, smallCapsScale: float) {.importcpp: "#->set_small_caps_scale(#)".}

func slant*(this: TextNode | TextProperties): float {.importcpp: "#->get_slant()".}

proc `slant=`*(this: TextNode | TextProperties, slant: float) {.importcpp: "#->set_slant(#)".}

func underscore*(this: TextNode | TextProperties): bool {.importcpp: "#->get_underscore()".}

proc `underscore=`*(this: TextNode | TextProperties, underscore: bool) {.importcpp: "#->set_underscore(#)".}

func underscoreHeight*(this: TextNode | TextProperties): float {.importcpp: "#->get_underscore_height()".}

proc `underscoreHeight=`*(this: TextNode | TextProperties, underscoreHeight: float) {.importcpp: "#->set_underscore_height(#)".}

func align*(this: TextNode | TextProperties): TextProperties_Alignment {.importcpp: "#->get_align()".}

proc `align=`*(this: TextNode | TextProperties, alignType: TextProperties_Alignment) {.importcpp: "#->set_align(#)".}

func indent*(this: TextNode | TextProperties): float {.importcpp: "#->get_indent()".}

proc `indent=`*(this: TextNode | TextProperties, indent: float) {.importcpp: "#->set_indent(#)".}

func wordwrap*(this: TextNode | TextProperties): float {.importcpp: "#->get_wordwrap()".}

proc `wordwrap=`*(this: TextNode | TextProperties, wordwrap: float) {.importcpp: "#->set_wordwrap(#)".}

func preserveTrailingWhitespace*(this: TextNode | TextProperties): bool {.importcpp: "#->get_preserve_trailing_whitespace()".}

proc `preserveTrailingWhitespace=`*(this: TextNode | TextProperties, preserveTrailingWhitespace: bool) {.importcpp: "#->set_preserve_trailing_whitespace(#)".}

func textColor*(this: TextNode | TextProperties): LColor {.importcpp: "#->get_text_color()".}

proc `textColor=`*(this: TextNode | TextProperties, textColor: LColor) {.importcpp: "#->set_text_color(#)".}

func shadowColor*(this: TextNode | TextProperties): LColor {.importcpp: "#->get_shadow_color()".}

proc `shadowColor=`*(this: TextNode | TextProperties, shadowColor: LColor) {.importcpp: "#->set_shadow_color(#)".}

func shadow*(this: TextNode | TextProperties): LVector2 {.importcpp: "#->get_shadow()".}

proc `shadow=`*(this: TextNode | TextProperties, shadowOffset: LVecBase2) {.importcpp: "#->set_shadow((LVecBase2 const &)(#))".}

func bin*(this: TextNode | TextProperties): string {.importcpp: "nimStringFromStdString(#->get_bin())", header: stringConversionCode.}

proc `bin=`*(this: TextNode | TextProperties, bin: string) {.importcpp: "#->set_bin(nimStringToStdString(#))", header: stringConversionCode.}

proc `drawOrder=`*(this: TextNode | TextProperties, drawOrder: int): int {.importcpp: "#->set_draw_order(#)".}

func tabWidth*(this: TextNode | TextProperties): float {.importcpp: "#->get_tab_width()".}

proc `tabWidth=`*(this: TextNode | TextProperties, tabWidth: float) {.importcpp: "#->set_tab_width(#)".}

func glyphScale*(this: TextNode | TextProperties): float {.importcpp: "#->get_glyph_scale()".}

proc `glyphScale=`*(this: TextNode | TextProperties, glyphScale: float) {.importcpp: "#->set_glyph_scale(#)".}

func glyphShift*(this: TextNode | TextProperties): float {.importcpp: "#->get_glyph_shift()".}

proc `glyphShift=`*(this: TextNode | TextProperties, glyphShift: float) {.importcpp: "#->set_glyph_shift(#)".}

func textScale*(this: TextNode | TextProperties): float {.importcpp: "#->get_text_scale()".}

proc `textScale=`*(this: TextNode | TextProperties, textScale: float) {.importcpp: "#->set_text_scale(#)".}

func direction*(this: TextNode | TextProperties): TextProperties_Direction {.importcpp: "#->get_direction()".}

proc `direction=`*(this: TextNode | TextProperties, direction: TextProperties_Direction) {.importcpp: "#->set_direction(#)".}

func maxRows*(this: TextNode): int {.importcpp: "#->get_max_rows()".}

proc `maxRows=`*(this: TextNode, maxRows: int) {.importcpp: "#->set_max_rows(#)".}

func frameColor*(this: TextNode): LColor {.importcpp: "#->get_frame_color()".}

proc `frameColor=`*(this: TextNode, frameColor: LColor) {.importcpp: "#->set_frame_color(#)".}

func cardColor*(this: TextNode): LColor {.importcpp: "#->get_card_color()".}

proc `cardColor=`*(this: TextNode, cardColor: LColor) {.importcpp: "#->set_card_color(#)".}

func cardTexture*(this: TextNode): Texture {.importcpp: "#->get_card_texture()".}

proc `cardTexture=`*(this: TextNode, cardTexture: Texture) {.importcpp: "#->set_card_texture(#)".}

func frameLineWidth*(this: TextNode): float {.importcpp: "#->get_frame_line_width()".}

proc `frameLineWidth=`*(this: TextNode, lineWidth: float) {.importcpp: "#->set_frame_line_width(#)".}

func frameCorners*(this: TextNode): bool {.importcpp: "#->get_frame_corners()".}

proc `frameCorners=`*(this: TextNode, corners: bool) {.importcpp: "#->set_frame_corners(#)".}

func transform*(this: TextNode): LMatrix4 {.importcpp: "#->get_transform()".}

proc `transform=`*(this: TextNode, transform: LMatrix4) {.importcpp: "#->set_transform(#)".}

func coordinateSystem*(this: GraphicsStateGuardian | Lens | TextNode): CoordinateSystem {.importcpp: "#->get_coordinate_system()".}

proc `coordinateSystem=`*(this: GraphicsStateGuardian | Lens | TextNode, cs: CoordinateSystem) {.importcpp: "#->set_coordinate_system(#)".}

func usageHint*(this: GeomPrimitive | GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData | TextNode | Texture): GeomEnums_UsageHint {.importcpp: "#->get_usage_hint()".}

proc `usageHint=`*(this: GeomVertexArrayData | GeomVertexData | TextNode, usageHint: GeomEnums_UsageHint) {.importcpp: "#->set_usage_hint(#)".}

func flattenFlags*(this: TextNode): int {.importcpp: "#->get_flatten_flags()".}

proc `flattenFlags=`*(this: TextNode, flattenFlags: int) {.importcpp: "#->set_flatten_flags(#)".}

func clearColor*(this: DisplayRegion | DrawableRegion | GraphicsOutput | Texture): LColor {.importcpp: "#->get_clear_color()".}

proc `clearColor=`*(this: DisplayRegion | DrawableRegion | GraphicsOutput | Texture, color: LColor) {.importcpp: "#->set_clear_color(#)".}

proc `filename=`*(this: Texture, filename: Filename) {.importcpp: "#->set_filename(#)".}

func alphaFilename*(this: Texture): Filename {.importcpp: "#->get_alpha_filename()".}

proc `alphaFilename=`*(this: Texture, alphaFilename: Filename) {.importcpp: "#->set_alpha_filename(#)".}

func alphaFullpath*(this: Texture): Filename {.importcpp: "#->get_alpha_fullpath()".}

proc `alphaFullpath=`*(this: Texture, alphaFullpath: Filename) {.importcpp: "#->set_alpha_fullpath(#)".}

func xSize*(this: Texture): int {.importcpp: "#->get_x_size()".}

proc `xSize=`*(this: Texture, xSize: int) {.importcpp: "#->set_x_size(#)".}

func ySize*(this: Texture): int {.importcpp: "#->get_y_size()".}

proc `ySize=`*(this: Texture, ySize: int) {.importcpp: "#->set_y_size(#)".}

func zSize*(this: Texture): int {.importcpp: "#->get_z_size()".}

proc `zSize=`*(this: Texture, zSize: int) {.importcpp: "#->set_z_size(#)".}

func numViews*(this: Texture): int {.importcpp: "#->get_num_views()".}

proc `numViews=`*(this: Texture, numViews: int) {.importcpp: "#->set_num_views(#)".}

func numPages*(this: Texture): int {.importcpp: "#->get_num_pages()".}

func numComponents*(this: Texture): int {.importcpp: "#->get_num_components()".}

func componentWidth*(this: Texture): int {.importcpp: "#->get_component_width()".}

func textureType*(this: Texture): Texture_TextureType {.importcpp: "#->get_texture_type()".}

func format*(this: Texture): Texture_Format {.importcpp: "#->get_format()".}

proc `format=`*(this: Texture, format: Texture_Format) {.importcpp: "#->set_format(#)".}

func componentType*(this: Texture): Texture_ComponentType {.importcpp: "#->get_component_type()".}

proc `componentType=`*(this: Texture, componentType: Texture_ComponentType) {.importcpp: "#->set_component_type(#)".}

func wrapU*(this: Texture): SamplerState_WrapMode {.importcpp: "#->get_wrap_u()".}

proc `wrapU=`*(this: Texture, wrap: SamplerState_WrapMode) {.importcpp: "#->set_wrap_u(#)".}

func wrapV*(this: Texture): SamplerState_WrapMode {.importcpp: "#->get_wrap_v()".}

proc `wrapV=`*(this: Texture, wrap: SamplerState_WrapMode) {.importcpp: "#->set_wrap_v(#)".}

func wrapW*(this: Texture): SamplerState_WrapMode {.importcpp: "#->get_wrap_w()".}

proc `wrapW=`*(this: Texture, wrap: SamplerState_WrapMode) {.importcpp: "#->set_wrap_w(#)".}

func minfilter*(this: DynamicTextFont | Texture): SamplerState_FilterType {.importcpp: "#->get_minfilter()".}

proc `minfilter=`*(this: DynamicTextFont | Texture, filter: SamplerState_FilterType) {.importcpp: "#->set_minfilter(#)".}

func effectiveMinfilter*(this: Texture): SamplerState_FilterType {.importcpp: "#->get_effective_minfilter()".}

func magfilter*(this: DynamicTextFont | Texture): SamplerState_FilterType {.importcpp: "#->get_magfilter()".}

proc `magfilter=`*(this: DynamicTextFont | Texture, filter: SamplerState_FilterType) {.importcpp: "#->set_magfilter(#)".}

func effectiveMagfilter*(this: Texture): SamplerState_FilterType {.importcpp: "#->get_effective_magfilter()".}

func anisotropicDegree*(this: DynamicTextFont | Texture): int {.importcpp: "#->get_anisotropic_degree()".}

proc `anisotropicDegree=`*(this: DynamicTextFont | Texture, anisotropicDegree: int) {.importcpp: "#->set_anisotropic_degree(#)".}

func effectiveAnisotropicDegree*(this: Texture): int {.importcpp: "#->get_effective_anisotropic_degree()".}

func borderColor*(this: Texture): LColor {.importcpp: "#->get_border_color()".}

proc `borderColor=`*(this: Texture, color: LColor) {.importcpp: "#->set_border_color(#)".}

func compression*(this: Texture): Texture_CompressionMode {.importcpp: "#->get_compression()".}

proc `compression=`*(this: Texture, compression: Texture_CompressionMode) {.importcpp: "#->set_compression(#)".}

func renderToTexture*(this: Texture): bool {.importcpp: "#->get_render_to_texture()".}

proc `renderToTexture=`*(this: Texture, renderToTexture: bool) {.importcpp: "#->set_render_to_texture(#)".}

func defaultSampler*(this: Texture): SamplerState {.importcpp: "#->get_default_sampler()".}

proc `defaultSampler=`*(this: Texture, sampler: SamplerState) {.importcpp: "#->set_default_sampler(#)".}

func qualityLevel*(this: Texture): Texture_QualityLevel {.importcpp: "#->get_quality_level()".}

proc `qualityLevel=`*(this: Texture, qualityLevel: Texture_QualityLevel) {.importcpp: "#->set_quality_level(#)".}

func effectiveQualityLevel*(this: Texture): Texture_QualityLevel {.importcpp: "#->get_effective_quality_level()".}

func expectedNumMipmapLevels*(this: Texture): int {.importcpp: "#->get_expected_num_mipmap_levels()".}

func ramImageSize*(this: Texture): int {.importcpp: "#->get_ram_image_size()".}

func ramViewSize*(this: Texture): int {.importcpp: "#->get_ram_view_size()".}

func ramPageSize*(this: Texture): int {.importcpp: "#->get_ram_page_size()".}

func expectedRamImageSize*(this: Texture): int {.importcpp: "#->get_expected_ram_image_size()".}

func expectedRamPageSize*(this: Texture): int {.importcpp: "#->get_expected_ram_page_size()".}

func ramImageCompression*(this: Texture): Texture_CompressionMode {.importcpp: "#->get_ram_image_compression()".}

func keepRamImage*(this: Texture): bool {.importcpp: "#->get_keep_ram_image()".}

proc `keepRamImage=`*(this: Texture, keepRamImage: bool) {.importcpp: "#->set_keep_ram_image(#)".}

func cacheable*(this: Texture): bool {.importcpp: "#->is_cacheable()".}

func numRamMipmapImages*(this: Texture): int {.importcpp: "#->get_num_ram_mipmap_images()".}

func numLoadableRamMipmapImages*(this: Texture): int {.importcpp: "#->get_num_loadable_ram_mipmap_images()".}

func simpleXSize*(this: Texture): int {.importcpp: "#->get_simple_x_size()".}

func simpleYSize*(this: Texture): int {.importcpp: "#->get_simple_y_size()".}

func propertiesModified*(this: Texture): UpdateSeq {.importcpp: "#->get_properties_modified()".}

func imageModified*(this: Texture): UpdateSeq {.importcpp: "#->get_image_modified()".}

func simpleImageModified*(this: Texture): UpdateSeq {.importcpp: "#->get_simple_image_modified()".}

func autoTextureScale*(this: Texture): AutoTextureScale {.importcpp: "#->get_auto_texture_scale()".}

proc `autoTextureScale=`*(this: Texture, scale: AutoTextureScale) {.importcpp: "#->set_auto_texture_scale(#)".}

proc `[]`*(this: Texture_auxData, key: string): TypedReferenceCount {.importcpp: "#->get_aux_data(nimStringToStdString(#))", header: stringConversionCode.}

proc hasKey*(this: Texture_auxData, key: string): TypedReferenceCount {.importcpp: "#->get_aux_data(nimStringToStdString(#))", header: stringConversionCode.}

proc contains*(this: Texture_auxData, key: string): TypedReferenceCount {.importcpp: "#->get_aux_data(nimStringToStdString(#))", header: stringConversionCode.}

proc `[]=`*(this: Texture_auxData, key: string, auxData: TypedReferenceCount) {.importcpp: "#->set_aux_data(nimStringToStdString(#), #)", header: stringConversionCode.}

proc del*(this: Texture_auxData, key: string) {.importcpp: "#->clear_aux_data(nimStringToStdString(#))", header: stringConversionCode.}

func origFileXSize*(this: Texture): int {.importcpp: "#->get_orig_file_x_size()".}

func origFileYSize*(this: Texture): int {.importcpp: "#->get_orig_file_y_size()".}

func origFileZSize*(this: Texture): int {.importcpp: "#->get_orig_file_z_size()".}

func loadedFromImage*(this: Texture): bool {.importcpp: "#->get_loaded_from_image()".}

proc `loadedFromImage=`*(this: Texture, flag: bool) {.importcpp: "#->set_loaded_from_image(#)".}

func loadedFromTxo*(this: Texture): bool {.importcpp: "#->get_loaded_from_txo()".}

proc `loadedFromTxo=`*(this: Texture, flag: bool) {.importcpp: "#->set_loaded_from_txo(#)".}

func matchFramebufferFormat*(this: Texture): bool {.importcpp: "#->get_match_framebuffer_format()".}

proc `matchFramebufferFormat=`*(this: Texture, flag: bool) {.importcpp: "#->set_match_framebuffer_format(#)".}

func postLoadStoreCache*(this: Texture): bool {.importcpp: "#->get_post_load_store_cache()".}

proc `postLoadStoreCache=`*(this: Texture, flag: bool) {.importcpp: "#->set_post_load_store_cache(#)".}

func videoLength*(this: MovieTexture): float64 {.importcpp: "#->get_video_length()".}

func videoWidth*(this: MovieTexture | VideoTexture): int {.importcpp: "#->get_video_width()".}

func videoHeight*(this: MovieTexture | VideoTexture): int {.importcpp: "#->get_video_height()".}

func time*(this: MovieTexture): float64 {.importcpp: "#->get_time()".}

proc `time=`*(this: MovieTexture, t: float64) {.importcpp: "#->set_time(#)".}

func loop*(this: MovieTexture): bool {.importcpp: "#->get_loop()".}

proc `loop=`*(this: MovieTexture, enable: bool) {.importcpp: "#->set_loop(#)".}

func loopCount*(this: MovieTexture): int {.importcpp: "#->get_loop_count()".}

proc `loopCount=`*(this: MovieTexture, count: int) {.importcpp: "#->set_loop_count(#)".}

func modified*(this: BufferContext | Geom | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData | SliderTable | TransformBlendTable | TransformTable | VertexSlider | VertexTransform): UpdateSeq {.importcpp: "#->get_modified()".}

func node*(this: NodeVertexTransform): PandaNode {.importcpp: "deconstify(#->get_node())", header: deconstifyCode.}

func prev*(this: NodeVertexTransform): VertexTransform {.importcpp: "deconstify(#->get_prev())", header: deconstifyCode.}

func heightfield*(this: ShaderTerrainMesh): Texture {.importcpp: "#->get_heightfield()".}

proc `heightfield=`*(this: ShaderTerrainMesh, heightfield: Texture) {.importcpp: "#->set_heightfield(#)".}

func chunkSize*(this: ShaderTerrainMesh): int {.importcpp: "#->get_chunk_size()".}

proc `chunkSize=`*(this: ShaderTerrainMesh, chunkSize: int) {.importcpp: "#->set_chunk_size(#)".}

func generatePatches*(this: ShaderTerrainMesh): bool {.importcpp: "#->get_generate_patches()".}

proc `generatePatches=`*(this: ShaderTerrainMesh, generatePatches: bool) {.importcpp: "#->set_generate_patches(#)".}

func updateEnabled*(this: ShaderTerrainMesh): bool {.importcpp: "#->get_update_enabled()".}

proc `updateEnabled=`*(this: ShaderTerrainMesh, updateEnabled: bool) {.importcpp: "#->set_update_enabled(#)".}

func targetTriangleWidth*(this: ShaderTerrainMesh): float {.importcpp: "#->get_target_triangle_width()".}

proc `targetTriangleWidth=`*(this: ShaderTerrainMesh, targetTriangleWidth: float) {.importcpp: "#->set_target_triangle_width(#)".}

func internalScene*(this: RigidBodyCombiner): NodePath {.importcpp: "#->get_internal_scene()".}

proc `[]`*(this: AnimGroup_children, n: int): AnimGroup {.importcpp: "#->get_child(#)".}

func len*(this: AnimGroup_children | PartGroup_children): int {.importcpp: "#->get_num_children()".}

func baseFrameRate*(this: AnimBundle): float64 {.importcpp: "#->get_base_frame_rate()".}

func bundle*(this: AnimBundleNode): AnimBundle {.importcpp: "#->get_bundle()".}

proc `[]`*(this: PartGroup_children, n: int): PartGroup {.importcpp: "#->get_child(#)".}

func valueNode*(this: AnimChannelMatrixDynamic): PandaNode {.importcpp: "#->get_value_node()".}

proc `valueNode=`*(this: AnimChannelMatrixDynamic | AnimChannelScalarDynamic, node: PandaNode) {.importcpp: "#->set_value_node(#)".}

proc `value=`*(this: AnimChannelScalarDynamic, value: float) {.importcpp: "#->set_value(#)".}

func blendType*(this: PartBundle): PartBundle_BlendType {.importcpp: "#->get_blend_type()".}

proc `blendType=`*(this: PartBundle, bt: PartBundle_BlendType) {.importcpp: "#->set_blend_type(#)".}

func animBlendFlag*(this: PartBundle): bool {.importcpp: "#->get_anim_blend_flag()".}

proc `animBlendFlag=`*(this: PartBundle, animBlendFlag: bool) {.importcpp: "#->set_anim_blend_flag(#)".}

func frameBlendFlag*(this: PartBundle): bool {.importcpp: "#->get_frame_blend_flag()".}

proc `frameBlendFlag=`*(this: PartBundle, frameBlendFlag: bool) {.importcpp: "#->set_frame_blend_flag(#)".}

func rootXform*(this: PartBundle): LMatrix4 {.importcpp: "#->get_root_xform()".}

proc `rootXform=`*(this: PartBundle, rootXform: LMatrix4) {.importcpp: "#->set_root_xform(#)".}

proc `[]`*(this: PartBundle_nodes, n: int): PartBundleNode {.importcpp: "#->get_node(#)".}

func len*(this: PartBundle_nodes): int {.importcpp: "#->get_num_nodes()".}

proc `[]`*(this: PartBundleNode_bundles, n: int): PartBundle {.importcpp: "#->get_bundle(#)".}

func len*(this: PartBundleNode_bundleHandles | PartBundleNode_bundles): int {.importcpp: "#->get_num_bundles()".}

proc `[]`*(this: PartBundleNode_bundleHandles, n: int): PartBundleHandle {.importcpp: "#->get_bundle_handle(#)".}

func bundle*(this: PartBundleHandle): PartBundle {.importcpp: "#->get_bundle()".}

proc `bundle=`*(this: PartBundleHandle, bundle: PartBundle) {.importcpp: "#->set_bundle(#)".}

func clientName*(this: PStatClient): string {.importcpp: "nimStringFromStdString(#.get_client_name())", header: stringConversionCode.}

proc `clientName=`*(this: PStatClient, name: string) {.importcpp: "#.set_client_name(nimStringToStdString(#))", header: stringConversionCode.}

func maxRate*(this: PStatClient): float64 {.importcpp: "#.get_max_rate()".}

proc `maxRate=`*(this: PStatClient, rate: float64) {.importcpp: "#.set_max_rate(#)".}

proc `[]`*(this: PStatClient_collectors, index: int): PStatCollector {.importcpp: "#.get_collector(#)".}

func len*(this: PStatClient_collectors): int {.importcpp: "#.get_num_collectors()".}

proc `[]`*(this: PStatClient_threads, index: int): PStatThread {.importcpp: "#.get_thread(#)".}

func len*(this: PStatClient_threads): int {.importcpp: "#.get_num_threads()".}

func mainThread*(this: PStatClient): PStatThread {.importcpp: "#.get_main_thread()".}

func currentThread*(this: PStatClient): PStatThread {.importcpp: "#.get_current_thread()".}

func realTime*(this: PStatClient): float64 {.importcpp: "#.get_real_time()".}

func thread*(this: PStatThread): Thread {.importcpp: "#.get_thread()".}

func name*(this: VertexSlider): InternalName {.importcpp: "deconstify(#->get_name())", header: deconstifyCode.}

func slider*(this: VertexSlider): float {.importcpp: "#->get_slider()".}

func collisionOrigin*(this: CollisionSolid): LPoint3 {.importcpp: "#->get_collision_origin()".}

func tangible*(this: CollisionSolid): bool {.importcpp: "#->is_tangible()".}

proc `tangible=`*(this: CollisionSolid, tangible: bool) {.importcpp: "#->set_tangible(#)".}

func respectEffectiveNormal*(this: CollisionSolid): bool {.importcpp: "#->get_respect_effective_normal()".}

proc `respectEffectiveNormal=`*(this: CollisionSolid, respectEffectiveNormal: bool) {.importcpp: "#->set_respect_effective_normal(#)".}

func bounds*(this: CollisionSolid): BoundingVolume {.importcpp: "deconstify(#->get_bounds())", header: deconstifyCode.}

proc `bounds=`*(this: CollisionSolid, boundingVolume: BoundingVolume) {.importcpp: "#->set_bounds(#)".}

func min*(this: CollisionBox | FiniteBoundingVolume): LPoint3 {.importcpp: "#->get_min()".}

func max*(this: CollisionBox | FiniteBoundingVolume): LPoint3 {.importcpp: "#->get_max()".}

func dimensions*(this: CollisionBox): LVector3 {.importcpp: "#->get_dimensions()".}

func pointA*(this: CollisionCapsule | CollisionSegment): LPoint3 {.importcpp: "#->get_point_a()".}

proc `pointA=`*(this: CollisionCapsule | CollisionSegment, a: LPoint3) {.importcpp: "#->set_point_a((LPoint3 const &)(#))".}

func pointB*(this: CollisionCapsule | CollisionSegment): LPoint3 {.importcpp: "#->get_point_b()".}

proc `pointB=`*(this: CollisionCapsule | CollisionSegment, b: LPoint3) {.importcpp: "#->set_point_b((LPoint3 const &)(#))".}

func fromCollideMask*(this: CollisionNode): CollideMask {.importcpp: "#->get_from_collide_mask()".}

proc `fromCollideMask=`*(this: CollisionNode, mask: CollideMask) {.importcpp: "#->set_from_collide_mask(#)".}

proc `[]`*(this: CollisionNode_solids, n: int): CollisionSolid {.importcpp: "deconstify(#->get_solid(#))", header: deconstifyCode.}

func len*(this: CollisionNode_solids): int {.importcpp: "#->get_num_solids()".}

proc `[]=`*(this: CollisionNode_solids, n: int, solid: CollisionSolid) {.importcpp: "#->set_solid(#, #)".}

func colliderSort*(this: CollisionNode): int {.importcpp: "#->get_collider_sort()".}

proc `colliderSort=`*(this: CollisionNode, sort: int) {.importcpp: "#->set_collider_sort(#)".}

func respectPrevTransform*(this: CollisionTraverser): bool {.importcpp: "#.get_respect_prev_transform()".}

proc `respectPrevTransform=`*(this: CollisionTraverser, flag: bool) {.importcpp: "#.set_respect_prev_transform(#)".}

proc `[]`*(this: CollisionTraverser_colliders, n: int): NodePath {.importcpp: "#.get_collider(#)".}

func len*(this: CollisionTraverser_colliders): int {.importcpp: "#.get_num_colliders()".}

func recorder*(this: CollisionTraverser): CollisionRecorder {.importcpp: "#.get_recorder()".}

proc `recorder=`*(this: CollisionTraverser, recorder: CollisionVisualizer | CollisionRecorder) {.importcpp: "#.set_recorder(#)".}

func fromSolid*(this: CollisionEntry): CollisionSolid {.importcpp: "deconstify(#->get_from())", header: deconstifyCode.}

func intoSolid*(this: CollisionEntry): CollisionSolid {.importcpp: "deconstify(#->get_into())", header: deconstifyCode.}

func fromNode*(this: CollisionEntry): CollisionNode {.importcpp: "#->get_from_node()".}

func intoNode*(this: CollisionEntry): PandaNode {.importcpp: "#->get_into_node()".}

func fromNodePath*(this: CollisionEntry): NodePath {.importcpp: "#->get_from_node_path()".}

func intoNodePath*(this: CollisionEntry): NodePath {.importcpp: "#->get_into_node_path()".}

func t*(this: CollisionEntry): float {.importcpp: "#->get_t()".}

proc `t=`*(this: CollisionEntry, t: float) {.importcpp: "#->set_t(#)".}

func respectPrevTransform*(this: CollisionEntry): bool {.importcpp: "#->get_respect_prev_transform()".}

func normal*(this: CollisionPlane): LVector3 {.importcpp: "#->get_normal()".}

proc `[]`*(this: CollisionFloorMesh_vertices, index: int): LPoint3 {.importcpp: "#->get_vertex(#)".}

proc `[]`*(this: CollisionFloorMesh_triangles, index: int): LPoint3i {.importcpp: "#->get_triangle(#)".}

func len*(this: CollisionFloorMesh_triangles): int {.importcpp: "#->get_num_triangles()".}

proc `[]`*(this: BoundingBox_points | BoundingHexahedron_points | CollisionPolygon_points, n: int): LPoint3 {.importcpp: "#->get_point(#)".}

func len*(this: BoundingBox_points | BoundingHexahedron_points | CollisionPolygon_points | GeomVertexFormat_points): int {.importcpp: "#->get_num_points()".}

func valid*(this: CollisionPolygon | GraphicsStateGuardian | TextFont): bool {.importcpp: "#->is_valid()".}

func concave*(this: CollisionPolygon): bool {.importcpp: "#->is_concave()".}

proc `[]`*(this: CollisionHandlerEvent_inPatterns, n: int): string {.importcpp: "nimStringFromStdString(#->get_in_pattern(#))", header: stringConversionCode.}

func len*(this: CollisionHandlerEvent_inPatterns): int {.importcpp: "#->get_num_in_patterns()".}

proc `[]`*(this: CollisionHandlerEvent_againPatterns, n: int): string {.importcpp: "nimStringFromStdString(#->get_again_pattern(#))", header: stringConversionCode.}

func len*(this: CollisionHandlerEvent_againPatterns): int {.importcpp: "#->get_num_again_patterns()".}

proc `[]`*(this: CollisionHandlerEvent_outPatterns, n: int): string {.importcpp: "nimStringFromStdString(#->get_out_pattern(#))", header: stringConversionCode.}

func len*(this: CollisionHandlerEvent_outPatterns): int {.importcpp: "#->get_num_out_patterns()".}

func center*(this: CollisionHandlerPhysical): NodePath {.importcpp: "#->get_center()".}

proc `center=`*(this: CollisionHandlerPhysical, center: NodePath) {.importcpp: "#->set_center(#)".}

func offset*(this: CollisionHandlerFloor | CollisionHandlerGravity): float {.importcpp: "#->get_offset()".}

proc `offset=`*(this: CollisionHandlerFloor | CollisionHandlerGravity, offset: float) {.importcpp: "#->set_offset(#)".}

func reach*(this: CollisionHandlerFloor | CollisionHandlerGravity): float {.importcpp: "#->get_reach()".}

proc `reach=`*(this: CollisionHandlerFloor | CollisionHandlerGravity, reach: float) {.importcpp: "#->set_reach(#)".}

func maxVelocity*(this: CollisionHandlerFloor | CollisionHandlerGravity): float {.importcpp: "#->get_max_velocity()".}

proc `maxVelocity=`*(this: CollisionHandlerFloor | CollisionHandlerGravity, maxVel: float) {.importcpp: "#->set_max_velocity(#)".}

func horizontal*(this: CollisionHandlerPusher): bool {.importcpp: "#->get_horizontal()".}

proc `horizontal=`*(this: CollisionHandlerPusher, flag: bool) {.importcpp: "#->set_horizontal(#)".}

func airborneHeight*(this: CollisionHandlerGravity): float {.importcpp: "#->get_airborne_height()".}

func onGround*(this: CollisionHandlerGravity): bool {.importcpp: "#->is_on_ground()".}

func impactVelocity*(this: CollisionHandlerGravity): float {.importcpp: "#->get_impact_velocity()".}

func contactNormal*(this: CollisionHandlerGravity): LVector3 {.importcpp: "#->get_contact_normal()".}

func velocity*(this: CollisionHandlerGravity): float {.importcpp: "#->get_velocity()".}

proc `velocity=`*(this: CollisionHandlerGravity, velocity: float) {.importcpp: "#->set_velocity(#)".}

func gravity*(this: CollisionHandlerGravity): float {.importcpp: "#->get_gravity()".}

proc `gravity=`*(this: CollisionHandlerGravity, gravity: float) {.importcpp: "#->set_gravity(#)".}

proc `[]`*(this: CollisionHandlerQueue_entries, n: int): CollisionEntry {.importcpp: "#->get_entry(#)".}

func len*(this: CollisionHandlerQueue_entries): int {.importcpp: "#->get_num_entries()".}

func origin*(this: CollisionRay): LPoint3 {.importcpp: "#->get_origin()".}

proc `origin=`*(this: CollisionRay, origin: LPoint3) {.importcpp: "#->set_origin((LPoint3 const &)(#))".}

func parabola*(this: CollisionParabola): LParabola {.importcpp: "#->get_parabola()".}

proc `parabola=`*(this: CollisionParabola, parabola: LParabola) {.importcpp: "#->set_parabola(#)".}

func t1*(this: CollisionParabola): float {.importcpp: "#->get_t1()".}

proc `t1=`*(this: CollisionParabola, t1: float) {.importcpp: "#->set_t1(#)".}

func t2*(this: CollisionParabola): float {.importcpp: "#->get_t2()".}

proc `t2=`*(this: CollisionParabola, t2: float) {.importcpp: "#->set_t2(#)".}

func pointScale*(this: CollisionVisualizer): float {.importcpp: "#->get_point_scale()".}

proc `pointScale=`*(this: CollisionVisualizer, pointScale: float) {.importcpp: "#->set_point_scale(#)".}

func normalScale*(this: CollisionVisualizer): float {.importcpp: "#->get_normal_scale()".}

proc `normalScale=`*(this: CollisionVisualizer, normalScale: float) {.importcpp: "#->set_normal_scale(#)".}

func displayWidth*(this: GraphicsPipe): int {.importcpp: "#->get_display_width()".}

func displayHeight*(this: GraphicsPipe): int {.importcpp: "#->get_display_height()".}

func displayZoom*(this: GraphicsPipe): float {.importcpp: "#->get_display_zoom()".}

func displayInformation*(this: GraphicsPipe): DisplayInformation {.importcpp: "#->get_display_information()".}

func interfaceName*(this: GraphicsPipe): string {.importcpp: "nimStringFromStdString(#->get_interface_name())", header: stringConversionCode.}

func clearDepth*(this: DisplayRegion | DrawableRegion | GraphicsOutput): float {.importcpp: "#->get_clear_depth()".}

proc `clearDepth=`*(this: DisplayRegion | DrawableRegion | GraphicsOutput, depth: float) {.importcpp: "#->set_clear_depth(#)".}

func clearStencil*(this: DisplayRegion | DrawableRegion | GraphicsOutput): int {.importcpp: "#->get_clear_stencil()".}

proc `clearStencil=`*(this: DisplayRegion | DrawableRegion | GraphicsOutput, stencil: int) {.importcpp: "#->set_clear_stencil(#)".}

func pixelZoom*(this: DisplayRegion | DrawableRegion | GraphicsOutput): float {.importcpp: "#->get_pixel_zoom()".}

proc `pixelZoom=`*(this: DisplayRegion | DrawableRegion | GraphicsOutput, pixelZoom: float) {.importcpp: "#->set_pixel_zoom(#)".}

func pixelFactor*(this: DisplayRegion | DrawableRegion | GraphicsOutput): float {.importcpp: "#->get_pixel_factor()".}

func origin*(this: WindowProperties): LPoint2i {.importcpp: "#.get_origin()".}

proc `origin=`*(this: var WindowProperties, origin: LPoint2i) {.importcpp: "#.set_origin((LPoint2i const &)(#))".}

func size*(this: WindowProperties): LVector2i {.importcpp: "#.get_size()".}

proc `size=`*(this: var WindowProperties, size: LVector2i) {.importcpp: "#.set_size((LVector2i const &)(#))".}

func mouseMode*(this: WindowProperties): WindowProperties_MouseMode {.importcpp: "#.get_mouse_mode()".}

proc `mouseMode=`*(this: var WindowProperties, mode: WindowProperties_MouseMode) {.importcpp: "#.set_mouse_mode(#)".}

func title*(this: WindowProperties): string {.importcpp: "nimStringFromStdString(#.get_title())", header: stringConversionCode.}

proc `title=`*(this: var WindowProperties, title: string) {.importcpp: "#.set_title(nimStringToStdString(#))", header: stringConversionCode.}

func undecorated*(this: WindowProperties): bool {.importcpp: "#.get_undecorated()".}

proc `undecorated=`*(this: var WindowProperties, undecorated: bool) {.importcpp: "#.set_undecorated(#)".}

func fixedSize*(this: WindowProperties): bool {.importcpp: "#.get_fixed_size()".}

proc `fixedSize=`*(this: var WindowProperties, fixedSize: bool) {.importcpp: "#.set_fixed_size(#)".}

func fullscreen*(this: WindowProperties): bool {.importcpp: "#.get_fullscreen()".}

proc `fullscreen=`*(this: var WindowProperties, fullscreen: bool) {.importcpp: "#.set_fullscreen(#)".}

func foreground*(this: WindowProperties): bool {.importcpp: "#.get_foreground()".}

proc `foreground=`*(this: var WindowProperties, foreground: bool) {.importcpp: "#.set_foreground(#)".}

func minimized*(this: WindowProperties): bool {.importcpp: "#.get_minimized()".}

proc `minimized=`*(this: var WindowProperties, minimized: bool) {.importcpp: "#.set_minimized(#)".}

func open*(this: WindowProperties): bool {.importcpp: "#.get_open()".}

proc `open=`*(this: var WindowProperties, open: bool) {.importcpp: "#.set_open(#)".}

func cursorHidden*(this: WindowProperties): bool {.importcpp: "#.get_cursor_hidden()".}

proc `cursorHidden=`*(this: var WindowProperties, cursorHidden: bool) {.importcpp: "#.set_cursor_hidden(#)".}

func iconFilename*(this: WindowProperties): Filename {.importcpp: "#.get_icon_filename()".}

proc `iconFilename=`*(this: var WindowProperties, iconFilename: Filename) {.importcpp: "#.set_icon_filename(#)".}

func cursorFilename*(this: WindowProperties): Filename {.importcpp: "#.get_cursor_filename()".}

proc `cursorFilename=`*(this: var WindowProperties, cursorFilename: Filename) {.importcpp: "#.set_cursor_filename(#)".}

func zOrder*(this: WindowProperties): WindowProperties_ZOrder {.importcpp: "#.get_z_order()".}

proc `zOrder=`*(this: var WindowProperties, zOrder: WindowProperties_ZOrder) {.importcpp: "#.set_z_order(#)".}

func parentWindow*(this: WindowProperties): WindowHandle {.importcpp: "#.get_parent_window()".}

proc `parentWindow=`*(this: var WindowProperties, parentWindow: WindowHandle) {.importcpp: "#.set_parent_window(#)".}

proc `parentWindow=`*(this: var WindowProperties, parent: int) {.importcpp: "#.set_parent_window(#)".}

func dimensions*(this: DisplayRegion): LVecBase4 {.importcpp: "#->get_dimensions()".}

proc `dimensions=`*(this: DisplayRegion, dimensions: LVecBase4) {.importcpp: "#->set_dimensions((LVecBase4 const &)(#))".}

func window*(this: DisplayRegion): GraphicsOutput {.importcpp: "#->get_window()".}

func pipe*(this: DisplayRegion | GraphicsOutput | GraphicsStateGuardian): GraphicsPipe {.importcpp: "#->get_pipe()".}

func stereo*(this: DisplayRegion): bool {.importcpp: "#->is_stereo()".}

func camera*(this: DisplayRegion): NodePath {.importcpp: "#->get_camera()".}

proc `camera=`*(this: DisplayRegion, camera: NodePath) {.importcpp: "#->set_camera(#)".}

func stereoChannel*(this: DisplayRegion): Lens_StereoChannel {.importcpp: "#->get_stereo_channel()".}

proc `stereoChannel=`*(this: DisplayRegion, stereoChannel: Lens_StereoChannel) {.importcpp: "#->set_stereo_channel(#)".}

func texViewOffset*(this: DisplayRegion | TextureStage): int {.importcpp: "#->get_tex_view_offset()".}

proc `texViewOffset=`*(this: DisplayRegion | TextureStage, texViewOffset: int) {.importcpp: "#->set_tex_view_offset(#)".}

func incompleteRender*(this: DisplayRegion): bool {.importcpp: "#->get_incomplete_render()".}

proc `incompleteRender=`*(this: DisplayRegion | GraphicsStateGuardian, incompleteRender: bool) {.importcpp: "#->set_incomplete_render(#)".}

func textureReloadPriority*(this: DisplayRegion): int {.importcpp: "#->get_texture_reload_priority()".}

proc `textureReloadPriority=`*(this: DisplayRegion, textureReloadPriority: int) {.importcpp: "#->set_texture_reload_priority(#)".}

func lensIndex*(this: DisplayRegion): int {.importcpp: "#->get_lens_index()".}

proc `lensIndex=`*(this: DisplayRegion, index: int) {.importcpp: "#->set_lens_index(#)".}

func cullTraverser*(this: DisplayRegion): CullTraverser {.importcpp: "#->get_cull_traverser()".}

proc `cullTraverser=`*(this: DisplayRegion, trav: CullTraverser) {.importcpp: "#->set_cull_traverser(#)".}

func targetTexPage*(this: DisplayRegion): int {.importcpp: "#->get_target_tex_page()".}

proc `targetTexPage=`*(this: DisplayRegion, page: int) {.importcpp: "#->set_target_tex_page(#)".}

func scissorEnabled*(this: DisplayRegion): bool {.importcpp: "#->get_scissor_enabled()".}

proc `scissorEnabled=`*(this: DisplayRegion, scissorEnabled: bool) {.importcpp: "#->set_scissor_enabled(#)".}

func pixelSize*(this: DisplayRegion): LVecBase2i {.importcpp: "#->get_pixel_size()".}

func gsg*(this: GraphicsOutput): GraphicsStateGuardian {.importcpp: "#->get_gsg()".}

func engine*(this: GraphicsOutput): GraphicsEngine {.importcpp: "#->get_engine()".}

func size*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_size()".}

func fbSize*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_fb_size()".}

func sbsLeftSize*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_sbs_left_size()".}

func sbsRightSize*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_sbs_right_size()".}

func oneShot*(this: GraphicsOutput): bool {.importcpp: "#->get_one_shot()".}

proc `oneShot=`*(this: GraphicsOutput, oneShot: bool) {.importcpp: "#->set_one_shot(#)".}

func inverted*(this: GraphicsOutput): bool {.importcpp: "#->get_inverted()".}

proc `inverted=`*(this: GraphicsOutput, inverted: bool) {.importcpp: "#->set_inverted(#)".}

func swapEyes*(this: GraphicsOutput): bool {.importcpp: "#->get_swap_eyes()".}

proc `swapEyes=`*(this: GraphicsOutput, swapEyes: bool) {.importcpp: "#->set_swap_eyes(#)".}

func childSort*(this: GraphicsOutput): int {.importcpp: "#->get_child_sort()".}

proc `childSort=`*(this: GraphicsOutput, childSort: int) {.importcpp: "#->set_child_sort(#)".}

proc `[]`*(this: GraphicsOutput_activeDisplayRegions, n: int): DisplayRegion {.importcpp: "#->get_active_display_region(#)".}

func len*(this: GraphicsOutput_activeDisplayRegions): int {.importcpp: "#->get_num_active_display_regions()".}

func supportsRenderTexture*(this: GraphicsOutput): bool {.importcpp: "#->get_supports_render_texture()".}

proc `loader=`*(this: GraphicsStateGuardian, loader: Loader) {.importcpp: "#->set_loader(#)".}

func shaderGenerator*(this: GraphicsStateGuardian): ShaderGenerator {.importcpp: "#->get_shader_generator()".}

proc `shaderGenerator=`*(this: GraphicsStateGuardian, shaderGenerator: ShaderGenerator) {.importcpp: "#->set_shader_generator(#)".}

func maxTextureStages*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_texture_stages()".}

func max3dTextureDimension*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_3d_texture_dimension()".}

func max2dTextureArrayLayers*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_2d_texture_array_layers()".}

func maxCubeMapDimension*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_cube_map_dimension()".}

func maxBufferTextureSize*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_buffer_texture_size()".}

func supportsTextureCombine*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_texture_combine()".}

func supportsTextureSavedResult*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_texture_saved_result()".}

func supportsTextureDot3*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_texture_dot3()".}

func supports3dTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_3d_texture()".}

func supports2dTextureArray*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_2d_texture_array()".}

func supportsCubeMap*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_cube_map()".}

func supportsBufferTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_buffer_texture()".}

func supportsCubeMapArray*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_cube_map_array()".}

func supportsTexNonPow2*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_tex_non_pow2()".}

func supportsCompressedTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_compressed_texture()".}

func maxLights*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_lights()".}

func maxClipPlanes*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_clip_planes()".}

func maxVertexTransforms*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_vertex_transforms()".}

func maxVertexTransformIndices*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_vertex_transform_indices()".}

func copyTextureInverted*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_copy_texture_inverted()".}

func supportsGenerateMipmap*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_generate_mipmap()".}

func supportsDepthTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_depth_texture()".}

func supportsDepthStencil*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_depth_stencil()".}

func supportsLuminanceTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_luminance_texture()".}

func supportsSamplerObjects*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_sampler_objects()".}

func supportsBasicShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_basic_shaders()".}

func supportsGeometryShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_geometry_shaders()".}

func supportsTessellationShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_tessellation_shaders()".}

func supportsComputeShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_compute_shaders()".}

func supportsGlsl*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_glsl()".}

func supportsStencil*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_stencil()".}

func supportsTwoSidedStencil*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_two_sided_stencil()".}

func supportsGeometryInstancing*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_geometry_instancing()".}

func supportsIndirectDraw*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_indirect_draw()".}

func supportsOcclusionQuery*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_occlusion_query()".}

func supportsTimerQuery*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_timer_query()".}

func timerQueriesActive*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_timer_queries_active()".}

func maxColorTargets*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_color_targets()".}

func supportsDualSourceBlending*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_dual_source_blending()".}

func shaderModel*(this: GraphicsStateGuardian): GraphicsStateGuardian_ShaderModel {.importcpp: "#->get_shader_model()".}

proc `shaderModel=`*(this: GraphicsStateGuardian, shaderModel: GraphicsStateGuardian_ShaderModel) {.importcpp: "#->set_shader_model(#)".}

func preparedObjects*(this: GraphicsStateGuardian): PreparedGraphicsObjects {.importcpp: "#->get_prepared_objects()".}

func gamma*(this: GraphicsStateGuardian): float {.importcpp: "#->get_gamma()".}

proc `gamma=`*(this: GraphicsStateGuardian, gamma: float): bool {.importcpp: "#->set_gamma(#)".}

func textureQualityOverride*(this: GraphicsStateGuardian): Texture_QualityLevel {.importcpp: "#->get_texture_quality_override()".}

proc `textureQualityOverride=`*(this: GraphicsStateGuardian, qualityLevel: Texture_QualityLevel) {.importcpp: "#->set_texture_quality_override(#)".}

func flashTexture*(this: GraphicsStateGuardian): Texture {.importcpp: "#->get_flash_texture()".}

proc `flashTexture=`*(this: GraphicsStateGuardian, tex: Texture) {.importcpp: "#->set_flash_texture(#)".}

func driverVendor*(this: GraphicsStateGuardian): string {.importcpp: "nimStringFromStdString(#->get_driver_vendor())", header: stringConversionCode.}

func driverRenderer*(this: GraphicsStateGuardian): string {.importcpp: "nimStringFromStdString(#->get_driver_renderer())", header: stringConversionCode.}

func driverVersion*(this: GraphicsStateGuardian): string {.importcpp: "nimStringFromStdString(#->get_driver_version())", header: stringConversionCode.}

func driverVersionMajor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_version_major()".}

func driverVersionMinor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_version_minor()".}

func driverShaderVersionMajor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_shader_version_major()".}

func driverShaderVersionMinor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_shader_version_minor()".}

func scene*(this: GraphicsStateGuardian): SceneSetup {.importcpp: "#->get_scene()".}

proc `scene=`*(this: GraphicsStateGuardian, sceneSetup: SceneSetup): bool {.importcpp: "#->set_scene(#)".}

func threadingModel*(this: GraphicsEngine): GraphicsThreadingModel {.importcpp: "#->get_threading_model()".}

proc `threadingModel=`*(this: GraphicsEngine, threadingModel: GraphicsThreadingModel) {.importcpp: "#->set_threading_model(#)".}

func renderLock*(this: GraphicsEngine): ReMutex {.importcpp: "#->get_render_lock()".}

func autoFlip*(this: GraphicsEngine): bool {.importcpp: "#->get_auto_flip()".}

proc `autoFlip=`*(this: GraphicsEngine, autoFlip: bool) {.importcpp: "#->set_auto_flip(#)".}

func portalCull*(this: GraphicsEngine): bool {.importcpp: "#->get_portal_cull()".}

proc `portalCull=`*(this: GraphicsEngine, value: bool) {.importcpp: "#->set_portal_cull(#)".}

func defaultLoader*(this: GraphicsEngine): Loader {.importcpp: "#->get_default_loader()".}

proc `defaultLoader=`*(this: GraphicsEngine, loader: Loader) {.importcpp: "#->set_default_loader(#)".}

proc `[]`*(this: GraphicsEngine_windows, n: int): GraphicsOutput {.importcpp: "#->get_window(#)".}

func len*(this: GraphicsEngine_windows): int {.importcpp: "#->get_num_windows()".}

func leftEye*(this: StereoDisplayRegion): DisplayRegion {.importcpp: "#->get_left_eye()".}

func rightEye*(this: StereoDisplayRegion): DisplayRegion {.importcpp: "#->get_right_eye()".}

func depthBits*(this: FrameBufferProperties): int {.importcpp: "#.get_depth_bits()".}

proc `depthBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_depth_bits(#)".}

func colorBits*(this: FrameBufferProperties): int {.importcpp: "#.get_color_bits()".}

proc `colorBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_color_bits(#)".}

func redBits*(this: FrameBufferProperties): int {.importcpp: "#.get_red_bits()".}

proc `redBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_red_bits(#)".}

func greenBits*(this: FrameBufferProperties): int {.importcpp: "#.get_green_bits()".}

proc `greenBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_green_bits(#)".}

func blueBits*(this: FrameBufferProperties): int {.importcpp: "#.get_blue_bits()".}

proc `blueBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_blue_bits(#)".}

func alphaBits*(this: FrameBufferProperties): int {.importcpp: "#.get_alpha_bits()".}

proc `alphaBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_alpha_bits(#)".}

func stencilBits*(this: FrameBufferProperties): int {.importcpp: "#.get_stencil_bits()".}

proc `stencilBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_stencil_bits(#)".}

func accumBits*(this: FrameBufferProperties): int {.importcpp: "#.get_accum_bits()".}

proc `accumBits=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_accum_bits(#)".}

func auxRgba*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_rgba()".}

proc `auxRgba=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_aux_rgba(#)".}

func auxHrgba*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_hrgba()".}

proc `auxHrgba=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_aux_hrgba(#)".}

func auxFloat*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_float()".}

proc `auxFloat=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_aux_float(#)".}

func multisamples*(this: FrameBufferProperties): int {.importcpp: "#.get_multisamples()".}

proc `multisamples=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_multisamples(#)".}

func coverageSamples*(this: FrameBufferProperties): int {.importcpp: "#.get_coverage_samples()".}

proc `coverageSamples=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_coverage_samples(#)".}

func backBuffers*(this: FrameBufferProperties): int {.importcpp: "#.get_back_buffers()".}

proc `backBuffers=`*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_back_buffers(#)".}

func indexedColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_indexed_color()".}

proc `indexedColor=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_indexed_color(#)".}

func rgbColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_rgb_color()".}

proc `rgbColor=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_rgb_color(#)".}

func stereo*(this: FrameBufferProperties): bool {.importcpp: "#.get_stereo()".}

proc `stereo=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_stereo(#)".}

func forceHardware*(this: FrameBufferProperties): bool {.importcpp: "#.get_force_hardware()".}

proc `forceHardware=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_force_hardware(#)".}

func forceSoftware*(this: FrameBufferProperties): bool {.importcpp: "#.get_force_software()".}

proc `forceSoftware=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_force_software(#)".}

func srgbColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_srgb_color()".}

proc `srgbColor=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_srgb_color(#)".}

func floatColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_float_color()".}

proc `floatColor=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_float_color(#)".}

func floatDepth*(this: FrameBufferProperties): bool {.importcpp: "#.get_float_depth()".}

proc `floatDepth=`*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_float_depth(#)".}

func properties*(this: GraphicsWindow): WindowProperties {.importcpp: "#->get_properties()".}

func requestedProperties*(this: GraphicsWindow): WindowProperties {.importcpp: "#->get_requested_properties()".}

func rejectedProperties*(this: GraphicsWindow): WindowProperties {.importcpp: "#->get_rejected_properties()".}

func closed*(this: GraphicsWindow): bool {.importcpp: "#->is_closed()".}

func windowEvent*(this: GraphicsWindow): string {.importcpp: "nimStringFromStdString(#->get_window_event())", header: stringConversionCode.}

proc `windowEvent=`*(this: GraphicsWindow, windowEvent: string) {.importcpp: "#->set_window_event(nimStringToStdString(#))", header: stringConversionCode.}

func closeRequestEvent*(this: GraphicsWindow): string {.importcpp: "nimStringFromStdString(#->get_close_request_event())", header: stringConversionCode.}

proc `closeRequestEvent=`*(this: GraphicsWindow, closeRequestEvent: string) {.importcpp: "#->set_close_request_event(nimStringToStdString(#))", header: stringConversionCode.}

func unexposedDraw*(this: GraphicsWindow): bool {.importcpp: "#->get_unexposed_draw()".}

proc `unexposedDraw=`*(this: GraphicsWindow, unexposedDraw: bool) {.importcpp: "#->set_unexposed_draw(#)".}

func windowHandle*(this: GraphicsWindow): WindowHandle {.importcpp: "#->get_window_handle()".}

proc `[]`*(this: GraphicsPipeSelection_pipeTypes, n: int): TypeHandle {.importcpp: "#->get_pipe_type(#)".}

func len*(this: GraphicsPipeSelection_pipeTypes): int {.importcpp: "#->get_num_pipe_types()".}

func syncName*(this: Thread): string {.importcpp: "nimStringFromStdString(#->get_sync_name())", header: stringConversionCode.}

func pstatsIndex*(this: Thread): int {.importcpp: "#->get_pstats_index()".}

func pythonIndex*(this: Thread): int {.importcpp: "#->get_python_index()".}

func uniqueId*(this: Thread): string {.importcpp: "nimStringFromStdString(#->get_unique_id())", header: stringConversionCode.}

func pipelineStage*(this: Thread): int {.importcpp: "#->get_pipeline_stage()".}

proc `pipelineStage=`*(this: Thread, pipelineStage: int) {.importcpp: "#->set_pipeline_stage(#)".}

func started*(this: Thread): bool {.importcpp: "#->is_started()".}

func joinable*(this: Thread): bool {.importcpp: "#->is_joinable()".}

func currentTask*(this: Thread): TypedReferenceCount {.importcpp: "#->get_current_task()".}

func clock*(this: AsyncTaskManager): ClockObject {.importcpp: "#->get_clock()".}

proc `clock=`*(this: AsyncTaskManager, clock: ClockObject) {.importcpp: "#->set_clock(#)".}

func tasks*(this: AsyncTaskManager): AsyncTaskCollection {.importcpp: "#->get_tasks()".}

func activeTasks*(this: AsyncTaskManager): AsyncTaskCollection {.importcpp: "#->get_active_tasks()".}

func sleepingTasks*(this: AsyncTaskManager): AsyncTaskCollection {.importcpp: "#->get_sleeping_tasks()".}

func nextWakeTime*(this: AsyncTaskManager): float64 {.importcpp: "#->get_next_wake_time()".}

proc `[]`*(this: ButtonEventList_events, n: int): ButtonEvent {.importcpp: "#->get_event(#)".}

func len*(this: ButtonEventList_events): int {.importcpp: "#->get_num_events()".}

proc `[]`*(this: ButtonThrower_parameters | Event_parameters, n: int): EventParameter {.importcpp: "#->get_parameter(#)".}

func len*(this: ButtonThrower_parameters | Event_parameters): int {.importcpp: "#->get_num_parameters()".}

func animationType*(this: GeomVertexAnimationSpec): GeomEnums_AnimationType {.importcpp: "#.get_animation_type()".}

func numTransforms*(this: GeomVertexAnimationSpec): int {.importcpp: "#.get_num_transforms()".}

func indexedTransforms*(this: GeomVertexAnimationSpec): bool {.importcpp: "#.get_indexed_transforms()".}

func parent*(this: InternalName): InternalName {.importcpp: "#->get_parent()".}

func basename*(this: InternalName): string {.importcpp: "nimStringFromStdString(#->get_basename())", header: stringConversionCode.}

func registered*(this: GeomVertexArrayFormat | GeomVertexFormat | TransformTable): bool {.importcpp: "#->is_registered()".}

func stride*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_stride()".}

proc `stride=`*(this: GeomVertexArrayFormat, stride: int) {.importcpp: "#->set_stride(#)".}

func padTo*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_pad_to()".}

proc `padTo=`*(this: GeomVertexArrayFormat, padTo: int) {.importcpp: "#->set_pad_to(#)".}

func divisor*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_divisor()".}

proc `divisor=`*(this: GeomVertexArrayFormat, divisor: int) {.importcpp: "#->set_divisor(#)".}

func totalBytes*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_total_bytes()".}

proc `[]`*(this: GeomVertexArrayFormat_columns, i: int): GeomVertexColumn {.importcpp: "#->get_column(#)".}

func len*(this: GeomVertexArrayFormat_columns): int {.importcpp: "#->get_num_columns()".}

func animation*(this: GeomVertexFormat): GeomVertexAnimationSpec {.importcpp: "#->get_animation()".}

proc `animation=`*(this: GeomVertexFormat, animation: GeomVertexAnimationSpec) {.importcpp: "#->set_animation(#)".}

proc `[]`*(this: GeomVertexFormat_arrays, array: int): GeomVertexArrayFormat {.importcpp: "deconstify(#->get_array(#))", header: deconstifyCode.}

func len*(this: GeomVertexData_arrays | GeomVertexFormat_arrays): int {.importcpp: "#->get_num_arrays()".}

proc `[]=`*(this: GeomVertexFormat_arrays, array: int, format: GeomVertexArrayFormat) {.importcpp: "#->set_array(#, #)".}

proc `[]`*(this: GeomVertexFormat_points, n: int): InternalName {.importcpp: "deconstify(#->get_point(#))", header: deconstifyCode.}

proc `[]`*(this: GeomVertexFormat_vectors, n: int): InternalName {.importcpp: "deconstify(#->get_vector(#))", header: deconstifyCode.}

func len*(this: GeomVertexFormat_vectors): int {.importcpp: "#->get_num_vectors()".}

proc `[]`*(this: GeomVertexFormat_columns, name: InternalName): GeomVertexColumn {.importcpp: "#->get_column(#)".}

proc hasKey*(this: GeomVertexFormat_columns, name: InternalName): bool {.importcpp: "#->has_column(#)".}

proc contains*(this: GeomVertexFormat_columns, name: InternalName): bool {.importcpp: "#->has_column(#)".}

func arrayFormat*(this: GeomVertexArrayData | GeomVertexArrayDataHandle): GeomVertexArrayFormat {.importcpp: "deconstify(#->get_array_format())", header: deconstifyCode.}

func dataSizeBytes*(this: BufferContext | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayDataHandle): int {.importcpp: "#->get_data_size_bytes()".}

proc `[]`*(this: TransformTable_transforms, n: int): VertexTransform {.importcpp: "deconstify(#->get_transform(#))", header: deconstifyCode.}

func len*(this: TransformTable_transforms): int {.importcpp: "#->get_num_transforms()".}

proc `[]=`*(this: TransformTable_transforms, n: int, transform: VertexTransform) {.importcpp: "#->set_transform(#, #)".}

proc `[]`*(this: TransformBlend_transforms, n: int): VertexTransform {.importcpp: "#.get_transform(#)".}

func len*(this: TransformBlend_transforms): int {.importcpp: "#.get_num_transforms()".}

proc `[]=`*(this: TransformBlend_transforms, n: int, transform: VertexTransform) {.importcpp: "#.set_transform(#, #)".}

proc `[]`*(this: TransformBlend_weights, transform: VertexTransform): float {.importcpp: "#.get_weight(#)".}

proc hasKey*(this: TransformBlend_weights, transform: VertexTransform): bool {.importcpp: "#.has_transform(#)".}

proc contains*(this: TransformBlend_weights, transform: VertexTransform): bool {.importcpp: "#.has_transform(#)".}

func modified*(this: TransformBlend): UpdateSeq {.importcpp: "#.get_modified()".}

proc `[]`*(this: TransformBlendTable_blends, n: int): TransformBlend {.importcpp: "#->get_blend(#)".}

func len*(this: TransformBlendTable_blends): int {.importcpp: "#->get_num_blends()".}

proc `[]=`*(this: TransformBlendTable_blends, n: int, blend: TransformBlend) {.importcpp: "#->set_blend(#, #)".}

func numTransforms*(this: TransformBlendTable): int {.importcpp: "#->get_num_transforms()".}

func maxSimultaneousTransforms*(this: TransformBlendTable): int {.importcpp: "#->get_max_simultaneous_transforms()".}

func rows*(this: TransformBlendTable): SparseArray {.importcpp: "#->get_rows()".}

proc `rows=`*(this: TransformBlendTable, rows: SparseArray) {.importcpp: "#->set_rows(#)".}

func format*(this: GeomVertexData): GeomVertexFormat {.importcpp: "deconstify(#->get_format())", header: deconstifyCode.}

proc `format=`*(this: GeomVertexData, format: GeomVertexFormat) {.importcpp: "#->set_format(#)".}

proc `[]`*(this: GeomVertexData_arrays, i: int): GeomVertexArrayData {.importcpp: "deconstify(#->get_array(#))", header: deconstifyCode.}

proc `[]=`*(this: GeomVertexData_arrays, i: int, array: GeomVertexArrayData) {.importcpp: "#->set_array(#, #)".}

func transformTable*(this: GeomVertexData): TransformTable {.importcpp: "deconstify(#->get_transform_table())", header: deconstifyCode.}

proc `transformTable=`*(this: GeomVertexData, table: TransformTable) {.importcpp: "#->set_transform_table(#)".}

func sliderTable*(this: GeomVertexData): SliderTable {.importcpp: "deconstify(#->get_slider_table())", header: deconstifyCode.}

proc `sliderTable=`*(this: GeomVertexData, table: SliderTable) {.importcpp: "#->set_slider_table(#)".}

func numBytes*(this: Geom | GeomPrimitive | GeomVertexData): int {.importcpp: "#->get_num_bytes()".}

func active*(this: BufferContext | MouseWatcherRegion): bool {.importcpp: "#->get_active()".}

func resident*(this: BufferContext): bool {.importcpp: "#->get_resident()".}

func primitiveType*(this: Geom | GeomPrimitive): GeomEnums_PrimitiveType {.importcpp: "#->get_primitive_type()".}

func geomRendering*(this: Geom | GeomPrimitive): int {.importcpp: "#->get_geom_rendering()".}

func shadeModel*(this: Geom | GeomPrimitive): GeomEnums_ShadeModel {.importcpp: "#->get_shade_model()".}

func indexType*(this: GeomPrimitive): GeomEnums_NumericType {.importcpp: "#->get_index_type()".}

func indexStride*(this: GeomPrimitive): int {.importcpp: "#->get_index_stride()".}

func stripCutIndex*(this: GeomPrimitive): int {.importcpp: "#->get_strip_cut_index()".}

func mins*(this: GeomPrimitive): GeomVertexArrayData {.importcpp: "deconstify(#->get_mins())", header: deconstifyCode.}

func maxs*(this: GeomPrimitive): GeomVertexArrayData {.importcpp: "deconstify(#->get_maxs())", header: deconstifyCode.}

func numVerticesPerPrimitive*(this: GeomPrimitive): int {.importcpp: "#->get_num_vertices_per_primitive()".}

func minNumVerticesPerPrimitive*(this: GeomPrimitive): int {.importcpp: "#->get_min_num_vertices_per_primitive()".}

func numUnusedVerticesPerPrimitive*(this: GeomPrimitive): int {.importcpp: "#->get_num_unused_vertices_per_primitive()".}

func texcoordName*(this: TextureStage): InternalName {.importcpp: "#->get_texcoord_name()".}

proc `texcoordName=`*(this: TextureStage, name: InternalName) {.importcpp: "#->set_texcoord_name(#)".}

proc `texcoordName=`*(this: TextureStage, texcoordName: string) {.importcpp: "#->set_texcoord_name(nimStringToStdString(#))", header: stringConversionCode.}

func tangentName*(this: TextureStage): InternalName {.importcpp: "#->get_tangent_name()".}

func binormalName*(this: TextureStage): InternalName {.importcpp: "#->get_binormal_name()".}

func mode*(this: TextureStage): TextureStage_Mode {.importcpp: "#->get_mode()".}

proc `mode=`*(this: TextureStage, mode: TextureStage_Mode) {.importcpp: "#->set_mode(#)".}

func rgbScale*(this: TextureStage): int {.importcpp: "#->get_rgb_scale()".}

proc `rgbScale=`*(this: TextureStage, rgbScale: int) {.importcpp: "#->set_rgb_scale(#)".}

func alphaScale*(this: TextureStage): int {.importcpp: "#->get_alpha_scale()".}

proc `alphaScale=`*(this: TextureStage, alphaScale: int) {.importcpp: "#->set_alpha_scale(#)".}

func savedResult*(this: TextureStage): bool {.importcpp: "#->get_saved_result()".}

proc `savedResult=`*(this: TextureStage, savedResult: bool) {.importcpp: "#->set_saved_result(#)".}

proc `[]`*(this: Geom_primitives, i: int): GeomPrimitive {.importcpp: "deconstify(#->get_primitive(#))", header: deconstifyCode.}

func len*(this: Geom_primitives): int {.importcpp: "#->get_num_primitives()".}

proc `[]=`*(this: Geom_primitives, i: int, primitive: GeomPrimitive) {.importcpp: "#->set_primitive(#, #)".}

func geom*(this: GeomContext): Geom {.importcpp: "#.get_geom()".}

func wrapU*(this: SamplerState): SamplerState_WrapMode {.importcpp: "#.get_wrap_u()".}

proc `wrapU=`*(this: var SamplerState, wrap: SamplerState_WrapMode) {.importcpp: "#.set_wrap_u(#)".}

func wrapV*(this: SamplerState): SamplerState_WrapMode {.importcpp: "#.get_wrap_v()".}

proc `wrapV=`*(this: var SamplerState, wrap: SamplerState_WrapMode) {.importcpp: "#.set_wrap_v(#)".}

func wrapW*(this: SamplerState): SamplerState_WrapMode {.importcpp: "#.get_wrap_w()".}

proc `wrapW=`*(this: var SamplerState, wrap: SamplerState_WrapMode) {.importcpp: "#.set_wrap_w(#)".}

func minfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_minfilter()".}

proc `minfilter=`*(this: var SamplerState, filter: SamplerState_FilterType) {.importcpp: "#.set_minfilter(#)".}

func magfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_magfilter()".}

proc `magfilter=`*(this: var SamplerState, filter: SamplerState_FilterType) {.importcpp: "#.set_magfilter(#)".}

func effectiveMinfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_effective_minfilter()".}

func effectiveMagfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_effective_magfilter()".}

func anisotropicDegree*(this: SamplerState): int {.importcpp: "#.get_anisotropic_degree()".}

proc `anisotropicDegree=`*(this: var SamplerState, anisotropicDegree: int) {.importcpp: "#.set_anisotropic_degree(#)".}

func effectiveAnisotropicDegree*(this: SamplerState): int {.importcpp: "#.get_effective_anisotropic_degree()".}

func borderColor*(this: SamplerState): LColor {.importcpp: "#.get_border_color()".}

proc `borderColor=`*(this: var SamplerState, color: LColor) {.importcpp: "#.set_border_color(#)".}

func minLod*(this: SamplerState): float {.importcpp: "#.get_min_lod()".}

proc `minLod=`*(this: var SamplerState, minLod: float) {.importcpp: "#.set_min_lod(#)".}

func maxLod*(this: SamplerState): float {.importcpp: "#.get_max_lod()".}

proc `maxLod=`*(this: var SamplerState, maxLod: float) {.importcpp: "#.set_max_lod(#)".}

func lodBias*(this: SamplerState): float {.importcpp: "#.get_lod_bias()".}

proc `lodBias=`*(this: var SamplerState, lodBias: float) {.importcpp: "#.set_lod_bias(#)".}

func changeEvent*(this: Lens): string {.importcpp: "nimStringFromStdString(#->get_change_event())", header: stringConversionCode.}

proc `changeEvent=`*(this: Lens, event: string) {.importcpp: "#->set_change_event(nimStringToStdString(#))", header: stringConversionCode.}

func filmSize*(this: Lens): LVecBase2 {.importcpp: "#->get_film_size()".}

proc `filmSize=`*(this: Lens, filmSize: LVecBase2) {.importcpp: "#->set_film_size((LVecBase2 const &)(#))".}

proc `filmSize=`*(this: Lens, width: float) {.importcpp: "#->set_film_size(#)".}

func filmOffset*(this: Lens): LVector2 {.importcpp: "#->get_film_offset()".}

proc `filmOffset=`*(this: Lens, filmOffset: LVecBase2) {.importcpp: "#->set_film_offset((LVecBase2 const &)(#))".}

func focalLength*(this: Lens): float {.importcpp: "#->get_focal_length()".}

proc `focalLength=`*(this: Lens, focalLength: float) {.importcpp: "#->set_focal_length(#)".}

func fov*(this: Lens): LVecBase2 {.importcpp: "#->get_fov()".}

proc `fov=`*(this: Lens, fov: LVecBase2) {.importcpp: "#->set_fov((LVecBase2 const &)(#))".}

proc `fov=`*(this: Lens, fov: float) {.importcpp: "#->set_fov(#)".}

func minFov*(this: Lens): float {.importcpp: "#->get_min_fov()".}

proc `minFov=`*(this: Lens, minFov: float) {.importcpp: "#->set_min_fov(#)".}

func aspectRatio*(this: Lens): float {.importcpp: "#->get_aspect_ratio()".}

proc `aspectRatio=`*(this: Lens, aspectRatio: float) {.importcpp: "#->set_aspect_ratio(#)".}

func near*(this: Lens): float {.importcpp: "#->get_near()".}

proc `near=`*(this: Lens, nearDistance: float) {.importcpp: "#->set_near(#)".}

func far*(this: Lens): float {.importcpp: "#->get_far()".}

proc `far=`*(this: Lens, farDistance: float) {.importcpp: "#->set_far(#)".}

func viewHpr*(this: Lens): LVecBase3 {.importcpp: "#->get_view_hpr()".}

proc `viewHpr=`*(this: Lens, viewHpr: LVecBase3) {.importcpp: "#->set_view_hpr((LVecBase3 const &)(#))".}

func nodalPoint*(this: Lens): LPoint3 {.importcpp: "#->get_nodal_point()".}

func interocularDistance*(this: Lens): float {.importcpp: "#->get_interocular_distance()".}

proc `interocularDistance=`*(this: Lens, interocularDistance: float) {.importcpp: "#->set_interocular_distance(#)".}

func convergenceDistance*(this: Lens): float {.importcpp: "#->get_convergence_distance()".}

proc `convergenceDistance=`*(this: Lens, convergenceDistance: float) {.importcpp: "#->set_convergence_distance(#)".}

func viewMat*(this: Lens): LMatrix4 {.importcpp: "#->get_view_mat()".}

proc `viewMat=`*(this: Lens, viewMat: LMatrix4) {.importcpp: "#->set_view_mat(#)".}

func keystone*(this: Lens): LVecBase2 {.importcpp: "#->get_keystone()".}

proc `keystone=`*(this: Lens, keystone: LVecBase2) {.importcpp: "#->set_keystone((LVecBase2 const &)(#))".}

func baseColor*(this: Material): LColor {.importcpp: "#->get_base_color()".}

proc `baseColor=`*(this: Material, color: LColor) {.importcpp: "#->set_base_color(#)".}

func ambient*(this: Material): LColor {.importcpp: "#->get_ambient()".}

proc `ambient=`*(this: Material, color: LColor) {.importcpp: "#->set_ambient(#)".}

func diffuse*(this: Material): LColor {.importcpp: "#->get_diffuse()".}

proc `diffuse=`*(this: Material, color: LColor) {.importcpp: "#->set_diffuse(#)".}

func specular*(this: Material): LColor {.importcpp: "#->get_specular()".}

proc `specular=`*(this: Material, color: LColor) {.importcpp: "#->set_specular(#)".}

func emission*(this: Material): LColor {.importcpp: "#->get_emission()".}

proc `emission=`*(this: Material, color: LColor) {.importcpp: "#->set_emission(#)".}

func shininess*(this: Material): float {.importcpp: "#->get_shininess()".}

proc `shininess=`*(this: Material, shininess: float) {.importcpp: "#->set_shininess(#)".}

func roughness*(this: Material): float {.importcpp: "#->get_roughness()".}

proc `roughness=`*(this: Material, roughness: float) {.importcpp: "#->set_roughness(#)".}

func metallic*(this: Material): float {.importcpp: "#->get_metallic()".}

proc `metallic=`*(this: Material, metallic: float) {.importcpp: "#->set_metallic(#)".}

func refractiveIndex*(this: Material): float {.importcpp: "#->get_refractive_index()".}

proc `refractiveIndex=`*(this: Material, refractiveIndex: float) {.importcpp: "#->set_refractive_index(#)".}

func local*(this: Material): bool {.importcpp: "#->get_local()".}

proc `local=`*(this: Material, local: bool) {.importcpp: "#->set_local(#)".}

func twoside*(this: Material): bool {.importcpp: "#->get_twoside()".}

proc `twoside=`*(this: Material, twoside: bool) {.importcpp: "#->set_twoside(#)".}

func userMat*(this: MatrixLens): LMatrix4 {.importcpp: "#->get_user_mat()".}

proc `userMat=`*(this: MatrixLens, userMat: LMatrix4) {.importcpp: "#->set_user_mat(#)".}

func texture*(this: ParamTextureImage | ParamTextureSampler | TextureReloadRequest): Texture {.importcpp: "#->get_texture()".}

func sampler*(this: ParamTextureSampler): SamplerState {.importcpp: "#->get_sampler()".}

func readAccess*(this: ParamTextureImage): bool {.importcpp: "#->has_read_access()".}

func writeAccess*(this: ParamTextureImage): bool {.importcpp: "#->has_write_access()".}

func bindLevel*(this: ParamTextureImage): int {.importcpp: "#->get_bind_level()".}

func bindLayer*(this: ParamTextureImage): int {.importcpp: "#->get_bind_layer()".}

func shader*(this: ShaderContext): Shader {.importcpp: "#.get_shader()".}

proc `[]`*(this: LMatrix3f_rows, row: int): LVecBase3f {.importcpp: "#.get_row(#)".}

proc `[]=`*(this: LMatrix3f_rows, row: int, v: LVecBase2f) {.importcpp: "#.set_row(#, (LVecBase2f const &)(#))".}

proc `[]=`*(this: LMatrix3f_rows | LMatrix4f_rows, row: int, v: LVecBase3f) {.importcpp: "#.set_row(#, (LVecBase3f const &)(#))".}

proc `[]`*(this: LMatrix3f_cols, col: int): LVecBase3f {.importcpp: "#.get_col(#)".}

proc `[]=`*(this: LMatrix3f_cols, col: int, v: LVecBase2f) {.importcpp: "#.set_col(#, (LVecBase2f const &)(#))".}

proc `[]=`*(this: LMatrix3f_cols | LMatrix4f_cols, col: int, v: LVecBase3f) {.importcpp: "#.set_col(#, (LVecBase3f const &)(#))".}

proc `[]`*(this: LMatrix4f_rows, row: int): LVecBase4f {.importcpp: "#.get_row(#)".}

proc `[]=`*(this: LMatrix4f_rows, row: int, v: LVecBase4f) {.importcpp: "#.set_row(#, (LVecBase4f const &)(#))".}

proc `[]`*(this: LMatrix4f_cols, col: int): LVecBase4f {.importcpp: "#.get_col(#)".}

proc `[]=`*(this: LMatrix4f_cols, col: int, v: LVecBase4f) {.importcpp: "#.set_col(#, (LVecBase4f const &)(#))".}

proc `[]`*(this: LMatrix3d_rows, row: int): LVecBase3d {.importcpp: "#.get_row(#)".}

proc `[]=`*(this: LMatrix3d_rows, row: int, v: LVecBase2d) {.importcpp: "#.set_row(#, (LVecBase2d const &)(#))".}

proc `[]=`*(this: LMatrix3d_rows | LMatrix4d_rows, row: int, v: LVecBase3d) {.importcpp: "#.set_row(#, (LVecBase3d const &)(#))".}

proc `[]`*(this: LMatrix3d_cols, col: int): LVecBase3d {.importcpp: "#.get_col(#)".}

proc `[]=`*(this: LMatrix3d_cols, col: int, v: LVecBase2d) {.importcpp: "#.set_col(#, (LVecBase2d const &)(#))".}

proc `[]=`*(this: LMatrix3d_cols | LMatrix4d_cols, col: int, v: LVecBase3d) {.importcpp: "#.set_col(#, (LVecBase3d const &)(#))".}

proc `[]`*(this: LMatrix4d_rows, row: int): LVecBase4d {.importcpp: "#.get_row(#)".}

proc `[]=`*(this: LMatrix4d_rows, row: int, v: LVecBase4d) {.importcpp: "#.set_row(#, (LVecBase4d const &)(#))".}

proc `[]`*(this: LMatrix4d_cols, col: int): LVecBase4d {.importcpp: "#.get_col(#)".}

proc `[]=`*(this: LMatrix4d_cols, col: int, v: LVecBase4d) {.importcpp: "#.set_col(#, (LVecBase4d const &)(#))".}

proc `[]`*(this: BoundingBox_planes | BoundingHexahedron_planes, n: int): LPlane {.importcpp: "#->get_plane(#)".}

func len*(this: BoundingBox_planes | BoundingHexahedron_planes): int {.importcpp: "#->get_num_planes()".}

proc `[]`*(this: IntersectionBoundingVolume_components | UnionBoundingVolume_components, n: int): GeometricBoundingVolume {.importcpp: "deconstify(#->get_component(#))", header: deconstifyCode.}

func len*(this: IntersectionBoundingVolume_components | UnionBoundingVolume_components): int {.importcpp: "#->get_num_components()".}

proc `[]`*(this: Triangulator_vertices, n: int): LPoint2d {.importcpp: "#.get_vertex(#)".}

func len*(this: Triangulator3_vertices | Triangulator_vertices): int {.importcpp: "#.get_num_vertices()".}

proc `[]`*(this: Triangulator3_vertices, n: int): LPoint3d {.importcpp: "#.get_vertex(#)".}

func plane*(this: Triangulator3): LPlaned {.importcpp: "#.get_plane()".}

proc `[]`*(this: ParametricCurveCollection_curves, index: int): ParametricCurve {.importcpp: "#->get_curve(#)".}

func len*(this: ParametricCurveCollection_curves): int {.importcpp: "#->get_num_curves()".}

proc `[]=`*(this: ParametricCurveCollection_curves, index: int, curve: ParametricCurve) {.importcpp: "#->set_curve(#, #)".}

func xyzCurve*(this: ParametricCurveCollection): ParametricCurve {.importcpp: "#->get_xyz_curve()".}

func hprCurve*(this: ParametricCurveCollection): ParametricCurve {.importcpp: "#->get_hpr_curve()".}

func defaultCurve*(this: ParametricCurveCollection): ParametricCurve {.importcpp: "#->get_default_curve()".}

proc `[]`*(this: ParametricCurveCollection_timewarpCurves, n: int): ParametricCurve {.importcpp: "#->get_timewarp_curve(#)".}

func len*(this: ParametricCurveCollection_timewarpCurves): int {.importcpp: "#->get_num_timewarps()".}

func maxT*(this: ParametricCurveCollection): float {.importcpp: "#->get_max_t()".}

func uOrder*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_u_order()".}

proc `uOrder=`*(this: NurbsSurfaceEvaluator, uOrder: int) {.importcpp: "#->set_u_order(#)".}

func vOrder*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_v_order()".}

proc `vOrder=`*(this: NurbsSurfaceEvaluator, vOrder: int) {.importcpp: "#->set_v_order(#)".}

proc `[]`*(this: NurbsSurfaceEvaluator_uKnots, i: int): float {.importcpp: "#->get_u_knot(#)".}

func len*(this: NurbsSurfaceEvaluator_uKnots): int {.importcpp: "#->get_num_u_knots()".}

proc `[]=`*(this: NurbsSurfaceEvaluator_uKnots, i: int, knot: float) {.importcpp: "#->set_u_knot(#, #)".}

proc `[]`*(this: NurbsSurfaceEvaluator_vKnots, i: int): float {.importcpp: "#->get_v_knot(#)".}

func len*(this: NurbsSurfaceEvaluator_vKnots): int {.importcpp: "#->get_num_v_knots()".}

proc `[]=`*(this: NurbsSurfaceEvaluator_vKnots, i: int, knot: float) {.importcpp: "#->set_v_knot(#, #)".}

func curve*(this: RopeNode): NurbsCurveEvaluator {.importcpp: "#->get_curve()".}

proc `curve=`*(this: RopeNode, curve: NurbsCurveEvaluator) {.importcpp: "#->set_curve(#)".}

func renderMode*(this: RopeNode): RopeNode_RenderMode {.importcpp: "#->get_render_mode()".}

proc `renderMode=`*(this: RopeNode, renderMode: RopeNode_RenderMode) {.importcpp: "#->set_render_mode(#)".}

func uvMode*(this: RopeNode): RopeNode_UVMode {.importcpp: "#->get_uv_mode()".}

proc `uvMode=`*(this: RopeNode, uvMode: RopeNode_UVMode) {.importcpp: "#->set_uv_mode(#)".}

func uvDirection*(this: RopeNode): bool {.importcpp: "#->get_uv_direction()".}

proc `uvDirection=`*(this: RopeNode, uDominant: bool) {.importcpp: "#->set_uv_direction(#)".}

func uvScale*(this: RopeNode): float {.importcpp: "#->get_uv_scale()".}

proc `uvScale=`*(this: RopeNode, scale: float) {.importcpp: "#->set_uv_scale(#)".}

func normalMode*(this: RopeNode): RopeNode_NormalMode {.importcpp: "#->get_normal_mode()".}

proc `normalMode=`*(this: RopeNode, normalMode: RopeNode_NormalMode) {.importcpp: "#->set_normal_mode(#)".}

func tubeUp*(this: RopeNode): LVector3 {.importcpp: "#->get_tube_up()".}

proc `tubeUp=`*(this: RopeNode, tubeUp: LVector3) {.importcpp: "#->set_tube_up((LVector3 const &)(#))".}

func useVertexColor*(this: RopeNode): bool {.importcpp: "#->get_use_vertex_color()".}

proc `useVertexColor=`*(this: RopeNode, flag: bool) {.importcpp: "#->set_use_vertex_color(#)".}

func numSubdiv*(this: RopeNode): int {.importcpp: "#->get_num_subdiv()".}

proc `numSubdiv=`*(this: RopeNode, numSubdiv: int) {.importcpp: "#->set_num_subdiv(#)".}

func numSlices*(this: RopeNode): int {.importcpp: "#->get_num_slices()".}

proc `numSlices=`*(this: RopeNode, numSlices: int) {.importcpp: "#->set_num_slices(#)".}

func useVertexThickness*(this: RopeNode): bool {.importcpp: "#->get_use_vertex_thickness()".}

proc `useVertexThickness=`*(this: RopeNode, flag: bool) {.importcpp: "#->set_use_vertex_thickness(#)".}

proc `thickness=`*(this: RopeNode, thickness: float) {.importcpp: "#->set_thickness(#)".}

func matrix*(this: RopeNode): LMatrix4 {.importcpp: "#->get_matrix()".}

proc `matrix=`*(this: RopeNode, matrix: LMatrix4) {.importcpp: "#->set_matrix(#)".}

proc `[]`*(this: PNMFileType_extensions, n: int): string {.importcpp: "nimStringFromStdString(#.get_extension(#))", header: stringConversionCode.}

func len*(this: PNMFileType_extensions): int {.importcpp: "#.get_num_extensions()".}

func suggestedExtension*(this: PNMFileType): string {.importcpp: "nimStringFromStdString(#.get_suggested_extension())", header: stringConversionCode.}

proc `[]`*(this: PNMFileTypeRegistry_types, n: int): PNMFileType {.importcpp: "#.get_type(#)".}

func numChannels*(this: PNMImageHeader): int {.importcpp: "#.get_num_channels()".}

func maxval*(this: PNMImageHeader): int {.importcpp: "#.get_maxval()".}

func colorSpace*(this: PNMImageHeader): ColorSpace {.importcpp: "#.get_color_space()".}

func size*(this: PNMImageHeader): LVecBase2i {.importcpp: "#.get_size()".}

func comment*(this: PNMImageHeader): string {.importcpp: "nimStringFromStdString(#.get_comment())", header: stringConversionCode.}

proc `comment=`*(this: PNMImageHeader, comment: string) {.importcpp: "#.set_comment(nimStringToStdString(#))", header: stringConversionCode.}

func valid*(this: PfmFile): bool {.importcpp: "#.is_valid()".}

func scale*(this: PfmFile): float32 {.importcpp: "#.get_scale()".}

proc `scale=`*(this: PfmFile, scale: float32) {.importcpp: "#.set_scale(#)".}

func pen*(this: PNMPainter): PNMBrush {.importcpp: "#.get_pen()".}

proc `pen=`*(this: PNMPainter, pen: PNMBrush) {.importcpp: "#.set_pen(#)".}

func fill*(this: PNMPainter): PNMBrush {.importcpp: "#.get_fill()".}

proc `fill=`*(this: PNMPainter, fill: PNMBrush) {.importcpp: "#.set_fill(#)".}

func character*(this: TextGlyph): int {.importcpp: "#->get_character()".}

func advance*(this: TextGlyph): float {.importcpp: "#->get_advance()".}

func lineHeight*(this: TextFont): float {.importcpp: "#->get_line_height()".}

proc `lineHeight=`*(this: TextFont, lineHeight: float) {.importcpp: "#->set_line_height(#)".}

func spaceAdvance*(this: TextFont): float {.importcpp: "#->get_space_advance()".}

proc `spaceAdvance=`*(this: TextFont, spaceAdvance: float) {.importcpp: "#->set_space_advance(#)".}

func page*(this: DynamicTextGlyph): DynamicTextPage {.importcpp: "#->get_page()".}

func windingOrder*(this: DynamicTextFont | FreetypeFont): FreetypeFont_WindingOrder {.importcpp: "#.get_winding_order()".}

proc `windingOrder=`*(this: DynamicTextFont | FreetypeFont, windingOrder: FreetypeFont_WindingOrder) {.importcpp: "#.set_winding_order(#)".}

func pointSize*(this: DynamicTextFont): float {.importcpp: "#->get_point_size()".}

proc `pointSize=`*(this: DynamicTextFont, pointSize: float): bool {.importcpp: "#->set_point_size(#)".}

func pixelsPerUnit*(this: DynamicTextFont): float {.importcpp: "#->get_pixels_per_unit()".}

proc `pixelsPerUnit=`*(this: DynamicTextFont, pixelsPerUnit: float): bool {.importcpp: "#->set_pixels_per_unit(#)".}

func scaleFactor*(this: DynamicTextFont): float {.importcpp: "#->get_scale_factor()".}

proc `scaleFactor=`*(this: DynamicTextFont, scaleFactor: float): bool {.importcpp: "#->set_scale_factor(#)".}

func nativeAntialias*(this: DynamicTextFont): bool {.importcpp: "#->get_native_antialias()".}

proc `nativeAntialias=`*(this: DynamicTextFont, nativeAntialias: bool) {.importcpp: "#->set_native_antialias(#)".}

func fontPixelSize*(this: DynamicTextFont): int {.importcpp: "#->get_font_pixel_size()".}

func textureMargin*(this: DynamicTextFont): int {.importcpp: "#->get_texture_margin()".}

proc `textureMargin=`*(this: DynamicTextFont, textureMargin: int) {.importcpp: "#->set_texture_margin(#)".}

func polyMargin*(this: DynamicTextFont): float {.importcpp: "#->get_poly_margin()".}

proc `polyMargin=`*(this: DynamicTextFont, polyMargin: float) {.importcpp: "#->set_poly_margin(#)".}

func pageSize*(this: DynamicTextFont): LVecBase2i {.importcpp: "#->get_page_size()".}

proc `pageSize=`*(this: DynamicTextFont, pageSize: LVecBase2i) {.importcpp: "#->set_page_size((LVecBase2i const &)(#))".}

func renderMode*(this: DynamicTextFont): TextFont_RenderMode {.importcpp: "#->get_render_mode()".}

proc `renderMode=`*(this: DynamicTextFont, renderMode: TextFont_RenderMode) {.importcpp: "#->set_render_mode(#)".}

func fg*(this: DynamicTextFont): LColor {.importcpp: "#->get_fg()".}

proc `fg=`*(this: DynamicTextFont, fg: LColor) {.importcpp: "#->set_fg(#)".}

func bg*(this: DynamicTextFont): LColor {.importcpp: "#->get_bg()".}

proc `bg=`*(this: DynamicTextFont, bg: LColor) {.importcpp: "#->set_bg(#)".}

func texFormat*(this: DynamicTextFont): Texture_Format {.importcpp: "#->get_tex_format()".}

proc `[]`*(this: DynamicTextFont_pages, n: int): DynamicTextPage {.importcpp: "#->get_page(#)".}

func len*(this: DynamicTextFont_pages): int {.importcpp: "#->get_num_pages()".}

func model*(this: TextGraphic): NodePath {.importcpp: "#.get_model()".}

proc `model=`*(this: TextGraphic, model: NodePath) {.importcpp: "#.set_model(#)".}

func frame*(this: TextGraphic): LVecBase4 {.importcpp: "#.get_frame()".}

proc `frame=`*(this: TextGraphic, frame: LVecBase4) {.importcpp: "#.set_frame((LVecBase4 const &)(#))".}

func instanceFlag*(this: TextGraphic): bool {.importcpp: "#.get_instance_flag()".}

proc `instanceFlag=`*(this: TextGraphic, instanceFlag: bool) {.importcpp: "#.set_instance_flag(#)".}

func usageHint*(this: TextAssembler): GeomEnums_UsageHint {.importcpp: "#.get_usage_hint()".}

proc `usageHint=`*(this: TextAssembler, usageHint: GeomEnums_UsageHint) {.importcpp: "#.set_usage_hint(#)".}

func maxRows*(this: TextAssembler): int {.importcpp: "#.get_max_rows()".}

proc `maxRows=`*(this: TextAssembler, maxRows: int) {.importcpp: "#.set_max_rows(#)".}

func dynamicMerge*(this: TextAssembler): bool {.importcpp: "#.get_dynamic_merge()".}

proc `dynamicMerge=`*(this: TextAssembler, dynamicMerge: bool) {.importcpp: "#.set_dynamic_merge(#)".}

func multilineMode*(this: TextAssembler): bool {.importcpp: "#.get_multiline_mode()".}

proc `multilineMode=`*(this: TextAssembler, flag: bool) {.importcpp: "#.set_multiline_mode(#)".}

func properties*(this: TextAssembler): TextProperties {.importcpp: "#.get_properties()".}

proc `properties=`*(this: TextAssembler, properties: TextNode | TextProperties) {.importcpp: "#.set_properties(#)".}

func buttonDownEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_button_down_event())", header: stringConversionCode.}

proc `buttonDownEvent=`*(this: ButtonThrower, buttonDownEvent: string) {.importcpp: "#->set_button_down_event(nimStringToStdString(#))", header: stringConversionCode.}

func buttonUpEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_button_up_event())", header: stringConversionCode.}

proc `buttonUpEvent=`*(this: ButtonThrower, buttonUpEvent: string) {.importcpp: "#->set_button_up_event(nimStringToStdString(#))", header: stringConversionCode.}

func buttonRepeatEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_button_repeat_event())", header: stringConversionCode.}

proc `buttonRepeatEvent=`*(this: ButtonThrower, buttonRepeatEvent: string) {.importcpp: "#->set_button_repeat_event(nimStringToStdString(#))", header: stringConversionCode.}

func keystrokeEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_keystroke_event())", header: stringConversionCode.}

proc `keystrokeEvent=`*(this: ButtonThrower, keystrokeEvent: string) {.importcpp: "#->set_keystroke_event(nimStringToStdString(#))", header: stringConversionCode.}

func candidateEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_candidate_event())", header: stringConversionCode.}

proc `candidateEvent=`*(this: ButtonThrower, candidateEvent: string) {.importcpp: "#->set_candidate_event(nimStringToStdString(#))", header: stringConversionCode.}

func moveEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_move_event())", header: stringConversionCode.}

proc `moveEvent=`*(this: ButtonThrower, moveEvent: string) {.importcpp: "#->set_move_event(nimStringToStdString(#))", header: stringConversionCode.}

func rawButtonDownEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_raw_button_down_event())", header: stringConversionCode.}

proc `rawButtonDownEvent=`*(this: ButtonThrower, rawButtonDownEvent: string) {.importcpp: "#->set_raw_button_down_event(nimStringToStdString(#))", header: stringConversionCode.}

func rawButtonUpEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_raw_button_up_event())", header: stringConversionCode.}

proc `rawButtonUpEvent=`*(this: ButtonThrower, rawButtonUpEvent: string) {.importcpp: "#->set_raw_button_up_event(nimStringToStdString(#))", header: stringConversionCode.}

func prefix*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_prefix())", header: stringConversionCode.}

proc `prefix=`*(this: ButtonThrower, prefix: string) {.importcpp: "#->set_prefix(nimStringToStdString(#))", header: stringConversionCode.}

func specificFlag*(this: ButtonThrower): bool {.importcpp: "#->get_specific_flag()".}

proc `specificFlag=`*(this: ButtonThrower, specificFlag: bool) {.importcpp: "#->set_specific_flag(#)".}

func timeFlag*(this: ButtonThrower): bool {.importcpp: "#->get_time_flag()".}

proc `timeFlag=`*(this: ButtonThrower, timeFlag: bool) {.importcpp: "#->set_time_flag(#)".}

func modifierButtons*(this: ButtonThrower): ModifierButtons {.importcpp: "#->get_modifier_buttons()".}

proc `modifierButtons=`*(this: ButtonThrower, mods: ModifierButtons) {.importcpp: "#->set_modifier_buttons(#)".}

func throwButtonsActive*(this: ButtonThrower): bool {.importcpp: "#->get_throw_buttons_active()".}

proc `throwButtonsActive=`*(this: ButtonThrower, flag: bool) {.importcpp: "#->set_throw_buttons_active(#)".}

proc `frame=`*(this: MouseWatcherRegion, frame: LVecBase4) {.importcpp: "#->set_frame((LVecBase4 const &)(#))".}

func area*(this: MouseWatcherRegion): float {.importcpp: "#->get_area()".}

func keyboard*(this: MouseWatcherRegion): bool {.importcpp: "#->get_keyboard()".}

proc `keyboard=`*(this: MouseWatcherRegion, keyboard: bool) {.importcpp: "#->set_keyboard(#)".}

func suppressFlags*(this: MouseWatcherRegion): int {.importcpp: "#->get_suppress_flags()".}

proc `suppressFlags=`*(this: MouseWatcherRegion, suppressFlags: int) {.importcpp: "#->set_suppress_flags(#)".}

func sorted*(this: MouseWatcher | MouseWatcherBase): bool {.importcpp: "#->is_sorted()".}

proc `[]`*(this: MouseWatcherBase_regions, n: int): MouseWatcherRegion {.importcpp: "#->get_region(#)".}

func len*(this: MouseWatcherBase_regions): int {.importcpp: "#->get_num_regions()".}

func seq*(this: UpdateSeq): int {.importcpp: "#.get_seq()".}

func sourcePathname*(this: BamCacheRecord): Filename {.importcpp: "#->get_source_pathname()".}

func cacheFilename*(this: BamCacheRecord): Filename {.importcpp: "#->get_cache_filename()".}

func sourceTimestamp*(this: BamCacheRecord): Time {.importcpp: "#->get_source_timestamp()".}

func recordedTime*(this: BamCacheRecord): Time {.importcpp: "#->get_recorded_time()".}

func data*(this: BamCacheRecord): TypedWritable {.importcpp: "#->get_data()".}

proc `data=`*(this: BamCacheRecord, `ptr`: TypedWritable) {.importcpp: "#->set_data(#)".}

proc `data=`*(this: BamCacheRecord, `ptr`: TypedWritableReferenceCount) {.importcpp: "#->set_data(#)".}

func active*(this: BamCache): bool {.importcpp: "#.get_active()".}

proc `active=`*(this: BamCache, flag: bool) {.importcpp: "#.set_active(#)".}

func cacheModels*(this: BamCache): bool {.importcpp: "#.get_cache_models()".}

proc `cacheModels=`*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_models(#)".}

func cacheTextures*(this: BamCache): bool {.importcpp: "#.get_cache_textures()".}

proc `cacheTextures=`*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_textures(#)".}

func cacheCompressedTextures*(this: BamCache): bool {.importcpp: "#.get_cache_compressed_textures()".}

proc `cacheCompressedTextures=`*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_compressed_textures(#)".}

func cacheCompiledShaders*(this: BamCache): bool {.importcpp: "#.get_cache_compiled_shaders()".}

proc `cacheCompiledShaders=`*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_compiled_shaders(#)".}

func root*(this: BamCache): Filename {.importcpp: "#.get_root()".}

proc `root=`*(this: BamCache, root: Filename) {.importcpp: "#.set_root(#)".}

func flushTime*(this: BamCache): int {.importcpp: "#.get_flush_time()".}

proc `flushTime=`*(this: BamCache, flushTime: int) {.importcpp: "#.set_flush_time(#)".}

func cacheMaxKbytes*(this: BamCache): int {.importcpp: "#.get_cache_max_kbytes()".}

proc `cacheMaxKbytes=`*(this: BamCache, maxKbytes: int) {.importcpp: "#.set_cache_max_kbytes(#)".}

func readOnly*(this: BamCache): bool {.importcpp: "#.get_read_only()".}

proc `readOnly=`*(this: BamCache, ro: bool) {.importcpp: "#.set_read_only(#)".}

func flags*(this: LoaderOptions): int {.importcpp: "#.get_flags()".}

proc `flags=`*(this: var LoaderOptions, flags: int) {.importcpp: "#.set_flags(#)".}

func textureFlags*(this: LoaderOptions): int {.importcpp: "#.get_texture_flags()".}

proc `textureFlags=`*(this: var LoaderOptions, flags: int) {.importcpp: "#.set_texture_flags(#)".}

func textureNumViews*(this: LoaderOptions): int {.importcpp: "#.get_texture_num_views()".}

proc `textureNumViews=`*(this: var LoaderOptions, numViews: int) {.importcpp: "#.set_texture_num_views(#)".}

func autoTextureScale*(this: LoaderOptions): AutoTextureScale {.importcpp: "#.get_auto_texture_scale()".}

proc `autoTextureScale=`*(this: var LoaderOptions, scale: AutoTextureScale) {.importcpp: "#.set_auto_texture_scale(#)".}

func source*(this: BamReader): DatagramGenerator {.importcpp: "#.get_source()".}

proc `source=`*(this: BamReader, source: DatagramBuffer | DatagramGenerator) {.importcpp: "#.set_source(#)".}

func filename*(this: BamReader | BamWriter): Filename {.importcpp: "#.get_filename()".}

func loaderOptions*(this: BamReader): LoaderOptions {.importcpp: "#.get_loader_options()".}

proc `loaderOptions=`*(this: BamReader, options: LoaderOptions) {.importcpp: "#.set_loader_options(#)".}

func target*(this: BamWriter): DatagramSink {.importcpp: "#.get_target()".}

proc `target=`*(this: BamWriter, target: DatagramSink) {.importcpp: "#.set_target(#)".}

func fileTextureMode*(this: BamWriter): BamEnums_BamTextureMode {.importcpp: "#.get_file_texture_mode()".}

func rootNode*(this: BamWriter): TypedWritable {.importcpp: "#.get_root_node()".}

proc `rootNode=`*(this: BamWriter, rootNode: TypedWritable) {.importcpp: "#.set_root_node(#)".}

func asciiEquivalent*(this: ButtonHandle): char {.importcpp: "#.get_ascii_equivalent()".}

func alias*(this: ButtonHandle): ButtonHandle {.importcpp: "#.get_alias()".}

func mode*(this: ClockObject): ClockObject_Mode {.importcpp: "#->get_mode()".}

proc `mode=`*(this: ClockObject, mode: ClockObject_Mode) {.importcpp: "#->set_mode(#)".}

func frameTime*(this: ClockObject): float64 {.importcpp: "#->get_frame_time()".}

proc `frameTime=`*(this: ClockObject, time: float64) {.importcpp: "#->set_frame_time(#)".}

func realTime*(this: ClockObject): float64 {.importcpp: "#->get_real_time()".}

proc `realTime=`*(this: ClockObject, time: float64) {.importcpp: "#->set_real_time(#)".}

func longTime*(this: ClockObject): float64 {.importcpp: "#->get_long_time()".}

func frameCount*(this: ClockObject): int {.importcpp: "#->get_frame_count()".}

proc `frameCount=`*(this: ClockObject, frameCount: int) {.importcpp: "#->set_frame_count(#)".}

proc `dt=`*(this: ClockObject, dt: float64) {.importcpp: "#->set_dt(#)".}

proc `maxDt=`*(this: ClockObject, maxDt: float64) {.importcpp: "#->set_max_dt(#)".}

func degradeFactor*(this: ClockObject): float64 {.importcpp: "#->get_degrade_factor()".}

proc `degradeFactor=`*(this: ClockObject, degradeFactor: float64) {.importcpp: "#->set_degrade_factor(#)".}

func averageFrameRateInterval*(this: ClockObject): float64 {.importcpp: "#->get_average_frame_rate_interval()".}

proc `averageFrameRateInterval=`*(this: ClockObject, time: float64) {.importcpp: "#->set_average_frame_rate_interval(#)".}

func averageFrameRate*(this: ClockObject): float64 {.importcpp: "#->get_average_frame_rate()".}

func maxFrameDuration*(this: ClockObject): float64 {.importcpp: "#->get_max_frame_duration()".}

proc `[]`*(this: ModifierButtons_buttons, index: int): ButtonHandle {.importcpp: "#.get_button(#)".}

func len*(this: ModifierButtons_buttons): int {.importcpp: "#.get_num_buttons()".}

func x*(this: PointerData): float64 {.importcpp: "#.get_x()".}

func y*(this: PointerData): float64 {.importcpp: "#.get_y()".}

func inWindow*(this: PointerData): bool {.importcpp: "#.get_in_window()".}

func value*(this: ParamTypedRefCount): TypedReferenceCount {.importcpp: "#->get_value()".}

proc `==`*(this: TypeHandle, other: TypeHandle): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: TypeHandle, other: TypeHandle): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: TypeHandle, other: TypeHandle): bool {.importcpp: "#.operator <(#)".}

proc `<=`*(this: TypeHandle, other: TypeHandle): bool {.importcpp: "#.operator <=(#)".}

proc `>`*(this: TypeHandle, other: TypeHandle): bool {.importcpp: "#.operator >(#)".}

proc `>=`*(this: TypeHandle, other: TypeHandle): bool {.importcpp: "#.operator >=(#)".}

proc compareTo*(this: TypeHandle, other: TypeHandle): int {.importcpp: "#.compare_to(#)".}

proc getHash*(this: ButtonHandle | Filename | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | NetAddress | PointerToVoid | TypeHandle | URLSpec): int {.importcpp: "#.get_hash()".}

proc getName*(this: TypeHandle, `object`: TypedObject): string {.importcpp: "nimStringFromStdString(#.get_name(#))", header: stringConversionCode.}

proc getName*(this: ButtonHandle | ConfigPage | ConfigVariableBase | ConfigVariableCore | HTTPCookie | LightMutexDirect | LightReMutexDirect | LoaderFileType | MutexDirect | NodePath | PNMFileType | PStatCollector | ReMutexDirect | TypeHandle): string {.importcpp: "nimStringFromStdString(#.get_name())", header: stringConversionCode.}

proc isDerivedFrom*(this: TypeHandle, parent: TypeHandle, `object`: TypedObject): bool {.importcpp: "#.is_derived_from(#, #)".}

proc isDerivedFrom*(this: TypeHandle, parent: TypeHandle): bool {.importcpp: "#.is_derived_from(#)".}

proc getNumParentClasses*(this: TypeHandle, `object`: TypedObject): int {.importcpp: "#.get_num_parent_classes(#)".}

proc getNumParentClasses*(this: TypeHandle): int {.importcpp: "#.get_num_parent_classes()".}

proc getParentClass*(this: TypeHandle, index: int): TypeHandle {.importcpp: "#.get_parent_class(#)".}

proc getNumChildClasses*(this: TypeHandle, `object`: TypedObject): int {.importcpp: "#.get_num_child_classes(#)".}

proc getNumChildClasses*(this: TypeHandle): int {.importcpp: "#.get_num_child_classes()".}

proc getChildClass*(this: TypeHandle, index: int): TypeHandle {.importcpp: "#.get_child_class(#)".}

proc getParentTowards*(this: TypeHandle, ancestor: TypeHandle, `object`: TypedObject): TypeHandle {.importcpp: "#.get_parent_towards(#, #)".}

proc getParentTowards*(this: TypeHandle, ancestor: TypeHandle): TypeHandle {.importcpp: "#.get_parent_towards(#)".}

proc getMemoryUsage*(this: TypeHandle, memoryClass: TypeHandle_MemoryClass): int {.importcpp: "#.get_memory_usage(#)".}

proc incMemoryUsage*(this: TypeHandle, memoryClass: TypeHandle_MemoryClass, size: int) {.importcpp: "#.inc_memory_usage(#, #)".}

proc decMemoryUsage*(this: TypeHandle, memoryClass: TypeHandle_MemoryClass, size: int) {.importcpp: "#.dec_memory_usage(#, #)".}

proc getIndex*(this: ButtonHandle | PStatCollector | PStatThread | TypeHandle): int {.importcpp: "#.get_index()".}

proc output*(this: AdaptiveLru | AnimControlCollection | AsyncTaskCollection | AsyncTaskSequence | AttribNodeRegistry | BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | ButtonHandle | CollisionRecorder | CollisionTraverser | CollisionVisualizer | ConditionVarDirect | ConditionVarFullDirect | ConfigDeclaration | ConfigPage | ConfigPageManager | ConfigVariableBase | ConfigVariableCore | ConfigVariableList | ConfigVariableManager | ConfigVariableSearchPath | CurveFitter | DSearchPath | Datagram | DatagramIterator | DisplayMode | DocumentSpec | DownloadDb | EventParameter | Filename | FrameBufferProperties | GeomVertexAnimationSpec | GeomVertexColumn | GeomVertexReader | GeomVertexRewriter | GeomVertexWriter | GlobPattern | GraphicsThreadingModel | HTTPCookie | HTTPDate | HTTPEntityTag | HashVal | InputDeviceSet | InternalNameCollection | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LParabolad | LParabolaf | LPlaned | LPlanef | LightMutexDirect | LightReMutexDirect | LoaderOptions | MaterialCollection | MemoryUsagePointers | ModifierButtons | MouseWatcherParameter | MutexDirect | NetAddress | NodePath | NodePathCollection | PGFrameStyle | PGMouseWatcherParameter | PNMImageHeader | PStatCollector | PartSubset | PfmFile | ReMutexDirect | Semaphore | SimpleLru | SparseArray | SubfileInfo | TextureCollection | TextureStageCollection | TransformBlend | TypeHandle | URLSpec | UniqueIdAllocator | UpdateSeq | VertexDataPage | WeakNodePath | WindowProperties | pixel, `out`: iostream | ostream) {.importcpp: "#.output(#)".}

proc `typecast bool`*(this: ButtonHandle | ConfigVariableBool | NodePath | ShaderInput | TypeHandle | URLSpec | WeakNodePath): bool {.importcpp: "(bool)(#)".}

proc registerDynamicType*(this: TypeRegistry, name: string): TypeHandle {.importcpp: "#.register_dynamic_type(nimStringToStdString(#))", header: stringConversionCode.}

proc recordDerivation*(this: TypeRegistry, child: TypeHandle, parent: TypeHandle) {.importcpp: "#.record_derivation(#, #)".}

proc recordAlternateName*(this: TypeRegistry, `type`: TypeHandle, name: string) {.importcpp: "#.record_alternate_name(#, nimStringToStdString(#))", header: stringConversionCode.}

proc findType*(this: TypeRegistry, name: string): TypeHandle {.importcpp: "#.find_type(nimStringToStdString(#))", header: stringConversionCode.}

proc findTypeById*(this: TypeRegistry, id: int): TypeHandle {.importcpp: "#.find_type_by_id(#)".}

proc getName*(this: TypeRegistry, `type`: TypeHandle, `object`: TypedObject): string {.importcpp: "nimStringFromStdString(#.get_name(#, #))", header: stringConversionCode.}

proc isDerivedFrom*(this: TypeRegistry, child: TypeHandle, base: TypeHandle, childObject: TypedObject): bool {.importcpp: "#.is_derived_from(#, #, #)".}

proc getNumTypehandles*(this: TypeRegistry): int {.importcpp: "#.get_num_typehandles()".}

proc getTypehandle*(this: TypeRegistry, n: int): TypeHandle {.importcpp: "#.get_typehandle(#)".}

proc getNumRootClasses*(this: TypeRegistry): int {.importcpp: "#.get_num_root_classes()".}

proc getRootClass*(this: TypeRegistry, n: int): TypeHandle {.importcpp: "#.get_root_class(#)".}

proc getNumParentClasses*(this: TypeRegistry, child: TypeHandle, childObject: TypedObject): int {.importcpp: "#.get_num_parent_classes(#, #)".}

proc getParentClass*(this: TypeRegistry, child: TypeHandle, index: int): TypeHandle {.importcpp: "#.get_parent_class(#, #)".}

proc getNumChildClasses*(this: TypeRegistry, child: TypeHandle, childObject: TypedObject): int {.importcpp: "#.get_num_child_classes(#, #)".}

proc getChildClass*(this: TypeRegistry, child: TypeHandle, index: int): TypeHandle {.importcpp: "#.get_child_class(#, #)".}

proc getParentTowards*(this: TypeRegistry, child: TypeHandle, base: TypeHandle, childObject: TypedObject): TypeHandle {.importcpp: "#.get_parent_towards(#, #, #)".}

proc write*(this: AnimControlCollection | AsyncTaskCollection | AsyncTaskSequence | AttribNodeRegistry | BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | ButtonRegistry | ConfigDeclaration | ConfigPage | ConfigPageManager | ConfigVariableBase | ConfigVariableCore | ConfigVariableList | ConfigVariableManager | ConfigVariableSearchPath | CullBinManager | CurveFitter | DSearchPath | Datagram | DatagramIterator | DocumentSpec | DownloadDb | EventHandler | InputDeviceSet | InternalNameCollection | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LParabolad | LParabolaf | LPlaned | LPlanef | LoaderFileTypeRegistry | MaterialCollection | ModifierButtons | NodePathCollection | PNMFileTypeRegistry | SceneGraphAnalyzer | TextPropertiesManager | TextureCollection | TextureStageCollection | TypeRegistry | UniqueIdAllocator | VirtualFileSystem, `out`: iostream | ostream) {.importcpp: "#.write(#)".}

proc getType*(this: AnimChannelBase | TypedObject): TypeHandle {.importcpp: "#->get_type()".}

proc getTypeIndex*(this: TypedObject): int {.importcpp: "#->get_type_index()".}

proc isOfType*(this: TypedObject, handle: TypeHandle): bool {.importcpp: "#->is_of_type(#)".}

proc isExactType*(this: TypedObject, handle: TypeHandle): bool {.importcpp: "#->is_exact_type(#)".}

proc get*(this: istream): int {.importcpp: "#.get()".}

proc tellg*(this: istream): clonglong {.importcpp: "#.tellg()".}

proc seekg*(this: istream, pos: clonglong) {.importcpp: "#.seekg(#)".}

proc seekg*(this: istream, off: clonglong, dir: ios_base_seekdir) {.importcpp: "#.seekg(#, #)".}

proc upcastToIstream*(this: iostream): var istream {.importcpp: "((std::istream *)&(#))".}

proc put*(this: iostream | ostream, c: char) {.importcpp: "#.put(#)".}

proc flush*(this: BamWriter | DatagramSinkNet | GeomCacheManager | MultiplexStream | StreamWriter | iostream | ostream) {.importcpp: "#.flush()".}

proc tellp*(this: iostream | ostream): clonglong {.importcpp: "#.tellp()".}

proc seekp*(this: iostream | ostream, pos: clonglong) {.importcpp: "#.seekp(#)".}

proc seekp*(this: iostream | ostream, off: clonglong, dir: ios_base_seekdir) {.importcpp: "#.seekp(#, #)".}

proc upcastToOstream*(this: OSocketStream | iostream): var ostream {.importcpp: "((std::ostream *)&(#))".}

proc close*(this: BamFile | DatagramInputFile | DatagramOutputFile | FileStream | IFileStream | OFileStream | OSocketStream | SocketStream | fstream | ifstream | ofstream) {.importcpp: "#.close()".}

proc open*(this: FileStream | IFileStream | OFileStream, filename: string) {.importcpp: "#.open(nimStringToStdString(#))", header: stringConversionCode.}

proc setEncoding*(this: TextEncoder | TextNode, encoding: TextEncoder_Encoding) {.importcpp: "#->set_encoding(#)".}

proc getEncoding*(this: TextEncoder | TextNode): TextEncoder_Encoding {.importcpp: "#->get_encoding()".}

proc clearText*(this: TextEncoder | TextNode) {.importcpp: "#->clear_text()".}

proc hasText*(this: TextEncoder | TextNode): bool {.importcpp: "#->has_text()".}

proc makeUpper*(this: TextEncoder | TextNode) {.importcpp: "#->make_upper()".}

proc makeLower*(this: TextEncoder | TextNode) {.importcpp: "#->make_lower()".}

proc appendUnicodeChar*(this: TextEncoder | TextNode, character: int) {.importcpp: "#->append_unicode_char(#)".}

proc getNumChars*(this: TextEncoder | TextNode): int {.importcpp: "#->get_num_chars()".}

proc getUnicodeChar*(this: TextEncoder | TextNode, index: int): int {.importcpp: "#->get_unicode_char(#)".}

proc setUnicodeChar*(this: TextEncoder | TextNode, index: int, character: int) {.importcpp: "#->set_unicode_char(#, #)".}

proc getEncodedChar*(this: TextEncoder | TextNode, index: int): string {.importcpp: "nimStringFromStdString(#->get_encoded_char(#))", header: stringConversionCode.}

proc getEncodedChar*(this: TextEncoder | TextNode, index: int, encoding: TextEncoder_Encoding): string {.importcpp: "nimStringFromStdString(#->get_encoded_char(#, #))", header: stringConversionCode.}

proc getTextAsAscii*(this: TextEncoder | TextNode): string {.importcpp: "nimStringFromStdString(#->get_text_as_ascii())", header: stringConversionCode.}

proc setWtext*(this: TextEncoder | TextNode, wtext: string) {.importcpp: "#->set_wtext(nimStringToStdString(#))", header: stringConversionCode.}

proc getWtext*(this: PGEntry | TextEncoder | TextNode): string {.importcpp: "nimStringFromStdString(#->get_wtext())", header: stringConversionCode.}

proc appendWtext*(this: TextEncoder | TextNode, text: string) {.importcpp: "#->append_wtext(nimStringToStdString(#))", header: stringConversionCode.}

proc getWtextAsAscii*(this: TextEncoder | TextNode): string {.importcpp: "nimStringFromStdString(#->get_wtext_as_ascii())", header: stringConversionCode.}

proc isWtext*(this: PGEntry | TextEncoder | TextNode): bool {.importcpp: "#->is_wtext()".}

proc `typecast`*(this: ConfigVariableString | Filename | URLSpec): string {.importcpp: "nimStringFromStdString(#.operator typecast())", header: stringConversionCode.}

proc cStr*(this: ConfigVariableFilename | ConfigVariableString | Filename | URLSpec): string {.importcpp: "nimStringFromStdString(#.c_str())", header: stringConversionCode.}

proc empty*(this: ConfigVariableFilename | ConfigVariableString | Filename | URLSpec): bool {.importcpp: "#.empty()".}

proc length*(this: ConfigVariableFilename | ConfigVariableString | Filename | URLSpec): int {.importcpp: "#.length()".}

proc `[]`*(this: ConfigVariableFilename | ConfigVariableString | Filename | URLSpec, n: int): char {.importcpp: "#.operator [](#)".}

proc substr*(this: Filename, begin: int): string {.importcpp: "nimStringFromStdString(#.substr(#))", header: stringConversionCode.}

proc substr*(this: Filename, begin: int, `end`: int): string {.importcpp: "nimStringFromStdString(#.substr(#, #))", header: stringConversionCode.}

proc `+=`*(this: var Filename, other: string) {.importcpp: "#.operator +=(nimStringToStdString(#))", header: stringConversionCode.}

proc `+`*(this: Filename, other: string): Filename {.importcpp: "#.operator +(nimStringToStdString(#))", header: stringConversionCode.}

proc `/`*(this: Filename, other: Filename): Filename {.importcpp: "#.operator /(#)".}

proc getFullpath*(this: ConfigVariableFilename | Filename): string {.importcpp: "nimStringFromStdString(#.get_fullpath())", header: stringConversionCode.}

proc getFullpathW*(this: Filename): string {.importcpp: "nimStringFromStdString(#.get_fullpath_w())", header: stringConversionCode.}

proc getDirname*(this: ConfigVariableFilename | Filename): string {.importcpp: "nimStringFromStdString(#.get_dirname())", header: stringConversionCode.}

proc getBasename*(this: ConfigVariableFilename | Filename | NotifyCategory): string {.importcpp: "nimStringFromStdString(#.get_basename())", header: stringConversionCode.}

proc getFullpathWoExtension*(this: ConfigVariableFilename | Filename): string {.importcpp: "nimStringFromStdString(#.get_fullpath_wo_extension())", header: stringConversionCode.}

proc getBasenameWoExtension*(this: ConfigVariableFilename | Filename): string {.importcpp: "nimStringFromStdString(#.get_basename_wo_extension())", header: stringConversionCode.}

proc getExtension*(this: ConfigVariableFilename | Filename | LoaderFileType): string {.importcpp: "nimStringFromStdString(#.get_extension())", header: stringConversionCode.}

proc setFullpath*(this: Filename, s: string) {.importcpp: "#.set_fullpath(nimStringToStdString(#))", header: stringConversionCode.}

proc setDirname*(this: Filename, s: string) {.importcpp: "#.set_dirname(nimStringToStdString(#))", header: stringConversionCode.}

proc setBasename*(this: Filename, s: string) {.importcpp: "#.set_basename(nimStringToStdString(#))", header: stringConversionCode.}

proc setFullpathWoExtension*(this: Filename, s: string) {.importcpp: "#.set_fullpath_wo_extension(nimStringToStdString(#))", header: stringConversionCode.}

proc setBasenameWoExtension*(this: Filename, s: string) {.importcpp: "#.set_basename_wo_extension(nimStringToStdString(#))", header: stringConversionCode.}

proc setExtension*(this: Filename, s: string) {.importcpp: "#.set_extension(nimStringToStdString(#))", header: stringConversionCode.}

proc setBinary*(this: Filename) {.importcpp: "#.set_binary()".}

proc setText*(this: Filename) {.importcpp: "#.set_text()".}

proc isBinary*(this: Filename): bool {.importcpp: "#.is_binary()".}

proc isText*(this: Filename): bool {.importcpp: "#.is_text()".}

proc isBinaryOrText*(this: Filename): bool {.importcpp: "#.is_binary_or_text()".}

proc setType*(this: Filename, `type`: Filename_Type) {.importcpp: "#.set_type(#)".}

proc getType*(this: Filename): Filename_Type {.importcpp: "#.get_type()".}

proc setPattern*(this: Filename, pattern: bool) {.importcpp: "#.set_pattern(#)".}

proc getPattern*(this: Filename): bool {.importcpp: "#.get_pattern()".}

proc hasHash*(this: Filename): bool {.importcpp: "#.has_hash()".}

proc getFilenameIndex*(this: Filename, index: int): Filename {.importcpp: "#.get_filename_index(#)".}

proc getHashToEnd*(this: Filename): string {.importcpp: "nimStringFromStdString(#.get_hash_to_end())", header: stringConversionCode.}

proc setHashToEnd*(this: Filename, s: string) {.importcpp: "#.set_hash_to_end(nimStringToStdString(#))", header: stringConversionCode.}

proc standardize*(this: Filename) {.importcpp: "#.standardize()".}

proc isLocal*(this: Filename): bool {.importcpp: "#.is_local()".}

proc isFullyQualified*(this: Filename): bool {.importcpp: "#.is_fully_qualified()".}

proc makeAbsolute*(this: Filename) {.importcpp: "#.make_absolute()".}

proc makeAbsolute*(this: Filename, startDirectory: Filename) {.importcpp: "#.make_absolute(#)".}

proc makeCanonical*(this: Filename): bool {.importcpp: "#.make_canonical()".}

proc makeTrueCase*(this: Filename): bool {.importcpp: "#.make_true_case()".}

proc toOsSpecific*(this: Filename): string {.importcpp: "nimStringFromStdString(#.to_os_specific())", header: stringConversionCode.}

proc toOsSpecificW*(this: Filename): string {.importcpp: "nimStringFromStdString(#.to_os_specific_w())", header: stringConversionCode.}

proc toOsGeneric*(this: Filename): string {.importcpp: "nimStringFromStdString(#.to_os_generic())", header: stringConversionCode.}

proc toOsShortName*(this: Filename): string {.importcpp: "nimStringFromStdString(#.to_os_short_name())", header: stringConversionCode.}

proc toOsLongName*(this: Filename): string {.importcpp: "nimStringFromStdString(#.to_os_long_name())", header: stringConversionCode.}

proc exists*(this: Filename): bool {.importcpp: "#.exists()".}

proc isRegularFile*(this: Filename): bool {.importcpp: "#.is_regular_file()".}

proc isWritable*(this: Filename): bool {.importcpp: "#.is_writable()".}

proc isDirectory*(this: Filename): bool {.importcpp: "#.is_directory()".}

proc isExecutable*(this: Filename): bool {.importcpp: "#.is_executable()".}

proc compareTimestamps*(this: Filename, other: Filename, thisMissingIsOld: bool, otherMissingIsOld: bool): int {.importcpp: "#.compare_timestamps(#, #, #)".}

proc compareTimestamps*(this: Filename, other: Filename, thisMissingIsOld: bool): int {.importcpp: "#.compare_timestamps(#, #)".}

proc compareTimestamps*(this: Filename, other: Filename): int {.importcpp: "#.compare_timestamps(#)".}

proc getTimestamp*(this: Filename): Time {.importcpp: "#.get_timestamp()".}

proc getAccessTimestamp*(this: Filename): Time {.importcpp: "#.get_access_timestamp()".}

proc getFileSize*(this: Filename): int {.importcpp: "#.get_file_size()".}

proc resolveFilename*(this: Filename, searchpath: DSearchPath, defaultExtension: string): bool {.importcpp: "#.resolve_filename(#, nimStringToStdString(#))", header: stringConversionCode.}

proc resolveFilename*(this: Filename, searchpath: DSearchPath): bool {.importcpp: "#.resolve_filename(#)".}

proc makeRelativeTo*(this: Filename, directory: Filename, allowBackups: bool): bool {.importcpp: "#.make_relative_to(#, #)".}

proc makeRelativeTo*(this: Filename, directory: Filename): bool {.importcpp: "#.make_relative_to(#)".}

proc findOnSearchpath*(this: Filename, searchpath: DSearchPath): int {.importcpp: "#.find_on_searchpath(#)".}

proc openRead*(this: Filename, stream: pifstream): bool {.importcpp: "#.open_read(#)".}

proc openRead*(this: Filename, stream: ifstream): bool {.importcpp: "#.open_read(#)".}

proc openWrite*(this: Filename, stream: pofstream, truncate: bool): bool {.importcpp: "#.open_write(#, #)".}

proc openWrite*(this: Filename, stream: pofstream): bool {.importcpp: "#.open_write(#)".}

proc openWrite*(this: Filename, stream: ofstream, truncate: bool): bool {.importcpp: "#.open_write(#, #)".}

proc openWrite*(this: Filename, stream: ofstream): bool {.importcpp: "#.open_write(#)".}

proc openAppend*(this: Filename, stream: pofstream): bool {.importcpp: "#.open_append(#)".}

proc openAppend*(this: Filename, stream: ofstream): bool {.importcpp: "#.open_append(#)".}

proc openReadWrite*(this: Filename, stream: pfstream, truncate: bool): bool {.importcpp: "#.open_read_write(#, #)".}

proc openReadWrite*(this: Filename, stream: pfstream): bool {.importcpp: "#.open_read_write(#)".}

proc openReadWrite*(this: Filename, stream: fstream, truncate: bool): bool {.importcpp: "#.open_read_write(#, #)".}

proc openReadWrite*(this: Filename, stream: fstream): bool {.importcpp: "#.open_read_write(#)".}

proc openReadAppend*(this: Filename, stream: pfstream): bool {.importcpp: "#.open_read_append(#)".}

proc openReadAppend*(this: Filename, stream: fstream): bool {.importcpp: "#.open_read_append(#)".}

proc chdir*(this: Filename): bool {.importcpp: "#.chdir()".}

proc touch*(this: Filename): bool {.importcpp: "#.touch()".}

proc unlink*(this: Filename): bool {.importcpp: "#.unlink()".}

proc renameTo*(this: Filename, other: Filename): bool {.importcpp: "#.rename_to(#)".}

proc copyTo*(this: Filename, other: Filename): bool {.importcpp: "#.copy_to(#)".}

proc makeDir*(this: Filename): bool {.importcpp: "#.make_dir()".}

proc mkdir*(this: Filename): bool {.importcpp: "#.mkdir()".}

proc rmdir*(this: Filename): bool {.importcpp: "#.rmdir()".}

proc `==`*(this: ConfigVariableString | Filename, other: string): bool {.importcpp: "#.operator ==(nimStringToStdString(#))", header: stringConversionCode.}

proc `!=`*(this: ConfigVariableString | Filename, other: string): bool {.importcpp: "#.operator !=(nimStringToStdString(#))", header: stringConversionCode.}

proc `<`*(this: ConfigVariableString | Filename, other: string): bool {.importcpp: "#.operator <(nimStringToStdString(#))", header: stringConversionCode.}

proc compareTo*(this: Filename, other: Filename): int {.importcpp: "#.compare_to(#)".}

proc hasSystem*(this: PandaSystem, system: string): bool {.importcpp: "#->has_system(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumSystems*(this: PandaSystem): int {.importcpp: "#->get_num_systems()".}

proc getSystem*(this: PandaSystem, n: int): string {.importcpp: "nimStringFromStdString(#->get_system(#))", header: stringConversionCode.}

proc getSystemTag*(this: PandaSystem, system: string, tag: string): string {.importcpp: "nimStringFromStdString(#->get_system_tag(nimStringToStdString(#), nimStringToStdString(#)))", header: stringConversionCode.}

proc addSystem*(this: PandaSystem, system: string) {.importcpp: "#->add_system(nimStringToStdString(#))", header: stringConversionCode.}

proc setSystemTag*(this: PandaSystem, system: string, tag: string, value: string) {.importcpp: "#->set_system_tag(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc heapTrim*(this: PandaSystem, pad: int): bool {.importcpp: "#->heap_trim(#)".}

proc output*(this: AdaptiveLruPage | AnimControl | AnimGroup | AnimInterface | AnimPreloadTable | AsyncFuture | AsyncTask | AsyncTaskChain | AsyncTaskManager | AudioManager | AudioSound | AuxSceneData | BamCacheRecord | BoundingVolume | ButtonMap | CallbackData | CallbackObject | CollisionEntry | CollisionHandlerQueue | CollisionSolid | DisplayRegion | Event | Geom | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayFormat | GeomVertexData | GeomVertexFormat | IndexBufferContext | InputDevice | InternalName | Lens | LightLensNode | LightNode | Loader | Material | MouseWatcher | MouseWatcherBase | MouseWatcherRegion | MovieAudio | MovieVideo | Multifile | Namable | NurbsCurveEvaluator | NurbsSurfaceEvaluator | PGMouseWatcherParameter | PandaNode | PandaSystem | ParamValueBase | ParametricCurveCollection | PartBundle | PartGroup | RenderAttrib | RenderEffect | RenderEffects | RenderState | SequenceNode | ShaderBuffer | SimpleAllocator | SimpleAllocatorBlock | SimpleLruPage | TextFont | TextNode | Texture | TextureContext | TextureStage | Thread | TransformState | VertexBufferContext | VertexDataPage | VertexSlider | VertexTransform | VideoTexture | VirtualFile | VirtualFileMount | WindowHandle, `out`: iostream | ostream) {.importcpp: "#->output(#)".}

proc write*(this: AsyncTaskChain | AsyncTaskManager | AudioManager | AudioSound | AuxSceneData | BamCacheRecord | BoundingVolume | ButtonEventList | ButtonMap | CollisionEntry | CollisionHandlerQueue | CollisionSolid | Geom | GeomVertexArrayData | GeomVertexArrayFormat | GeomVertexData | GeomVertexFormat | Lens | LightLensNode | LightNode | MouseWatcher | MouseWatcherBase | MouseWatcherRegion | PandaSystem | ParametricCurveCollection | SimpleAllocator | SliderTable | TextNode | TextProperties | TextureStage | TransformTable | VirtualFileMount, `out`: iostream | ostream) {.importcpp: "#->write(#)".}

proc clear*(this: AsyncTaskCollection | AsyncTaskSequence | AttribNodeRegistry | ConfigPage | ConfigVariableSearchPath | Datagram | DatagramBuffer | GeomVertexReader | GeomVertexRewriter | GeomVertexWriter | InputDeviceSet | InternalNameCollection | MaterialCollection | MemoryUsagePointers | MultitexReducer | NodePathCollection | PNMImage | PfmFile | Ramfile | SceneGraphAnalyzer | Socket_fdset | StackedPerlinNoise2 | StackedPerlinNoise3 | TextAssembler | TextureCollection | TextureStageCollection | Triangulator | Triangulator3 | UpdateSeq | var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var DSearchPath | var FrameBufferProperties | var NetAddress | var NodePath | var SparseArray | var WeakNodePath | var WindowProperties) {.importcpp: "#.clear()".}

proc appendDirectory*(this: ConfigVariableSearchPath | var DSearchPath, directory: Filename) {.importcpp: "#.append_directory(#)".}

proc prependDirectory*(this: ConfigVariableSearchPath | var DSearchPath, directory: Filename) {.importcpp: "#.prepend_directory(#)".}

proc appendPath*(this: ConfigVariableSearchPath | var DSearchPath, path: DSearchPath) {.importcpp: "#.append_path(#)".}

proc appendPath*(this: ConfigVariableSearchPath | var DSearchPath, path: string, separator: string) {.importcpp: "#.append_path(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc appendPath*(this: ConfigVariableSearchPath | var DSearchPath, path: string) {.importcpp: "#.append_path(nimStringToStdString(#))", header: stringConversionCode.}

proc prependPath*(this: ConfigVariableSearchPath | var DSearchPath, path: DSearchPath) {.importcpp: "#.prepend_path(#)".}

proc isEmpty*(this: ConfigVariableSearchPath | DSearchPath | EventParameter | LineSegs | NodePath | NodePathCollection | SubfileInfo | WeakNodePath): bool {.importcpp: "#.is_empty()".}

proc getNumDirectories*(this: ConfigVariableSearchPath | DSearchPath): int {.importcpp: "#.get_num_directories()".}

proc getDirectory*(this: ConfigVariableSearchPath | DSearchPath, n: int): Filename {.importcpp: "#.get_directory(#)".}

proc findFile*(this: ConfigVariableSearchPath | DSearchPath, filename: Filename): Filename {.importcpp: "#.find_file(#)".}

proc output*(this: DSearchPath, `out`: iostream | ostream, separator: string) {.importcpp: "#.output(#, nimStringToStdString(#))", header: stringConversionCode.}

proc write*(this: AdaptiveLru | AsyncTaskCollection | AsyncTaskSequence | BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | CollisionTraverser | DSearchPath | DocumentSpec | InputDeviceSet | InternalNameCollection | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LParabolad | LParabolaf | LPlaned | LPlanef | LoaderFileTypeRegistry | MaterialCollection | NodePathCollection | PNMFileTypeRegistry | SceneGraphAnalyzer | SimpleLru | TextPropertiesManager | TextureCollection | TextureStageCollection | TransformBlend | VertexDataPage, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#.write(#, #)".}

proc `==`*(this: GlobPattern, other: GlobPattern): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: GlobPattern, other: GlobPattern): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: GlobPattern, other: GlobPattern): bool {.importcpp: "#.operator <(#)".}

proc setPattern*(this: var GlobPattern, pattern: string) {.importcpp: "#.set_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getPattern*(this: GlobPattern): string {.importcpp: "nimStringFromStdString(#.get_pattern())", header: stringConversionCode.}

proc setCaseSensitive*(this: var GlobPattern, caseSensitive: bool) {.importcpp: "#.set_case_sensitive(#)".}

proc getCaseSensitive*(this: GlobPattern): bool {.importcpp: "#.get_case_sensitive()".}

proc setNomatchChars*(this: var GlobPattern, nomatchChars: string) {.importcpp: "#.set_nomatch_chars(nimStringToStdString(#))", header: stringConversionCode.}

proc getNomatchChars*(this: GlobPattern): string {.importcpp: "nimStringFromStdString(#.get_nomatch_chars())", header: stringConversionCode.}

proc matches*(this: GlobPattern, candidate: string): bool {.importcpp: "#.matches(nimStringToStdString(#))", header: stringConversionCode.}

proc matchesFile*(this: GlobPattern, candidate: Filename): bool {.importcpp: "#.matches_file(#)".}

proc hasGlobCharacters*(this: GlobPattern): bool {.importcpp: "#.has_glob_characters()".}

proc getConstPrefix*(this: GlobPattern): string {.importcpp: "nimStringFromStdString(#.get_const_prefix())", header: stringConversionCode.}

proc isTextAvailable*(this: LineStream): bool {.importcpp: "#.is_text_available()".}

proc getLine*(this: LineStream): string {.importcpp: "nimStringFromStdString(#.get_line())", header: stringConversionCode.}

proc hasNewline*(this: LineStream): bool {.importcpp: "#.has_newline()".}

proc isSpecial*(this: ConfigPage | UpdateSeq): bool {.importcpp: "#.is_special()".}

proc isImplicit*(this: ConfigPage): bool {.importcpp: "#.is_implicit()".}

proc setSort*(this: ConfigPage, sort: int) {.importcpp: "#.set_sort(#)".}

proc getSort*(this: ConfigPage): int {.importcpp: "#.get_sort()".}

proc getPageSeq*(this: ConfigPage): int {.importcpp: "#.get_page_seq()".}

proc getTrustLevel*(this: ConfigPage | ConfigVariableBase | ConfigVariableCore): int {.importcpp: "#.get_trust_level()".}

proc setTrustLevel*(this: ConfigPage, trustLevel: int) {.importcpp: "#.set_trust_level(#)".}

proc getSignature*(this: ConfigPage): string {.importcpp: "nimStringFromStdString(#.get_signature())", header: stringConversionCode.}

proc readPrc*(this: ConfigPage, `in`: istream): bool {.importcpp: "#.read_prc(#)".}

proc readEncryptedPrc*(this: ConfigPage, `in`: istream, password: string): bool {.importcpp: "#.read_encrypted_prc(#, nimStringToStdString(#))", header: stringConversionCode.}

proc makeDeclaration*(this: ConfigPage, variable: ConfigVariableCore, value: string): ConfigDeclaration {.importcpp: "#.make_declaration(#, nimStringToStdString(#))", header: stringConversionCode.}

proc makeDeclaration*(this: ConfigPage, variable: string, value: string): ConfigDeclaration {.importcpp: "#.make_declaration(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc deleteDeclaration*(this: ConfigPage, decl: ConfigDeclaration): bool {.importcpp: "#.delete_declaration(#)".}

proc getNumDeclarations*(this: ConfigPage | ConfigVariableCore): int {.importcpp: "#.get_num_declarations()".}

proc getDeclaration*(this: ConfigPage | ConfigVariableCore, n: int): ConfigDeclaration {.importcpp: "#.get_declaration(#)".}

proc modifyDeclaration*(this: ConfigPage, n: int): ConfigDeclaration {.importcpp: "#.modify_declaration(#)".}

proc getVariableName*(this: ConfigPage | ConfigVariableManager, n: int): string {.importcpp: "nimStringFromStdString(#.get_variable_name(#))", header: stringConversionCode.}

proc getStringValue*(this: ConfigPage | ConfigVariableList, n: int): string {.importcpp: "nimStringFromStdString(#.get_string_value(#))", header: stringConversionCode.}

proc isVariableUsed*(this: ConfigPage | ConfigVariableManager, n: int): bool {.importcpp: "#.is_variable_used(#)".}

proc getPage*(this: ConfigDeclaration): ConfigPage {.importcpp: "#.get_page()".}

proc getVariable*(this: ConfigDeclaration): ConfigVariableCore {.importcpp: "#.get_variable()".}

proc isUsed*(this: ConfigVariableCore): bool {.importcpp: "#.is_used()".}

proc getValueType*(this: ConfigVariableBase | ConfigVariableCore): ConfigFlags_ValueType {.importcpp: "#.get_value_type()".}

proc getDescription*(this: ConfigVariableBase | ConfigVariableCore): string {.importcpp: "nimStringFromStdString(#.get_description())", header: stringConversionCode.}

proc getFlags*(this: ConfigVariableBase | ConfigVariableCore | LoaderOptions | TouchInfo): int {.importcpp: "#.get_flags()".}

proc isClosed*(this: ConfigVariableBase | ConfigVariableCore | OSocketStream | SocketStream): bool {.importcpp: "#.is_closed()".}

proc isDynamic*(this: ConfigVariableBase | ConfigVariableCore): bool {.importcpp: "#.is_dynamic()".}

proc getDefaultValue*(this: ConfigVariableCore): ConfigDeclaration {.importcpp: "#.get_default_value()".}

proc setValueType*(this: ConfigVariableCore, valueType: ConfigFlags_ValueType) {.importcpp: "#.set_value_type(#)".}

proc setFlags*(this: ConfigVariableCore | var LoaderOptions, flags: int) {.importcpp: "#.set_flags(#)".}

proc setDescription*(this: ConfigVariableCore, description: string) {.importcpp: "#.set_description(nimStringToStdString(#))", header: stringConversionCode.}

proc setDefaultValue*(this: ConfigVariableCore, defaultValue: string) {.importcpp: "#.set_default_value(nimStringToStdString(#))", header: stringConversionCode.}

proc setUsed*(this: ConfigVariableCore) {.importcpp: "#.set_used()".}

proc makeLocalValue*(this: ConfigVariableCore): ConfigDeclaration {.importcpp: "#.make_local_value()".}

proc clearLocalValue*(this: ConfigVariableBase | ConfigVariableCore | ConfigVariableSearchPath): bool {.importcpp: "#.clear_local_value()".}

proc hasLocalValue*(this: ConfigVariableBase | ConfigVariableCore): bool {.importcpp: "#.has_local_value()".}

proc hasValue*(this: ConfigVariableBase | ConfigVariableCore): bool {.importcpp: "#.has_value()".}

proc getNumReferences*(this: ConfigVariableCore): int {.importcpp: "#.get_num_references()".}

proc getReference*(this: ConfigVariableCore, n: int): ConfigDeclaration {.importcpp: "#.get_reference(#)".}

proc getNumTrustedReferences*(this: ConfigVariableCore): int {.importcpp: "#.get_num_trusted_references()".}

proc getTrustedReference*(this: ConfigVariableCore, n: int): ConfigDeclaration {.importcpp: "#.get_trusted_reference(#)".}

proc getNumUniqueReferences*(this: ConfigVariableCore): int {.importcpp: "#.get_num_unique_references()".}

proc getUniqueReference*(this: ConfigVariableCore, n: int): ConfigDeclaration {.importcpp: "#.get_unique_reference(#)".}

proc getStringValue*(this: ConfigDeclaration | ConfigVariable | EventParameter): string {.importcpp: "nimStringFromStdString(#.get_string_value())", header: stringConversionCode.}

proc setStringValue*(this: ConfigDeclaration | ConfigVariable, value: string) {.importcpp: "#.set_string_value(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumWords*(this: BitArray | ConfigDeclaration | ConfigVariable): int {.importcpp: "#.get_num_words()".}

proc hasStringWord*(this: ConfigDeclaration, n: int): bool {.importcpp: "#.has_string_word(#)".}

proc hasBoolWord*(this: ConfigDeclaration, n: int): bool {.importcpp: "#.has_bool_word(#)".}

proc hasIntWord*(this: ConfigDeclaration, n: int): bool {.importcpp: "#.has_int_word(#)".}

proc hasInt64Word*(this: ConfigDeclaration, n: int): bool {.importcpp: "#.has_int64_word(#)".}

proc hasDoubleWord*(this: ConfigDeclaration, n: int): bool {.importcpp: "#.has_double_word(#)".}

proc getStringWord*(this: ConfigDeclaration, n: int): string {.importcpp: "nimStringFromStdString(#.get_string_word(#))", header: stringConversionCode.}

proc getBoolWord*(this: ConfigDeclaration, n: int): bool {.importcpp: "#.get_bool_word(#)".}

proc getIntWord*(this: ConfigDeclaration, n: int): int {.importcpp: "#.get_int_word(#)".}

proc getInt64Word*(this: ConfigDeclaration, n: int): clonglong {.importcpp: "#.get_int64_word(#)".}

proc getDoubleWord*(this: ConfigDeclaration, n: int): float64 {.importcpp: "#.get_double_word(#)".}

proc setStringWord*(this: ConfigDeclaration, n: int, value: string) {.importcpp: "#.set_string_word(#, nimStringToStdString(#))", header: stringConversionCode.}

proc setBoolWord*(this: ConfigDeclaration, n: int, value: bool) {.importcpp: "#.set_bool_word(#, #)".}

proc setIntWord*(this: ConfigDeclaration, n: int, value: int) {.importcpp: "#.set_int_word(#, #)".}

proc setInt64Word*(this: ConfigDeclaration, n: int, value: clonglong) {.importcpp: "#.set_int64_word(#, #)".}

proc setDoubleWord*(this: ConfigDeclaration, n: int, value: float64) {.importcpp: "#.set_double_word(#, #)".}

proc getFilenameValue*(this: ConfigDeclaration): Filename {.importcpp: "#.get_filename_value()".}

proc getDeclSeq*(this: ConfigDeclaration): int {.importcpp: "#.get_decl_seq()".}

proc outputBriefSignature*(this: ConfigPage, `out`: iostream | ostream) {.importcpp: "#.output_brief_signature(#)".}

proc getOstreamPtr*(this: Notify): ostream {.importcpp: "#.get_ostream_ptr()".}

proc clearAssertHandler*(this: Notify) {.importcpp: "#.clear_assert_handler()".}

proc hasAssertHandler*(this: Notify): bool {.importcpp: "#.has_assert_handler()".}

proc getAssertHandler*(this: Notify) {.importcpp: "#.get_assert_handler()".}

proc hasAssertFailed*(this: Notify): bool {.importcpp: "#.has_assert_failed()".}

proc getAssertErrorMessage*(this: Notify): string {.importcpp: "nimStringFromStdString(#.get_assert_error_message())", header: stringConversionCode.}

proc clearAssertFailed*(this: Notify) {.importcpp: "#.clear_assert_failed()".}

proc getTopCategory*(this: Notify): NotifyCategory {.importcpp: "#.get_top_category()".}

proc getCategory*(this: Notify, fullname: string): NotifyCategory {.importcpp: "#.get_category(nimStringToStdString(#))", header: stringConversionCode.}

proc getCategory*(this: Notify, basename: string, parentCategory: NotifyCategory): NotifyCategory {.importcpp: "#.get_category(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getCategory*(this: Notify, basename: string, parentFullname: string): NotifyCategory {.importcpp: "#.get_category(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc loadedImplicitPages*(this: ConfigPageManager): bool {.importcpp: "#.loaded_implicit_pages()".}

proc loadImplicitPages*(this: ConfigPageManager) {.importcpp: "#.load_implicit_pages()".}

proc reloadImplicitPages*(this: ConfigPageManager) {.importcpp: "#.reload_implicit_pages()".}

proc getSearchPath*(this: ConfigPageManager): DSearchPath {.importcpp: "#.get_search_path()".}

proc getNumPrcPatterns*(this: ConfigPageManager): int {.importcpp: "#.get_num_prc_patterns()".}

proc getPrcPattern*(this: ConfigPageManager, n: int): string {.importcpp: "nimStringFromStdString(#.get_prc_pattern(#))", header: stringConversionCode.}

proc getNumPrcEncryptedPatterns*(this: ConfigPageManager): int {.importcpp: "#.get_num_prc_encrypted_patterns()".}

proc getPrcEncryptedPattern*(this: ConfigPageManager, n: int): string {.importcpp: "nimStringFromStdString(#.get_prc_encrypted_pattern(#))", header: stringConversionCode.}

proc getNumPrcExecutablePatterns*(this: ConfigPageManager): int {.importcpp: "#.get_num_prc_executable_patterns()".}

proc getPrcExecutablePattern*(this: ConfigPageManager, n: int): string {.importcpp: "nimStringFromStdString(#.get_prc_executable_pattern(#))", header: stringConversionCode.}

proc makeExplicitPage*(this: ConfigPageManager, name: string): ConfigPage {.importcpp: "#.make_explicit_page(nimStringToStdString(#))", header: stringConversionCode.}

proc deleteExplicitPage*(this: ConfigPageManager, page: ConfigPage): bool {.importcpp: "#.delete_explicit_page(#)".}

proc getNumImplicitPages*(this: ConfigPageManager): int {.importcpp: "#.get_num_implicit_pages()".}

proc getImplicitPage*(this: ConfigPageManager, n: int): ConfigPage {.importcpp: "#.get_implicit_page(#)".}

proc getNumExplicitPages*(this: ConfigPageManager): int {.importcpp: "#.get_num_explicit_pages()".}

proc getExplicitPage*(this: ConfigPageManager, n: int): ConfigPage {.importcpp: "#.get_explicit_page(#)".}

proc makeVariable*(this: ConfigVariableManager, name: string): ConfigVariableCore {.importcpp: "#.make_variable(nimStringToStdString(#))", header: stringConversionCode.}

proc makeVariableTemplate*(this: ConfigVariableManager, pattern: string, `type`: ConfigFlags_ValueType, defaultValue: string, description: string, flags: int): ConfigVariableCore {.importcpp: "#.make_variable_template(nimStringToStdString(#), #, nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc makeVariableTemplate*(this: ConfigVariableManager, pattern: string, `type`: ConfigFlags_ValueType, defaultValue: string, description: string): ConfigVariableCore {.importcpp: "#.make_variable_template(nimStringToStdString(#), #, nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc makeVariableTemplate*(this: ConfigVariableManager, pattern: string, `type`: ConfigFlags_ValueType, defaultValue: string): ConfigVariableCore {.importcpp: "#.make_variable_template(nimStringToStdString(#), #, nimStringToStdString(#))", header: stringConversionCode.}

proc getNumVariables*(this: ConfigVariableManager): int {.importcpp: "#.get_num_variables()".}

proc getVariable*(this: ConfigVariableManager, n: int): ConfigVariableCore {.importcpp: "#.get_variable(#)".}

proc writePrcVariables*(this: ConfigVariableManager, `out`: iostream | ostream) {.importcpp: "#.write_prc_variables(#)".}

proc listUnusedVariables*(this: ConfigVariableManager) {.importcpp: "#.list_unused_variables()".}

proc listVariables*(this: ConfigVariableManager) {.importcpp: "#.list_variables()".}

proc listDynamicVariables*(this: ConfigVariableManager) {.importcpp: "#.list_dynamic_variables()".}

proc clearValue*(this: ConfigVariable) {.importcpp: "#.clear_value()".}

func len*(this: AsyncTaskCollection | AsyncTaskSequence | ConfigVariableBool | ConfigVariableDouble | ConfigVariableInt | ConfigVariableInt64 | ConfigVariableList | InputDeviceSet | InternalNameCollection | MaterialCollection | NodePathCollection | TextureCollection | TextureStageCollection | URLSpec): int {.importcpp: "#.size()".}

proc `[]`*(this: ConfigVariableBool, n: int): bool {.importcpp: "#.operator [](#)".}

proc setValue*(this: ConfigVariableBool, value: bool) {.importcpp: "#.set_value(#)".}

proc getValue*(this: ConfigVariableBool): bool {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableBool): bool {.importcpp: "#.get_default_value()".}

proc getWord*(this: ConfigVariableBool, n: int): bool {.importcpp: "#.get_word(#)".}

proc setWord*(this: ConfigVariableBool, n: int, value: bool) {.importcpp: "#.set_word(#, #)".}

proc `typecast double`*(this: ConfigVariableDouble): float64 {.importcpp: "(double)(#)".}

proc `[]`*(this: ConfigVariableDouble, n: int): float64 {.importcpp: "#.operator [](#)".}

proc setValue*(this: ConfigVariableDouble, value: float64) {.importcpp: "#.set_value(#)".}

proc getValue*(this: ConfigVariableDouble): float64 {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableDouble): float64 {.importcpp: "#.get_default_value()".}

proc getWord*(this: ConfigVariableDouble, n: int): float64 {.importcpp: "#.get_word(#)".}

proc setWord*(this: ConfigVariableDouble, n: int, value: float64) {.importcpp: "#.set_word(#, #)".}

proc `typecast`*(this: ConfigVariableFilename): Filename {.importcpp: "#.operator typecast()".}

proc `==`*(this: ConfigVariableFilename, other: Filename): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: ConfigVariableFilename, other: Filename): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: ConfigVariableFilename, other: Filename): bool {.importcpp: "#.operator <(#)".}

proc setValue*(this: ConfigVariableFilename, value: Filename) {.importcpp: "#.set_value(#)".}

proc getValue*(this: ConfigVariableFilename): Filename {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableFilename): Filename {.importcpp: "#.get_default_value()".}

proc getWord*(this: ConfigVariableFilename, n: int): Filename {.importcpp: "#.get_word(#)".}

proc setWord*(this: ConfigVariableFilename, n: int, value: Filename) {.importcpp: "#.set_word(#, #)".}

proc `typecast int`*(this: ConfigVariableInt): int {.importcpp: "(int)(#)".}

proc `[]`*(this: ConfigVariableInt, n: int): int {.importcpp: "#.operator [](#)".}

proc setValue*(this: ConfigVariableInt, value: int) {.importcpp: "#.set_value(#)".}

proc getValue*(this: ConfigVariableInt): int {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableInt): int {.importcpp: "#.get_default_value()".}

proc getWord*(this: ConfigVariableInt, n: int): int {.importcpp: "#.get_word(#)".}

proc setWord*(this: ConfigVariableInt, n: int, value: int) {.importcpp: "#.set_word(#, #)".}

proc `typecast int64_t`*(this: ConfigVariableInt64): clonglong {.importcpp: "(int64_t)(#)".}

proc `[]`*(this: ConfigVariableInt64, n: int): clonglong {.importcpp: "#.operator [](#)".}

proc setValue*(this: ConfigVariableInt64, value: clonglong) {.importcpp: "#.set_value(#)".}

proc getValue*(this: ConfigVariableInt64): clonglong {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableInt64): clonglong {.importcpp: "#.get_default_value()".}

proc getWord*(this: ConfigVariableInt64, n: int): clonglong {.importcpp: "#.get_word(#)".}

proc setWord*(this: ConfigVariableInt64 | var BitArray, n: int, value: clonglong) {.importcpp: "#.set_word(#, #)".}

proc getNumValues*(this: ConfigVariableList | GeomVertexColumn): int {.importcpp: "#.get_num_values()".}

proc getNumUniqueValues*(this: ConfigVariableList): int {.importcpp: "#.get_num_unique_values()".}

proc getUniqueValue*(this: ConfigVariableList, n: int): string {.importcpp: "nimStringFromStdString(#.get_unique_value(#))", header: stringConversionCode.}

proc `[]`*(this: ConfigVariableList, n: int): string {.importcpp: "nimStringFromStdString(#.operator [](#))", header: stringConversionCode.}

proc `typecast DSearchPath`*(this: ConfigVariableSearchPath): DSearchPath {.importcpp: "(DSearchPath)(#)".}

proc getValue*(this: ConfigVariableSearchPath): DSearchPath {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableSearchPath): DSearchPath {.importcpp: "#.get_default_value()".}

proc setValue*(this: ConfigVariableString | HTTPCookie, value: string) {.importcpp: "#.set_value(nimStringToStdString(#))", header: stringConversionCode.}

proc getValue*(this: ConfigVariableString | HTTPCookie): string {.importcpp: "nimStringFromStdString(#.get_value())", header: stringConversionCode.}

proc getDefaultValue*(this: ConfigVariableString): string {.importcpp: "nimStringFromStdString(#.get_default_value())", header: stringConversionCode.}

proc getWord*(this: ConfigVariableString, n: int): string {.importcpp: "nimStringFromStdString(#.get_word(#))", header: stringConversionCode.}

proc setWord*(this: ConfigVariableString, n: int, value: string) {.importcpp: "#.set_word(#, nimStringToStdString(#))", header: stringConversionCode.}

proc upcastToConfigFlags*(this: NotifyCategory): var ConfigFlags {.importcpp: "((ConfigFlags *)&(#))".}

proc getFullname*(this: NotifyCategory | PStatCollector): string {.importcpp: "nimStringFromStdString(#.get_fullname())", header: stringConversionCode.}

proc getSeverity*(this: NotifyCategory): NotifySeverity {.importcpp: "#.get_severity()".}

proc setSeverity*(this: NotifyCategory, severity: NotifySeverity) {.importcpp: "#.set_severity(#)".}

proc isOn*(this: NotifyCategory, severity: NotifySeverity): bool {.importcpp: "#.is_on(#)".}

proc isSpam*(this: NotifyCategory): bool {.importcpp: "#.is_spam()".}

proc isDebug*(this: NotifyCategory): bool {.importcpp: "#.is_debug()".}

proc isInfo*(this: NotifyCategory): bool {.importcpp: "#.is_info()".}

proc isWarning*(this: NotifyCategory): bool {.importcpp: "#.is_warning()".}

proc isError*(this: DatagramSinkNet | NotifyCategory): bool {.importcpp: "#.is_error()".}

proc isFatal*(this: NotifyCategory): bool {.importcpp: "#.is_fatal()".}

proc spam*(this: NotifyCategory, prefix: bool): ostream {.importcpp: "#.spam(#)".}

proc spam*(this: NotifyCategory): ostream {.importcpp: "#.spam()".}

proc debug*(this: NotifyCategory, prefix: bool): ostream {.importcpp: "#.debug(#)".}

proc debug*(this: NotifyCategory): ostream {.importcpp: "#.debug()".}

proc info*(this: NotifyCategory, prefix: bool): ostream {.importcpp: "#.info(#)".}

proc info*(this: NotifyCategory): ostream {.importcpp: "#.info()".}

proc warning*(this: NotifyCategory, prefix: bool): ostream {.importcpp: "#.warning(#)".}

proc warning*(this: NotifyCategory): ostream {.importcpp: "#.warning()".}

proc error*(this: NotifyCategory, prefix: bool): ostream {.importcpp: "#.error(#)".}

proc error*(this: NotifyCategory): ostream {.importcpp: "#.error()".}

proc fatal*(this: NotifyCategory, prefix: bool): ostream {.importcpp: "#.fatal(#)".}

proc fatal*(this: NotifyCategory): ostream {.importcpp: "#.fatal()".}

proc getNumChildren*(this: NotifyCategory): int {.importcpp: "#.get_num_children()".}

proc getChild*(this: NotifyCategory, i: int): NotifyCategory {.importcpp: "#.get_child(#)".}

proc open*(this: IDecryptStream, source: istream, ownsSource: bool, password: string): IDecryptStream {.importcpp: "#.open(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc close*(this: IDecryptStream): IDecryptStream {.importcpp: "#.close()".}

proc getAlgorithm*(this: IDecryptStream): string {.importcpp: "nimStringFromStdString(#.get_algorithm())", header: stringConversionCode.}

proc getKeyLength*(this: IDecryptStream): int {.importcpp: "#.get_key_length()".}

proc getIterationCount*(this: IDecryptStream): int {.importcpp: "#.get_iteration_count()".}

proc open*(this: OEncryptStream, dest: iostream | ostream, ownsDest: bool, password: string): OEncryptStream {.importcpp: "#.open(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc close*(this: OEncryptStream): OEncryptStream {.importcpp: "#.close()".}

proc setAlgorithm*(this: OEncryptStream, algorithm: string) {.importcpp: "#.set_algorithm(nimStringToStdString(#))", header: stringConversionCode.}

proc setKeyLength*(this: OEncryptStream, keyLength: int) {.importcpp: "#.set_key_length(#)".}

proc setIterationCount*(this: OEncryptStream, iterationCount: int) {.importcpp: "#.set_iteration_count(#)".}

proc getIstream*(this: IStreamWrapper | StreamReader): istream {.importcpp: "#.get_istream()".}

proc getBool*(this: DatagramIterator | StreamReader): bool {.importcpp: "#.get_bool()".}

proc getInt8*(this: DatagramIterator | StreamReader): char {.importcpp: "#.get_int8()".}

proc getUint8*(this: DatagramIterator | StreamReader): char {.importcpp: "#.get_uint8()".}

proc getInt16*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_int16()".}

proc getInt32*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_int32()".}

proc getInt64*(this: DatagramIterator | StreamReader): clonglong {.importcpp: "#.get_int64()".}

proc getUint16*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_uint16()".}

proc getUint32*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_uint32()".}

proc getUint64*(this: DatagramIterator | StreamReader): clonglong {.importcpp: "#.get_uint64()".}

proc getFloat32*(this: DatagramIterator | StreamReader): float32 {.importcpp: "#.get_float32()".}

proc getFloat64*(this: DatagramIterator | StreamReader): float64 {.importcpp: "#.get_float64()".}

proc getBeInt16*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_be_int16()".}

proc getBeInt32*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_be_int32()".}

proc getBeInt64*(this: DatagramIterator | StreamReader): clonglong {.importcpp: "#.get_be_int64()".}

proc getBeUint16*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_be_uint16()".}

proc getBeUint32*(this: DatagramIterator | StreamReader): int {.importcpp: "#.get_be_uint32()".}

proc getBeUint64*(this: DatagramIterator | StreamReader): clonglong {.importcpp: "#.get_be_uint64()".}

proc getBeFloat32*(this: DatagramIterator | StreamReader): float32 {.importcpp: "#.get_be_float32()".}

proc getBeFloat64*(this: DatagramIterator | StreamReader): float64 {.importcpp: "#.get_be_float64()".}

proc getString*(this: DatagramIterator | HTTPDate | HTTPEntityTag | StreamReader): string {.importcpp: "nimStringFromStdString(#.get_string())", header: stringConversionCode.}

proc getString32*(this: DatagramIterator | StreamReader): string {.importcpp: "nimStringFromStdString(#.get_string32())", header: stringConversionCode.}

proc getZString*(this: DatagramIterator | StreamReader): string {.importcpp: "nimStringFromStdString(#.get_z_string())", header: stringConversionCode.}

proc getFixedString*(this: DatagramIterator | StreamReader, size: int): string {.importcpp: "nimStringFromStdString(#.get_fixed_string(#))", header: stringConversionCode.}

proc skipBytes*(this: DatagramIterator | StreamReader, size: int) {.importcpp: "#.skip_bytes(#)".}

proc getOstream*(this: OStreamWrapper | StreamWrapper | StreamWriter): ostream {.importcpp: "#.get_ostream()".}

proc addBool*(this: Datagram | StreamWriter, value: bool) {.importcpp: "#.add_bool(#)".}

proc addInt8*(this: Datagram | StreamWriter, value: char) {.importcpp: "#.add_int8(#)".}

proc addUint8*(this: Datagram | StreamWriter, value: char) {.importcpp: "#.add_uint8(#)".}

proc addInt16*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_int16(#)".}

proc addInt32*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_int32(#)".}

proc addInt64*(this: Datagram | StreamWriter, value: clonglong) {.importcpp: "#.add_int64(#)".}

proc addUint16*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_uint16(#)".}

proc addUint32*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_uint32(#)".}

proc addUint64*(this: Datagram | StreamWriter, value: clonglong) {.importcpp: "#.add_uint64(#)".}

proc addFloat32*(this: Datagram | StreamWriter, value: float32) {.importcpp: "#.add_float32(#)".}

proc addFloat64*(this: Datagram | StreamWriter, value: float64) {.importcpp: "#.add_float64(#)".}

proc addBeInt16*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_be_int16(#)".}

proc addBeInt32*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_be_int32(#)".}

proc addBeInt64*(this: Datagram | StreamWriter, value: clonglong) {.importcpp: "#.add_be_int64(#)".}

proc addBeUint16*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_be_uint16(#)".}

proc addBeUint32*(this: Datagram | StreamWriter, value: int) {.importcpp: "#.add_be_uint32(#)".}

proc addBeUint64*(this: Datagram | StreamWriter, value: clonglong) {.importcpp: "#.add_be_uint64(#)".}

proc addBeFloat32*(this: Datagram | StreamWriter, value: float32) {.importcpp: "#.add_be_float32(#)".}

proc addBeFloat64*(this: Datagram | StreamWriter, value: float64) {.importcpp: "#.add_be_float64(#)".}

proc addString*(this: Datagram | StreamWriter, str: string) {.importcpp: "#.add_string(nimStringToStdString(#))", header: stringConversionCode.}

proc addString32*(this: Datagram | StreamWriter, str: string) {.importcpp: "#.add_string32(nimStringToStdString(#))", header: stringConversionCode.}

proc addZString*(this: Datagram | StreamWriter, str: string) {.importcpp: "#.add_z_string(nimStringToStdString(#))", header: stringConversionCode.}

proc addFixedString*(this: Datagram | StreamWriter, str: string, size: int) {.importcpp: "#.add_fixed_string(nimStringToStdString(#), #)", header: stringConversionCode.}

proc padBytes*(this: Datagram | StreamWriter, size: int) {.importcpp: "#.pad_bytes(#)".}

proc write*(this: StreamWriter, str: string) {.importcpp: "#.write(nimStringToStdString(#))", header: stringConversionCode.}

proc acquire*(this: LightMutexDirect | MutexDirect | Semaphore | StreamWrapperBase) {.importcpp: "#.acquire()".}

proc release*(this: LightMutexDirect | LightReMutexDirect | MutexDirect | ReMutexDirect | StreamWrapperBase) {.importcpp: "#.release()".}

proc upcastToStreamWrapperBase*(this: IStreamWrapper | OStreamWrapper | StreamWrapper): var StreamWrapperBase {.importcpp: "((StreamWrapperBase *)&(#))".}

proc upcastToIStreamWrapper*(this: StreamWrapper): var IStreamWrapper {.importcpp: "((IStreamWrapper *)&(#))".}

proc upcastToOStreamWrapper*(this: StreamWrapper): var OStreamWrapper {.importcpp: "((OStreamWrapper *)&(#))".}

proc getIostream*(this: StreamWrapper): iostream {.importcpp: "#.get_iostream()".}

proc receiveDatagram*(this: ISocketStream | SSReader | SocketStream | SocketStreamRecorder, dg: Datagram): bool {.importcpp: "#->receive_datagram(#)".}

proc isClosed*(this: GraphicsWindow | ISocketStream | OSocketStream | SSReader | SSWriter | SocketStream | SocketStreamRecorder): bool {.importcpp: "#->is_closed()".}

proc close*(this: ISocketStream | Multifile | OSocketStream | RecorderController | SSReader | SSWriter | SocketStream | SocketStreamRecorder) {.importcpp: "#->close()".}

proc setTcpHeaderSize*(this: ConnectionReader | DatagramGeneratorNet | ISocketStream | OSocketStream | SSReader | SSWriter | SocketStream, tcpHeaderSize: int) {.importcpp: "#->set_tcp_header_size(#)".}

proc getTcpHeaderSize*(this: ConnectionReader | DatagramGeneratorNet | ISocketStream | OSocketStream | SSReader | SSWriter | SocketStream): int {.importcpp: "#->get_tcp_header_size()".}

proc sendDatagram*(this: OSocketStream | SSWriter | SocketStream | SocketStreamRecorder, dg: Datagram): bool {.importcpp: "#->send_datagram(#)".}

proc setCollectTcp*(this: Connection | OSocketStream | SSWriter | SocketStream | SocketStreamRecorder, collectTcp: bool) {.importcpp: "#->set_collect_tcp(#)".}

proc getCollectTcp*(this: Connection | OSocketStream | SSWriter | SocketStream | SocketStreamRecorder): bool {.importcpp: "#->get_collect_tcp()".}

proc setCollectTcpInterval*(this: Connection | OSocketStream | SSWriter | SocketStream | SocketStreamRecorder, interval: float64) {.importcpp: "#->set_collect_tcp_interval(#)".}

proc getCollectTcpInterval*(this: Connection | OSocketStream | SSWriter | SocketStream | SocketStreamRecorder): float64 {.importcpp: "#->get_collect_tcp_interval()".}

proc considerFlush*(this: Connection | OSocketStream | SSWriter | SocketStream | SocketStreamRecorder): bool {.importcpp: "#->consider_flush()".}

proc flush*(this: Connection | Multifile | OSocketStream | SSWriter | SocketStream | SocketStreamRecorder): bool {.importcpp: "#->flush()".}

proc upcastToIstream*(this: ISocketStream): istream {.importcpp: "((std::istream *)(#))".}

proc upcastToSSReader*(this: ISocketStream): SSReader {.importcpp: "((SSReader *)(#))".}

proc getReadState*(this: ISocketStream): ISocketStream_ReadState {.importcpp: "#->get_read_state()".}

proc upcastToSSWriter*(this: OSocketStream | SocketStream): var SSWriter {.importcpp: "((SSWriter *)&(#))".}

proc flush*(this: OSocketStream | SocketStream): bool {.importcpp: "#.flush()".}

proc upcastToIostream*(this: SocketStream): var iostream {.importcpp: "((std::iostream *)&(#))".}

proc upcastToSSReader*(this: SocketStream): var SSReader {.importcpp: "((SSReader *)&(#))".}

proc setTcpHeaderSize*(this: ConnectionWriter | DatagramSinkNet | SocketStream, tcpHeaderSize: int) {.importcpp: "#.set_tcp_header_size(#)".}

proc getTcpHeaderSize*(this: ConnectionWriter | DatagramSinkNet | SocketStream): int {.importcpp: "#.get_tcp_header_size()".}

proc `==`*(this: URLSpec, other: URLSpec): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: URLSpec, other: URLSpec): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: URLSpec, other: URLSpec): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: URLSpec, other: URLSpec): int {.importcpp: "#.compare_to(#)".}

proc hasScheme*(this: URLSpec): bool {.importcpp: "#.has_scheme()".}

proc hasAuthority*(this: URLSpec): bool {.importcpp: "#.has_authority()".}

proc hasUsername*(this: URLSpec): bool {.importcpp: "#.has_username()".}

proc hasServer*(this: URLSpec): bool {.importcpp: "#.has_server()".}

proc hasPort*(this: URLSpec): bool {.importcpp: "#.has_port()".}

proc hasPath*(this: URLSpec): bool {.importcpp: "#.has_path()".}

proc hasQuery*(this: URLSpec): bool {.importcpp: "#.has_query()".}

proc getScheme*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_scheme())", header: stringConversionCode.}

proc getAuthority*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_authority())", header: stringConversionCode.}

proc getUsername*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_username())", header: stringConversionCode.}

proc getServer*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_server())", header: stringConversionCode.}

proc getPortStr*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_port_str())", header: stringConversionCode.}

proc getPort*(this: NetAddress | URLSpec): int {.importcpp: "#.get_port()".}

proc getServerAndPort*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_server_and_port())", header: stringConversionCode.}

proc isDefaultPort*(this: URLSpec): bool {.importcpp: "#.is_default_port()".}

proc getPath*(this: HTTPCookie | URLSpec): string {.importcpp: "nimStringFromStdString(#.get_path())", header: stringConversionCode.}

proc getQuery*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_query())", header: stringConversionCode.}

proc getPathAndQuery*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_path_and_query())", header: stringConversionCode.}

proc isSsl*(this: URLSpec): bool {.importcpp: "#.is_ssl()".}

proc getUrl*(this: URLSpec): string {.importcpp: "nimStringFromStdString(#.get_url())", header: stringConversionCode.}

proc setScheme*(this: var URLSpec, scheme: string) {.importcpp: "#.set_scheme(nimStringToStdString(#))", header: stringConversionCode.}

proc setAuthority*(this: var URLSpec, authority: string) {.importcpp: "#.set_authority(nimStringToStdString(#))", header: stringConversionCode.}

proc setUsername*(this: var URLSpec, username: string) {.importcpp: "#.set_username(nimStringToStdString(#))", header: stringConversionCode.}

proc setServer*(this: var URLSpec, server: string) {.importcpp: "#.set_server(nimStringToStdString(#))", header: stringConversionCode.}

proc setPort*(this: var URLSpec, port: string) {.importcpp: "#.set_port(nimStringToStdString(#))", header: stringConversionCode.}

proc setPort*(this: var NetAddress | var URLSpec, port: int) {.importcpp: "#.set_port(#)".}

proc setServerAndPort*(this: var URLSpec, serverAndPort: string) {.importcpp: "#.set_server_and_port(nimStringToStdString(#))", header: stringConversionCode.}

proc setPath*(this: HTTPCookie | var URLSpec, path: string) {.importcpp: "#.set_path(nimStringToStdString(#))", header: stringConversionCode.}

proc setQuery*(this: var URLSpec, query: string) {.importcpp: "#.set_query(nimStringToStdString(#))", header: stringConversionCode.}

proc setUrl*(this: var URLSpec, url: string, serverNameExpected: bool) {.importcpp: "#.set_url(nimStringToStdString(#), #)", header: stringConversionCode.}

proc setUrl*(this: var URLSpec, url: string) {.importcpp: "#.set_url(nimStringToStdString(#))", header: stringConversionCode.}

proc input*(this: DocumentSpec | HTTPDate | var URLSpec, `in`: istream): bool {.importcpp: "#.input(#)".}

proc isValid*(this: HTTPDate | PNMImage | PNMTextMaker | PStatCollector | PfmFile): bool {.importcpp: "#.is_valid()".}

proc getTime*(this: HTTPDate): Time {.importcpp: "#.get_time()".}

proc `==`*(this: HTTPDate, other: HTTPDate): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: HTTPDate, other: HTTPDate): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: HTTPDate, other: HTTPDate): bool {.importcpp: "#.operator <(#)".}

proc `>`*(this: HTTPDate, other: HTTPDate): bool {.importcpp: "#.operator >(#)".}

proc compareTo*(this: HTTPDate, other: HTTPDate): int {.importcpp: "#.compare_to(#)".}

proc `+=`*(this: var HTTPDate, seconds: int) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var HTTPDate, seconds: int) {.importcpp: "#.operator -=(#)".}

proc `+`*(this: HTTPDate, seconds: int): HTTPDate {.importcpp: "#.operator +(#)".}

proc `-`*(this: HTTPDate, other: HTTPDate): int {.importcpp: "#.operator -(#)".}

proc `-`*(this: HTTPDate, seconds: int): HTTPDate {.importcpp: "#.operator -(#)".}

proc setName*(this: HTTPCookie | LightMutexDirect | LightReMutexDirect | MutexDirect | NodePath | ReMutexDirect, name: string) {.importcpp: "#.set_name(nimStringToStdString(#))", header: stringConversionCode.}

proc setDomain*(this: HTTPCookie, domain: string) {.importcpp: "#.set_domain(nimStringToStdString(#))", header: stringConversionCode.}

proc getDomain*(this: HTTPCookie): string {.importcpp: "nimStringFromStdString(#.get_domain())", header: stringConversionCode.}

proc setExpires*(this: HTTPCookie, expires: HTTPDate) {.importcpp: "#.set_expires(#)".}

proc clearExpires*(this: HTTPCookie) {.importcpp: "#.clear_expires()".}

proc hasExpires*(this: HTTPCookie): bool {.importcpp: "#.has_expires()".}

proc getExpires*(this: HTTPCookie): HTTPDate {.importcpp: "#.get_expires()".}

proc setSecure*(this: HTTPCookie, flag: bool) {.importcpp: "#.set_secure(#)".}

proc getSecure*(this: HTTPCookie): bool {.importcpp: "#.get_secure()".}

proc `<`*(this: HTTPCookie, other: HTTPCookie): bool {.importcpp: "#.operator <(#)".}

proc updateFrom*(this: HTTPCookie, other: HTTPCookie) {.importcpp: "#.update_from(#)".}

proc parseSetCookie*(this: HTTPCookie, format: string, url: URLSpec): bool {.importcpp: "#.parse_set_cookie(nimStringToStdString(#), #)", header: stringConversionCode.}

proc isExpired*(this: HTTPCookie, now: HTTPDate): bool {.importcpp: "#.is_expired(#)".}

proc isExpired*(this: HTTPCookie): bool {.importcpp: "#.is_expired()".}

proc matchesUrl*(this: HTTPCookie, url: URLSpec): bool {.importcpp: "#.matches_url(#)".}

proc setProxySpec*(this: HTTPClient, proxySpec: string) {.importcpp: "#->set_proxy_spec(nimStringToStdString(#))", header: stringConversionCode.}

proc getProxySpec*(this: HTTPClient): string {.importcpp: "nimStringFromStdString(#->get_proxy_spec())", header: stringConversionCode.}

proc setDirectHostSpec*(this: HTTPClient, directHostSpec: string) {.importcpp: "#->set_direct_host_spec(nimStringToStdString(#))", header: stringConversionCode.}

proc getDirectHostSpec*(this: HTTPClient): string {.importcpp: "nimStringFromStdString(#->get_direct_host_spec())", header: stringConversionCode.}

proc setTryAllDirect*(this: HTTPClient, tryAllDirect: bool) {.importcpp: "#->set_try_all_direct(#)".}

proc getTryAllDirect*(this: HTTPClient): bool {.importcpp: "#->get_try_all_direct()".}

proc clearProxy*(this: HTTPClient) {.importcpp: "#->clear_proxy()".}

proc addProxy*(this: HTTPClient, scheme: string, proxy: URLSpec) {.importcpp: "#->add_proxy(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clearDirectHost*(this: HTTPClient) {.importcpp: "#->clear_direct_host()".}

proc addDirectHost*(this: HTTPClient, hostname: string) {.importcpp: "#->add_direct_host(nimStringToStdString(#))", header: stringConversionCode.}

proc getProxiesForUrl*(this: HTTPClient, url: URLSpec): string {.importcpp: "nimStringFromStdString(#->get_proxies_for_url(#))", header: stringConversionCode.}

proc setUsername*(this: HTTPClient, server: string, realm: string, username: string) {.importcpp: "#->set_username(nimStringToStdString(#), nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc getUsername*(this: HTTPClient, server: string, realm: string): string {.importcpp: "nimStringFromStdString(#->get_username(nimStringToStdString(#), nimStringToStdString(#)))", header: stringConversionCode.}

proc setCookie*(this: HTTPClient, cookie: HTTPCookie) {.importcpp: "#->set_cookie(#)".}

proc clearCookie*(this: HTTPClient, cookie: HTTPCookie): bool {.importcpp: "#->clear_cookie(#)".}

proc clearAllCookies*(this: HTTPClient) {.importcpp: "#->clear_all_cookies()".}

proc hasCookie*(this: HTTPClient, cookie: HTTPCookie): bool {.importcpp: "#->has_cookie(#)".}

proc getCookie*(this: HTTPClient, cookie: HTTPCookie): HTTPCookie {.importcpp: "#->get_cookie(#)".}

proc copyCookiesFrom*(this: HTTPClient, other: HTTPClient) {.importcpp: "#->copy_cookies_from(#)".}

proc writeCookies*(this: HTTPClient, `out`: iostream | ostream) {.importcpp: "#->write_cookies(#)".}

proc sendCookies*(this: HTTPClient, `out`: iostream | ostream, url: URLSpec) {.importcpp: "#->send_cookies(#, #)".}

proc setClientCertificateFilename*(this: HTTPClient, filename: Filename) {.importcpp: "#->set_client_certificate_filename(#)".}

proc setClientCertificatePem*(this: HTTPClient, pem: string) {.importcpp: "#->set_client_certificate_pem(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientCertificatePassphrase*(this: HTTPClient, passphrase: string) {.importcpp: "#->set_client_certificate_passphrase(nimStringToStdString(#))", header: stringConversionCode.}

proc loadClientCertificate*(this: HTTPClient): bool {.importcpp: "#->load_client_certificate()".}

proc addPreapprovedServerCertificateFilename*(this: HTTPClient, url: URLSpec, filename: Filename): bool {.importcpp: "#->add_preapproved_server_certificate_filename(#, #)".}

proc addPreapprovedServerCertificatePem*(this: HTTPClient, url: URLSpec, pem: string): bool {.importcpp: "#->add_preapproved_server_certificate_pem(#, nimStringToStdString(#))", header: stringConversionCode.}

proc addPreapprovedServerCertificateName*(this: HTTPClient, url: URLSpec, name: string): bool {.importcpp: "#->add_preapproved_server_certificate_name(#, nimStringToStdString(#))", header: stringConversionCode.}

proc clearPreapprovedServerCertificates*(this: HTTPClient, url: URLSpec) {.importcpp: "#->clear_preapproved_server_certificates(#)".}

proc clearAllPreapprovedServerCertificates*(this: HTTPClient) {.importcpp: "#->clear_all_preapproved_server_certificates()".}

proc setHttpVersion*(this: HTTPClient, version: HTTPEnum_HTTPVersion) {.importcpp: "#->set_http_version(#)".}

proc getHttpVersion*(this: HTTPChannel | HTTPClient): HTTPEnum_HTTPVersion {.importcpp: "#->get_http_version()".}

proc getHttpVersionString*(this: HTTPChannel | HTTPClient): string {.importcpp: "nimStringFromStdString(#->get_http_version_string())", header: stringConversionCode.}

proc loadCertificates*(this: HTTPClient, filename: Filename): bool {.importcpp: "#->load_certificates(#)".}

proc setVerifySsl*(this: HTTPClient, verifySsl: HTTPClient_VerifySSL) {.importcpp: "#->set_verify_ssl(#)".}

proc getVerifySsl*(this: HTTPClient): HTTPClient_VerifySSL {.importcpp: "#->get_verify_ssl()".}

proc setCipherList*(this: HTTPClient, cipherList: string) {.importcpp: "#->set_cipher_list(nimStringToStdString(#))", header: stringConversionCode.}

proc getCipherList*(this: HTTPClient): string {.importcpp: "nimStringFromStdString(#->get_cipher_list())", header: stringConversionCode.}

proc makeChannel*(this: HTTPClient, persistentConnection: bool): HTTPChannel {.importcpp: "#->make_channel(#)".}

proc postForm*(this: HTTPClient, url: URLSpec, body: string): HTTPChannel {.importcpp: "#->post_form(#, nimStringToStdString(#))", header: stringConversionCode.}

proc getDocument*(this: HTTPClient, url: URLSpec): HTTPChannel {.importcpp: "#->get_document(#)".}

proc getHeader*(this: HTTPClient, url: URLSpec): HTTPChannel {.importcpp: "#->get_header(#)".}

proc isWeak*(this: HTTPEntityTag): bool {.importcpp: "#.is_weak()".}

proc getTag*(this: HTTPEntityTag): string {.importcpp: "nimStringFromStdString(#.get_tag())", header: stringConversionCode.}

proc strongEquiv*(this: HTTPEntityTag, other: HTTPEntityTag): bool {.importcpp: "#.strong_equiv(#)".}

proc weakEquiv*(this: HTTPEntityTag, other: HTTPEntityTag): bool {.importcpp: "#.weak_equiv(#)".}

proc `==`*(this: HTTPEntityTag, other: HTTPEntityTag): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: HTTPEntityTag, other: HTTPEntityTag): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: HTTPEntityTag, other: HTTPEntityTag): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: HTTPEntityTag, other: HTTPEntityTag): int {.importcpp: "#.compare_to(#)".}

proc `==`*(this: DocumentSpec, other: DocumentSpec): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: DocumentSpec, other: DocumentSpec): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: DocumentSpec, other: DocumentSpec): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: DocumentSpec, other: DocumentSpec): int {.importcpp: "#.compare_to(#)".}

proc setUrl*(this: DocumentSpec, url: URLSpec) {.importcpp: "#.set_url(#)".}

proc getUrl*(this: DocumentSpec): URLSpec {.importcpp: "#.get_url()".}

proc setTag*(this: DocumentSpec, tag: HTTPEntityTag) {.importcpp: "#.set_tag(#)".}

proc hasTag*(this: DocumentSpec): bool {.importcpp: "#.has_tag()".}

proc getTag*(this: DocumentSpec): HTTPEntityTag {.importcpp: "#.get_tag()".}

proc clearTag*(this: DocumentSpec) {.importcpp: "#.clear_tag()".}

proc setDate*(this: DocumentSpec, date: HTTPDate) {.importcpp: "#.set_date(#)".}

proc hasDate*(this: DocumentSpec): bool {.importcpp: "#.has_date()".}

proc getDate*(this: DocumentSpec): HTTPDate {.importcpp: "#.get_date()".}

proc clearDate*(this: DocumentSpec) {.importcpp: "#.clear_date()".}

proc setRequestMode*(this: DocumentSpec, requestMode: DocumentSpec_RequestMode) {.importcpp: "#.set_request_mode(#)".}

proc getRequestMode*(this: DocumentSpec): DocumentSpec_RequestMode {.importcpp: "#.get_request_mode()".}

proc setCacheControl*(this: DocumentSpec, cacheControl: DocumentSpec_CacheControl) {.importcpp: "#.set_cache_control(#)".}

proc getCacheControl*(this: DocumentSpec): DocumentSpec_CacheControl {.importcpp: "#.get_cache_control()".}

proc getClient*(this: HTTPChannel): HTTPClient {.importcpp: "#->get_client()".}

proc isValid*(this: AnalogNode | AudioManager | ButtonNode | CollisionPolygon | DialNode | GraphicsOutput | GraphicsPipe | GraphicsStateGuardian | HTTPChannel | ParametricCurve | TextFont | TrackerNode | VertexDataSaveFile): bool {.importcpp: "#->is_valid()".}

proc isConnectionReady*(this: HTTPChannel): bool {.importcpp: "#->is_connection_ready()".}

proc getUrl*(this: HTTPChannel): URLSpec {.importcpp: "#->get_url()".}

proc getDocumentSpec*(this: HTTPChannel): DocumentSpec {.importcpp: "#->get_document_spec()".}

proc getStatusCode*(this: HTTPChannel): int {.importcpp: "#->get_status_code()".}

proc getStatusString*(this: HTTPChannel): string {.importcpp: "nimStringFromStdString(#->get_status_string())", header: stringConversionCode.}

proc getWwwRealm*(this: HTTPChannel): string {.importcpp: "nimStringFromStdString(#->get_www_realm())", header: stringConversionCode.}

proc getProxyRealm*(this: HTTPChannel): string {.importcpp: "nimStringFromStdString(#->get_proxy_realm())", header: stringConversionCode.}

proc getRedirect*(this: HTTPChannel): URLSpec {.importcpp: "#->get_redirect()".}

proc getHeaderValue*(this: HTTPChannel, key: string): string {.importcpp: "nimStringFromStdString(#->get_header_value(nimStringToStdString(#)))", header: stringConversionCode.}

proc getNumRedirectSteps*(this: HTTPChannel): int {.importcpp: "#->get_num_redirect_steps()".}

proc getRedirectStep*(this: HTTPChannel, n: int): URLSpec {.importcpp: "#->get_redirect_step(#)".}

proc setPersistentConnection*(this: HTTPChannel, persistentConnection: bool) {.importcpp: "#->set_persistent_connection(#)".}

proc getPersistentConnection*(this: HTTPChannel): bool {.importcpp: "#->get_persistent_connection()".}

proc willCloseConnection*(this: HTTPChannel): bool {.importcpp: "#->will_close_connection()".}

proc setAllowProxy*(this: HTTPChannel, allowProxy: bool) {.importcpp: "#->set_allow_proxy(#)".}

proc getAllowProxy*(this: HTTPChannel): bool {.importcpp: "#->get_allow_proxy()".}

proc setProxyTunnel*(this: HTTPChannel, proxyTunnel: bool) {.importcpp: "#->set_proxy_tunnel(#)".}

proc getProxyTunnel*(this: HTTPChannel): bool {.importcpp: "#->get_proxy_tunnel()".}

proc setConnectTimeout*(this: HTTPChannel, timeoutSeconds: float64) {.importcpp: "#->set_connect_timeout(#)".}

proc getConnectTimeout*(this: HTTPChannel): float64 {.importcpp: "#->get_connect_timeout()".}

proc setBlockingConnect*(this: HTTPChannel, blockingConnect: bool) {.importcpp: "#->set_blocking_connect(#)".}

proc getBlockingConnect*(this: HTTPChannel): bool {.importcpp: "#->get_blocking_connect()".}

proc setHttpTimeout*(this: HTTPChannel, timeoutSeconds: float64) {.importcpp: "#->set_http_timeout(#)".}

proc getHttpTimeout*(this: HTTPChannel): float64 {.importcpp: "#->get_http_timeout()".}

proc setSkipBodySize*(this: HTTPChannel, skipBodySize: int) {.importcpp: "#->set_skip_body_size(#)".}

proc getSkipBodySize*(this: HTTPChannel): int {.importcpp: "#->get_skip_body_size()".}

proc setIdleTimeout*(this: HTTPChannel, idleTimeout: float64) {.importcpp: "#->set_idle_timeout(#)".}

proc getIdleTimeout*(this: HTTPChannel): float64 {.importcpp: "#->get_idle_timeout()".}

proc setDownloadThrottle*(this: HTTPChannel, downloadThrottle: bool) {.importcpp: "#->set_download_throttle(#)".}

proc getDownloadThrottle*(this: HTTPChannel): bool {.importcpp: "#->get_download_throttle()".}

proc setMaxBytesPerSecond*(this: HTTPChannel, maxBytesPerSecond: float64) {.importcpp: "#->set_max_bytes_per_second(#)".}

proc getMaxBytesPerSecond*(this: HTTPChannel): float64 {.importcpp: "#->get_max_bytes_per_second()".}

proc setMaxUpdatesPerSecond*(this: HTTPChannel, maxUpdatesPerSecond: float64) {.importcpp: "#->set_max_updates_per_second(#)".}

proc getMaxUpdatesPerSecond*(this: HTTPChannel): float64 {.importcpp: "#->get_max_updates_per_second()".}

proc setContentType*(this: HTTPChannel, contentType: string) {.importcpp: "#->set_content_type(nimStringToStdString(#))", header: stringConversionCode.}

proc getContentType*(this: HTTPChannel): string {.importcpp: "nimStringFromStdString(#->get_content_type())", header: stringConversionCode.}

proc setExpectedFileSize*(this: HTTPChannel, fileSize: int) {.importcpp: "#->set_expected_file_size(#)".}

proc getFileSize*(this: HTTPChannel | VirtualFile): int {.importcpp: "#->get_file_size()".}

proc isFileSizeKnown*(this: HTTPChannel): bool {.importcpp: "#->is_file_size_known()".}

proc getFirstByteRequested*(this: HTTPChannel): int {.importcpp: "#->get_first_byte_requested()".}

proc getLastByteRequested*(this: HTTPChannel): int {.importcpp: "#->get_last_byte_requested()".}

proc getFirstByteDelivered*(this: HTTPChannel): int {.importcpp: "#->get_first_byte_delivered()".}

proc getLastByteDelivered*(this: HTTPChannel): int {.importcpp: "#->get_last_byte_delivered()".}

proc writeHeaders*(this: HTTPChannel, `out`: iostream | ostream) {.importcpp: "#->write_headers(#)".}

proc reset*(this: CardMaker | ClockObject | DriveInterface | FisheyeMaker | HTTPChannel | Trackball) {.importcpp: "#->reset()".}

proc preserveStatus*(this: HTTPChannel) {.importcpp: "#->preserve_status()".}

proc clearExtraHeaders*(this: HTTPChannel) {.importcpp: "#->clear_extra_headers()".}

proc sendExtraHeader*(this: HTTPChannel, key: string, value: string) {.importcpp: "#->send_extra_header(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc getDocument*(this: HTTPChannel, url: DocumentSpec): bool {.importcpp: "#->get_document(#)".}

proc getSubdocument*(this: HTTPChannel, url: DocumentSpec, firstByte: int, lastByte: int): bool {.importcpp: "#->get_subdocument(#, #, #)".}

proc getHeader*(this: HTTPChannel, url: DocumentSpec): bool {.importcpp: "#->get_header(#)".}

proc postForm*(this: HTTPChannel, url: DocumentSpec, body: string): bool {.importcpp: "#->post_form(#, nimStringToStdString(#))", header: stringConversionCode.}

proc putDocument*(this: HTTPChannel, url: DocumentSpec, body: string): bool {.importcpp: "#->put_document(#, nimStringToStdString(#))", header: stringConversionCode.}

proc deleteDocument*(this: HTTPChannel, url: DocumentSpec): bool {.importcpp: "#->delete_document(#)".}

proc getTrace*(this: HTTPChannel, url: DocumentSpec): bool {.importcpp: "#->get_trace(#)".}

proc connectTo*(this: HTTPChannel, url: DocumentSpec): bool {.importcpp: "#->connect_to(#)".}

proc getOptions*(this: HTTPChannel, url: DocumentSpec): bool {.importcpp: "#->get_options(#)".}

proc beginGetDocument*(this: HTTPChannel, url: DocumentSpec) {.importcpp: "#->begin_get_document(#)".}

proc beginGetSubdocument*(this: HTTPChannel, url: DocumentSpec, firstByte: int, lastByte: int) {.importcpp: "#->begin_get_subdocument(#, #, #)".}

proc beginGetHeader*(this: HTTPChannel, url: DocumentSpec) {.importcpp: "#->begin_get_header(#)".}

proc beginPostForm*(this: HTTPChannel, url: DocumentSpec, body: string) {.importcpp: "#->begin_post_form(#, nimStringToStdString(#))", header: stringConversionCode.}

proc run*(this: HTTPChannel): bool {.importcpp: "#->run()".}

proc beginConnectTo*(this: HTTPChannel, url: DocumentSpec) {.importcpp: "#->begin_connect_to(#)".}

proc openReadBody*(this: HTTPChannel): ISocketStream {.importcpp: "#->open_read_body()".}

proc closeReadBody*(this: HTTPChannel, stream: istream) {.importcpp: "#->close_read_body(#)".}

proc downloadToFile*(this: HTTPChannel, filename: Filename, subdocumentResumes: bool): bool {.importcpp: "#->download_to_file(#, #)".}

proc downloadToFile*(this: HTTPChannel, filename: Filename): bool {.importcpp: "#->download_to_file(#)".}

proc downloadToRam*(this: HTTPChannel, ramfile: Ramfile, subdocumentResumes: bool): bool {.importcpp: "#->download_to_ram(#, #)".}

proc downloadToRam*(this: HTTPChannel, ramfile: Ramfile): bool {.importcpp: "#->download_to_ram(#)".}

proc downloadToStream*(this: HTTPChannel, strm: iostream | ostream, subdocumentResumes: bool): bool {.importcpp: "#->download_to_stream(#, #)".}

proc downloadToStream*(this: HTTPChannel, strm: iostream | ostream): bool {.importcpp: "#->download_to_stream(#)".}

proc getConnection*(this: HTTPChannel): SocketStream {.importcpp: "#->get_connection()".}

proc getBytesDownloaded*(this: HTTPChannel): int {.importcpp: "#->get_bytes_downloaded()".}

proc getBytesRequested*(this: HTTPChannel): int {.importcpp: "#->get_bytes_requested()".}

proc isDownloadComplete*(this: HTTPChannel): bool {.importcpp: "#->is_download_complete()".}

proc initiate*(this: Decompressor, sourceFile: Filename): int {.importcpp: "#.initiate(#)".}

proc initiate*(this: Decompressor, sourceFile: Filename, destFile: Filename): int {.importcpp: "#.initiate(#, #)".}

proc run*(this: Decompressor | Patchfile): int {.importcpp: "#.run()".}

proc decompress*(this: Decompressor, sourceFile: Filename): bool {.importcpp: "#.decompress(#)".}

proc decompress*(this: Decompressor, sourceAndDestFile: Ramfile): bool {.importcpp: "#.decompress(#)".}

proc getProgress*(this: Decompressor | Extractor | Patchfile): float {.importcpp: "#.get_progress()".}

proc writeVersionMap*(this: DownloadDb, `out`: iostream | ostream) {.importcpp: "#.write_version_map(#)".}

proc writeClientDb*(this: DownloadDb, file: Filename): bool {.importcpp: "#.write_client_db(#)".}

proc writeServerDb*(this: DownloadDb, file: Filename): bool {.importcpp: "#.write_server_db(#)".}

proc getClientNumMultifiles*(this: DownloadDb): int {.importcpp: "#.get_client_num_multifiles()".}

proc getServerNumMultifiles*(this: DownloadDb): int {.importcpp: "#.get_server_num_multifiles()".}

proc getClientMultifileName*(this: DownloadDb, index: int): string {.importcpp: "nimStringFromStdString(#.get_client_multifile_name(#))", header: stringConversionCode.}

proc getServerMultifileName*(this: DownloadDb, index: int): string {.importcpp: "nimStringFromStdString(#.get_server_multifile_name(#))", header: stringConversionCode.}

proc getClientMultifileSize*(this: DownloadDb, mfname: string): int {.importcpp: "#.get_client_multifile_size(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientMultifileSize*(this: DownloadDb, mfname: string, size: int) {.importcpp: "#.set_client_multifile_size(nimStringToStdString(#), #)", header: stringConversionCode.}

proc setClientMultifileDeltaSize*(this: DownloadDb, mfname: string, size: int): int {.importcpp: "#.set_client_multifile_delta_size(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getServerMultifileSize*(this: DownloadDb, mfname: string): int {.importcpp: "#.get_server_multifile_size(nimStringToStdString(#))", header: stringConversionCode.}

proc setServerMultifileSize*(this: DownloadDb, mfname: string, size: int) {.importcpp: "#.set_server_multifile_size(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getClientMultifilePhase*(this: DownloadDb, mfname: string): float {.importcpp: "#.get_client_multifile_phase(nimStringToStdString(#))", header: stringConversionCode.}

proc getServerMultifilePhase*(this: DownloadDb, mfname: string): float {.importcpp: "#.get_server_multifile_phase(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientMultifileIncomplete*(this: DownloadDb, mfname: string) {.importcpp: "#.set_client_multifile_incomplete(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientMultifileComplete*(this: DownloadDb, mfname: string) {.importcpp: "#.set_client_multifile_complete(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientMultifileDecompressed*(this: DownloadDb, mfname: string) {.importcpp: "#.set_client_multifile_decompressed(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientMultifileExtracted*(this: DownloadDb, mfname: string) {.importcpp: "#.set_client_multifile_extracted(nimStringToStdString(#))", header: stringConversionCode.}

proc getServerNumFiles*(this: DownloadDb, mfname: string): int {.importcpp: "#.get_server_num_files(nimStringToStdString(#))", header: stringConversionCode.}

proc getServerFileName*(this: DownloadDb, mfname: string, index: int): string {.importcpp: "nimStringFromStdString(#.get_server_file_name(nimStringToStdString(#), #))", header: stringConversionCode.}

proc clientMultifileExists*(this: DownloadDb, mfname: string): bool {.importcpp: "#.client_multifile_exists(nimStringToStdString(#))", header: stringConversionCode.}

proc clientMultifileComplete*(this: DownloadDb, mfname: string): bool {.importcpp: "#.client_multifile_complete(nimStringToStdString(#))", header: stringConversionCode.}

proc clientMultifileDecompressed*(this: DownloadDb, mfname: string): bool {.importcpp: "#.client_multifile_decompressed(nimStringToStdString(#))", header: stringConversionCode.}

proc clientMultifileExtracted*(this: DownloadDb, mfname: string): bool {.importcpp: "#.client_multifile_extracted(nimStringToStdString(#))", header: stringConversionCode.}

proc getClientMultifileHash*(this: DownloadDb, mfname: string): HashVal {.importcpp: "#.get_client_multifile_hash(nimStringToStdString(#))", header: stringConversionCode.}

proc setClientMultifileHash*(this: DownloadDb, mfname: string, val: HashVal) {.importcpp: "#.set_client_multifile_hash(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getServerMultifileHash*(this: DownloadDb, mfname: string): HashVal {.importcpp: "#.get_server_multifile_hash(nimStringToStdString(#))", header: stringConversionCode.}

proc setServerMultifileHash*(this: DownloadDb, mfname: string, val: HashVal) {.importcpp: "#.set_server_multifile_hash(nimStringToStdString(#), #)", header: stringConversionCode.}

proc deleteClientMultifile*(this: DownloadDb, mfname: string) {.importcpp: "#.delete_client_multifile(nimStringToStdString(#))", header: stringConversionCode.}

proc addClientMultifile*(this: DownloadDb, serverMfname: string) {.importcpp: "#.add_client_multifile(nimStringToStdString(#))", header: stringConversionCode.}

proc expandClientMultifile*(this: DownloadDb, mfname: string) {.importcpp: "#.expand_client_multifile(nimStringToStdString(#))", header: stringConversionCode.}

proc createNewServerDb*(this: DownloadDb) {.importcpp: "#.create_new_server_db()".}

proc serverAddMultifile*(this: DownloadDb, mfname: string, phase: float, size: int, status: int) {.importcpp: "#.server_add_multifile(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc serverAddFile*(this: DownloadDb, mfname: string, fname: string) {.importcpp: "#.server_add_file(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc addVersion*(this: DownloadDb, name: Filename, hash: HashVal, version: int) {.importcpp: "#.add_version(#, #, #)".}

proc insertNewVersion*(this: DownloadDb, name: Filename, hash: HashVal) {.importcpp: "#.insert_new_version(#, #)".}

proc hasVersion*(this: DownloadDb, name: Filename): bool {.importcpp: "#.has_version(#)".}

proc getNumVersions*(this: DownloadDb, name: Filename): int {.importcpp: "#.get_num_versions(#)".}

proc setNumVersions*(this: DownloadDb, name: Filename, numVersions: int) {.importcpp: "#.set_num_versions(#, #)".}

proc getVersion*(this: DownloadDb, name: Filename, hash: HashVal): int {.importcpp: "#.get_version(#, #)".}

proc getHash*(this: DownloadDb, name: Filename, version: int): HashVal {.importcpp: "#.get_hash(#, #)".}

proc setMultifile*(this: Extractor, multifileName: Filename): bool {.importcpp: "#.set_multifile(#)".}

proc setExtractDir*(this: Extractor, extractDir: Filename) {.importcpp: "#.set_extract_dir(#)".}

proc reset*(this: CurveFitter | Extractor | LineSegs) {.importcpp: "#.reset()".}

proc requestSubfile*(this: Extractor, subfileName: Filename): bool {.importcpp: "#.request_subfile(#)".}

proc requestAllSubfiles*(this: Extractor): int {.importcpp: "#.request_all_subfiles()".}

proc step*(this: Extractor): int {.importcpp: "#.step()".}

proc run*(this: Extractor): bool {.importcpp: "#.run()".}

proc addOstream*(this: MultiplexStream, `out`: iostream | ostream, deleteLater: bool) {.importcpp: "#.add_ostream(#, #)".}

proc addOstream*(this: MultiplexStream, `out`: iostream | ostream) {.importcpp: "#.add_ostream(#)".}

proc addStandardOutput*(this: MultiplexStream) {.importcpp: "#.add_standard_output()".}

proc addFile*(this: MultiplexStream, file: Filename): bool {.importcpp: "#.add_file(#)".}

proc addSystemDebug*(this: MultiplexStream) {.importcpp: "#.add_system_debug()".}

proc getHttpClient*(this: VirtualFileMountHTTP): HTTPClient {.importcpp: "#->get_http_client()".}

proc getRoot*(this: VirtualFileMountHTTP): URLSpec {.importcpp: "#->get_root()".}

proc initiate*(this: Patcher, patch: Filename, infile: Filename): int {.importcpp: "#->initiate(#, #)".}

proc run*(this: Patcher): int {.importcpp: "#->run()".}

proc getProgress*(this: Patcher): float {.importcpp: "#->get_progress()".}

proc clearData*(this: StringStream) {.importcpp: "#.clear_data()".}

proc getDataSize*(this: Ramfile | StringStream): int {.importcpp: "#.get_data_size()".}

proc isNull*(this: PointerToVoid): bool {.importcpp: "#.is_null()".}

proc getRefCount*(this: MouseWatcherGroup | ReferenceCount | SocketStreamRecorder | TypedReferenceCount | TypedWritableReferenceCount | VertexDataBlock): int {.importcpp: "#->get_ref_count()".}

proc unref*(this: GeomVertexArrayFormat | GeomVertexFormat | MouseWatcherGroup | ReferenceCount | SocketStreamRecorder | TypedReferenceCount | TypedWritableReferenceCount | VertexDataBlock): bool {.importcpp: "#->unref()".}

proc testRefCountIntegrity*(this: CachedTypedWritableReferenceCount | MouseWatcherGroup | NodeCachedReferenceCount | NodeReferenceCount | ReferenceCount | SocketStreamRecorder | TypedReferenceCount | TypedWritableReferenceCount | VertexDataBlock): bool {.importcpp: "#->test_ref_count_integrity()".}

proc testRefCountNonzero*(this: MouseWatcherGroup | ReferenceCount | SocketStreamRecorder | TypedReferenceCount | TypedWritableReferenceCount | VertexDataBlock): bool {.importcpp: "#->test_ref_count_nonzero()".}

proc getLength*(this: Buffer): int {.importcpp: "#->get_length()".}

proc addLevel*(this: PStatCollectorForwardBase, level: float64) {.importcpp: "#->add_level(#)".}

proc getNodeRefCount*(this: NodeCachedReferenceCount | NodeReferenceCount): int {.importcpp: "#->get_node_ref_count()".}

proc nodeRef*(this: NodeCachedReferenceCount | NodeReferenceCount | RenderState | TransformState) {.importcpp: "#->node_ref()".}

proc nodeUnref*(this: NodeCachedReferenceCount | NodeReferenceCount | RenderState | TransformState): bool {.importcpp: "#->node_unref()".}

proc nodeUnrefOnly*(this: NodeReferenceCount) {.importcpp: "#->node_unref_only()".}

proc dumpHex*(this: Datagram, `out`: iostream | ostream, indent: int) {.importcpp: "#.dump_hex(#, #)".}

proc dumpHex*(this: Datagram, `out`: iostream | ostream) {.importcpp: "#.dump_hex(#)".}

proc addStdfloat*(this: Datagram, value: float) {.importcpp: "#.add_stdfloat(#)".}

proc addWstring*(this: Datagram, str: string) {.importcpp: "#.add_wstring(nimStringToStdString(#))", header: stringConversionCode.}

proc getLength*(this: Datagram): int {.importcpp: "#.get_length()".}

proc setStdfloatDouble*(this: Datagram, stdfloatDouble: bool) {.importcpp: "#.set_stdfloat_double(#)".}

proc getStdfloatDouble*(this: Datagram): bool {.importcpp: "#.get_stdfloat_double()".}

proc `==`*(this: Datagram, other: Datagram): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: Datagram, other: Datagram): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: Datagram, other: Datagram): bool {.importcpp: "#.operator <(#)".}

proc write*(this: Datagram | DatagramIterator, `out`: iostream | ostream, indent: int) {.importcpp: "#.write(#, #)".}

proc getDatagram*(this: DatagramBuffer | DatagramGenerator | DatagramGeneratorNet, data: Datagram): bool {.importcpp: "#->get_datagram(#)".}

proc saveDatagram*(this: DatagramBuffer | DatagramGenerator, info: SubfileInfo): bool {.importcpp: "#->save_datagram(#)".}

proc isEof*(this: DatagramBuffer | DatagramGenerator | DatagramGeneratorNet): bool {.importcpp: "#->is_eof()".}

proc isError*(this: DatagramBuffer | DatagramGenerator | DatagramGeneratorNet | DatagramSink | RecorderController): bool {.importcpp: "#->is_error()".}

proc getFilename*(this: DatagramBuffer | DatagramGenerator | DatagramSink | FileReference | ModelLoadRequest | ModelSaveRequest | MovieAudio | MovieVideo | RecorderController | Shader | Texture | VirtualFile): Filename {.importcpp: "#->get_filename()".}

proc getTimestamp*(this: DatagramBuffer | DatagramGenerator | ModelRoot | Multifile | VirtualFile): Time {.importcpp: "#->get_timestamp()".}

proc getFile*(this: DatagramBuffer | DatagramGenerator | DatagramSink): FileReference {.importcpp: "deconstify(#->get_file())", header: deconstifyCode.}

proc getVfile*(this: DatagramBuffer | DatagramGenerator): VirtualFile {.importcpp: "#->get_vfile()".}

proc getFilePos*(this: DatagramBuffer | DatagramGenerator | DatagramSink): clonglong {.importcpp: "#->get_file_pos()".}

proc getStdfloat*(this: DatagramIterator): float {.importcpp: "#.get_stdfloat()".}

proc getWstring*(this: DatagramIterator): string {.importcpp: "nimStringFromStdString(#.get_wstring())", header: stringConversionCode.}

proc getRemainingSize*(this: DatagramIterator): int {.importcpp: "#.get_remaining_size()".}

proc getDatagram*(this: DatagramIterator): Datagram {.importcpp: "#.get_datagram()".}

proc getCurrentIndex*(this: DatagramIterator): int {.importcpp: "#.get_current_index()".}

proc putDatagram*(this: DatagramSink, data: Datagram): bool {.importcpp: "#->put_datagram(#)".}

proc copyDatagram*(this: DatagramSink, result: SubfileInfo, filename: Filename): bool {.importcpp: "#->copy_datagram(#, #)".}

proc copyDatagram*(this: DatagramSink, result: SubfileInfo, source: SubfileInfo): bool {.importcpp: "#->copy_datagram(#, #)".}

proc flush*(this: CollisionHandlerEvent | DatagramSink) {.importcpp: "#->flush()".}

proc upcastToTypedObject*(this: TypedReferenceCount): TypedObject {.importcpp: "((TypedObject *)(TypedReferenceCount *)(#))".}

proc upcastToReferenceCount*(this: GeomVertexArrayDataHandle | MouseWatcherGroup | SocketStreamRecorder | TypedReferenceCount | TypedWritableReferenceCount | VertexDataBlock): ReferenceCount {.importcpp: "(PT(ReferenceCount)(#))".}

proc seek*(this: Ramfile, pos: int) {.importcpp: "#.seek(#)".}

proc tell*(this: Ramfile): int {.importcpp: "#.tell()".}

proc `==`*(this: HashVal, other: HashVal): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: HashVal, other: HashVal): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: HashVal, other: HashVal): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: HashVal, other: HashVal): int {.importcpp: "#.compare_to(#)".}

proc mergeWith*(this: HashVal, other: HashVal) {.importcpp: "#.merge_with(#)".}

proc outputDec*(this: HashVal, `out`: iostream | ostream) {.importcpp: "#.output_dec(#)".}

proc inputDec*(this: HashVal, `in`: istream) {.importcpp: "#.input_dec(#)".}

proc outputHex*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | HashVal, `out`: iostream | ostream) {.importcpp: "#.output_hex(#)".}

proc inputHex*(this: HashVal, `in`: istream) {.importcpp: "#.input_hex(#)".}

proc outputBinary*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | HashVal, `out`: iostream | ostream) {.importcpp: "#.output_binary(#)".}

proc inputBinary*(this: HashVal, `in`: istream) {.importcpp: "#.input_binary(#)".}

proc asDec*(this: HashVal): string {.importcpp: "nimStringFromStdString(#.as_dec())", header: stringConversionCode.}

proc setFromDec*(this: HashVal, text: string): bool {.importcpp: "#.set_from_dec(nimStringToStdString(#))", header: stringConversionCode.}

proc asHex*(this: HashVal): string {.importcpp: "nimStringFromStdString(#.as_hex())", header: stringConversionCode.}

proc setFromHex*(this: HashVal, text: string): bool {.importcpp: "#.set_from_hex(nimStringToStdString(#))", header: stringConversionCode.}

proc writeDatagram*(this: HashVal | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LParabolad | LParabolaf, destination: Datagram) {.importcpp: "#.write_datagram(#)".}

proc readDatagram*(this: HashVal | LParabolad | LParabolaf | var LMatrix3d | var LMatrix3f | var LMatrix4d | var LMatrix4f, source: DatagramIterator) {.importcpp: "#.read_datagram(#)".}

proc writeStream*(this: HashVal, destination: StreamWriter) {.importcpp: "#.write_stream(#)".}

proc readStream*(this: HashVal, source: StreamReader) {.importcpp: "#.read_stream(#)".}

proc hashFile*(this: HashVal, filename: Filename): bool {.importcpp: "#.hash_file(#)".}

proc hashStream*(this: HashVal, stream: istream): bool {.importcpp: "#.hash_stream(#)".}

proc hashRamfile*(this: HashVal, ramfile: Ramfile) {.importcpp: "#.hash_ramfile(#)".}

proc hashString*(this: HashVal, data: string) {.importcpp: "#.hash_string(nimStringToStdString(#))", header: stringConversionCode.}

proc hashBuffer*(this: HashVal, buffer: string, length: int) {.importcpp: "#.hash_buffer(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getNumPointers*(this: MemoryUsagePointers): int {.importcpp: "#.get_num_pointers()".}

proc getPointer*(this: MemoryUsagePointers, n: int): ReferenceCount {.importcpp: "#.get_pointer(#)".}

proc getTypedPointer*(this: MemoryUsagePointers, n: int): TypedObject {.importcpp: "#.get_typed_pointer(#)".}

proc getType*(this: MemoryUsagePointers, n: int): TypeHandle {.importcpp: "#.get_type(#)".}

proc getTypeName*(this: MemoryUsagePointers, n: int): string {.importcpp: "nimStringFromStdString(#.get_type_name(#))", header: stringConversionCode.}

proc getAge*(this: MemoryUsagePointers, n: int): float64 {.importcpp: "#.get_age(#)".}

proc open*(this: ISubStream, source: IStreamWrapper, start: clonglong, `end`: clonglong): ISubStream {.importcpp: "#.open(#, #, #)".}

proc close*(this: ISubStream): ISubStream {.importcpp: "#.close()".}

proc open*(this: OSubStream, dest: StreamWrapper | OStreamWrapper, start: clonglong, `end`: clonglong, append: bool): OSubStream {.importcpp: "#.open(#, #, #, #)".}

proc open*(this: OSubStream, dest: StreamWrapper | OStreamWrapper, start: clonglong, `end`: clonglong): OSubStream {.importcpp: "#.open(#, #, #)".}

proc close*(this: OSubStream): OSubStream {.importcpp: "#.close()".}

proc open*(this: SubStream, nested: StreamWrapper, start: clonglong, `end`: clonglong, append: bool): SubStream {.importcpp: "#.open(#, #, #, #)".}

proc open*(this: SubStream, nested: StreamWrapper, start: clonglong, `end`: clonglong): SubStream {.importcpp: "#.open(#, #, #)".}

proc close*(this: SubStream): SubStream {.importcpp: "#.close()".}

proc openRead*(this: Multifile, multifileName: Filename, offset: clonglong): bool {.importcpp: "#->open_read(#, #)".}

proc openRead*(this: Multifile, multifileName: Filename): bool {.importcpp: "#->open_read(#)".}

proc openRead*(this: Multifile, multifileStream: IStreamWrapper, ownsPointer: bool, offset: clonglong): bool {.importcpp: "#->open_read(#, #, #)".}

proc openRead*(this: Multifile, multifileStream: IStreamWrapper, ownsPointer: bool): bool {.importcpp: "#->open_read(#, #)".}

proc openRead*(this: Multifile, multifileStream: IStreamWrapper): bool {.importcpp: "#->open_read(#)".}

proc openWrite*(this: Multifile, multifileName: Filename): bool {.importcpp: "#->open_write(#)".}

proc openWrite*(this: Multifile, multifileStream: iostream | ostream, ownsPointer: bool): bool {.importcpp: "#->open_write(#, #)".}

proc openWrite*(this: Multifile, multifileStream: iostream | ostream): bool {.importcpp: "#->open_write(#)".}

proc openReadWrite*(this: Multifile, multifileName: Filename): bool {.importcpp: "#->open_read_write(#)".}

proc openReadWrite*(this: Multifile, multifileStream: iostream, ownsPointer: bool): bool {.importcpp: "#->open_read_write(#, #)".}

proc openReadWrite*(this: Multifile, multifileStream: iostream): bool {.importcpp: "#->open_read_write(#)".}

proc getMultifileName*(this: Multifile): Filename {.importcpp: "#->get_multifile_name()".}

proc setMultifileName*(this: Multifile, multifileName: Filename) {.importcpp: "#->set_multifile_name(#)".}

proc isReadValid*(this: Multifile): bool {.importcpp: "#->is_read_valid()".}

proc isWriteValid*(this: Multifile): bool {.importcpp: "#->is_write_valid()".}

proc needsRepack*(this: Multifile): bool {.importcpp: "#->needs_repack()".}

proc setTimestamp*(this: ModelRoot | Multifile, timestamp: Time) {.importcpp: "#->set_timestamp(#)".}

proc setRecordTimestamp*(this: Multifile, recordTimestamp: bool) {.importcpp: "#->set_record_timestamp(#)".}

proc getRecordTimestamp*(this: Multifile): bool {.importcpp: "#->get_record_timestamp()".}

proc setScaleFactor*(this: Multifile, scaleFactor: int) {.importcpp: "#->set_scale_factor(#)".}

proc getScaleFactor*(this: Multifile): int {.importcpp: "#->get_scale_factor()".}

proc setEncryptionFlag*(this: Multifile, flag: bool) {.importcpp: "#->set_encryption_flag(#)".}

proc getEncryptionFlag*(this: Multifile): bool {.importcpp: "#->get_encryption_flag()".}

proc setEncryptionPassword*(this: Multifile, encryptionPassword: string) {.importcpp: "#->set_encryption_password(nimStringToStdString(#))", header: stringConversionCode.}

proc getEncryptionPassword*(this: Multifile): string {.importcpp: "nimStringFromStdString(#->get_encryption_password())", header: stringConversionCode.}

proc setEncryptionAlgorithm*(this: Multifile, encryptionAlgorithm: string) {.importcpp: "#->set_encryption_algorithm(nimStringToStdString(#))", header: stringConversionCode.}

proc getEncryptionAlgorithm*(this: Multifile): string {.importcpp: "nimStringFromStdString(#->get_encryption_algorithm())", header: stringConversionCode.}

proc setEncryptionKeyLength*(this: Multifile, encryptionKeyLength: int) {.importcpp: "#->set_encryption_key_length(#)".}

proc getEncryptionKeyLength*(this: Multifile): int {.importcpp: "#->get_encryption_key_length()".}

proc setEncryptionIterationCount*(this: Multifile, encryptionIterationCount: int) {.importcpp: "#->set_encryption_iteration_count(#)".}

proc getEncryptionIterationCount*(this: Multifile): int {.importcpp: "#->get_encryption_iteration_count()".}

proc addSubfile*(this: Multifile, subfileName: string, filename: Filename, compressionLevel: int): string {.importcpp: "nimStringFromStdString(#->add_subfile(nimStringToStdString(#), #, #))", header: stringConversionCode.}

proc addSubfile*(this: Multifile, subfileName: string, subfileData: istream, compressionLevel: int): string {.importcpp: "nimStringFromStdString(#->add_subfile(nimStringToStdString(#), #, #))", header: stringConversionCode.}

proc updateSubfile*(this: Multifile, subfileName: string, filename: Filename, compressionLevel: int): string {.importcpp: "nimStringFromStdString(#->update_subfile(nimStringToStdString(#), #, #))", header: stringConversionCode.}

proc addSignature*(this: Multifile, certificate: Filename, chain: Filename, pkey: Filename, password: string): bool {.importcpp: "#->add_signature(#, #, #, nimStringToStdString(#))", header: stringConversionCode.}

proc addSignature*(this: Multifile, certificate: Filename, chain: Filename, pkey: Filename): bool {.importcpp: "#->add_signature(#, #, #)".}

proc addSignature*(this: Multifile, composite: Filename, password: string): bool {.importcpp: "#->add_signature(#, nimStringToStdString(#))", header: stringConversionCode.}

proc addSignature*(this: Multifile, composite: Filename): bool {.importcpp: "#->add_signature(#)".}

proc getNumSignatures*(this: Multifile): int {.importcpp: "#->get_num_signatures()".}

proc getSignatureSubjectName*(this: Multifile, n: int): string {.importcpp: "nimStringFromStdString(#->get_signature_subject_name(#))", header: stringConversionCode.}

proc getSignatureFriendlyName*(this: Multifile, n: int): string {.importcpp: "nimStringFromStdString(#->get_signature_friendly_name(#))", header: stringConversionCode.}

proc getSignaturePublicKey*(this: Multifile, n: int): string {.importcpp: "nimStringFromStdString(#->get_signature_public_key(#))", header: stringConversionCode.}

proc printSignatureCertificate*(this: Multifile, n: int, `out`: iostream | ostream) {.importcpp: "#->print_signature_certificate(#, #)".}

proc writeSignatureCertificate*(this: Multifile, n: int, `out`: iostream | ostream) {.importcpp: "#->write_signature_certificate(#, #)".}

proc validateSignatureCertificate*(this: Multifile, n: int): int {.importcpp: "#->validate_signature_certificate(#)".}

proc repack*(this: Multifile): bool {.importcpp: "#->repack()".}

proc getNumSubfiles*(this: Multifile): int {.importcpp: "#->get_num_subfiles()".}

proc findSubfile*(this: Multifile, subfileName: string): int {.importcpp: "#->find_subfile(nimStringToStdString(#))", header: stringConversionCode.}

proc hasDirectory*(this: Multifile, subfileName: string): bool {.importcpp: "#->has_directory(nimStringToStdString(#))", header: stringConversionCode.}

proc removeSubfile*(this: Multifile, index: int) {.importcpp: "#->remove_subfile(#)".}

proc removeSubfile*(this: Multifile, subfileName: string): bool {.importcpp: "#->remove_subfile(nimStringToStdString(#))", header: stringConversionCode.}

proc getSubfileName*(this: Multifile, index: int): string {.importcpp: "nimStringFromStdString(#->get_subfile_name(#))", header: stringConversionCode.}

proc getSubfileLength*(this: Multifile, index: int): int {.importcpp: "#->get_subfile_length(#)".}

proc getSubfileTimestamp*(this: Multifile, index: int): Time {.importcpp: "#->get_subfile_timestamp(#)".}

proc isSubfileCompressed*(this: Multifile, index: int): bool {.importcpp: "#->is_subfile_compressed(#)".}

proc isSubfileEncrypted*(this: Multifile, index: int): bool {.importcpp: "#->is_subfile_encrypted(#)".}

proc isSubfileText*(this: Multifile, index: int): bool {.importcpp: "#->is_subfile_text(#)".}

proc getIndexEnd*(this: Multifile): clonglong {.importcpp: "#->get_index_end()".}

proc getSubfileInternalStart*(this: Multifile, index: int): clonglong {.importcpp: "#->get_subfile_internal_start(#)".}

proc getSubfileInternalLength*(this: Multifile, index: int): int {.importcpp: "#->get_subfile_internal_length(#)".}

proc openReadSubfile*(this: Multifile, index: int): istream {.importcpp: "#->open_read_subfile(#)".}

proc extractSubfile*(this: Multifile, index: int, filename: Filename): bool {.importcpp: "#->extract_subfile(#, #)".}

proc extractSubfileTo*(this: Multifile, index: int, `out`: iostream | ostream): bool {.importcpp: "#->extract_subfile_to(#, #)".}

proc compareSubfile*(this: Multifile, index: int, filename: Filename): bool {.importcpp: "#->compare_subfile(#, #)".}

proc ls*(this: Multifile | VirtualFile, `out`: iostream | ostream) {.importcpp: "#->ls(#)".}

proc ls*(this: Multifile | VirtualFile) {.importcpp: "#->ls()".}

proc setHeaderPrefix*(this: Multifile, headerPrefix: string) {.importcpp: "#->set_header_prefix(nimStringToStdString(#))", header: stringConversionCode.}

proc getHeaderPrefix*(this: Multifile): string {.importcpp: "nimStringFromStdString(#->get_header_prefix())", header: stringConversionCode.}

proc setName*(this: AnimControl | AnimGroup | AsyncTask | AsyncTaskChain | AsyncTaskManager | Event | GeomVertexData | Loader | Material | MouseWatcherRegion | MovieAudio | MovieVideo | Namable | PGItem | PandaNode | PartGroup | ShaderBuffer | TextFont | Texture | TextureStage | Thread, name: string) {.importcpp: "#->set_name(nimStringToStdString(#))", header: stringConversionCode.}

proc clearName*(this: AnimControl | AnimGroup | AsyncTask | AsyncTaskChain | AsyncTaskManager | Event | Loader | Material | MouseWatcherRegion | MovieAudio | MovieVideo | Namable | PandaNode | PartGroup | ShaderBuffer | TextFont | Texture | Thread) {.importcpp: "#->clear_name()".}

proc hasName*(this: AnimControl | AnimGroup | AsyncTask | AsyncTaskChain | AsyncTaskManager | Event | Loader | Material | MouseWatcherRegion | MovieAudio | MovieVideo | Namable | PandaNode | PartGroup | ShaderBuffer | TextFont | Texture | Thread): bool {.importcpp: "#->has_name()".}

proc getName*(this: AnimControl | AnimGroup | AsyncTask | AsyncTaskChain | AsyncTaskManager | AudioSound | DynamicTextFont | Event | GeomVertexData | GraphicsOutput | InternalName | Loader | Material | MouseWatcherRegion | MovieAudio | MovieVideo | Namable | PandaNode | PartGroup | PreparedGraphicsObjects | ShaderBuffer | TextFont | Texture | TextureStage | Thread | UserVertexTransform): string {.importcpp: "nimStringFromStdString(#->get_name())", header: stringConversionCode.}

proc clearCertificates*(this: OpenSSLWrapper) {.importcpp: "#.clear_certificates()".}

proc loadCertificates*(this: OpenSSLWrapper, filename: Filename): int {.importcpp: "#.load_certificates(#)".}

proc loadCertificatesFromPemRam*(this: OpenSSLWrapper, data: string, dataSize: int): int {.importcpp: "#.load_certificates_from_pem_ram(nimStringToStdString(#), #)", header: stringConversionCode.}

proc loadCertificatesFromPemRam*(this: OpenSSLWrapper, data: string): int {.importcpp: "#.load_certificates_from_pem_ram(nimStringToStdString(#))", header: stringConversionCode.}

proc loadCertificatesFromDerRam*(this: OpenSSLWrapper, data: string, dataSize: int): int {.importcpp: "#.load_certificates_from_der_ram(nimStringToStdString(#), #)", header: stringConversionCode.}

proc loadCertificatesFromDerRam*(this: OpenSSLWrapper, data: string): int {.importcpp: "#.load_certificates_from_der_ram(nimStringToStdString(#))", header: stringConversionCode.}

proc notifySslErrors*(this: OpenSSLWrapper) {.importcpp: "#.notify_ssl_errors()".}

proc notifyDebugSslErrors*(this: OpenSSLWrapper) {.importcpp: "#.notify_debug_ssl_errors()".}

proc getFile*(this: SubfileInfo): FileReference {.importcpp: "#.get_file()".}

proc getFilename*(this: BamReader | BamWriter | SubfileInfo): Filename {.importcpp: "#.get_filename()".}

proc getStart*(this: SubfileInfo): clonglong {.importcpp: "#.get_start()".}

proc getSize*(this: SubfileInfo): int {.importcpp: "#.get_size()".}

proc getFileSystem*(this: VirtualFile | VirtualFileMount): VirtualFileSystem {.importcpp: "#->get_file_system()".}

proc getOriginalFilename*(this: VirtualFile): Filename {.importcpp: "#->get_original_filename()".}

proc hasFile*(this: VirtualFile): bool {.importcpp: "#->has_file()".}

proc isDirectory*(this: VirtualFile): bool {.importcpp: "#->is_directory()".}

proc isRegularFile*(this: VirtualFile): bool {.importcpp: "#->is_regular_file()".}

proc isWritable*(this: VirtualFile): bool {.importcpp: "#->is_writable()".}

proc deleteFile*(this: VirtualFile): bool {.importcpp: "#->delete_file()".}

proc renameFile*(this: VirtualFile, newFile: VirtualFile): bool {.importcpp: "#->rename_file(#)".}

proc copyFile*(this: VirtualFile, newFile: VirtualFile): bool {.importcpp: "#->copy_file(#)".}

proc scanDirectory*(this: VirtualFile): VirtualFileList {.importcpp: "#->scan_directory()".}

proc lsAll*(this: VirtualFile, `out`: iostream | ostream) {.importcpp: "#->ls_all(#)".}

proc lsAll*(this: VirtualFile) {.importcpp: "#->ls_all()".}

proc openReadFile*(this: VirtualFile, autoUnwrap: bool): istream {.importcpp: "#->open_read_file(#)".}

proc closeReadFile*(this: VirtualFile, stream: istream) {.importcpp: "#->close_read_file(#)".}

proc wasReadSuccessful*(this: VirtualFile): bool {.importcpp: "#->was_read_successful()".}

proc openWriteFile*(this: VirtualFile, autoWrap: bool, truncate: bool): ostream {.importcpp: "#->open_write_file(#, #)".}

proc openAppendFile*(this: VirtualFile): ostream {.importcpp: "#->open_append_file()".}

proc closeWriteFile*(this: VirtualFile, stream: iostream | ostream) {.importcpp: "#->close_write_file(#)".}

proc openReadWriteFile*(this: VirtualFile, truncate: bool): iostream {.importcpp: "#->open_read_write_file(#)".}

proc openReadAppendFile*(this: VirtualFile): iostream {.importcpp: "#->open_read_append_file()".}

proc closeReadWriteFile*(this: VirtualFile, stream: iostream) {.importcpp: "#->close_read_write_file(#)".}

proc getFileSize*(this: VirtualFile, stream: istream): int {.importcpp: "#->get_file_size(#)".}

proc getSystemInfo*(this: VirtualFile, info: SubfileInfo): bool {.importcpp: "#->get_system_info(#)".}

proc getMountPoint*(this: VirtualFileMount): Filename {.importcpp: "#->get_mount_point()".}

proc getMountFlags*(this: VirtualFileMount): int {.importcpp: "#->get_mount_flags()".}

proc getMultifile*(this: VirtualFileMountMultifile): Multifile {.importcpp: "#->get_multifile()".}

proc getPhysicalFilename*(this: VirtualFileMountSystem): Filename {.importcpp: "#->get_physical_filename()".}

proc getMount*(this: VirtualFileSimple): VirtualFileMount {.importcpp: "#->get_mount()".}

proc isImplicitPzFile*(this: VirtualFileSimple): bool {.importcpp: "#->is_implicit_pz_file()".}

proc open*(this: IDecompressStream, source: istream, ownsSource: bool): IDecompressStream {.importcpp: "#.open(#, #)".}

proc close*(this: IDecompressStream): IDecompressStream {.importcpp: "#.close()".}

proc open*(this: OCompressStream, dest: iostream | ostream, ownsDest: bool, compressionLevel: int): OCompressStream {.importcpp: "#.open(#, #, #)".}

proc open*(this: OCompressStream, dest: iostream | ostream, ownsDest: bool): OCompressStream {.importcpp: "#.open(#, #)".}

proc close*(this: OCompressStream): OCompressStream {.importcpp: "#.close()".}

proc getNumFiles*(this: VirtualFileList): int {.importcpp: "#->get_num_files()".}

proc getFile*(this: VirtualFileList, n: int): VirtualFile {.importcpp: "#->get_file(#)".}

proc `[]`*(this: VirtualFileList, n: int): VirtualFile {.importcpp: "#->operator [](#)".}

func len*(this: RenderEffects | VirtualFileList): int {.importcpp: "#->size()".}

proc `+=`*(this: var VirtualFileList, other: VirtualFileList) {.importcpp: "#->operator +=(#)".}

proc `+`*(this: VirtualFileList, other: VirtualFileList): VirtualFileList {.importcpp: "#->operator +(#)".}

proc mount*(this: VirtualFileSystem, physicalFilename: Filename, mountPoint: Filename, flags: int, password: string): bool {.importcpp: "#.mount(#, #, #, nimStringToStdString(#))", header: stringConversionCode.}

proc mount*(this: VirtualFileSystem, physicalFilename: Filename, mountPoint: Filename, flags: int): bool {.importcpp: "#.mount(#, #, #)".}

proc mount*(this: VirtualFileSystem, multifile: Multifile, mountPoint: Filename, flags: int): bool {.importcpp: "#.mount(#, #, #)".}

proc mount*(this: VirtualFileSystem, mount: VirtualFileMount, mountPoint: Filename, flags: int): bool {.importcpp: "#.mount(#, #, #)".}

proc mountLoop*(this: VirtualFileSystem, virtualFilename: Filename, mountPoint: Filename, flags: int, password: string): bool {.importcpp: "#.mount_loop(#, #, #, nimStringToStdString(#))", header: stringConversionCode.}

proc mountLoop*(this: VirtualFileSystem, virtualFilename: Filename, mountPoint: Filename, flags: int): bool {.importcpp: "#.mount_loop(#, #, #)".}

proc unmount*(this: VirtualFileSystem, physicalFilename: Filename): int {.importcpp: "#.unmount(#)".}

proc unmount*(this: VirtualFileSystem, multifile: Multifile): int {.importcpp: "#.unmount(#)".}

proc unmount*(this: VirtualFileSystem, mount: VirtualFileMount): int {.importcpp: "#.unmount(#)".}

proc unmountPoint*(this: VirtualFileSystem, mountPoint: Filename): int {.importcpp: "#.unmount_point(#)".}

proc unmountAll*(this: VirtualFileSystem): int {.importcpp: "#.unmount_all()".}

proc getNumMounts*(this: VirtualFileSystem): int {.importcpp: "#.get_num_mounts()".}

proc getMount*(this: VirtualFileSystem, n: int): VirtualFileMount {.importcpp: "#.get_mount(#)".}

proc chdir*(this: VirtualFileSystem, newDirectory: Filename): bool {.importcpp: "#.chdir(#)".}

proc getCwd*(this: VirtualFileSystem): Filename {.importcpp: "#.get_cwd()".}

proc makeDirectory*(this: VirtualFileSystem, filename: Filename): bool {.importcpp: "#.make_directory(#)".}

proc makeDirectoryFull*(this: VirtualFileSystem, filename: Filename): bool {.importcpp: "#.make_directory_full(#)".}

proc getFile*(this: VirtualFileSystem, filename: Filename, statusOnly: bool): VirtualFile {.importcpp: "#.get_file(#, #)".}

proc getFile*(this: VirtualFileSystem, filename: Filename): VirtualFile {.importcpp: "#.get_file(#)".}

proc createFile*(this: VirtualFileSystem, filename: Filename): VirtualFile {.importcpp: "#.create_file(#)".}

proc findFile*(this: VirtualFileSystem, filename: Filename, searchpath: DSearchPath, statusOnly: bool): VirtualFile {.importcpp: "#.find_file(#, #, #)".}

proc findFile*(this: VirtualFileSystem, filename: Filename, searchpath: DSearchPath): VirtualFile {.importcpp: "#.find_file(#, #)".}

proc deleteFile*(this: VirtualFileSystem, filename: Filename): bool {.importcpp: "#.delete_file(#)".}

proc renameFile*(this: VirtualFileSystem, origFilename: Filename, newFilename: Filename): bool {.importcpp: "#.rename_file(#, #)".}

proc copyFile*(this: VirtualFileSystem, origFilename: Filename, newFilename: Filename): bool {.importcpp: "#.copy_file(#, #)".}

proc resolveFilename*(this: VirtualFileSystem, filename: Filename, searchpath: DSearchPath, defaultExtension: string): bool {.importcpp: "#.resolve_filename(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc resolveFilename*(this: VirtualFileSystem, filename: Filename, searchpath: DSearchPath): bool {.importcpp: "#.resolve_filename(#, #)".}

proc exists*(this: VirtualFileSystem, filename: Filename): bool {.importcpp: "#.exists(#)".}

proc isDirectory*(this: VirtualFileSystem, filename: Filename): bool {.importcpp: "#.is_directory(#)".}

proc isRegularFile*(this: VirtualFileSystem, filename: Filename): bool {.importcpp: "#.is_regular_file(#)".}

proc scanDirectory*(this: VirtualFileSystem, filename: Filename): VirtualFileList {.importcpp: "#.scan_directory(#)".}

proc ls*(this: VirtualFileSystem, filename: Filename) {.importcpp: "#.ls(#)".}

proc lsAll*(this: VirtualFileSystem, filename: Filename) {.importcpp: "#.ls_all(#)".}

proc openReadFile*(this: VirtualFileSystem, filename: Filename, autoUnwrap: bool): istream {.importcpp: "#.open_read_file(#, #)".}

proc openWriteFile*(this: VirtualFileSystem, filename: Filename, autoWrap: bool, truncate: bool): ostream {.importcpp: "#.open_write_file(#, #, #)".}

proc openAppendFile*(this: VirtualFileSystem, filename: Filename): ostream {.importcpp: "#.open_append_file(#)".}

proc openReadWriteFile*(this: VirtualFileSystem, filename: Filename, truncate: bool): iostream {.importcpp: "#.open_read_write_file(#, #)".}

proc openReadAppendFile*(this: VirtualFileSystem, filename: Filename): iostream {.importcpp: "#.open_read_append_file(#)".}

proc getLongTime*(this: TrueClock): float64 {.importcpp: "#.get_long_time()".}

proc getShortTime*(this: TrueClock): float64 {.importcpp: "#.get_short_time()".}

proc getShortRawTime*(this: TrueClock): float64 {.importcpp: "#.get_short_raw_time()".}

proc getErrorCount*(this: TrueClock): int {.importcpp: "#.get_error_count()".}

proc setCpuAffinity*(this: TrueClock, mask: int): bool {.importcpp: "#.set_cpu_affinity(#)".}

proc build*(this: Patchfile, fileOrig: Filename, fileNew: Filename, patchName: Filename): bool {.importcpp: "#.build(#, #, #)".}

proc readHeader*(this: Patchfile, patchFile: Filename): int {.importcpp: "#.read_header(#)".}

proc initiate*(this: Patchfile, patchFile: Filename, file: Filename): int {.importcpp: "#.initiate(#, #)".}

proc initiate*(this: Patchfile, patchFile: Filename, origFile: Filename, targetFile: Filename): int {.importcpp: "#.initiate(#, #, #)".}

proc apply*(this: Patchfile, patchFile: Filename, file: Filename): bool {.importcpp: "#.apply(#, #)".}

proc apply*(this: Patchfile, patchFile: Filename, origFile: Filename, targetFile: Filename): bool {.importcpp: "#.apply(#, #, #)".}

proc setAllowMultifile*(this: Patchfile, allowMultifile: bool) {.importcpp: "#.set_allow_multifile(#)".}

proc getAllowMultifile*(this: Patchfile): bool {.importcpp: "#.get_allow_multifile()".}

proc setFootprintLength*(this: Patchfile, length: int) {.importcpp: "#.set_footprint_length(#)".}

proc getFootprintLength*(this: Patchfile): int {.importcpp: "#.get_footprint_length()".}

proc resetFootprintLength*(this: Patchfile) {.importcpp: "#.reset_footprint_length()".}

proc hasSourceHash*(this: Patchfile): bool {.importcpp: "#.has_source_hash()".}

proc getSourceHash*(this: Patchfile): HashVal {.importcpp: "#.get_source_hash()".}

proc getResultHash*(this: Patchfile): HashVal {.importcpp: "#.get_result_hash()".}

proc init*(this: ProfileTimer, name: string, maxEntries: int) {.importcpp: "#.init(nimStringToStdString(#), #)", header: stringConversionCode.}

proc init*(this: ProfileTimer, name: string) {.importcpp: "#.init(nimStringToStdString(#))", header: stringConversionCode.}

proc on*(this: ProfileTimer) {.importcpp: "#.on()".}

proc mark*(this: ProfileTimer, tag: string) {.importcpp: "#.mark(nimStringToStdString(#))", header: stringConversionCode.}

proc off*(this: ProfileTimer) {.importcpp: "#.off()".}

proc off*(this: ProfileTimer, tag: string) {.importcpp: "#.off(nimStringToStdString(#))", header: stringConversionCode.}

proc getTotalTime*(this: ProfileTimer): float64 {.importcpp: "#.getTotalTime()".}

proc consolidateTo*(this: ProfileTimer, `out`: iostream | ostream) {.importcpp: "#.consolidateTo(#)".}

proc consolidateTo*(this: ProfileTimer) {.importcpp: "#.consolidateTo()".}

proc printTo*(this: ProfileTimer, `out`: iostream | ostream) {.importcpp: "#.printTo(#)".}

proc printTo*(this: ProfileTimer) {.importcpp: "#.printTo()".}

proc wasDeleted*(this: WeakNodePath | WeakPointerToVoid): bool {.importcpp: "#.was_deleted()".}

proc isValidPointer*(this: WeakPointerToVoid): bool {.importcpp: "#.is_valid_pointer()".}

proc isRecording*(this: MouseRecorder | RecorderBase | RecorderController): bool {.importcpp: "#->is_recording()".}

proc isPlaying*(this: AnimControl | AnimInterface | MouseRecorder | MovieTexture | RecorderBase | RecorderController | SequenceNode | VideoTexture): bool {.importcpp: "#->is_playing()".}

proc upcastToDataNode*(this: MouseRecorder | MouseWatcher): DataNode {.importcpp: "(PT(DataNode)(#))".}

proc upcastToRecorderBase*(this: MouseRecorder): RecorderBase {.importcpp: "((RecorderBase *)(MouseRecorder *)(#))".}

proc beginRecord*(this: RecorderController, filename: Filename): bool {.importcpp: "#->begin_record(#)".}

proc beginPlayback*(this: RecorderController, filename: Filename): bool {.importcpp: "#->begin_playback(#)".}

proc getStartTime*(this: RecorderController): Time {.importcpp: "#->get_start_time()".}

proc setRandomSeed*(this: RecorderController, randomSeed: int) {.importcpp: "#->set_random_seed(#)".}

proc getRandomSeed*(this: RecorderController): int {.importcpp: "#->get_random_seed()".}

proc isOpen*(this: PortalNode | RecorderController): bool {.importcpp: "#->is_open()".}

proc getClockOffset*(this: RecorderController): float64 {.importcpp: "#->get_clock_offset()".}

proc getFrameOffset*(this: RecorderController): int {.importcpp: "#->get_frame_offset()".}

proc addRecorder*(this: RecorderController, name: string, recorder: RecorderBase | MouseRecorder) {.importcpp: "#->add_recorder(nimStringToStdString(#), #)", header: stringConversionCode.}

proc hasRecorder*(this: RecorderController, name: string): bool {.importcpp: "#->has_recorder(nimStringToStdString(#))", header: stringConversionCode.}

proc getRecorder*(this: RecorderController, name: string): RecorderBase {.importcpp: "#->get_recorder(nimStringToStdString(#))", header: stringConversionCode.}

proc removeRecorder*(this: RecorderController, name: string): bool {.importcpp: "#->remove_recorder(nimStringToStdString(#))", header: stringConversionCode.}

proc setFrameTie*(this: RecorderController, frameTie: bool) {.importcpp: "#->set_frame_tie(#)".}

proc getFrameTie*(this: RecorderController): bool {.importcpp: "#->get_frame_tie()".}

proc recordFrame*(this: RecorderController) {.importcpp: "#->record_frame()".}

proc playFrame*(this: RecorderController) {.importcpp: "#->play_frame()".}

proc upcastToRecorderBase*(this: SocketStreamRecorder): RecorderBase {.importcpp: "((RecorderBase *)(SocketStreamRecorder *)(#))".}

proc upcastToLight*(this: LightNode): Light {.importcpp: "((Light *)(LightNode *)(#))".}

proc upcastToPandaNode*(this: CollisionVisualizer | LightNode | TextNode): PandaNode {.importcpp: "(PT(PandaNode)(#))".}

proc write*(this: AdaptiveLruPage | AnimGroup | AnimPreloadTable | AsyncTaskChain | AsyncTaskManager | AuxSceneData | BamCacheRecord | BoundingVolume | ButtonEventList | ButtonMap | CollisionEntry | CollisionHandlerQueue | CollisionSolid | DynamicTextFont | Geom | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayFormat | GeomVertexData | GeomVertexFormat | IndexBufferContext | Lens | LightLensNode | LightNode | MouseWatcher | MouseWatcherBase | MouseWatcherRegion | PandaNode | ParametricCurveCollection | PartGroup | RenderAttrib | RenderEffect | RenderEffects | RenderState | SimpleLruPage | TextFont | TextNode | TextProperties | TextureContext | TextureStage | TransformBlendTable | TransformState | VertexBufferContext | VertexDataPage | VertexSlider | VertexTransform, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#->write(#, #)".}

proc setCullCallback*(this: CallbackNode | DisplayRegion, `object`: CallbackObject) {.importcpp: "#->set_cull_callback(#)".}

proc clearCullCallback*(this: CallbackNode | DisplayRegion) {.importcpp: "#->clear_cull_callback()".}

proc getCullCallback*(this: CallbackNode | DisplayRegion): CallbackObject {.importcpp: "#->get_cull_callback()".}

proc setDrawCallback*(this: CallbackNode | DisplayRegion, `object`: CallbackObject) {.importcpp: "#->set_draw_callback(#)".}

proc clearDrawCallback*(this: CallbackNode | DisplayRegion) {.importcpp: "#->clear_draw_callback()".}

proc getDrawCallback*(this: CallbackNode | DisplayRegion): CallbackObject {.importcpp: "#->get_draw_callback()".}

proc addDispatch*(this: ComputeNode, numGroups: LVecBase3i) {.importcpp: "#->add_dispatch((LVecBase3i const &)(#))".}

proc addDispatch*(this: ComputeNode, numGroupsX: int, numGroupsY: int, numGroupsZ: int) {.importcpp: "#->add_dispatch(#, #, #)".}

proc getNumDispatches*(this: ComputeNode): int {.importcpp: "#->get_num_dispatches()".}

proc getDispatch*(this: ComputeNode, i: int): LVecBase3i {.importcpp: "#->get_dispatch(#)".}

proc setDispatch*(this: ComputeNode, i: int, numGroups: LVecBase3i) {.importcpp: "#->set_dispatch(#, (LVecBase3i const &)(#))".}

proc insertDispatch*(this: ComputeNode, i: int, numGroups: LVecBase3i) {.importcpp: "#->insert_dispatch(#, (LVecBase3i const &)(#))".}

proc removeDispatch*(this: ComputeNode, i: int) {.importcpp: "#->remove_dispatch(#)".}

proc clearDispatches*(this: ComputeNode) {.importcpp: "#->clear_dispatches()".}

proc upcastToLight*(this: LightLensNode): Light {.importcpp: "((Light *)(LightLensNode *)(#))".}

proc upcastToCamera*(this: LightLensNode): Camera {.importcpp: "(PT(Camera)(#))".}

proc hasSpecularColor*(this: LightLensNode): bool {.importcpp: "#->has_specular_color()".}

proc isShadowCaster*(this: LightLensNode): bool {.importcpp: "#->is_shadow_caster()".}

proc setShadowCaster*(this: LightLensNode, caster: bool) {.importcpp: "#->set_shadow_caster(#)".}

proc setShadowCaster*(this: LightLensNode, caster: bool, bufferXsize: int, bufferYsize: int, sort: int) {.importcpp: "#->set_shadow_caster(#, #, #, #)".}

proc setShadowCaster*(this: LightLensNode, caster: bool, bufferXsize: int, bufferYsize: int) {.importcpp: "#->set_shadow_caster(#, #, #)".}

proc getShadowBufferSort*(this: LightLensNode): int {.importcpp: "#->get_shadow_buffer_sort()".}

proc getShadowBufferSize*(this: LightLensNode): LVecBase2i {.importcpp: "#->get_shadow_buffer_size()".}

proc setShadowBufferSize*(this: LightLensNode, size: LVecBase2i) {.importcpp: "#->set_shadow_buffer_size((LVecBase2i const &)(#))".}

proc getShadowBuffer*(this: LightLensNode, gsg: GraphicsStateGuardianBase): GraphicsOutputBase {.importcpp: "#->get_shadow_buffer(#)".}

proc setSpecularColor*(this: DirectionalLight | PointLight | Spotlight, color: LColor) {.importcpp: "#->set_specular_color(#)".}

proc clearSpecularColor*(this: DirectionalLight | PointLight | Spotlight) {.importcpp: "#->clear_specular_color()".}

proc getPoint*(this: DirectionalLight | PointLight): LPoint3 {.importcpp: "#->get_point()".}

proc setPoint*(this: DirectionalLight | PointLight, point: LPoint3) {.importcpp: "#->set_point((LPoint3 const &)(#))".}

proc getDirection*(this: CollisionRay | DirectionalLight): LVector3 {.importcpp: "#->get_direction()".}

proc setDirection*(this: CollisionRay | DirectionalLight, direction: LVector3) {.importcpp: "#->set_direction((LVector3 const &)(#))".}

proc addSwitch*(this: LODNode, `in`: float, `out`: float) {.importcpp: "#->add_switch(#, #)".}

proc setSwitch*(this: LODNode, index: int, `in`: float, `out`: float): bool {.importcpp: "#->set_switch(#, #, #)".}

proc clearSwitches*(this: LODNode) {.importcpp: "#->clear_switches()".}

proc getNumSwitches*(this: LODNode): int {.importcpp: "#->get_num_switches()".}

proc getIn*(this: LODNode, index: int): float {.importcpp: "#->get_in(#)".}

proc getOut*(this: LODNode, index: int): float {.importcpp: "#->get_out(#)".}

proc getLowestSwitch*(this: LODNode): int {.importcpp: "#->get_lowest_switch()".}

proc getHighestSwitch*(this: LODNode): int {.importcpp: "#->get_highest_switch()".}

proc forceSwitch*(this: LODNode, index: int) {.importcpp: "#->force_switch(#)".}

proc clearForceSwitch*(this: LODNode) {.importcpp: "#->clear_force_switch()".}

proc setLodScale*(this: Camera | LODNode, value: float) {.importcpp: "#->set_lod_scale(#)".}

proc getLodScale*(this: Camera | LODNode): float {.importcpp: "#->get_lod_scale()".}

proc setCenter*(this: BoundingSphere | CollisionBox | CollisionSphere | LODNode, center: LPoint3) {.importcpp: "#->set_center((LPoint3 const &)(#))".}

proc getCenter*(this: BoundingSphere | CollisionBox | CollisionSphere | LODNode): LPoint3 {.importcpp: "#->get_center()".}

proc showSwitch*(this: LODNode, index: int) {.importcpp: "#->show_switch(#)".}

proc showSwitch*(this: LODNode, index: int, color: LColor) {.importcpp: "#->show_switch(#, #)".}

proc hideSwitch*(this: LODNode, index: int) {.importcpp: "#->hide_switch(#)".}

proc showAllSwitches*(this: LODNode) {.importcpp: "#->show_all_switches()".}

proc hideAllSwitches*(this: LODNode) {.importcpp: "#->hide_all_switches()".}

proc isAnyShown*(this: LODNode): bool {.importcpp: "#->is_any_shown()".}

proc verifyChildBounds*(this: LODNode): bool {.importcpp: "#->verify_child_bounds()".}

proc setFadeTime*(this: FadeLODNode, t: float) {.importcpp: "#->set_fade_time(#)".}

proc getFadeTime*(this: FadeLODNode): float {.importcpp: "#->get_fade_time()".}

proc setFadeBin*(this: FadeLODNode, name: string, drawOrder: int) {.importcpp: "#->set_fade_bin(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getFadeBinName*(this: FadeLODNode): string {.importcpp: "nimStringFromStdString(#->get_fade_bin_name())", header: stringConversionCode.}

proc getFadeBinDrawOrder*(this: FadeLODNode): int {.importcpp: "#->get_fade_bin_draw_order()".}

proc setFadeStateOverride*(this: FadeLODNode, override: int) {.importcpp: "#->set_fade_state_override(#)".}

proc getFadeStateOverride*(this: FadeLODNode): int {.importcpp: "#->get_fade_state_override()".}

proc getTrav*(this: NodeCullCallbackData): CullTraverser {.importcpp: "#.get_trav()".}

proc getData*(this: NodeCullCallbackData): CullTraverserData {.importcpp: "#.get_data()".}

proc setAttenuation*(this: PointLight | Spotlight, attenuation: LVecBase3) {.importcpp: "#->set_attenuation((LVecBase3 const &)(#))".}

proc getMaxDistance*(this: PointLight | RectangleLight | Spotlight): float {.importcpp: "#->get_max_distance()".}

proc setMaxDistance*(this: PointLight | RectangleLight | Spotlight, maxDistance: float) {.importcpp: "#->set_max_distance(#)".}

proc upcastToSelectiveChildNode*(this: SequenceNode): SelectiveChildNode {.importcpp: "(PT(SelectiveChildNode)(#))".}

proc upcastToAnimInterface*(this: SequenceNode): AnimInterface {.importcpp: "((AnimInterface *)(SequenceNode *)(#))".}

proc getNumFrames*(this: AdaptiveLruPage | AnimBundle | AnimControl | AnimInterface | IndexBufferContext | SequenceNode | TextureContext | VertexBufferContext | VideoTexture): int {.importcpp: "#->get_num_frames()".}

proc setFrameRate*(this: ClockObject | SequenceNode, frameRate: float64) {.importcpp: "#->set_frame_rate(#)".}

proc synthesizeShader*(this: ShaderGenerator, rs: RenderState, anim: GeomVertexAnimationSpec): ShaderAttrib {.importcpp: "deconstify(#->synthesize_shader(#, #))", header: deconstifyCode.}

proc rehashGeneratedShaders*(this: ShaderGenerator) {.importcpp: "#->rehash_generated_shaders()".}

proc clearGeneratedShaders*(this: ShaderGenerator) {.importcpp: "#->clear_generated_shaders()".}

proc getRadius*(this: BoundingSphere | CollisionCapsule | CollisionSphere | PolylightNode | SphereLight): float {.importcpp: "#->get_radius()".}

proc setRadius*(this: BoundingSphere | CollisionCapsule | CollisionSphere | SphereLight, radius: float) {.importcpp: "#->set_radius(#)".}

proc setExponent*(this: Spotlight, exponent: float) {.importcpp: "#->set_exponent(#)".}

proc setVisibleChild*(this: SwitchNode, index: int) {.importcpp: "#->set_visible_child(#)".}

proc getVisibleChild*(this: SwitchNode): int {.importcpp: "#->get_visible_child()".}

proc setUSpeed*(this: UvScrollNode, uSpeed: float) {.importcpp: "#->set_u_speed(#)".}

proc setVSpeed*(this: UvScrollNode, vSpeed: float) {.importcpp: "#->set_v_speed(#)".}

proc setWSpeed*(this: UvScrollNode, wSpeed: float) {.importcpp: "#->set_w_speed(#)".}

proc setRSpeed*(this: UvScrollNode, rSpeed: float) {.importcpp: "#->set_r_speed(#)".}

proc getUSpeed*(this: UvScrollNode): float {.importcpp: "#->get_u_speed()".}

proc getVSpeed*(this: UvScrollNode): float {.importcpp: "#->get_v_speed()".}

proc getWSpeed*(this: UvScrollNode): float {.importcpp: "#->get_w_speed()".}

proc getRSpeed*(this: UvScrollNode): float {.importcpp: "#->get_r_speed()".}

proc setLodMode*(this: SceneGraphAnalyzer, lodMode: SceneGraphAnalyzer_LodMode) {.importcpp: "#.set_lod_mode(#)".}

proc getLodMode*(this: SceneGraphAnalyzer, lodMode: SceneGraphAnalyzer_LodMode): SceneGraphAnalyzer_LodMode {.importcpp: "#.get_lod_mode(#)".}

proc addNode*(this: SceneGraphAnalyzer, node: PandaNode) {.importcpp: "#.add_node(#)".}

proc getNumNodes*(this: AttribNodeRegistry | SceneGraphAnalyzer): int {.importcpp: "#.get_num_nodes()".}

proc getNumInstances*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_instances()".}

proc getNumTransforms*(this: GeomVertexAnimationSpec | SceneGraphAnalyzer | TransformBlend): int {.importcpp: "#.get_num_transforms()".}

proc getNumNodesWithAttribs*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_nodes_with_attribs()".}

proc getNumLodNodes*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_lod_nodes()".}

proc getNumGeomNodes*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_geom_nodes()".}

proc getNumGeoms*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_geoms()".}

proc getNumGeomVertexDatas*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_geom_vertex_datas()".}

proc getNumGeomVertexFormats*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_geom_vertex_formats()".}

proc getVertexDataSize*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_vertex_data_size()".}

proc getNumVertices*(this: LineSegs | SceneGraphAnalyzer | Triangulator | Triangulator3): int {.importcpp: "#.get_num_vertices()".}

proc getNumNormals*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_normals()".}

proc getNumColors*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_colors()".}

proc getNumTexcoords*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_texcoords()".}

proc getNumTris*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_tris()".}

proc getNumLines*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_lines()".}

proc getNumPoints*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_points()".}

proc getNumPatches*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_patches()".}

proc getNumIndividualTris*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_individual_tris()".}

proc getNumTristrips*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_tristrips()".}

proc getNumTrianglesInStrips*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_triangles_in_strips()".}

proc getNumTrifans*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_trifans()".}

proc getNumTrianglesInFans*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_triangles_in_fans()".}

proc getNumVerticesInPatches*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_vertices_in_patches()".}

proc getTextureBytes*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_texture_bytes()".}

proc getNumLongNormals*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_long_normals()".}

proc getNumShortNormals*(this: SceneGraphAnalyzer): int {.importcpp: "#.get_num_short_normals()".}

proc getTotalNormalLength*(this: SceneGraphAnalyzer): float {.importcpp: "#.get_total_normal_length()".}

proc `!=`*(this: TransformState, other: TransformState): bool {.importcpp: "#->operator !=(#)".}

proc compareTo*(this: TransformState, other: TransformState): int {.importcpp: "#->compare_to(#)".}

proc compareTo*(this: TransformState, other: TransformState, uniquifyMatrix: bool): int {.importcpp: "#->compare_to(#, #)".}

proc `==`*(this: TransformState, other: TransformState): bool {.importcpp: "#->operator ==(#)".}

proc getHash*(this: RenderAttrib | RenderState | TransformState): int {.importcpp: "#->get_hash()".}

proc isIdentity*(this: ClipPlaneAttrib | ColorScaleAttrib | LightAttrib | OccluderEffect | TextureAttrib | TransformState): bool {.importcpp: "#->is_identity()".}

proc isInvalid*(this: TransformState): bool {.importcpp: "#->is_invalid()".}

proc isSingular*(this: TransformState): bool {.importcpp: "#->is_singular()".}

proc is2d*(this: TransformState): bool {.importcpp: "#->is_2d()".}

proc hasComponents*(this: TransformState): bool {.importcpp: "#->has_components()".}

proc componentsGiven*(this: TransformState): bool {.importcpp: "#->components_given()".}

proc hprGiven*(this: TransformState): bool {.importcpp: "#->hpr_given()".}

proc quatGiven*(this: TransformState): bool {.importcpp: "#->quat_given()".}

proc hasPos*(this: TransformState): bool {.importcpp: "#->has_pos()".}

proc hasHpr*(this: TransformState): bool {.importcpp: "#->has_hpr()".}

proc hasQuat*(this: TransformState): bool {.importcpp: "#->has_quat()".}

proc hasScale*(this: ColorScaleAttrib | TransformState): bool {.importcpp: "#->has_scale()".}

proc hasIdentityScale*(this: TransformState): bool {.importcpp: "#->has_identity_scale()".}

proc hasUniformScale*(this: TransformState): bool {.importcpp: "#->has_uniform_scale()".}

proc hasShear*(this: TransformState): bool {.importcpp: "#->has_shear()".}

proc hasNonzeroShear*(this: TransformState): bool {.importcpp: "#->has_nonzero_shear()".}

proc hasMat*(this: TransformState): bool {.importcpp: "#->has_mat()".}

proc getPos*(this: DriveInterface | PolylightNode | Trackball | TrackerNode | TransformState): LPoint3 {.importcpp: "#->get_pos()".}

proc getHpr*(this: DriveInterface | Trackball | TransformState): LVecBase3 {.importcpp: "#->get_hpr()".}

proc getQuat*(this: TransformState): LQuaternion {.importcpp: "#->get_quat()".}

proc getNormQuat*(this: TransformState): LQuaternion {.importcpp: "#->get_norm_quat()".}

proc getScale*(this: TransformState): LVecBase3 {.importcpp: "#->get_scale()".}

proc getUniformScale*(this: TransformState): float {.importcpp: "#->get_uniform_scale()".}

proc getShear*(this: TransformState): LVecBase3 {.importcpp: "#->get_shear()".}

proc getMat*(this: DriveInterface | TexMatrixAttrib | Trackball | TransformState): LMatrix4 {.importcpp: "#->get_mat()".}

proc getPos2d*(this: TransformState): LVecBase2 {.importcpp: "#->get_pos2d()".}

proc getRotate2d*(this: TransformState): float {.importcpp: "#->get_rotate2d()".}

proc getScale2d*(this: TransformState): LVecBase2 {.importcpp: "#->get_scale2d()".}

proc getShear2d*(this: TransformState): float {.importcpp: "#->get_shear2d()".}

proc getMat3*(this: TransformState): LMatrix3 {.importcpp: "#->get_mat3()".}

proc setPos*(this: TransformState, pos: LVecBase3): TransformState {.importcpp: "deconstify(#->set_pos((LVecBase3 const &)(#)))", header: deconstifyCode.}

proc setHpr*(this: TransformState, hpr: LVecBase3): TransformState {.importcpp: "deconstify(#->set_hpr((LVecBase3 const &)(#)))", header: deconstifyCode.}

proc setQuat*(this: TransformState, quat: LQuaternion): TransformState {.importcpp: "deconstify(#->set_quat(#))", header: deconstifyCode.}

proc setScale*(this: TransformState, scale: LVecBase3): TransformState {.importcpp: "deconstify(#->set_scale((LVecBase3 const &)(#)))", header: deconstifyCode.}

proc setShear*(this: TransformState, shear: LVecBase3): TransformState {.importcpp: "deconstify(#->set_shear((LVecBase3 const &)(#)))", header: deconstifyCode.}

proc setPos2d*(this: TransformState, pos: LVecBase2): TransformState {.importcpp: "deconstify(#->set_pos2d((LVecBase2 const &)(#)))", header: deconstifyCode.}

proc setRotate2d*(this: TransformState, rotate: float): TransformState {.importcpp: "deconstify(#->set_rotate2d(#))", header: deconstifyCode.}

proc setScale2d*(this: TransformState, scale: LVecBase2): TransformState {.importcpp: "deconstify(#->set_scale2d((LVecBase2 const &)(#)))", header: deconstifyCode.}

proc setShear2d*(this: TransformState, shear: float): TransformState {.importcpp: "deconstify(#->set_shear2d(#))", header: deconstifyCode.}

proc compose*(this: TransformState, other: TransformState): TransformState {.importcpp: "deconstify(#->compose(#))", header: deconstifyCode.}

proc invertCompose*(this: TransformState, other: TransformState): TransformState {.importcpp: "deconstify(#->invert_compose(#))", header: deconstifyCode.}

proc getInverse*(this: TransformState): TransformState {.importcpp: "deconstify(#->get_inverse())", header: deconstifyCode.}

proc getUnique*(this: TransformState): TransformState {.importcpp: "deconstify(#->get_unique())", header: deconstifyCode.}

proc getGeomRendering*(this: RenderModeAttrib | RenderState | TexGenAttrib | TexMatrixAttrib | TransformState, geomRendering: int): int {.importcpp: "#->get_geom_rendering(#)".}

proc cacheRef*(this: CachedTypedWritableReferenceCount | CopyOnWriteObject | RenderState | TransformState) {.importcpp: "#->cache_ref()".}

proc cacheUnref*(this: CachedTypedWritableReferenceCount | CopyOnWriteObject | RenderState | TransformState): bool {.importcpp: "#->cache_unref()".}

proc getCompositionCacheNumEntries*(this: RenderState | TransformState): int {.importcpp: "#->get_composition_cache_num_entries()".}

proc getInvertCompositionCacheNumEntries*(this: RenderState | TransformState): int {.importcpp: "#->get_invert_composition_cache_num_entries()".}

proc getCompositionCacheSize*(this: RenderState | TransformState): int {.importcpp: "#->get_composition_cache_size()".}

proc getCompositionCacheSource*(this: TransformState, n: int): TransformState {.importcpp: "deconstify(#->get_composition_cache_source(#))", header: deconstifyCode.}

proc getCompositionCacheResult*(this: TransformState, n: int): TransformState {.importcpp: "deconstify(#->get_composition_cache_result(#))", header: deconstifyCode.}

proc getInvertCompositionCacheSize*(this: RenderState | TransformState): int {.importcpp: "#->get_invert_composition_cache_size()".}

proc getInvertCompositionCacheSource*(this: TransformState, n: int): TransformState {.importcpp: "deconstify(#->get_invert_composition_cache_source(#))", header: deconstifyCode.}

proc getInvertCompositionCacheResult*(this: TransformState, n: int): TransformState {.importcpp: "deconstify(#->get_invert_composition_cache_result(#))", header: deconstifyCode.}

proc validateCompositionCache*(this: TransformState): bool {.importcpp: "#->validate_composition_cache()".}

proc writeCompositionCache*(this: TransformState, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#->write_composition_cache(#, #)".}

proc getSlot*(this: RenderAttribRegistry, typeHandle: TypeHandle): int {.importcpp: "#.get_slot(#)".}

proc getNumSlots*(this: RenderAttribRegistry): int {.importcpp: "#.get_num_slots()".}

proc getSlotType*(this: RenderAttribRegistry, slot: int): TypeHandle {.importcpp: "#.get_slot_type(#)".}

proc getSlotSort*(this: RenderAttribRegistry, slot: int): int {.importcpp: "#.get_slot_sort(#)".}

proc setSlotSort*(this: RenderAttribRegistry, slot: int, sort: int) {.importcpp: "#.set_slot_sort(#, #)".}

proc getSlotDefault*(this: RenderAttribRegistry, slot: int): RenderAttrib {.importcpp: "#.get_slot_default(#)".}

proc getNumSortedSlots*(this: RenderAttribRegistry): int {.importcpp: "#.get_num_sorted_slots()".}

proc getSortedSlot*(this: RenderAttribRegistry, n: int): int {.importcpp: "#.get_sorted_slot(#)".}

proc compose*(this: RenderAttrib, other: RenderAttrib): RenderAttrib {.importcpp: "deconstify(#->compose(#))", header: deconstifyCode.}

proc invertCompose*(this: RenderAttrib, other: RenderAttrib): RenderAttrib {.importcpp: "deconstify(#->invert_compose(#))", header: deconstifyCode.}

proc lowerAttribCanOverride*(this: RenderAttrib): bool {.importcpp: "#->lower_attrib_can_override()".}

proc compareTo*(this: RenderAttrib, other: RenderAttrib): int {.importcpp: "#->compare_to(#)".}

proc getUnique*(this: RenderAttrib): RenderAttrib {.importcpp: "deconstify(#->get_unique())", header: deconstifyCode.}

proc getSlot*(this: RenderAttrib): int {.importcpp: "#->get_slot()".}

proc getMode*(this: RenderModeAttrib): RenderModeAttrib_Mode {.importcpp: "#->get_mode()".}

proc getThickness*(this: RenderModeAttrib | RopeNode): float {.importcpp: "#->get_thickness()".}

proc getPerspective*(this: RenderModeAttrib): bool {.importcpp: "#->get_perspective()".}

proc getWireframeColor*(this: RenderModeAttrib): LColor {.importcpp: "#->get_wireframe_color()".}

proc addStage*(this: TexMatrixAttrib, stage: TextureStage, transform: TransformState, override: int): RenderAttrib {.importcpp: "deconstify(#->add_stage(#, #, #))", header: deconstifyCode.}

proc addStage*(this: TexMatrixAttrib, stage: TextureStage, transform: TransformState): RenderAttrib {.importcpp: "deconstify(#->add_stage(#, #))", header: deconstifyCode.}

proc removeStage*(this: TexGenAttrib | TexMatrixAttrib, stage: TextureStage): RenderAttrib {.importcpp: "deconstify(#->remove_stage(#))", header: deconstifyCode.}

proc isEmpty*(this: BoundingVolume | DynamicTextPage | Geom | GraphicsEngine | RenderEffects | RenderState | SimpleAllocator | SliderTable | TexGenAttrib | TexMatrixAttrib | TexProjectorEffect): bool {.importcpp: "#->is_empty()".}

proc hasStage*(this: TexGenAttrib | TexMatrixAttrib | TexProjectorEffect, stage: TextureStage): bool {.importcpp: "#->has_stage(#)".}

proc getNumStages*(this: TexMatrixAttrib): int {.importcpp: "#->get_num_stages()".}

proc getStage*(this: TexMatrixAttrib, n: int): TextureStage {.importcpp: "#->get_stage(#)".}

proc getMat*(this: TexMatrixAttrib, stage: TextureStage): LMatrix4 {.importcpp: "#->get_mat(#)".}

proc getTransform*(this: TexMatrixAttrib, stage: TextureStage): TransformState {.importcpp: "deconstify(#->get_transform(#))", header: deconstifyCode.}

proc getOverride*(this: TexMatrixAttrib, stage: TextureStage): int {.importcpp: "#->get_override(#)".}

proc compareTo*(this: RenderState, other: RenderState): int {.importcpp: "#->compare_to(#)".}

proc compareSort*(this: RenderState, other: RenderState): int {.importcpp: "#->compare_sort(#)".}

proc compareMask*(this: RenderState, other: RenderState, compareMask: BitMask32): int {.importcpp: "#->compare_mask(#, #)".}

proc hasCullCallback*(this: RenderState): bool {.importcpp: "#->has_cull_callback()".}

proc cullCallback*(this: RenderState, trav: CullTraverser, data: CullTraverserData): bool {.importcpp: "#->cull_callback(#, #)".}

proc compose*(this: RenderState, other: RenderState): RenderState {.importcpp: "deconstify(#->compose(#))", header: deconstifyCode.}

proc invertCompose*(this: RenderState, other: RenderState): RenderState {.importcpp: "deconstify(#->invert_compose(#))", header: deconstifyCode.}

proc addAttrib*(this: RenderState, attrib: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#->add_attrib(#, #))", header: deconstifyCode.}

proc addAttrib*(this: RenderState, attrib: RenderAttrib): RenderState {.importcpp: "deconstify(#->add_attrib(#))", header: deconstifyCode.}

proc setAttrib*(this: RenderState, attrib: RenderAttrib): RenderState {.importcpp: "deconstify(#->set_attrib(#))", header: deconstifyCode.}

proc setAttrib*(this: RenderState, attrib: RenderAttrib, override: int): RenderState {.importcpp: "deconstify(#->set_attrib(#, #))", header: deconstifyCode.}

proc removeAttrib*(this: RenderState, `type`: TypeHandle): RenderState {.importcpp: "deconstify(#->remove_attrib(#))", header: deconstifyCode.}

proc removeAttrib*(this: RenderState, slot: int): RenderState {.importcpp: "deconstify(#->remove_attrib(#))", header: deconstifyCode.}

proc adjustAllPriorities*(this: RenderState, adjustment: int): RenderState {.importcpp: "deconstify(#->adjust_all_priorities(#))", header: deconstifyCode.}

proc hasAttrib*(this: PandaNode | RenderState, `type`: TypeHandle): bool {.importcpp: "#->has_attrib(#)".}

proc hasAttrib*(this: PandaNode | RenderState, slot: int): bool {.importcpp: "#->has_attrib(#)".}

proc getAttrib*(this: PandaNode | RenderState, `type`: TypeHandle): RenderAttrib {.importcpp: "deconstify(#->get_attrib(#))", header: deconstifyCode.}

proc getAttrib*(this: PandaNode | RenderState, slot: int): RenderAttrib {.importcpp: "deconstify(#->get_attrib(#))", header: deconstifyCode.}

proc getAttribDef*(this: RenderState, slot: int): RenderAttrib {.importcpp: "deconstify(#->get_attrib_def(#))", header: deconstifyCode.}

proc getOverride*(this: RenderState, `type`: TypeHandle): int {.importcpp: "#->get_override(#)".}

proc getOverride*(this: RenderState, slot: int): int {.importcpp: "#->get_override(#)".}

proc getUnique*(this: RenderState): RenderState {.importcpp: "deconstify(#->get_unique())", header: deconstifyCode.}

proc getCompositionCacheSource*(this: RenderState, n: int): RenderState {.importcpp: "deconstify(#->get_composition_cache_source(#))", header: deconstifyCode.}

proc getCompositionCacheResult*(this: RenderState, n: int): RenderState {.importcpp: "deconstify(#->get_composition_cache_result(#))", header: deconstifyCode.}

proc getInvertCompositionCacheSource*(this: RenderState, n: int): RenderState {.importcpp: "deconstify(#->get_invert_composition_cache_source(#))", header: deconstifyCode.}

proc getInvertCompositionCacheResult*(this: RenderState, n: int): RenderState {.importcpp: "deconstify(#->get_invert_composition_cache_result(#))", header: deconstifyCode.}

proc getDrawOrder*(this: CullBinAttrib | RenderState | TextNode | TextProperties): int {.importcpp: "#->get_draw_order()".}

proc getBinIndex*(this: RenderState): int {.importcpp: "#->get_bin_index()".}

proc getReferenceAlpha*(this: AlphaTestAttrib): float {.importcpp: "#->get_reference_alpha()".}

proc getMode*(this: AlphaTestAttrib | DepthTestAttrib): RenderAttrib_PandaCompareFunc {.importcpp: "#->get_mode()".}

proc getMode*(this: AntialiasAttrib): int {.importcpp: "#->get_mode()".}

proc getModeType*(this: AntialiasAttrib): int {.importcpp: "#->get_mode_type()".}

proc getModeQuality*(this: AntialiasAttrib): int {.importcpp: "#->get_mode_quality()".}

proc compareTo*(this: RenderEffect, other: RenderEffect): int {.importcpp: "#->compare_to(#)".}

proc `<`*(this: RenderEffects, other: RenderEffects): bool {.importcpp: "#->operator <(#)".}

proc getNumEffects*(this: RenderEffects): int {.importcpp: "#->get_num_effects()".}

proc getEffect*(this: PandaNode | RenderEffects, `type`: TypeHandle): RenderEffect {.importcpp: "deconstify(#->get_effect(#))", header: deconstifyCode.}

proc getEffect*(this: RenderEffects, n: int): RenderEffect {.importcpp: "deconstify(#->get_effect(#))", header: deconstifyCode.}

proc `[]`*(this: RenderEffects, `type`: TypeHandle): RenderEffect {.importcpp: "deconstify(#->operator [](#))", header: deconstifyCode.}

proc `[]`*(this: RenderEffects, n: int): RenderEffect {.importcpp: "deconstify(#->operator [](#))", header: deconstifyCode.}

proc findEffect*(this: RenderEffects, `type`: TypeHandle): int {.importcpp: "#->find_effect(#)".}

proc addEffect*(this: RenderEffects, effect: RenderEffect): RenderEffects {.importcpp: "deconstify(#->add_effect(#))", header: deconstifyCode.}

proc removeEffect*(this: RenderEffects, `type`: TypeHandle): RenderEffects {.importcpp: "deconstify(#->remove_effect(#))", header: deconstifyCode.}

proc upcastToTypedWritableReferenceCount*(this: AnimGroup | BamCacheRecord | GeomVertexArrayFormat | GeomVertexFormat | Material | MouseWatcherRegion | MovieAudio | MovieVideo | PGMouseWatcherParameter | PandaNode | PartGroup | ShaderBuffer | Texture): TypedWritableReferenceCount {.importcpp: "(PT(TypedWritableReferenceCount)(#))".}

proc upcastToNamable*(this: PandaNode): Namable {.importcpp: "((Namable *)(PandaNode *)(#))".}

proc combineWith*(this: PandaNode, other: PandaNode): PandaNode {.importcpp: "#->combine_with(#)".}

proc makeCopy*(this: PandaNode): PandaNode {.importcpp: "#->make_copy()".}

proc getNumChildren*(this: AnimGroup | PartGroup): int {.importcpp: "#->get_num_children()".}

proc countNumDescendants*(this: PandaNode): int {.importcpp: "#->count_num_descendants()".}

proc addChild*(this: PandaNode, childNode: PandaNode) {.importcpp: "#->add_child(#)".}

proc addStashed*(this: PandaNode, childNode: PandaNode) {.importcpp: "#->add_stashed(#)".}

proc setAttrib*(this: PandaNode, attrib: RenderAttrib, override: int) {.importcpp: "#->set_attrib(#, #)".}

proc setAttrib*(this: PandaNode, attrib: RenderAttrib) {.importcpp: "#->set_attrib(#)".}

proc clearAttrib*(this: PandaNode, `type`: TypeHandle) {.importcpp: "#->clear_attrib(#)".}

proc clearAttrib*(this: PandaNode, slot: int) {.importcpp: "#->clear_attrib(#)".}

proc setEffect*(this: PandaNode, effect: RenderEffect) {.importcpp: "#->set_effect(#)".}

proc hasEffect*(this: PandaNode, `type`: TypeHandle): bool {.importcpp: "#->has_effect(#)".}

proc clearEffect*(this: PandaNode, `type`: TypeHandle) {.importcpp: "#->clear_effect(#)".}

proc getState*(this: TextGlyph): RenderState {.importcpp: "deconstify(#->get_state())", header: deconstifyCode.}

proc hasDirtyPrevTransform*(this: PandaNode): bool {.importcpp: "#->has_dirty_prev_transform()".}

proc getNumTags*(this: PandaNode): int {.importcpp: "#->get_num_tags()".}

proc getTagKey*(this: PandaNode, i: int): string {.importcpp: "nimStringFromStdString(#->get_tag_key(#))", header: stringConversionCode.}

proc hasTags*(this: PandaNode): bool {.importcpp: "#->has_tags()".}

proc copyTags*(this: PandaNode, other: PandaNode) {.importcpp: "#->copy_tags(#)".}

proc listTags*(this: PandaNode, `out`: iostream | ostream, separator: string) {.importcpp: "#->list_tags(#, nimStringToStdString(#))", header: stringConversionCode.}

proc listTags*(this: PandaNode, `out`: iostream | ostream) {.importcpp: "#->list_tags(#)".}

proc compareTags*(this: PandaNode, other: PandaNode): int {.importcpp: "#->compare_tags(#)".}

proc copyAllProperties*(this: PandaNode, other: PandaNode) {.importcpp: "#->copy_all_properties(#)".}

proc replaceNode*(this: PandaNode, other: PandaNode) {.importcpp: "#->replace_node(#)".}

proc setUnexpectedChange*(this: PandaNode, flags: int) {.importcpp: "#->set_unexpected_change(#)".}

proc getUnexpectedChange*(this: PandaNode, flags: int): int {.importcpp: "#->get_unexpected_change(#)".}

proc clearUnexpectedChange*(this: PandaNode, flags: int) {.importcpp: "#->clear_unexpected_change(#)".}

proc isOverallHidden*(this: PandaNode): bool {.importcpp: "#->is_overall_hidden()".}

proc setOverallHidden*(this: PandaNode, overallHidden: bool) {.importcpp: "#->set_overall_hidden(#)".}

proc adjustDrawMask*(this: PandaNode, showMask: DrawMask, hideMask: DrawMask, clearMask: DrawMask) {.importcpp: "#->adjust_draw_mask(#, #, #)".}

proc getDrawControlMask*(this: PandaNode): DrawMask {.importcpp: "#->get_draw_control_mask()".}

proc getDrawShowMask*(this: PandaNode): DrawMask {.importcpp: "#->get_draw_show_mask()".}

proc getNetDrawControlMask*(this: PandaNode): DrawMask {.importcpp: "#->get_net_draw_control_mask()".}

proc getNetDrawShowMask*(this: PandaNode): DrawMask {.importcpp: "#->get_net_draw_show_mask()".}

proc setIntoCollideMask*(this: CollisionNode | PandaNode, mask: CollideMask) {.importcpp: "#->set_into_collide_mask(#)".}

proc getIntoCollideMask*(this: CollisionNode | PandaNode): CollideMask {.importcpp: "#->get_into_collide_mask()".}

proc getLegalCollideMask*(this: PandaNode): CollideMask {.importcpp: "#->get_legal_collide_mask()".}

proc prepareScene*(this: PandaNode, gsg: GraphicsStateGuardianBase, nodeState: RenderState) {.importcpp: "#->prepare_scene(#, #)".}

proc isSceneRoot*(this: PandaNode): bool {.importcpp: "#->is_scene_root()".}

proc isUnderSceneRoot*(this: PandaNode): bool {.importcpp: "#->is_under_scene_root()".}

proc ls*(this: PandaNode, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#->ls(#, #)".}

proc setBoundsType*(this: Geom | PandaNode, boundsType: BoundingVolume_BoundsType) {.importcpp: "#->set_bounds_type(#)".}

proc getBoundsType*(this: Geom | PandaNode): BoundingVolume_BoundsType {.importcpp: "#->get_bounds_type()".}

proc setBounds*(this: Geom | PandaNode, volume: BoundingVolume) {.importcpp: "#->set_bounds(#)".}

proc setBound*(this: PandaNode, volume: BoundingVolume) {.importcpp: "#->set_bound(#)".}

proc clearBounds*(this: Geom | PandaNode) {.importcpp: "#->clear_bounds()".}

proc getBounds*(this: CollisionSolid): BoundingVolume {.importcpp: "deconstify(#->get_bounds())", header: deconstifyCode.}

proc markBoundsStale*(this: Geom) {.importcpp: "#->mark_bounds_stale()".}

proc isBoundsStale*(this: PandaNode): bool {.importcpp: "#->is_bounds_stale()".}

proc setFinal*(this: PandaNode, flag: bool) {.importcpp: "#->set_final(#)".}

proc isGeomNode*(this: PandaNode): bool {.importcpp: "#->is_geom_node()".}

proc isLodNode*(this: PandaNode): bool {.importcpp: "#->is_lod_node()".}

proc isCollisionNode*(this: PandaNode): bool {.importcpp: "#->is_collision_node()".}

proc asLight*(this: PandaNode): Light {.importcpp: "#->as_light()".}

proc isAmbientLight*(this: Light | LightLensNode | LightNode | PandaNode): bool {.importcpp: "#->is_ambient_light()".}

proc getMode*(this: TransparencyAttrib): TransparencyAttrib_Mode {.importcpp: "#->get_mode()".}

proc getOperation*(this: LogicOpAttrib): LogicOpAttrib_Operation {.importcpp: "#->get_operation()".}

proc `==`*(this: ShaderInput, other: ShaderInput): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: ShaderInput, other: ShaderInput): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: ShaderInput, other: ShaderInput): bool {.importcpp: "#.operator <(#)".}

proc addHash*(this: LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | NodePath | ShaderInput, hash: int): int {.importcpp: "#.add_hash(#)".}

proc getName*(this: GeomVertexColumn | ShaderInput): InternalName {.importcpp: "#.get_name()".}

proc getValueType*(this: ShaderInput): int {.importcpp: "#.get_value_type()".}

proc getPriority*(this: ShaderInput): int {.importcpp: "#.get_priority()".}

proc getVector*(this: ShaderInput): LVecBase4 {.importcpp: "#.get_vector()".}

proc getNodepath*(this: ShaderInput): NodePath {.importcpp: "#.get_nodepath()".}

proc getTexture*(this: NodePath | PGFrameStyle | ShaderInput | TextureContext): Texture {.importcpp: "#.get_texture()".}

proc getSampler*(this: ShaderInput): SamplerState {.importcpp: "#.get_sampler()".}

proc addName*(this: InternalNameCollection, name: InternalName) {.importcpp: "#.add_name(#)".}

proc removeName*(this: InternalNameCollection, name: InternalName): bool {.importcpp: "#.remove_name(#)".}

proc addNamesFrom*(this: InternalNameCollection, other: InternalNameCollection) {.importcpp: "#.add_names_from(#)".}

proc removeNamesFrom*(this: InternalNameCollection, other: InternalNameCollection) {.importcpp: "#.remove_names_from(#)".}

proc removeDuplicateNames*(this: InternalNameCollection) {.importcpp: "#.remove_duplicate_names()".}

proc hasName*(this: InternalNameCollection, name: InternalName): bool {.importcpp: "#.has_name(#)".}

proc getNumNames*(this: InternalNameCollection): int {.importcpp: "#.get_num_names()".}

proc getName*(this: InternalNameCollection, index: int): InternalName {.importcpp: "#.get_name(#)".}

proc `[]`*(this: InternalNameCollection, index: int): InternalName {.importcpp: "#.operator [](#)".}

proc `+=`*(this: var InternalNameCollection, other: InternalNameCollection) {.importcpp: "#.operator +=(#)".}

proc `+`*(this: InternalNameCollection, other: InternalNameCollection): InternalNameCollection {.importcpp: "#.operator +(#)".}

proc addMaterial*(this: MaterialCollection, nodeMaterial: Material) {.importcpp: "#.add_material(#)".}

proc removeMaterial*(this: MaterialCollection, nodeMaterial: Material): bool {.importcpp: "#.remove_material(#)".}

proc addMaterialsFrom*(this: MaterialCollection, other: MaterialCollection) {.importcpp: "#.add_materials_from(#)".}

proc removeMaterialsFrom*(this: MaterialCollection, other: MaterialCollection) {.importcpp: "#.remove_materials_from(#)".}

proc removeDuplicateMaterials*(this: MaterialCollection) {.importcpp: "#.remove_duplicate_materials()".}

proc hasMaterial*(this: MaterialCollection, material: Material): bool {.importcpp: "#.has_material(#)".}

proc findMaterial*(this: MaterialCollection | NodePath, name: string): Material {.importcpp: "#.find_material(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumMaterials*(this: MaterialCollection): int {.importcpp: "#.get_num_materials()".}

proc getMaterial*(this: MaterialCollection, index: int): Material {.importcpp: "#.get_material(#)".}

proc `[]`*(this: MaterialCollection, index: int): Material {.importcpp: "#.operator [](#)".}

proc `+=`*(this: var MaterialCollection, other: MaterialCollection) {.importcpp: "#.operator +=(#)".}

proc `+`*(this: MaterialCollection, other: MaterialCollection): MaterialCollection {.importcpp: "#.operator +(#)".}

proc addTextureStage*(this: TextureStageCollection, nodeTextureStage: TextureStage) {.importcpp: "#.add_texture_stage(#)".}

proc removeTextureStage*(this: TextureStageCollection, nodeTextureStage: TextureStage): bool {.importcpp: "#.remove_texture_stage(#)".}

proc addTextureStagesFrom*(this: TextureStageCollection, other: TextureStageCollection) {.importcpp: "#.add_texture_stages_from(#)".}

proc removeTextureStagesFrom*(this: TextureStageCollection, other: TextureStageCollection) {.importcpp: "#.remove_texture_stages_from(#)".}

proc removeDuplicateTextureStages*(this: TextureStageCollection) {.importcpp: "#.remove_duplicate_texture_stages()".}

proc hasTextureStage*(this: TextureStageCollection, textureStage: TextureStage): bool {.importcpp: "#.has_texture_stage(#)".}

proc findTextureStage*(this: NodePath | TextureStageCollection, name: string): TextureStage {.importcpp: "#.find_texture_stage(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumTextureStages*(this: TextureStageCollection): int {.importcpp: "#.get_num_texture_stages()".}

proc getTextureStage*(this: TextureStageCollection, index: int): TextureStage {.importcpp: "#.get_texture_stage(#)".}

proc `[]`*(this: TextureStageCollection, index: int): TextureStage {.importcpp: "#.operator [](#)".}

proc `+=`*(this: var TextureStageCollection, other: TextureStageCollection) {.importcpp: "#.operator +=(#)".}

proc `+`*(this: TextureStageCollection, other: TextureStageCollection): TextureStageCollection {.importcpp: "#.operator +(#)".}

proc sort*(this: TextureStageCollection) {.importcpp: "#.sort()".}

proc getErrorType*(this: NodePath): NodePath_ErrorType {.importcpp: "#.get_error_type()".}

proc node*(this: CullTraverserData | NodePath | WeakNodePath): PandaNode {.importcpp: "#.node()".}

proc getKey*(this: BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | NodePath | WeakNodePath): int {.importcpp: "#.get_key()".}

proc addPath*(this: NodePathCollection, nodePath: NodePath) {.importcpp: "#.add_path(#)".}

proc removePath*(this: NodePathCollection, nodePath: NodePath): bool {.importcpp: "#.remove_path(#)".}

proc addPathsFrom*(this: NodePathCollection, other: NodePathCollection) {.importcpp: "#.add_paths_from(#)".}

proc removePathsFrom*(this: NodePathCollection, other: NodePathCollection) {.importcpp: "#.remove_paths_from(#)".}

proc removeDuplicatePaths*(this: NodePathCollection) {.importcpp: "#.remove_duplicate_paths()".}

proc hasPath*(this: NodePathCollection, path: NodePath): bool {.importcpp: "#.has_path(#)".}

proc reserve*(this: InputDeviceSet | NodePathCollection | TextureCollection, num: int) {.importcpp: "#.reserve(#)".}

proc getNumPaths*(this: NodePathCollection): int {.importcpp: "#.get_num_paths()".}

proc getPath*(this: NodePathCollection, index: int): NodePath {.importcpp: "#.get_path(#)".}

proc `[]`*(this: NodePathCollection, index: int): NodePath {.importcpp: "#.operator [](#)".}

proc `+=`*(this: var NodePathCollection, other: NodePathCollection) {.importcpp: "#.operator +=(#)".}

proc `+`*(this: NodePathCollection, other: NodePathCollection): NodePathCollection {.importcpp: "#.operator +(#)".}

proc append*(this: NodePathCollection, nodePath: NodePath) {.importcpp: "#.append(#)".}

proc extend*(this: NodePathCollection, other: NodePathCollection) {.importcpp: "#.extend(#)".}

proc ls*(this: NodePath | NodePathCollection) {.importcpp: "#.ls()".}

proc ls*(this: NodePath | NodePathCollection, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#.ls(#, #)".}

proc ls*(this: NodePath | NodePathCollection, `out`: iostream | ostream) {.importcpp: "#.ls(#)".}

proc findAllMatches*(this: NodePath | NodePathCollection, path: string): NodePathCollection {.importcpp: "#.find_all_matches(nimStringToStdString(#))", header: stringConversionCode.}

proc reparentTo*(this: NodePath | NodePathCollection, other: NodePath) {.importcpp: "#.reparent_to(#)".}

proc wrtReparentTo*(this: NodePath | NodePathCollection, other: NodePath) {.importcpp: "#.wrt_reparent_to(#)".}

proc show*(this: NodePath | NodePathCollection) {.importcpp: "#.show()".}

proc hide*(this: NodePath | NodePathCollection) {.importcpp: "#.hide()".}

proc stash*(this: NodePath | NodePathCollection) {.importcpp: "#.stash()".}

proc unstash*(this: NodePath | NodePathCollection) {.importcpp: "#.unstash()".}

proc detach*(this: NodePathCollection) {.importcpp: "#.detach()".}

proc getCollideMask*(this: NodePath | NodePathCollection): CollideMask {.importcpp: "#.get_collide_mask()".}

proc setCollideMask*(this: NodePath | NodePathCollection, newMask: CollideMask, bitsToChange: CollideMask, nodeType: TypeHandle) {.importcpp: "#.set_collide_mask(#, #, #)".}

proc setCollideMask*(this: NodePath | NodePathCollection, newMask: CollideMask, bitsToChange: CollideMask) {.importcpp: "#.set_collide_mask(#, #)".}

proc setCollideMask*(this: NodePath | NodePathCollection, newMask: CollideMask) {.importcpp: "#.set_collide_mask(#)".}

proc calcTightBounds*(this: NodePath | NodePathCollection, minPoint: LPoint3, maxPoint: LPoint3): bool {.importcpp: "#.calc_tight_bounds((LPoint3 &)(#), (LPoint3 &)(#))".}

proc setTexture*(this: NodePath | NodePathCollection, tex: Texture, priority: int) {.importcpp: "#.set_texture(#, #)".}

proc setTexture*(this: NodePath | NodePathCollection, tex: Texture) {.importcpp: "#.set_texture(#)".}

proc setTexture*(this: NodePath | NodePathCollection, stage: TextureStage, tex: Texture, priority: int) {.importcpp: "#.set_texture(#, #, #)".}

proc setTexture*(this: NodePath | NodePathCollection, stage: TextureStage, tex: Texture) {.importcpp: "#.set_texture(#, #)".}

proc setTextureOff*(this: NodePath | NodePathCollection, stage: TextureStage, priority: int) {.importcpp: "#.set_texture_off(#, #)".}

proc setTextureOff*(this: NodePath | NodePathCollection, stage: TextureStage) {.importcpp: "#.set_texture_off(#)".}

proc setTextureOff*(this: NodePath | NodePathCollection, priority: int) {.importcpp: "#.set_texture_off(#)".}

proc setTextureOff*(this: NodePath | NodePathCollection) {.importcpp: "#.set_texture_off()".}

proc setColor*(this: NodePath | NodePathCollection, color: LColor, priority: int) {.importcpp: "#.set_color(#, #)".}

proc setColor*(this: LineSegs | NodePath | NodePathCollection | PGFrameStyle, color: LColor) {.importcpp: "#.set_color(#)".}

proc setColor*(this: NodePath | NodePathCollection, r: float, g: float, b: float, a: float, priority: int) {.importcpp: "#.set_color(#, #, #, #, #)".}

proc setColor*(this: LineSegs | NodePath | NodePathCollection | PGFrameStyle, r: float, g: float, b: float, a: float) {.importcpp: "#.set_color(#, #, #, #)".}

proc setColor*(this: LineSegs | NodePath | NodePathCollection, r: float, g: float, b: float) {.importcpp: "#.set_color(#, #, #)".}

proc setColorScale*(this: NodePath | NodePathCollection, scale: LVecBase4, priority: int) {.importcpp: "#.set_color_scale((LVecBase4 const &)(#), #)".}

proc setColorScale*(this: NodePath | NodePathCollection, scale: LVecBase4) {.importcpp: "#.set_color_scale((LVecBase4 const &)(#))".}

proc setColorScale*(this: NodePathCollection, r: float, g: float, b: float, a: float, priority: int) {.importcpp: "#.set_color_scale(#, #, #, #, #)".}

proc setColorScale*(this: NodePathCollection, r: float, g: float, b: float, a: float) {.importcpp: "#.set_color_scale(#, #, #, #)".}

proc setColorScale*(this: NodePathCollection, r: float, g: float, b: float) {.importcpp: "#.set_color_scale(#, #, #)".}

proc composeColorScale*(this: NodePath | NodePathCollection, scale: LVecBase4, priority: int) {.importcpp: "#.compose_color_scale((LVecBase4 const &)(#), #)".}

proc composeColorScale*(this: NodePath | NodePathCollection, scale: LVecBase4) {.importcpp: "#.compose_color_scale((LVecBase4 const &)(#))".}

proc composeColorScale*(this: NodePathCollection, r: float, g: float, b: float, a: float, priority: int) {.importcpp: "#.compose_color_scale(#, #, #, #, #)".}

proc composeColorScale*(this: NodePathCollection, r: float, g: float, b: float, a: float) {.importcpp: "#.compose_color_scale(#, #, #, #)".}

proc composeColorScale*(this: NodePathCollection, r: float, g: float, b: float) {.importcpp: "#.compose_color_scale(#, #, #)".}

proc setAttrib*(this: NodePath | NodePathCollection, attrib: RenderAttrib, priority: int) {.importcpp: "#.set_attrib(#, #)".}

proc setAttrib*(this: NodePath | NodePathCollection, attrib: RenderAttrib) {.importcpp: "#.set_attrib(#)".}

proc countNumDescendants*(this: NodePath): int {.importcpp: "#.count_num_descendants()".}

proc find*(this: NodePath, path: string): NodePath {.importcpp: "#.find(nimStringToStdString(#))", header: stringConversionCode.}

proc findPathTo*(this: NodePath, node: PandaNode): NodePath {.importcpp: "#.find_path_to(#)".}

proc findAllPathsTo*(this: NodePath, node: PandaNode): NodePathCollection {.importcpp: "#.find_all_paths_to(#)".}

proc stashTo*(this: NodePath, other: NodePath) {.importcpp: "#.stash_to(#)".}

proc instanceTo*(this: NodePath, other: NodePath): NodePath {.importcpp: "#.instance_to(#)".}

proc instanceUnderNode*(this: NodePath, other: NodePath, name: string): NodePath {.importcpp: "#.instance_under_node(#, nimStringToStdString(#))", header: stringConversionCode.}

proc copyTo*(this: NodePath, other: NodePath): NodePath {.importcpp: "#.copy_to(#)".}

proc attachNewNode*(this: NodePath, node: PandaNode): NodePath {.importcpp: "#.attach_new_node(#)".}

proc attachNewNode*(this: NodePath, name: string): NodePath {.importcpp: "#.attach_new_node(nimStringToStdString(#))", header: stringConversionCode.}

proc reverseLs*(this: NodePath) {.importcpp: "#.reverse_ls()".}

proc reverseLs*(this: NodePath, `out`: iostream | ostream, indentLevel: int): int {.importcpp: "#.reverse_ls(#, #)".}

proc reverseLs*(this: NodePath, `out`: iostream | ostream): int {.importcpp: "#.reverse_ls(#)".}

proc getAttrib*(this: NodePath, `type`: TypeHandle): RenderAttrib {.importcpp: "#.get_attrib(#)".}

proc hasAttrib*(this: NodePath, `type`: TypeHandle): bool {.importcpp: "#.has_attrib(#)".}

proc clearAttrib*(this: NodePath, `type`: TypeHandle) {.importcpp: "#.clear_attrib(#)".}

proc setEffect*(this: NodePath, effect: RenderEffect) {.importcpp: "#.set_effect(#)".}

proc getEffect*(this: NodePath, `type`: TypeHandle): RenderEffect {.importcpp: "#.get_effect(#)".}

proc hasEffect*(this: NodePath, `type`: TypeHandle): bool {.importcpp: "#.has_effect(#)".}

proc clearEffect*(this: NodePath, `type`: TypeHandle) {.importcpp: "#.clear_effect(#)".}

proc setEffects*(this: NodePath, effects: RenderEffects) {.importcpp: "#.set_effects(#)".}

proc getEffects*(this: NodePath): RenderEffects {.importcpp: "#.get_effects()".}

proc clearEffects*(this: NodePath) {.importcpp: "#.clear_effects()".}

proc setPos*(this: NodePath, pos: LVecBase3) {.importcpp: "#.set_pos((LVecBase3 const &)(#))".}

proc setPos*(this: NodePath, other: NodePath, pos: LVecBase3) {.importcpp: "#.set_pos(#, (LVecBase3 const &)(#))".}

proc setPos*(this: NodePath, other: NodePath, x: float, y: float, z: float) {.importcpp: "#.set_pos(#, #, #, #)".}

proc setPos*(this: NodePath, x: float, y: float, z: float) {.importcpp: "#.set_pos(#, #, #)".}

proc setX*(this: NodePath, other: NodePath, x: float) {.importcpp: "#.set_x(#, #)".}

proc setX*(this: NodePath, x: float) {.importcpp: "#.set_x(#)".}

proc setY*(this: NodePath, other: NodePath, y: float) {.importcpp: "#.set_y(#, #)".}

proc setY*(this: NodePath, y: float) {.importcpp: "#.set_y(#)".}

proc setZ*(this: NodePath, other: NodePath, z: float) {.importcpp: "#.set_z(#, #)".}

proc setZ*(this: NodePath, z: float) {.importcpp: "#.set_z(#)".}

proc setFluidPos*(this: NodePath, pos: LVecBase3) {.importcpp: "#.set_fluid_pos((LVecBase3 const &)(#))".}

proc setFluidPos*(this: NodePath, other: NodePath, pos: LVecBase3) {.importcpp: "#.set_fluid_pos(#, (LVecBase3 const &)(#))".}

proc setFluidPos*(this: NodePath, other: NodePath, x: float, y: float, z: float) {.importcpp: "#.set_fluid_pos(#, #, #, #)".}

proc setFluidPos*(this: NodePath, x: float, y: float, z: float) {.importcpp: "#.set_fluid_pos(#, #, #)".}

proc setFluidX*(this: NodePath, other: NodePath, x: float) {.importcpp: "#.set_fluid_x(#, #)".}

proc setFluidX*(this: NodePath, x: float) {.importcpp: "#.set_fluid_x(#)".}

proc setFluidY*(this: NodePath, other: NodePath, y: float) {.importcpp: "#.set_fluid_y(#, #)".}

proc setFluidY*(this: NodePath, y: float) {.importcpp: "#.set_fluid_y(#)".}

proc setFluidZ*(this: NodePath, other: NodePath, z: float) {.importcpp: "#.set_fluid_z(#, #)".}

proc setFluidZ*(this: NodePath, z: float) {.importcpp: "#.set_fluid_z(#)".}

proc getPos*(this: NodePath): LPoint3 {.importcpp: "#.get_pos()".}

proc getPos*(this: NodePath, other: NodePath): LPoint3 {.importcpp: "#.get_pos(#)".}

proc getX*(this: NodePath): float {.importcpp: "#.get_x()".}

proc getX*(this: NodePath, other: NodePath): float {.importcpp: "#.get_x(#)".}

proc getY*(this: NodePath): float {.importcpp: "#.get_y()".}

proc getY*(this: NodePath, other: NodePath): float {.importcpp: "#.get_y(#)".}

proc getZ*(this: NodePath): float {.importcpp: "#.get_z()".}

proc getZ*(this: NodePath, other: NodePath): float {.importcpp: "#.get_z(#)".}

proc getPosDelta*(this: NodePath): LVector3 {.importcpp: "#.get_pos_delta()".}

proc getPosDelta*(this: NodePath, other: NodePath): LVector3 {.importcpp: "#.get_pos_delta(#)".}

proc setHpr*(this: NodePath, hpr: LVecBase3) {.importcpp: "#.set_hpr((LVecBase3 const &)(#))".}

proc setHpr*(this: NodePath, other: NodePath, hpr: LVecBase3) {.importcpp: "#.set_hpr(#, (LVecBase3 const &)(#))".}

proc setHpr*(this: NodePath, other: NodePath, h: float, p: float, r: float) {.importcpp: "#.set_hpr(#, #, #, #)".}

proc setHpr*(this: NodePath, h: float, p: float, r: float) {.importcpp: "#.set_hpr(#, #, #)".}

proc setH*(this: NodePath, other: NodePath, h: float) {.importcpp: "#.set_h(#, #)".}

proc setH*(this: NodePath, h: float) {.importcpp: "#.set_h(#)".}

proc setP*(this: NodePath, other: NodePath, p: float) {.importcpp: "#.set_p(#, #)".}

proc setP*(this: NodePath, p: float) {.importcpp: "#.set_p(#)".}

proc setR*(this: NodePath, other: NodePath, r: float) {.importcpp: "#.set_r(#, #)".}

proc setR*(this: NodePath, r: float) {.importcpp: "#.set_r(#)".}

proc getHpr*(this: NodePath): LVecBase3 {.importcpp: "#.get_hpr()".}

proc getHpr*(this: NodePath, other: NodePath): LVecBase3 {.importcpp: "#.get_hpr(#)".}

proc getH*(this: NodePath): float {.importcpp: "#.get_h()".}

proc getH*(this: NodePath, other: NodePath): float {.importcpp: "#.get_h(#)".}

proc getP*(this: NodePath): float {.importcpp: "#.get_p()".}

proc getP*(this: NodePath, other: NodePath): float {.importcpp: "#.get_p(#)".}

proc getR*(this: NodePath): float {.importcpp: "#.get_r()".}

proc getR*(this: NodePath, other: NodePath): float {.importcpp: "#.get_r(#)".}

proc setQuat*(this: NodePath, quat: LQuaternion) {.importcpp: "#.set_quat(#)".}

proc setQuat*(this: NodePath, other: NodePath, quat: LQuaternion) {.importcpp: "#.set_quat(#, #)".}

proc getQuat*(this: NodePath): LQuaternion {.importcpp: "#.get_quat()".}

proc getQuat*(this: NodePath, other: NodePath): LQuaternion {.importcpp: "#.get_quat(#)".}

proc setScale*(this: NodePath, scale: LVecBase3) {.importcpp: "#.set_scale((LVecBase3 const &)(#))".}

proc setScale*(this: NodePath, other: NodePath, scale: LVecBase3) {.importcpp: "#.set_scale(#, (LVecBase3 const &)(#))".}

proc setScale*(this: NodePath, other: NodePath, scale: float) {.importcpp: "#.set_scale(#, #)".}

proc setScale*(this: NodePath, other: NodePath, sx: float, sy: float, sz: float) {.importcpp: "#.set_scale(#, #, #, #)".}

proc setScale*(this: NodePath, scale: float) {.importcpp: "#.set_scale(#)".}

proc setScale*(this: NodePath, sx: float, sy: float, sz: float) {.importcpp: "#.set_scale(#, #, #)".}

proc setSx*(this: NodePath, other: NodePath, sx: float) {.importcpp: "#.set_sx(#, #)".}

proc setSx*(this: NodePath, sx: float) {.importcpp: "#.set_sx(#)".}

proc setSy*(this: NodePath, other: NodePath, sy: float) {.importcpp: "#.set_sy(#, #)".}

proc setSy*(this: NodePath, sy: float) {.importcpp: "#.set_sy(#)".}

proc setSz*(this: NodePath, other: NodePath, sz: float) {.importcpp: "#.set_sz(#, #)".}

proc setSz*(this: NodePath, sz: float) {.importcpp: "#.set_sz(#)".}

proc getScale*(this: NodePath): LVecBase3 {.importcpp: "#.get_scale()".}

proc getScale*(this: NodePath, other: NodePath): LVecBase3 {.importcpp: "#.get_scale(#)".}

proc getSx*(this: NodePath): float {.importcpp: "#.get_sx()".}

proc getSx*(this: NodePath, other: NodePath): float {.importcpp: "#.get_sx(#)".}

proc getSy*(this: NodePath): float {.importcpp: "#.get_sy()".}

proc getSy*(this: NodePath, other: NodePath): float {.importcpp: "#.get_sy(#)".}

proc getSz*(this: NodePath): float {.importcpp: "#.get_sz()".}

proc getSz*(this: NodePath, other: NodePath): float {.importcpp: "#.get_sz(#)".}

proc setShear*(this: NodePath, shear: LVecBase3) {.importcpp: "#.set_shear((LVecBase3 const &)(#))".}

proc setShear*(this: NodePath, other: NodePath, shear: LVecBase3) {.importcpp: "#.set_shear(#, (LVecBase3 const &)(#))".}

proc setShear*(this: NodePath, other: NodePath, shxy: float, shxz: float, shyz: float) {.importcpp: "#.set_shear(#, #, #, #)".}

proc setShear*(this: NodePath, shxy: float, shxz: float, shyz: float) {.importcpp: "#.set_shear(#, #, #)".}

proc setShxy*(this: NodePath, other: NodePath, shxy: float) {.importcpp: "#.set_shxy(#, #)".}

proc setShxy*(this: NodePath, shxy: float) {.importcpp: "#.set_shxy(#)".}

proc setShxz*(this: NodePath, other: NodePath, shxz: float) {.importcpp: "#.set_shxz(#, #)".}

proc setShxz*(this: NodePath, shxz: float) {.importcpp: "#.set_shxz(#)".}

proc setShyz*(this: NodePath, other: NodePath, shyz: float) {.importcpp: "#.set_shyz(#, #)".}

proc setShyz*(this: NodePath, shyz: float) {.importcpp: "#.set_shyz(#)".}

proc getShear*(this: NodePath): LVecBase3 {.importcpp: "#.get_shear()".}

proc getShear*(this: NodePath, other: NodePath): LVecBase3 {.importcpp: "#.get_shear(#)".}

proc getShxy*(this: NodePath): float {.importcpp: "#.get_shxy()".}

proc getShxy*(this: NodePath, other: NodePath): float {.importcpp: "#.get_shxy(#)".}

proc getShxz*(this: NodePath): float {.importcpp: "#.get_shxz()".}

proc getShxz*(this: NodePath, other: NodePath): float {.importcpp: "#.get_shxz(#)".}

proc getShyz*(this: NodePath): float {.importcpp: "#.get_shyz()".}

proc getShyz*(this: NodePath, other: NodePath): float {.importcpp: "#.get_shyz(#)".}

proc setPosHpr*(this: NodePath, pos: LVecBase3, hpr: LVecBase3) {.importcpp: "#.set_pos_hpr((LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosHpr*(this: NodePath, other: NodePath, pos: LVecBase3, hpr: LVecBase3) {.importcpp: "#.set_pos_hpr(#, (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosHpr*(this: NodePath, other: NodePath, x: float, y: float, z: float, h: float, p: float, r: float) {.importcpp: "#.set_pos_hpr(#, #, #, #, #, #, #)".}

proc setPosHpr*(this: NodePath, x: float, y: float, z: float, h: float, p: float, r: float) {.importcpp: "#.set_pos_hpr(#, #, #, #, #, #)".}

proc setPosQuat*(this: NodePath, pos: LVecBase3, quat: LQuaternion) {.importcpp: "#.set_pos_quat((LVecBase3 const &)(#), #)".}

proc setPosQuat*(this: NodePath, other: NodePath, pos: LVecBase3, quat: LQuaternion) {.importcpp: "#.set_pos_quat(#, (LVecBase3 const &)(#), #)".}

proc setHprScale*(this: NodePath, hpr: LVecBase3, scale: LVecBase3) {.importcpp: "#.set_hpr_scale((LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setHprScale*(this: NodePath, other: NodePath, hpr: LVecBase3, scale: LVecBase3) {.importcpp: "#.set_hpr_scale(#, (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setHprScale*(this: NodePath, other: NodePath, h: float, p: float, r: float, sx: float, sy: float, sz: float) {.importcpp: "#.set_hpr_scale(#, #, #, #, #, #, #)".}

proc setHprScale*(this: NodePath, h: float, p: float, r: float, sx: float, sy: float, sz: float) {.importcpp: "#.set_hpr_scale(#, #, #, #, #, #)".}

proc setQuatScale*(this: NodePath, quat: LQuaternion, scale: LVecBase3) {.importcpp: "#.set_quat_scale(#, (LVecBase3 const &)(#))".}

proc setQuatScale*(this: NodePath, other: NodePath, quat: LQuaternion, scale: LVecBase3) {.importcpp: "#.set_quat_scale(#, #, (LVecBase3 const &)(#))".}

proc setPosHprScale*(this: NodePath, pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3) {.importcpp: "#.set_pos_hpr_scale((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosHprScale*(this: NodePath, other: NodePath, pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3) {.importcpp: "#.set_pos_hpr_scale(#, (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosHprScale*(this: NodePath, other: NodePath, x: float, y: float, z: float, h: float, p: float, r: float, sx: float, sy: float, sz: float) {.importcpp: "#.set_pos_hpr_scale(#, #, #, #, #, #, #, #, #, #)".}

proc setPosHprScale*(this: NodePath, x: float, y: float, z: float, h: float, p: float, r: float, sx: float, sy: float, sz: float) {.importcpp: "#.set_pos_hpr_scale(#, #, #, #, #, #, #, #, #)".}

proc setPosQuatScale*(this: NodePath, pos: LVecBase3, quat: LQuaternion, scale: LVecBase3) {.importcpp: "#.set_pos_quat_scale((LVecBase3 const &)(#), #, (LVecBase3 const &)(#))".}

proc setPosQuatScale*(this: NodePath, other: NodePath, pos: LVecBase3, quat: LQuaternion, scale: LVecBase3) {.importcpp: "#.set_pos_quat_scale(#, (LVecBase3 const &)(#), #, (LVecBase3 const &)(#))".}

proc setPosHprScaleShear*(this: NodePath, pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3, shear: LVecBase3) {.importcpp: "#.set_pos_hpr_scale_shear((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosHprScaleShear*(this: NodePath, other: NodePath, pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3, shear: LVecBase3) {.importcpp: "#.set_pos_hpr_scale_shear(#, (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosQuatScaleShear*(this: NodePath, pos: LVecBase3, quat: LQuaternion, scale: LVecBase3, shear: LVecBase3) {.importcpp: "#.set_pos_quat_scale_shear((LVecBase3 const &)(#), #, (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setPosQuatScaleShear*(this: NodePath, other: NodePath, pos: LVecBase3, quat: LQuaternion, scale: LVecBase3, shear: LVecBase3) {.importcpp: "#.set_pos_quat_scale_shear(#, (LVecBase3 const &)(#), #, (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc setMat*(this: NodePath, mat: LMatrix4) {.importcpp: "#.set_mat(#)".}

proc setMat*(this: NodePath, other: NodePath, mat: LMatrix4) {.importcpp: "#.set_mat(#, #)".}

proc clearMat*(this: NodePath) {.importcpp: "#.clear_mat()".}

proc hasMat*(this: NodePath): bool {.importcpp: "#.has_mat()".}

proc getMat*(this: NodePath): LMatrix4 {.importcpp: "#.get_mat()".}

proc getMat*(this: NodePath, other: NodePath): LMatrix4 {.importcpp: "#.get_mat(#)".}

proc lookAt*(this: NodePath, point: LPoint3, up: LVector3) {.importcpp: "#.look_at((LPoint3 const &)(#), (LVector3 const &)(#))".}

proc lookAt*(this: NodePath, point: LPoint3) {.importcpp: "#.look_at((LPoint3 const &)(#))".}

proc lookAt*(this: NodePath, other: NodePath, point: LPoint3, up: LVector3) {.importcpp: "#.look_at(#, (LPoint3 const &)(#), (LVector3 const &)(#))".}

proc lookAt*(this: NodePath, other: NodePath, point: LPoint3) {.importcpp: "#.look_at(#, (LPoint3 const &)(#))".}

proc lookAt*(this: NodePath, other: NodePath) {.importcpp: "#.look_at(#)".}

proc lookAt*(this: NodePath, other: NodePath, x: float, y: float, z: float) {.importcpp: "#.look_at(#, #, #, #)".}

proc lookAt*(this: NodePath, x: float, y: float, z: float) {.importcpp: "#.look_at(#, #, #)".}

proc headsUp*(this: NodePath, point: LPoint3, up: LVector3) {.importcpp: "#.heads_up((LPoint3 const &)(#), (LVector3 const &)(#))".}

proc headsUp*(this: NodePath, point: LPoint3) {.importcpp: "#.heads_up((LPoint3 const &)(#))".}

proc headsUp*(this: NodePath, other: NodePath, point: LPoint3, up: LVector3) {.importcpp: "#.heads_up(#, (LPoint3 const &)(#), (LVector3 const &)(#))".}

proc headsUp*(this: NodePath, other: NodePath, point: LPoint3) {.importcpp: "#.heads_up(#, (LPoint3 const &)(#))".}

proc headsUp*(this: NodePath, other: NodePath) {.importcpp: "#.heads_up(#)".}

proc headsUp*(this: NodePath, other: NodePath, x: float, y: float, z: float) {.importcpp: "#.heads_up(#, #, #, #)".}

proc headsUp*(this: NodePath, x: float, y: float, z: float) {.importcpp: "#.heads_up(#, #, #)".}

proc getRelativePoint*(this: NodePath, other: NodePath, point: LVecBase3): LPoint3 {.importcpp: "#.get_relative_point(#, (LVecBase3 const &)(#))".}

proc getRelativeVector*(this: NodePath, other: NodePath, vec: LVecBase3): LVector3 {.importcpp: "#.get_relative_vector(#, (LVecBase3 const &)(#))".}

proc getDistance*(this: NodePath, other: NodePath): float {.importcpp: "#.get_distance(#)".}

proc setColorOff*(this: NodePath, priority: int) {.importcpp: "#.set_color_off(#)".}

proc setColorOff*(this: NodePath) {.importcpp: "#.set_color_off()".}

proc clearColor*(this: NodePath) {.importcpp: "#.clear_color()".}

proc hasColor*(this: NodePath): bool {.importcpp: "#.has_color()".}

proc getColor*(this: NodePath | PGFrameStyle): LColor {.importcpp: "#.get_color()".}

proc hasColorScale*(this: NodePath): bool {.importcpp: "#.has_color_scale()".}

proc clearColorScale*(this: NodePath) {.importcpp: "#.clear_color_scale()".}

proc setColorScale*(this: NodePath, sx: float, sy: float, sz: float, sa: float, priority: int) {.importcpp: "#.set_color_scale(#, #, #, #, #)".}

proc setColorScale*(this: NodePath, sx: float, sy: float, sz: float, sa: float) {.importcpp: "#.set_color_scale(#, #, #, #)".}

proc composeColorScale*(this: NodePath, sx: float, sy: float, sz: float, sa: float, priority: int) {.importcpp: "#.compose_color_scale(#, #, #, #, #)".}

proc composeColorScale*(this: NodePath, sx: float, sy: float, sz: float, sa: float) {.importcpp: "#.compose_color_scale(#, #, #, #)".}

proc setColorScaleOff*(this: NodePath, priority: int) {.importcpp: "#.set_color_scale_off(#)".}

proc setColorScaleOff*(this: NodePath) {.importcpp: "#.set_color_scale_off()".}

proc setAlphaScale*(this: NodePath, scale: float, priority: int) {.importcpp: "#.set_alpha_scale(#, #)".}

proc setAlphaScale*(this: NodePath, scale: float) {.importcpp: "#.set_alpha_scale(#)".}

proc setAllColorScale*(this: NodePath, scale: float, priority: int) {.importcpp: "#.set_all_color_scale(#, #)".}

proc setAllColorScale*(this: NodePath, scale: float) {.importcpp: "#.set_all_color_scale(#)".}

proc setSr*(this: NodePath, sr: float) {.importcpp: "#.set_sr(#)".}

proc setSg*(this: NodePath, sg: float) {.importcpp: "#.set_sg(#)".}

proc setSb*(this: NodePath, sb: float) {.importcpp: "#.set_sb(#)".}

proc setSa*(this: NodePath, sa: float) {.importcpp: "#.set_sa(#)".}

proc getColorScale*(this: NodePath): LVecBase4 {.importcpp: "#.get_color_scale()".}

proc getSr*(this: NodePath): float {.importcpp: "#.get_sr()".}

proc getSg*(this: NodePath): float {.importcpp: "#.get_sg()".}

proc getSb*(this: NodePath): float {.importcpp: "#.get_sb()".}

proc getSa*(this: NodePath): float {.importcpp: "#.get_sa()".}

proc setLight*(this: NodePath, light: NodePath, priority: int) {.importcpp: "#.set_light(#, #)".}

proc setLight*(this: NodePath, light: NodePath) {.importcpp: "#.set_light(#)".}

proc setLightOff*(this: NodePath, light: NodePath, priority: int) {.importcpp: "#.set_light_off(#, #)".}

proc setLightOff*(this: NodePath, light: NodePath) {.importcpp: "#.set_light_off(#)".}

proc setLightOff*(this: NodePath, priority: int) {.importcpp: "#.set_light_off(#)".}

proc setLightOff*(this: NodePath) {.importcpp: "#.set_light_off()".}

proc clearLight*(this: NodePath) {.importcpp: "#.clear_light()".}

proc clearLight*(this: NodePath, light: NodePath) {.importcpp: "#.clear_light(#)".}

proc hasLight*(this: NodePath, light: NodePath): bool {.importcpp: "#.has_light(#)".}

proc hasLightOff*(this: NodePath): bool {.importcpp: "#.has_light_off()".}

proc hasLightOff*(this: NodePath, light: NodePath): bool {.importcpp: "#.has_light_off(#)".}

proc setClipPlane*(this: NodePath, clipPlane: NodePath, priority: int) {.importcpp: "#.set_clip_plane(#, #)".}

proc setClipPlane*(this: NodePath, clipPlane: NodePath) {.importcpp: "#.set_clip_plane(#)".}

proc setClipPlaneOff*(this: NodePath, clipPlane: NodePath, priority: int) {.importcpp: "#.set_clip_plane_off(#, #)".}

proc setClipPlaneOff*(this: NodePath, clipPlane: NodePath) {.importcpp: "#.set_clip_plane_off(#)".}

proc setClipPlaneOff*(this: NodePath, priority: int) {.importcpp: "#.set_clip_plane_off(#)".}

proc setClipPlaneOff*(this: NodePath) {.importcpp: "#.set_clip_plane_off()".}

proc clearClipPlane*(this: NodePath) {.importcpp: "#.clear_clip_plane()".}

proc clearClipPlane*(this: NodePath, clipPlane: NodePath) {.importcpp: "#.clear_clip_plane(#)".}

proc hasClipPlane*(this: NodePath, clipPlane: NodePath): bool {.importcpp: "#.has_clip_plane(#)".}

proc hasClipPlaneOff*(this: NodePath): bool {.importcpp: "#.has_clip_plane_off()".}

proc hasClipPlaneOff*(this: NodePath, clipPlane: NodePath): bool {.importcpp: "#.has_clip_plane_off(#)".}

proc setScissor*(this: NodePath, a: LPoint3, b: LPoint3) {.importcpp: "#.set_scissor((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc setScissor*(this: NodePath, a: LPoint3, b: LPoint3, c: LPoint3, d: LPoint3) {.importcpp: "#.set_scissor((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc setScissor*(this: NodePath, other: NodePath, a: LPoint3, b: LPoint3) {.importcpp: "#.set_scissor(#, (LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc setScissor*(this: NodePath, other: NodePath, a: LPoint3, b: LPoint3, c: LPoint3, d: LPoint3) {.importcpp: "#.set_scissor(#, (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc setScissor*(this: NodePath, left: float, right: float, bottom: float, top: float) {.importcpp: "#.set_scissor(#, #, #, #)".}

proc clearScissor*(this: NodePath) {.importcpp: "#.clear_scissor()".}

proc hasScissor*(this: NodePath): bool {.importcpp: "#.has_scissor()".}

proc setOccluder*(this: NodePath, occluder: NodePath) {.importcpp: "#.set_occluder(#)".}

proc clearOccluder*(this: NodePath) {.importcpp: "#.clear_occluder()".}

proc clearOccluder*(this: NodePath, occluder: NodePath) {.importcpp: "#.clear_occluder(#)".}

proc hasOccluder*(this: NodePath, occluder: NodePath): bool {.importcpp: "#.has_occluder(#)".}

proc setBin*(this: NodePath, binName: string, drawOrder: int, priority: int) {.importcpp: "#.set_bin(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc setBin*(this: NodePath, binName: string, drawOrder: int) {.importcpp: "#.set_bin(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clearBin*(this: NodePath) {.importcpp: "#.clear_bin()".}

proc hasBin*(this: NodePath): bool {.importcpp: "#.has_bin()".}

proc getBinName*(this: NodePath): string {.importcpp: "nimStringFromStdString(#.get_bin_name())", header: stringConversionCode.}

proc getBinDrawOrder*(this: NodePath): int {.importcpp: "#.get_bin_draw_order()".}

proc setTexture*(this: NodePath, tex: Texture, sampler: SamplerState, priority: int) {.importcpp: "#.set_texture(#, #, #)".}

proc setTexture*(this: NodePath, tex: Texture, sampler: SamplerState) {.importcpp: "#.set_texture(#, #)".}

proc setTexture*(this: NodePath, stage: TextureStage, tex: Texture, sampler: SamplerState, priority: int) {.importcpp: "#.set_texture(#, #, #, #)".}

proc setTexture*(this: NodePath, stage: TextureStage, tex: Texture, sampler: SamplerState) {.importcpp: "#.set_texture(#, #, #)".}

proc clearTexture*(this: NodePath | PGFrameStyle) {.importcpp: "#.clear_texture()".}

proc clearTexture*(this: NodePath, stage: TextureStage) {.importcpp: "#.clear_texture(#)".}

proc hasTexture*(this: NodePath | PGFrameStyle): bool {.importcpp: "#.has_texture()".}

proc hasTexture*(this: NodePath, stage: TextureStage): bool {.importcpp: "#.has_texture(#)".}

proc hasTextureOff*(this: NodePath): bool {.importcpp: "#.has_texture_off()".}

proc hasTextureOff*(this: NodePath, stage: TextureStage): bool {.importcpp: "#.has_texture_off(#)".}

proc getTexture*(this: NodePath, stage: TextureStage): Texture {.importcpp: "#.get_texture(#)".}

proc replaceTexture*(this: NodePath, tex: Texture, newTex: Texture) {.importcpp: "#.replace_texture(#, #)".}

proc replaceTexture*(this: NodePath, tex: Texture, newTex: type(nil)) {.importcpp: "#.replace_texture(#, #)".}

proc getTextureSampler*(this: NodePath): SamplerState {.importcpp: "#.get_texture_sampler()".}

proc getTextureSampler*(this: NodePath, stage: TextureStage): SamplerState {.importcpp: "#.get_texture_sampler(#)".}

proc setShader*(this: NodePath, sha: Shader, priority: int) {.importcpp: "#.set_shader(#, #)".}

proc setShader*(this: NodePath, sha: Shader) {.importcpp: "#.set_shader(#)".}

proc setShaderOff*(this: NodePath, priority: int) {.importcpp: "#.set_shader_off(#)".}

proc setShaderOff*(this: NodePath) {.importcpp: "#.set_shader_off()".}

proc setShaderAuto*(this: NodePath, shaderSwitch: BitMask32, priority: int) {.importcpp: "#.set_shader_auto(#, #)".}

proc setShaderAuto*(this: NodePath, shaderSwitch: BitMask32) {.importcpp: "#.set_shader_auto(#)".}

proc setShaderAuto*(this: NodePath, priority: int) {.importcpp: "#.set_shader_auto(#)".}

proc setShaderAuto*(this: NodePath) {.importcpp: "#.set_shader_auto()".}

proc clearShader*(this: NodePath) {.importcpp: "#.clear_shader()".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: float, n2: float, n3: float, n4: float, priority: int) {.importcpp: "#.set_shader_input(#, #, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: float, n2: float, n3: float, n4: float) {.importcpp: "#.set_shader_input(#, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: float, n2: float, n3: float) {.importcpp: "#.set_shader_input(#, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: float, n2: float) {.importcpp: "#.set_shader_input(#, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, tex: Texture, sampler: SamplerState, priority: int) {.importcpp: "#.set_shader_input(#, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, tex: Texture, sampler: SamplerState) {.importcpp: "#.set_shader_input(#, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, tex: Texture, read: bool, write: bool, z: int, n: int, priority: int) {.importcpp: "#.set_shader_input(#, #, #, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, tex: Texture, read: bool, write: bool, z: int, n: int) {.importcpp: "#.set_shader_input(#, #, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, tex: Texture, read: bool, write: bool, z: int) {.importcpp: "#.set_shader_input(#, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, tex: Texture, read: bool, write: bool) {.importcpp: "#.set_shader_input(#, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: int, n2: int, n3: int, n4: int, priority: int) {.importcpp: "#.set_shader_input(#, #, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: int, n2: int, n3: int, n4: int) {.importcpp: "#.set_shader_input(#, #, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: int, n2: int, n3: int) {.importcpp: "#.set_shader_input(#, #, #, #)".}

proc setShaderInput*(this: NodePath, id: InternalName, n1: int, n2: int) {.importcpp: "#.set_shader_input(#, #, #)".}

proc setShaderInput*(this: NodePath, input: ShaderInput) {.importcpp: "#.set_shader_input(#)".}

proc clearShaderInput*(this: NodePath, id: InternalName) {.importcpp: "#.clear_shader_input(#)".}

proc setInstanceCount*(this: NodePath, instanceCount: int) {.importcpp: "#.set_instance_count(#)".}

proc getShader*(this: NodePath | ShaderContext): Shader {.importcpp: "#.get_shader()".}

proc getShaderInput*(this: NodePath, id: InternalName): ShaderInput {.importcpp: "#.get_shader_input(#)".}

proc getInstanceCount*(this: NodePath): int {.importcpp: "#.get_instance_count()".}

proc setTexTransform*(this: NodePath, other: NodePath, stage: TextureStage, transform: TransformState) {.importcpp: "#.set_tex_transform(#, #, #)".}

proc setTexTransform*(this: NodePath, stage: TextureStage, transform: TransformState) {.importcpp: "#.set_tex_transform(#, #)".}

proc clearTexTransform*(this: NodePath) {.importcpp: "#.clear_tex_transform()".}

proc clearTexTransform*(this: NodePath, stage: TextureStage) {.importcpp: "#.clear_tex_transform(#)".}

proc hasTexTransform*(this: NodePath, stage: TextureStage): bool {.importcpp: "#.has_tex_transform(#)".}

proc getTexTransform*(this: NodePath, other: NodePath, stage: TextureStage): TransformState {.importcpp: "#.get_tex_transform(#, #)".}

proc getTexTransform*(this: NodePath, stage: TextureStage): TransformState {.importcpp: "#.get_tex_transform(#)".}

proc setTexOffset*(this: NodePath, other: NodePath, stage: TextureStage, uv: LVecBase2) {.importcpp: "#.set_tex_offset(#, #, (LVecBase2 const &)(#))".}

proc setTexOffset*(this: NodePath, other: NodePath, stage: TextureStage, u: float, v: float) {.importcpp: "#.set_tex_offset(#, #, #, #)".}

proc setTexOffset*(this: NodePath, stage: TextureStage, uv: LVecBase2) {.importcpp: "#.set_tex_offset(#, (LVecBase2 const &)(#))".}

proc setTexOffset*(this: NodePath, stage: TextureStage, u: float, v: float) {.importcpp: "#.set_tex_offset(#, #, #)".}

proc setTexRotate*(this: NodePath, other: NodePath, stage: TextureStage, r: float) {.importcpp: "#.set_tex_rotate(#, #, #)".}

proc setTexRotate*(this: NodePath, stage: TextureStage, r: float) {.importcpp: "#.set_tex_rotate(#, #)".}

proc setTexScale*(this: NodePath, other: NodePath, stage: TextureStage, scale: LVecBase2) {.importcpp: "#.set_tex_scale(#, #, (LVecBase2 const &)(#))".}

proc setTexScale*(this: NodePath, other: NodePath, stage: TextureStage, scale: LVecBase3) {.importcpp: "#.set_tex_scale(#, #, (LVecBase3 const &)(#))".}

proc setTexScale*(this: NodePath, other: NodePath, stage: TextureStage, scale: float) {.importcpp: "#.set_tex_scale(#, #, #)".}

proc setTexScale*(this: NodePath, other: NodePath, stage: TextureStage, su: float, sv: float) {.importcpp: "#.set_tex_scale(#, #, #, #)".}

proc setTexScale*(this: NodePath, other: NodePath, stage: TextureStage, su: float, sv: float, sw: float) {.importcpp: "#.set_tex_scale(#, #, #, #, #)".}

proc setTexScale*(this: NodePath, stage: TextureStage, scale: LVecBase2) {.importcpp: "#.set_tex_scale(#, (LVecBase2 const &)(#))".}

proc setTexScale*(this: NodePath, stage: TextureStage, scale: LVecBase3) {.importcpp: "#.set_tex_scale(#, (LVecBase3 const &)(#))".}

proc setTexScale*(this: NodePath, stage: TextureStage, scale: float) {.importcpp: "#.set_tex_scale(#, #)".}

proc setTexScale*(this: NodePath, stage: TextureStage, su: float, sv: float) {.importcpp: "#.set_tex_scale(#, #, #)".}

proc setTexScale*(this: NodePath, stage: TextureStage, su: float, sv: float, sw: float) {.importcpp: "#.set_tex_scale(#, #, #, #)".}

proc getTexOffset*(this: NodePath, other: NodePath, stage: TextureStage): LVecBase2 {.importcpp: "#.get_tex_offset(#, #)".}

proc getTexOffset*(this: NodePath, stage: TextureStage): LVecBase2 {.importcpp: "#.get_tex_offset(#)".}

proc getTexRotate*(this: NodePath, other: NodePath, stage: TextureStage): float {.importcpp: "#.get_tex_rotate(#, #)".}

proc getTexRotate*(this: NodePath, stage: TextureStage): float {.importcpp: "#.get_tex_rotate(#)".}

proc getTexScale*(this: NodePath, other: NodePath, stage: TextureStage): LVecBase2 {.importcpp: "#.get_tex_scale(#, #)".}

proc getTexScale*(this: NodePath, stage: TextureStage): LVecBase2 {.importcpp: "#.get_tex_scale(#)".}

proc setTexPos*(this: NodePath, other: NodePath, stage: TextureStage, uvw: LVecBase3) {.importcpp: "#.set_tex_pos(#, #, (LVecBase3 const &)(#))".}

proc setTexPos*(this: NodePath, other: NodePath, stage: TextureStage, u: float, v: float, w: float) {.importcpp: "#.set_tex_pos(#, #, #, #, #)".}

proc setTexPos*(this: NodePath, stage: TextureStage, uvw: LVecBase3) {.importcpp: "#.set_tex_pos(#, (LVecBase3 const &)(#))".}

proc setTexPos*(this: NodePath, stage: TextureStage, u: float, v: float, w: float) {.importcpp: "#.set_tex_pos(#, #, #, #)".}

proc setTexHpr*(this: NodePath, other: NodePath, stage: TextureStage, hpr: LVecBase3) {.importcpp: "#.set_tex_hpr(#, #, (LVecBase3 const &)(#))".}

proc setTexHpr*(this: NodePath, other: NodePath, stage: TextureStage, h: float, p: float, r: float) {.importcpp: "#.set_tex_hpr(#, #, #, #, #)".}

proc setTexHpr*(this: NodePath, stage: TextureStage, hpr: LVecBase3) {.importcpp: "#.set_tex_hpr(#, (LVecBase3 const &)(#))".}

proc setTexHpr*(this: NodePath, stage: TextureStage, h: float, p: float, r: float) {.importcpp: "#.set_tex_hpr(#, #, #, #)".}

proc getTexPos*(this: NodePath, other: NodePath, stage: TextureStage): LVecBase3 {.importcpp: "#.get_tex_pos(#, #)".}

proc getTexPos*(this: NodePath, stage: TextureStage): LVecBase3 {.importcpp: "#.get_tex_pos(#)".}

proc getTexHpr*(this: NodePath, other: NodePath, stage: TextureStage): LVecBase3 {.importcpp: "#.get_tex_hpr(#, #)".}

proc getTexHpr*(this: NodePath, stage: TextureStage): LVecBase3 {.importcpp: "#.get_tex_hpr(#)".}

proc getTexScale3d*(this: NodePath, other: NodePath, stage: TextureStage): LVecBase3 {.importcpp: "#.get_tex_scale_3d(#, #)".}

proc getTexScale3d*(this: NodePath, stage: TextureStage): LVecBase3 {.importcpp: "#.get_tex_scale_3d(#)".}

proc setTexGen*(this: NodePath, stage: TextureStage, mode: RenderAttrib_TexGenMode, constantValue: LTexCoord3, priority: int) {.importcpp: "#.set_tex_gen(#, #, #, #)".}

proc setTexGen*(this: NodePath, stage: TextureStage, mode: RenderAttrib_TexGenMode, constantValue: LTexCoord3) {.importcpp: "#.set_tex_gen(#, #, #)".}

proc setTexGen*(this: NodePath, stage: TextureStage, mode: RenderAttrib_TexGenMode, priority: int) {.importcpp: "#.set_tex_gen(#, #, #)".}

proc setTexGen*(this: NodePath, stage: TextureStage, mode: RenderAttrib_TexGenMode) {.importcpp: "#.set_tex_gen(#, #)".}

proc clearTexGen*(this: NodePath) {.importcpp: "#.clear_tex_gen()".}

proc clearTexGen*(this: NodePath, stage: TextureStage) {.importcpp: "#.clear_tex_gen(#)".}

proc hasTexGen*(this: NodePath, stage: TextureStage): bool {.importcpp: "#.has_tex_gen(#)".}

proc getTexGen*(this: NodePath, stage: TextureStage): RenderAttrib_TexGenMode {.importcpp: "#.get_tex_gen(#)".}

proc setTexProjector*(this: NodePath, stage: TextureStage, `from`: NodePath, to: NodePath, lensIndex: int) {.importcpp: "#.set_tex_projector(#, #, #, #)".}

proc setTexProjector*(this: NodePath, stage: TextureStage, `from`: NodePath, to: NodePath) {.importcpp: "#.set_tex_projector(#, #, #)".}

proc clearTexProjector*(this: NodePath) {.importcpp: "#.clear_tex_projector()".}

proc clearTexProjector*(this: NodePath, stage: TextureStage) {.importcpp: "#.clear_tex_projector(#)".}

proc hasTexProjector*(this: NodePath, stage: TextureStage): bool {.importcpp: "#.has_tex_projector(#)".}

proc getTexProjectorFrom*(this: NodePath, stage: TextureStage): NodePath {.importcpp: "#.get_tex_projector_from(#)".}

proc getTexProjectorTo*(this: NodePath, stage: TextureStage): NodePath {.importcpp: "#.get_tex_projector_to(#)".}

proc projectTexture*(this: NodePath, stage: TextureStage, tex: Texture, projector: NodePath) {.importcpp: "#.project_texture(#, #, #)".}

proc clearProjectTexture*(this: NodePath, stage: TextureStage) {.importcpp: "#.clear_project_texture(#)".}

proc hasTexcoord*(this: NodePath, texcoordName: string): bool {.importcpp: "#.has_texcoord(nimStringToStdString(#))", header: stringConversionCode.}

proc hasVertexColumn*(this: NodePath, name: InternalName): bool {.importcpp: "#.has_vertex_column(#)".}

proc findAllVertexColumns*(this: NodePath): InternalNameCollection {.importcpp: "#.find_all_vertex_columns()".}

proc findAllVertexColumns*(this: NodePath, name: string): InternalNameCollection {.importcpp: "#.find_all_vertex_columns(nimStringToStdString(#))", header: stringConversionCode.}

proc findAllTexcoords*(this: NodePath): InternalNameCollection {.importcpp: "#.find_all_texcoords()".}

proc findAllTexcoords*(this: NodePath, name: string): InternalNameCollection {.importcpp: "#.find_all_texcoords(nimStringToStdString(#))", header: stringConversionCode.}

proc findTexture*(this: NodePath, stage: TextureStage): Texture {.importcpp: "#.find_texture(#)".}

proc findTexture*(this: NodePath | TextureCollection, name: string): Texture {.importcpp: "#.find_texture(nimStringToStdString(#))", header: stringConversionCode.}

proc findAllTextures*(this: NodePath): TextureCollection {.importcpp: "#.find_all_textures()".}

proc findAllTextures*(this: NodePath, stage: TextureStage): TextureCollection {.importcpp: "#.find_all_textures(#)".}

proc findAllTextures*(this: NodePath, name: string): TextureCollection {.importcpp: "#.find_all_textures(nimStringToStdString(#))", header: stringConversionCode.}

proc findAllTextureStages*(this: NodePath): TextureStageCollection {.importcpp: "#.find_all_texture_stages()".}

proc findAllTextureStages*(this: NodePath, name: string): TextureStageCollection {.importcpp: "#.find_all_texture_stages(nimStringToStdString(#))", header: stringConversionCode.}

proc unifyTextureStages*(this: NodePath, stage: TextureStage) {.importcpp: "#.unify_texture_stages(#)".}

proc findAllMaterials*(this: NodePath): MaterialCollection {.importcpp: "#.find_all_materials()".}

proc findAllMaterials*(this: NodePath, name: string): MaterialCollection {.importcpp: "#.find_all_materials(nimStringToStdString(#))", header: stringConversionCode.}

proc setMaterial*(this: NodePath, tex: Material, priority: int) {.importcpp: "#.set_material(#, #)".}

proc setMaterial*(this: NodePath, tex: Material) {.importcpp: "#.set_material(#)".}

proc setMaterialOff*(this: NodePath, priority: int) {.importcpp: "#.set_material_off(#)".}

proc setMaterialOff*(this: NodePath) {.importcpp: "#.set_material_off()".}

proc clearMaterial*(this: NodePath) {.importcpp: "#.clear_material()".}

proc hasMaterial*(this: NodePath): bool {.importcpp: "#.has_material()".}

proc getMaterial*(this: NodePath): Material {.importcpp: "#.get_material()".}

proc replaceMaterial*(this: NodePath, mat: Material, newMat: Material) {.importcpp: "#.replace_material(#, #)".}

proc replaceMaterial*(this: NodePath, mat: Material, newMat: type(nil)) {.importcpp: "#.replace_material(#, #)".}

proc setFog*(this: NodePath, fog: Fog, priority: int) {.importcpp: "#.set_fog(#, #)".}

proc setFog*(this: NodePath, fog: Fog) {.importcpp: "#.set_fog(#)".}

proc setFogOff*(this: NodePath, priority: int) {.importcpp: "#.set_fog_off(#)".}

proc setFogOff*(this: NodePath) {.importcpp: "#.set_fog_off()".}

proc clearFog*(this: NodePath) {.importcpp: "#.clear_fog()".}

proc hasFog*(this: NodePath): bool {.importcpp: "#.has_fog()".}

proc hasFogOff*(this: NodePath): bool {.importcpp: "#.has_fog_off()".}

proc getFog*(this: NodePath): Fog {.importcpp: "#.get_fog()".}

proc setRenderModeWireframe*(this: NodePath, priority: int) {.importcpp: "#.set_render_mode_wireframe(#)".}

proc setRenderModeWireframe*(this: NodePath) {.importcpp: "#.set_render_mode_wireframe()".}

proc setRenderModeFilled*(this: NodePath, priority: int) {.importcpp: "#.set_render_mode_filled(#)".}

proc setRenderModeFilled*(this: NodePath) {.importcpp: "#.set_render_mode_filled()".}

proc setRenderModeFilledWireframe*(this: NodePath, wireframeColor: LColor, priority: int) {.importcpp: "#.set_render_mode_filled_wireframe(#, #)".}

proc setRenderModeFilledWireframe*(this: NodePath, wireframeColor: LColor) {.importcpp: "#.set_render_mode_filled_wireframe(#)".}

proc setRenderModeThickness*(this: NodePath, thickness: float, priority: int) {.importcpp: "#.set_render_mode_thickness(#, #)".}

proc setRenderModeThickness*(this: NodePath, thickness: float) {.importcpp: "#.set_render_mode_thickness(#)".}

proc setRenderModePerspective*(this: NodePath, perspective: bool, priority: int) {.importcpp: "#.set_render_mode_perspective(#, #)".}

proc setRenderModePerspective*(this: NodePath, perspective: bool) {.importcpp: "#.set_render_mode_perspective(#)".}

proc setRenderMode*(this: NodePath, mode: RenderModeAttrib_Mode, thickness: float, priority: int) {.importcpp: "#.set_render_mode(#, #, #)".}

proc setRenderMode*(this: NodePath, mode: RenderModeAttrib_Mode, thickness: float) {.importcpp: "#.set_render_mode(#, #)".}

proc clearRenderMode*(this: NodePath) {.importcpp: "#.clear_render_mode()".}

proc hasRenderMode*(this: NodePath): bool {.importcpp: "#.has_render_mode()".}

proc getRenderMode*(this: NodePath): RenderModeAttrib_Mode {.importcpp: "#.get_render_mode()".}

proc getRenderModeThickness*(this: NodePath): float {.importcpp: "#.get_render_mode_thickness()".}

proc getRenderModePerspective*(this: NodePath): bool {.importcpp: "#.get_render_mode_perspective()".}

proc setTwoSided*(this: NodePath, twoSided: bool, priority: int) {.importcpp: "#.set_two_sided(#, #)".}

proc setTwoSided*(this: NodePath, twoSided: bool) {.importcpp: "#.set_two_sided(#)".}

proc clearTwoSided*(this: NodePath) {.importcpp: "#.clear_two_sided()".}

proc hasTwoSided*(this: NodePath): bool {.importcpp: "#.has_two_sided()".}

proc getTwoSided*(this: NodePath): bool {.importcpp: "#.get_two_sided()".}

proc setDepthTest*(this: NodePath, depthTest: bool, priority: int) {.importcpp: "#.set_depth_test(#, #)".}

proc setDepthTest*(this: NodePath, depthTest: bool) {.importcpp: "#.set_depth_test(#)".}

proc clearDepthTest*(this: NodePath) {.importcpp: "#.clear_depth_test()".}

proc hasDepthTest*(this: NodePath): bool {.importcpp: "#.has_depth_test()".}

proc getDepthTest*(this: NodePath): bool {.importcpp: "#.get_depth_test()".}

proc setDepthWrite*(this: NodePath, depthWrite: bool, priority: int) {.importcpp: "#.set_depth_write(#, #)".}

proc setDepthWrite*(this: NodePath, depthWrite: bool) {.importcpp: "#.set_depth_write(#)".}

proc clearDepthWrite*(this: NodePath) {.importcpp: "#.clear_depth_write()".}

proc hasDepthWrite*(this: NodePath): bool {.importcpp: "#.has_depth_write()".}

proc getDepthWrite*(this: NodePath): bool {.importcpp: "#.get_depth_write()".}

proc setDepthOffset*(this: NodePath, bias: int, priority: int) {.importcpp: "#.set_depth_offset(#, #)".}

proc setDepthOffset*(this: NodePath, bias: int) {.importcpp: "#.set_depth_offset(#)".}

proc clearDepthOffset*(this: NodePath) {.importcpp: "#.clear_depth_offset()".}

proc hasDepthOffset*(this: NodePath): bool {.importcpp: "#.has_depth_offset()".}

proc getDepthOffset*(this: NodePath): int {.importcpp: "#.get_depth_offset()".}

proc doBillboardAxis*(this: NodePath, camera: NodePath, offset: float) {.importcpp: "#.do_billboard_axis(#, #)".}

proc doBillboardPointEye*(this: NodePath, camera: NodePath, offset: float) {.importcpp: "#.do_billboard_point_eye(#, #)".}

proc doBillboardPointWorld*(this: NodePath, camera: NodePath, offset: float) {.importcpp: "#.do_billboard_point_world(#, #)".}

proc setBillboardAxis*(this: NodePath, camera: NodePath, offset: float) {.importcpp: "#.set_billboard_axis(#, #)".}

proc setBillboardAxis*(this: NodePath, offset: float) {.importcpp: "#.set_billboard_axis(#)".}

proc setBillboardAxis*(this: NodePath) {.importcpp: "#.set_billboard_axis()".}

proc setBillboardPointEye*(this: NodePath, camera: NodePath, offset: float, fixedDepth: bool) {.importcpp: "#.set_billboard_point_eye(#, #, #)".}

proc setBillboardPointEye*(this: NodePath, camera: NodePath, offset: float) {.importcpp: "#.set_billboard_point_eye(#, #)".}

proc setBillboardPointEye*(this: NodePath, offset: float, fixedDepth: bool) {.importcpp: "#.set_billboard_point_eye(#, #)".}

proc setBillboardPointEye*(this: NodePath, offset: float) {.importcpp: "#.set_billboard_point_eye(#)".}

proc setBillboardPointEye*(this: NodePath) {.importcpp: "#.set_billboard_point_eye()".}

proc setBillboardPointWorld*(this: NodePath, camera: NodePath, offset: float) {.importcpp: "#.set_billboard_point_world(#, #)".}

proc setBillboardPointWorld*(this: NodePath, offset: float) {.importcpp: "#.set_billboard_point_world(#)".}

proc setBillboardPointWorld*(this: NodePath) {.importcpp: "#.set_billboard_point_world()".}

proc clearBillboard*(this: NodePath) {.importcpp: "#.clear_billboard()".}

proc hasBillboard*(this: NodePath): bool {.importcpp: "#.has_billboard()".}

proc setCompass*(this: NodePath, reference: NodePath) {.importcpp: "#.set_compass(#)".}

proc setCompass*(this: NodePath) {.importcpp: "#.set_compass()".}

proc clearCompass*(this: NodePath) {.importcpp: "#.clear_compass()".}

proc hasCompass*(this: NodePath): bool {.importcpp: "#.has_compass()".}

proc setTransparency*(this: NodePath, mode: TransparencyAttrib_Mode, priority: int) {.importcpp: "#.set_transparency(#, #)".}

proc setTransparency*(this: NodePath, mode: TransparencyAttrib_Mode) {.importcpp: "#.set_transparency(#)".}

proc clearTransparency*(this: NodePath) {.importcpp: "#.clear_transparency()".}

proc hasTransparency*(this: NodePath): bool {.importcpp: "#.has_transparency()".}

proc getTransparency*(this: NodePath): TransparencyAttrib_Mode {.importcpp: "#.get_transparency()".}

proc setLogicOp*(this: NodePath, op: LogicOpAttrib_Operation, priority: int) {.importcpp: "#.set_logic_op(#, #)".}

proc setLogicOp*(this: NodePath, op: LogicOpAttrib_Operation) {.importcpp: "#.set_logic_op(#)".}

proc clearLogicOp*(this: NodePath) {.importcpp: "#.clear_logic_op()".}

proc hasLogicOp*(this: NodePath): bool {.importcpp: "#.has_logic_op()".}

proc getLogicOp*(this: NodePath): LogicOpAttrib_Operation {.importcpp: "#.get_logic_op()".}

proc setAntialias*(this: NodePath, mode: int, priority: int) {.importcpp: "#.set_antialias(#, #)".}

proc setAntialias*(this: NodePath, mode: int) {.importcpp: "#.set_antialias(#)".}

proc clearAntialias*(this: NodePath) {.importcpp: "#.clear_antialias()".}

proc hasAntialias*(this: NodePath): bool {.importcpp: "#.has_antialias()".}

proc getAntialias*(this: NodePath): int {.importcpp: "#.get_antialias()".}

proc hasAudioVolume*(this: NodePath): bool {.importcpp: "#.has_audio_volume()".}

proc clearAudioVolume*(this: NodePath) {.importcpp: "#.clear_audio_volume()".}

proc setAudioVolume*(this: NodePath, volume: float, priority: int) {.importcpp: "#.set_audio_volume(#, #)".}

proc setAudioVolume*(this: NodePath, volume: float) {.importcpp: "#.set_audio_volume(#)".}

proc setAudioVolumeOff*(this: NodePath, priority: int) {.importcpp: "#.set_audio_volume_off(#)".}

proc setAudioVolumeOff*(this: NodePath) {.importcpp: "#.set_audio_volume_off()".}

proc getAudioVolume*(this: NodePath): float {.importcpp: "#.get_audio_volume()".}

proc getNetAudioVolume*(this: NodePath): float {.importcpp: "#.get_net_audio_volume()".}

proc adjustAllPriorities*(this: NodePath, adjustment: int) {.importcpp: "#.adjust_all_priorities(#)".}

proc show*(this: NodePath, cameraMask: DrawMask) {.importcpp: "#.show(#)".}

proc showThrough*(this: NodePath) {.importcpp: "#.show_through()".}

proc showThrough*(this: NodePath, cameraMask: DrawMask) {.importcpp: "#.show_through(#)".}

proc hide*(this: NodePath, cameraMask: DrawMask) {.importcpp: "#.hide(#)".}

proc isHidden*(this: NodePath, cameraMask: DrawMask): bool {.importcpp: "#.is_hidden(#)".}

proc isHidden*(this: NodePath): bool {.importcpp: "#.is_hidden()".}

proc getHiddenAncestor*(this: NodePath): NodePath {.importcpp: "#.get_hidden_ancestor()".}

proc isStashed*(this: NodePath): bool {.importcpp: "#.is_stashed()".}

proc `==`*(this: NodePath | WeakNodePath, other: NodePath): bool {.importcpp: "#.operator ==(#)".}

proc `==`*(this: NodePath | WeakNodePath, other: WeakNodePath): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: NodePath | WeakNodePath, other: NodePath): bool {.importcpp: "#.operator !=(#)".}

proc `!=`*(this: NodePath | WeakNodePath, other: WeakNodePath): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: NodePath | WeakNodePath, other: NodePath): bool {.importcpp: "#.operator <(#)".}

proc `<`*(this: NodePath | WeakNodePath, other: WeakNodePath): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: NodePath | WeakNodePath, other: NodePath): int {.importcpp: "#.compare_to(#)".}

proc compareTo*(this: NodePath | WeakNodePath, other: WeakNodePath): int {.importcpp: "#.compare_to(#)".}

proc premungeScene*(this: NodePath, gsg: GraphicsStateGuardianBase) {.importcpp: "#.premunge_scene(#)".}

proc premungeScene*(this: NodePath) {.importcpp: "#.premunge_scene()".}

proc prepareScene*(this: NodePath, gsg: GraphicsStateGuardianBase) {.importcpp: "#.prepare_scene(#)".}

proc showBounds*(this: NodePath) {.importcpp: "#.show_bounds()".}

proc showTightBounds*(this: NodePath) {.importcpp: "#.show_tight_bounds()".}

proc hideBounds*(this: NodePath) {.importcpp: "#.hide_bounds()".}

proc forceRecomputeBounds*(this: NodePath) {.importcpp: "#.force_recompute_bounds()".}

proc writeBounds*(this: NodePath, `out`: iostream | ostream) {.importcpp: "#.write_bounds(#)".}

proc flattenLight*(this: NodePath): int {.importcpp: "#.flatten_light()".}

proc flattenMedium*(this: NodePath): int {.importcpp: "#.flatten_medium()".}

proc flattenStrong*(this: NodePath): int {.importcpp: "#.flatten_strong()".}

proc applyTextureColors*(this: NodePath) {.importcpp: "#.apply_texture_colors()".}

proc clearModelNodes*(this: NodePath): int {.importcpp: "#.clear_model_nodes()".}

proc setTag*(this: NodePath, key: string, value: string) {.importcpp: "#.set_tag(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc getTag*(this: NodePath, key: string): string {.importcpp: "nimStringFromStdString(#.get_tag(nimStringToStdString(#)))", header: stringConversionCode.}

proc hasTag*(this: NodePath, key: string): bool {.importcpp: "#.has_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc clearTag*(this: NodePath, key: string) {.importcpp: "#.clear_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc getNetTag*(this: NodePath, key: string): string {.importcpp: "nimStringFromStdString(#.get_net_tag(nimStringToStdString(#)))", header: stringConversionCode.}

proc hasNetTag*(this: NodePath, key: string): bool {.importcpp: "#.has_net_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc findNetTag*(this: NodePath, key: string): NodePath {.importcpp: "#.find_net_tag(nimStringToStdString(#))", header: stringConversionCode.}

proc listTags*(this: NodePath) {.importcpp: "#.list_tags()".}

proc writeBamFile*(this: NodePath, filename: Filename): bool {.importcpp: "#.write_bam_file(#)".}

proc writeBamStream*(this: NodePath, `out`: iostream | ostream): bool {.importcpp: "#.write_bam_stream(#)".}

proc addNode*(this: AttribNodeRegistry, attribNode: NodePath) {.importcpp: "#.add_node(#)".}

proc removeNode*(this: AttribNodeRegistry, attribNode: NodePath): bool {.importcpp: "#.remove_node(#)".}

proc removeNode*(this: AttribNodeRegistry, n: int) {.importcpp: "#.remove_node(#)".}

proc lookupNode*(this: AttribNodeRegistry, origNode: NodePath): NodePath {.importcpp: "#.lookup_node(#)".}

proc getNode*(this: AttribNodeRegistry, n: int): NodePath {.importcpp: "#.get_node(#)".}

proc getNodeType*(this: AttribNodeRegistry, n: int): TypeHandle {.importcpp: "#.get_node_type(#)".}

proc getNodeName*(this: AttribNodeRegistry, n: int): string {.importcpp: "nimStringFromStdString(#.get_node_name(#))", header: stringConversionCode.}

proc findNode*(this: AttribNodeRegistry, attribNode: NodePath): int {.importcpp: "#.find_node(#)".}

proc findNode*(this: AttribNodeRegistry, `type`: TypeHandle, name: string): int {.importcpp: "#.find_node(#, nimStringToStdString(#))", header: stringConversionCode.}

proc isOff*(this: AudioVolumeAttrib | BillboardEffect | ColorScaleAttrib | FogAttrib | MaterialAttrib | ScissorAttrib | TextureAttrib): bool {.importcpp: "#->is_off()".}

proc hasVolume*(this: AudioVolumeAttrib): bool {.importcpp: "#->has_volume()".}

proc getVolume*(this: AudioManager | AudioSound | AudioVolumeAttrib | FiniteBoundingVolume): float {.importcpp: "#->get_volume()".}

proc setVolume*(this: AudioVolumeAttrib, volume: float): RenderAttrib {.importcpp: "deconstify(#->set_volume(#))", header: deconstifyCode.}

proc getOutputs*(this: AuxBitplaneAttrib): int {.importcpp: "#->get_outputs()".}

proc setDuration*(this: AuxSceneData, duration: float64) {.importcpp: "#->set_duration(#)".}

proc getDuration*(this: AuxSceneData): float64 {.importcpp: "#->get_duration()".}

proc setLastRenderTime*(this: AuxSceneData, renderTime: float64) {.importcpp: "#->set_last_render_time(#)".}

proc getLastRenderTime*(this: AuxSceneData): float64 {.importcpp: "#->get_last_render_time()".}

proc getExpirationTime*(this: AuxSceneData): float64 {.importcpp: "#->get_expiration_time()".}

proc openRead*(this: BamFile, bamFilename: Filename, reportErrors: bool): bool {.importcpp: "#.open_read(#, #)".}

proc openRead*(this: BamFile, bamFilename: Filename): bool {.importcpp: "#.open_read(#)".}

proc openRead*(this: BamFile, `in`: istream, bamFilename: string, reportErrors: bool): bool {.importcpp: "#.open_read(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc openRead*(this: BamFile, `in`: istream, bamFilename: string): bool {.importcpp: "#.open_read(#, nimStringToStdString(#))", header: stringConversionCode.}

proc openRead*(this: BamFile, `in`: istream): bool {.importcpp: "#.open_read(#)".}

proc readObject*(this: BamFile | BamReader): TypedWritable {.importcpp: "#.read_object()".}

proc isEof*(this: BamFile | BamReader): bool {.importcpp: "#.is_eof()".}

proc resolve*(this: BamFile | BamReader): bool {.importcpp: "#.resolve()".}

proc readNode*(this: BamFile, reportErrors: bool): PandaNode {.importcpp: "#.read_node(#)".}

proc readNode*(this: BamFile): PandaNode {.importcpp: "#.read_node()".}

proc openWrite*(this: BamFile, bamFilename: Filename, reportErrors: bool): bool {.importcpp: "#.open_write(#, #)".}

proc openWrite*(this: BamFile, bamFilename: Filename): bool {.importcpp: "#.open_write(#)".}

proc openWrite*(this: BamFile, `out`: iostream | ostream, bamFilename: string, reportErrors: bool): bool {.importcpp: "#.open_write(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc openWrite*(this: BamFile, `out`: iostream | ostream, bamFilename: string): bool {.importcpp: "#.open_write(#, nimStringToStdString(#))", header: stringConversionCode.}

proc openWrite*(this: BamFile, `out`: iostream | ostream): bool {.importcpp: "#.open_write(#)".}

proc writeObject*(this: BamFile, `object`: TypedWritable): bool {.importcpp: "#.write_object(#)".}

proc isValidRead*(this: BamFile): bool {.importcpp: "#.is_valid_read()".}

proc isValidWrite*(this: BamFile): bool {.importcpp: "#.is_valid_write()".}

proc getFileMajorVer*(this: BamFile | BamReader | BamWriter): int {.importcpp: "#.get_file_major_ver()".}

proc getFileMinorVer*(this: BamFile | BamReader | BamWriter): int {.importcpp: "#.get_file_minor_ver()".}

proc getFileEndian*(this: BamFile | BamReader | BamWriter): BamEnums_BamEndian {.importcpp: "#.get_file_endian()".}

proc getFileStdfloatDouble*(this: BamFile | BamReader | BamWriter): bool {.importcpp: "#.get_file_stdfloat_double()".}

proc getCurrentMajorVer*(this: BamFile | BamReader): int {.importcpp: "#.get_current_major_ver()".}

proc getCurrentMinorVer*(this: BamFile | BamReader): int {.importcpp: "#.get_current_minor_ver()".}

proc getReader*(this: BamFile): BamReader {.importcpp: "#.get_reader()".}

proc getWriter*(this: BamFile): BamWriter {.importcpp: "#.get_writer()".}

proc getUpVector*(this: BillboardEffect | Lens): LVector3 {.importcpp: "#->get_up_vector()".}

proc getEyeRelative*(this: BillboardEffect): bool {.importcpp: "#->get_eye_relative()".}

proc getAxialRotate*(this: BillboardEffect): bool {.importcpp: "#->get_axial_rotate()".}

proc getFixedDepth*(this: BillboardEffect): bool {.importcpp: "#->get_fixed_depth()".}

proc getOffset*(this: BillboardEffect | CollisionHandlerFloor | CollisionHandlerGravity | PolylightNode): float {.importcpp: "#->get_offset()".}

proc getLookAt*(this: BillboardEffect): NodePath {.importcpp: "#->get_look_at()".}

proc getLookAtPoint*(this: BillboardEffect): LPoint3 {.importcpp: "#->get_look_at_point()".}

proc copyLens*(this: LensNode, lens: Lens) {.importcpp: "#->copy_lens(#)".}

proc copyLens*(this: LensNode, index: int, lens: Lens) {.importcpp: "#->copy_lens(#, #)".}

proc setLens*(this: LensNode | SceneSetup, lens: Lens) {.importcpp: "#->set_lens(#)".}

proc setLens*(this: LensNode, index: int, lens: Lens) {.importcpp: "#->set_lens(#, #)".}

proc getLens*(this: LensNode, index: int): Lens {.importcpp: "#->get_lens(#)".}

proc getLens*(this: LensNode): Lens {.importcpp: "#->get_lens()".}

proc setLensActive*(this: LensNode, index: int, active: bool): bool {.importcpp: "#->set_lens_active(#, #)".}

proc getLensActive*(this: LensNode, index: int): bool {.importcpp: "#->get_lens_active(#)".}

proc activateLens*(this: LensNode, index: int): bool {.importcpp: "#->activate_lens(#)".}

proc deactivateLens*(this: LensNode, index: int): bool {.importcpp: "#->deactivate_lens(#)".}

proc isInView*(this: LensNode, pos: LPoint3): bool {.importcpp: "#->is_in_view((LPoint3 const &)(#))".}

proc isInView*(this: LensNode, index: int, pos: LPoint3): bool {.importcpp: "#->is_in_view(#, (LPoint3 const &)(#))".}

proc showFrustum*(this: LensNode) {.importcpp: "#->show_frustum()".}

proc hideFrustum*(this: LensNode) {.importcpp: "#->hide_frustum()".}

proc getNodePath*(this: WeakNodePath): NodePath {.importcpp: "#.get_node_path()".}

proc setActive*(this: Camera | DisplayRegion | GraphicsOutput | GraphicsStateGuardian | MouseWatcherRegion | PGItem | PGSliderBar, active: bool) {.importcpp: "#->set_active(#)".}

proc isActive*(this: Camera | DisplayRegion | GraphicsOutput | GraphicsStateGuardian): bool {.importcpp: "#->is_active()".}

proc setScene*(this: Camera, scene: NodePath) {.importcpp: "#->set_scene(#)".}

proc getScene*(this: Camera): NodePath {.importcpp: "#->get_scene()".}

proc getNumDisplayRegions*(this: Camera | GraphicsOutput): int {.importcpp: "#->get_num_display_regions()".}

proc getDisplayRegion*(this: Camera | GraphicsOutput, n: int): DisplayRegion {.importcpp: "#->get_display_region(#)".}

proc setCameraMask*(this: Camera, mask: DrawMask) {.importcpp: "#->set_camera_mask(#)".}

proc getCameraMask*(this: Camera | CullTraverser): DrawMask {.importcpp: "#->get_camera_mask()".}

proc setCullCenter*(this: Camera, cullCenter: NodePath) {.importcpp: "#->set_cull_center(#)".}

proc getCullCenter*(this: Camera | SceneSetup): NodePath {.importcpp: "#->get_cull_center()".}

proc setCullBounds*(this: Camera, cullBounds: BoundingVolume) {.importcpp: "#->set_cull_bounds(#)".}

proc getCullBounds*(this: Camera | SceneSetup): BoundingVolume {.importcpp: "#->get_cull_bounds()".}

proc setLodCenter*(this: Camera, lodCenter: NodePath) {.importcpp: "#->set_lod_center(#)".}

proc getLodCenter*(this: Camera): NodePath {.importcpp: "#->get_lod_center()".}

proc setInitialState*(this: Camera, state: RenderState) {.importcpp: "#->set_initial_state(#)".}

proc getInitialState*(this: Camera | CullTraverser | SceneSetup): RenderState {.importcpp: "deconstify(#->get_initial_state())", header: deconstifyCode.}

proc setTagStateKey*(this: Camera, tagStateKey: string) {.importcpp: "#->set_tag_state_key(nimStringToStdString(#))", header: stringConversionCode.}

proc getTagStateKey*(this: Camera | CullTraverser): string {.importcpp: "nimStringFromStdString(#->get_tag_state_key())", header: stringConversionCode.}

proc setTagState*(this: Camera, tagState: string, state: RenderState) {.importcpp: "#->set_tag_state(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clearTagState*(this: Camera, tagState: string) {.importcpp: "#->clear_tag_state(nimStringToStdString(#))", header: stringConversionCode.}

proc clearTagStates*(this: Camera) {.importcpp: "#->clear_tag_states()".}

proc hasTagState*(this: Camera, tagState: string): bool {.importcpp: "#->has_tag_state(nimStringToStdString(#))", header: stringConversionCode.}

proc getTagState*(this: Camera, tagState: string): RenderState {.importcpp: "deconstify(#->get_tag_state(nimStringToStdString(#)))", header: deconstifyCode.}

proc setAuxSceneData*(this: Camera, nodePath: NodePath, data: AuxSceneData) {.importcpp: "#->set_aux_scene_data(#, #)".}

proc clearAuxSceneData*(this: Camera, nodePath: NodePath): bool {.importcpp: "#->clear_aux_scene_data(#)".}

proc getAuxSceneData*(this: Camera, nodePath: NodePath): AuxSceneData {.importcpp: "#->get_aux_scene_data(#)".}

proc listAuxSceneData*(this: Camera, `out`: iostream | ostream) {.importcpp: "#->list_aux_scene_data(#)".}

proc setPlane*(this: CollisionPlane | PlaneNode, plane: LPlane) {.importcpp: "#->set_plane(#)".}

proc getPlane*(this: BoundingPlane | CollisionPlane | PlaneNode): LPlane {.importcpp: "#->get_plane()".}

proc setVizScale*(this: PlaneNode, vizScale: float) {.importcpp: "#->set_viz_scale(#)".}

proc getVizScale*(this: PlaneNode): float {.importcpp: "#->get_viz_scale()".}

proc setPriority*(this: AsyncTask | AudioSound | Light | LightLensNode | LightNode | PlaneNode | TextureStage, priority: int) {.importcpp: "#->set_priority(#)".}

proc getPriority*(this: AsyncTask | AudioSound | Light | LightLensNode | LightNode | PlaneNode | TextureStage): int {.importcpp: "#->get_priority()".}

proc setClipEffect*(this: PlaneNode, clipEffect: int) {.importcpp: "#->set_clip_effect(#)".}

proc getClipEffect*(this: PlaneNode): int {.importcpp: "#->get_clip_effect()".}

proc getOperation*(this: ClipPlaneAttrib): ClipPlaneAttrib_Operation {.importcpp: "#->get_operation()".}

proc getNumPlanes*(this: BoundingBox | BoundingHexahedron | ClipPlaneAttrib | CollisionBox): int {.importcpp: "#->get_num_planes()".}

proc getPlane*(this: ClipPlaneAttrib, n: int): PlaneNode {.importcpp: "#->get_plane(#)".}

proc hasPlane*(this: ClipPlaneAttrib, plane: PlaneNode): bool {.importcpp: "#->has_plane(#)".}

proc addPlane*(this: ClipPlaneAttrib, plane: PlaneNode): RenderAttrib {.importcpp: "deconstify(#->add_plane(#))", header: deconstifyCode.}

proc removePlane*(this: ClipPlaneAttrib, plane: PlaneNode): RenderAttrib {.importcpp: "deconstify(#->remove_plane(#))", header: deconstifyCode.}

proc getNumOnPlanes*(this: ClipPlaneAttrib): int {.importcpp: "#->get_num_on_planes()".}

proc getOnPlane*(this: ClipPlaneAttrib, n: int): NodePath {.importcpp: "#->get_on_plane(#)".}

proc hasOnPlane*(this: ClipPlaneAttrib, plane: NodePath): bool {.importcpp: "#->has_on_plane(#)".}

proc getNumOffPlanes*(this: ClipPlaneAttrib): int {.importcpp: "#->get_num_off_planes()".}

proc getOffPlane*(this: ClipPlaneAttrib, n: int): NodePath {.importcpp: "#->get_off_plane(#)".}

proc hasOffPlane*(this: ClipPlaneAttrib, plane: NodePath): bool {.importcpp: "#->has_off_plane(#)".}

proc hasAllOff*(this: ClipPlaneAttrib | LightAttrib | TextureAttrib): bool {.importcpp: "#->has_all_off()".}

proc addOnPlane*(this: ClipPlaneAttrib, plane: NodePath): RenderAttrib {.importcpp: "deconstify(#->add_on_plane(#))", header: deconstifyCode.}

proc removeOnPlane*(this: ClipPlaneAttrib, plane: NodePath): RenderAttrib {.importcpp: "deconstify(#->remove_on_plane(#))", header: deconstifyCode.}

proc addOffPlane*(this: ClipPlaneAttrib, plane: NodePath): RenderAttrib {.importcpp: "deconstify(#->add_off_plane(#))", header: deconstifyCode.}

proc removeOffPlane*(this: ClipPlaneAttrib, plane: NodePath): RenderAttrib {.importcpp: "deconstify(#->remove_off_plane(#))", header: deconstifyCode.}

proc filterToMax*(this: ClipPlaneAttrib, maxClipPlanes: int): ClipPlaneAttrib {.importcpp: "deconstify(#->filter_to_max(#))", header: deconstifyCode.}

proc getColorType*(this: ColorAttrib): ColorAttrib_Type {.importcpp: "#->get_color_type()".}

proc getColor*(this: ColorAttrib | ColorBlendAttrib | Fog | Light | LightLensNode | LightNode | PolylightNode | TextureStage): LColor {.importcpp: "#->get_color()".}

proc getMode*(this: ColorBlendAttrib): ColorBlendAttrib_Mode {.importcpp: "#->get_mode()".}

proc getOperandA*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_operand_a()".}

proc getOperandB*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_operand_b()".}

proc getAlphaMode*(this: ColorBlendAttrib): ColorBlendAttrib_Mode {.importcpp: "#->get_alpha_mode()".}

proc getAlphaOperandA*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_alpha_operand_a()".}

proc getAlphaOperandB*(this: ColorBlendAttrib): ColorBlendAttrib_Operand {.importcpp: "#->get_alpha_operand_b()".}

proc involvesConstantColor*(this: ColorBlendAttrib): bool {.importcpp: "#->involves_constant_color()".}

proc involvesColorScale*(this: ColorBlendAttrib | TextureStage): bool {.importcpp: "#->involves_color_scale()".}

proc hasRgbScale*(this: ColorScaleAttrib): bool {.importcpp: "#->has_rgb_scale()".}

proc hasAlphaScale*(this: ColorScaleAttrib): bool {.importcpp: "#->has_alpha_scale()".}

proc getScale*(this: ColorScaleAttrib): LVecBase4 {.importcpp: "#->get_scale()".}

proc setScale*(this: ColorScaleAttrib, scale: LVecBase4): RenderAttrib {.importcpp: "deconstify(#->set_scale((LVecBase4 const &)(#)))", header: deconstifyCode.}

proc getChannels*(this: ColorWriteAttrib | MicrophoneAudio): int {.importcpp: "#->get_channels()".}

proc getReference*(this: CompassEffect): NodePath {.importcpp: "#->get_reference()".}

proc getProperties*(this: CompassEffect): int {.importcpp: "#->get_properties()".}

proc setPreserved*(this: GeomNode, value: bool) {.importcpp: "#->set_preserved(#)".}

proc getPreserved*(this: GeomNode): bool {.importcpp: "#->get_preserved()".}

proc getNumGeoms*(this: GeomNode): int {.importcpp: "#->get_num_geoms()".}

proc getGeom*(this: GeomNode, n: int): Geom {.importcpp: "deconstify(#->get_geom(#))", header: deconstifyCode.}

proc modifyGeom*(this: GeomNode, n: int): Geom {.importcpp: "#->modify_geom(#)".}

proc getGeomState*(this: GeomNode, n: int): RenderState {.importcpp: "deconstify(#->get_geom_state(#))", header: deconstifyCode.}

proc setGeomState*(this: GeomNode, n: int, state: RenderState) {.importcpp: "#->set_geom_state(#, #)".}

proc addGeom*(this: GeomNode, geom: Geom, state: RenderState) {.importcpp: "#->add_geom(#, #)".}

proc addGeom*(this: GeomNode, geom: Geom) {.importcpp: "#->add_geom(#)".}

proc addGeomsFrom*(this: GeomNode, other: GeomNode) {.importcpp: "#->add_geoms_from(#)".}

proc setGeom*(this: GeomNode, n: int, geom: Geom) {.importcpp: "#->set_geom(#, #)".}

proc removeGeom*(this: GeomNode, n: int) {.importcpp: "#->remove_geom(#)".}

proc removeAllGeoms*(this: GeomNode) {.importcpp: "#->remove_all_geoms()".}

proc checkValid*(this: Geom | GeomNode): bool {.importcpp: "#->check_valid()".}

proc decompose*(this: GeomNode) {.importcpp: "#->decompose()".}

proc unify*(this: GeomNode, maxIndices: int, preserveOrder: bool) {.importcpp: "#->unify(#, #)".}

proc writeGeoms*(this: GeomNode, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#->write_geoms(#, #)".}

proc writeVerbose*(this: GeomNode, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#->write_verbose(#, #)".}

proc getBinName*(this: CullBinAttrib): string {.importcpp: "nimStringFromStdString(#->get_bin_name())", header: stringConversionCode.}

proc addBin*(this: CullBinManager, name: string, `type`: CullBinEnums_BinType, sort: int): int {.importcpp: "#.add_bin(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc removeBin*(this: CullBinManager, binIndex: int) {.importcpp: "#.remove_bin(#)".}

proc getNumBins*(this: CullBinManager): int {.importcpp: "#.get_num_bins()".}

proc getBin*(this: CullBinManager, n: int): int {.importcpp: "#.get_bin(#)".}

proc findBin*(this: CullBinManager, name: string): int {.importcpp: "#.find_bin(nimStringToStdString(#))", header: stringConversionCode.}

proc getBinName*(this: CullBinManager, binIndex: int): string {.importcpp: "nimStringFromStdString(#.get_bin_name(#))", header: stringConversionCode.}

proc getBinType*(this: CullBinManager, binIndex: int): CullBinEnums_BinType {.importcpp: "#.get_bin_type(#)".}

proc getBinType*(this: CullBinManager, name: string): CullBinEnums_BinType {.importcpp: "#.get_bin_type(nimStringToStdString(#))", header: stringConversionCode.}

proc setBinType*(this: CullBinManager, binIndex: int, `type`: CullBinEnums_BinType) {.importcpp: "#.set_bin_type(#, #)".}

proc setBinType*(this: CullBinManager, name: string, `type`: CullBinEnums_BinType) {.importcpp: "#.set_bin_type(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getBinSort*(this: CullBinManager, binIndex: int): int {.importcpp: "#.get_bin_sort(#)".}

proc getBinSort*(this: CullBinManager, name: string): int {.importcpp: "#.get_bin_sort(nimStringToStdString(#))", header: stringConversionCode.}

proc setBinSort*(this: CullBinManager, binIndex: int, sort: int) {.importcpp: "#.set_bin_sort(#, #)".}

proc setBinSort*(this: CullBinManager, name: string, sort: int) {.importcpp: "#.set_bin_sort(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getBinActive*(this: CullBinManager, binIndex: int): bool {.importcpp: "#.get_bin_active(#)".}

proc getBinActive*(this: CullBinManager, name: string): bool {.importcpp: "#.get_bin_active(nimStringToStdString(#))", header: stringConversionCode.}

proc setBinActive*(this: CullBinManager, binIndex: int, active: bool) {.importcpp: "#.set_bin_active(#, #)".}

proc setBinActive*(this: CullBinManager, name: string, active: bool) {.importcpp: "#.set_bin_active(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getBinFlashActive*(this: CullBinManager, binIndex: int): bool {.importcpp: "#.get_bin_flash_active(#)".}

proc getBinFlashColor*(this: CullBinManager, binIndex: int): LColor {.importcpp: "#.get_bin_flash_color(#)".}

proc setBinFlashActive*(this: CullBinManager, binIndex: int, active: bool) {.importcpp: "#.set_bin_flash_active(#, #)".}

proc setBinFlashColor*(this: CullBinManager, binIndex: int, color: LColor) {.importcpp: "#.set_bin_flash_color(#, #)".}

proc getActualMode*(this: CullFaceAttrib): CullFaceAttrib_Mode {.importcpp: "#->get_actual_mode()".}

proc getReverse*(this: CullFaceAttrib): bool {.importcpp: "#->get_reverse()".}

proc getEffectiveMode*(this: CullFaceAttrib): CullFaceAttrib_Mode {.importcpp: "#->get_effective_mode()".}

proc getModelviewTransform*(this: CullTraverserData, trav: CullTraverser): TransformState {.importcpp: "#.get_modelview_transform(#)".}

proc getInternalTransform*(this: CullTraverserData, trav: CullTraverser): TransformState {.importcpp: "#.get_internal_transform(#)".}

proc getNetTransform*(this: CullTraverserData, trav: CullTraverser): TransformState {.importcpp: "#.get_net_transform(#)".}

proc isInView*(this: CullTraverserData, cameraMask: DrawMask): bool {.importcpp: "#.is_in_view(#)".}

proc isThisNodeHidden*(this: CullTraverserData, cameraMask: DrawMask): bool {.importcpp: "#.is_this_node_hidden(#)".}

proc applyTransformAndState*(this: CullTraverserData, trav: CullTraverser) {.importcpp: "#.apply_transform_and_state(#)".}

proc applyTransform*(this: CullTraverserData, nodeTransform: TransformState) {.importcpp: "#.apply_transform(#)".}

proc setDisplayRegion*(this: SceneSetup, displayRegion: DisplayRegion) {.importcpp: "#->set_display_region(#)".}

proc getDisplayRegion*(this: FrameRateMeter | MouseWatcher | SceneGraphAnalyzerMeter | SceneSetup): DisplayRegion {.importcpp: "#->get_display_region()".}

proc setViewportSize*(this: SceneSetup, width: int, height: int) {.importcpp: "#->set_viewport_size(#, #)".}

proc getViewportWidth*(this: SceneSetup): int {.importcpp: "#->get_viewport_width()".}

proc getViewportHeight*(this: SceneSetup): int {.importcpp: "#->get_viewport_height()".}

proc setSceneRoot*(this: SceneSetup, sceneRoot: NodePath) {.importcpp: "#->set_scene_root(#)".}

proc getSceneRoot*(this: SceneSetup): NodePath {.importcpp: "#->get_scene_root()".}

proc setCameraPath*(this: SceneSetup, cameraPath: NodePath) {.importcpp: "#->set_camera_path(#)".}

proc getCameraPath*(this: SceneSetup): NodePath {.importcpp: "#->get_camera_path()".}

proc setCameraNode*(this: SceneSetup, cameraNode: Camera) {.importcpp: "#->set_camera_node(#)".}

proc getCameraNode*(this: SceneSetup): Camera {.importcpp: "#->get_camera_node()".}

proc getLens*(this: SceneSetup): Lens {.importcpp: "deconstify(#->get_lens())", header: deconstifyCode.}

proc setInverted*(this: GraphicsOutput | SceneSetup, inverted: bool) {.importcpp: "#->set_inverted(#)".}

proc getInverted*(this: GraphicsOutput | SceneSetup): bool {.importcpp: "#->get_inverted()".}

proc setInitialState*(this: SceneSetup, initialState: RenderState) {.importcpp: "#->set_initial_state(#)".}

proc setCameraTransform*(this: SceneSetup, cameraTransform: TransformState) {.importcpp: "#->set_camera_transform(#)".}

proc getCameraTransform*(this: CullTraverser | SceneSetup): TransformState {.importcpp: "deconstify(#->get_camera_transform())", header: deconstifyCode.}

proc setWorldTransform*(this: SceneSetup, worldTransform: TransformState) {.importcpp: "#->set_world_transform(#)".}

proc getWorldTransform*(this: CullTraverser | SceneSetup): TransformState {.importcpp: "deconstify(#->get_world_transform())", header: deconstifyCode.}

proc setCsTransform*(this: SceneSetup, csTransform: TransformState) {.importcpp: "#->set_cs_transform(#)".}

proc getCsTransform*(this: SceneSetup): TransformState {.importcpp: "deconstify(#->get_cs_transform())", header: deconstifyCode.}

proc setCsWorldTransform*(this: SceneSetup, csWorldTransform: TransformState) {.importcpp: "#->set_cs_world_transform(#)".}

proc getCsWorldTransform*(this: SceneSetup): TransformState {.importcpp: "deconstify(#->get_cs_world_transform())", header: deconstifyCode.}

proc getMode*(this: Fog): Fog_Mode {.importcpp: "#->get_mode()".}

proc setMode*(this: Fog, mode: Fog_Mode) {.importcpp: "#->set_mode(#)".}

proc setColor*(this: CardMaker | Fog | Light | LightLensNode | LightNode | MouseWatcher | MouseWatcherBase | PolylightNode | TextureStage, color: LColor) {.importcpp: "#->set_color(#)".}

proc setColor*(this: Fog | PolylightNode, r: float, g: float, b: float) {.importcpp: "#->set_color(#, #, #)".}

proc setLinearRange*(this: Fog, onset: float, opaque: float) {.importcpp: "#->set_linear_range(#, #)".}

proc getLinearOnsetPoint*(this: Fog): LPoint3 {.importcpp: "#->get_linear_onset_point()".}

proc setLinearOnsetPoint*(this: Fog, linearOnsetPoint: LPoint3) {.importcpp: "#->set_linear_onset_point((LPoint3 const &)(#))".}

proc setLinearOnsetPoint*(this: Fog, x: float, y: float, z: float) {.importcpp: "#->set_linear_onset_point(#, #, #)".}

proc getLinearOpaquePoint*(this: Fog): LPoint3 {.importcpp: "#->get_linear_opaque_point()".}

proc setLinearOpaquePoint*(this: Fog, linearOpaquePoint: LPoint3) {.importcpp: "#->set_linear_opaque_point((LPoint3 const &)(#))".}

proc setLinearOpaquePoint*(this: Fog, x: float, y: float, z: float) {.importcpp: "#->set_linear_opaque_point(#, #, #)".}

proc setLinearFallback*(this: Fog, angle: float, onset: float, opaque: float) {.importcpp: "#->set_linear_fallback(#, #, #)".}

proc getExpDensity*(this: Fog): float {.importcpp: "#->get_exp_density()".}

proc setExpDensity*(this: Fog, expDensity: float) {.importcpp: "#->set_exp_density(#)".}

proc getFog*(this: FogAttrib): Fog {.importcpp: "#->get_fog()".}

proc getGsg*(this: CullTraverser): GraphicsStateGuardianBase {.importcpp: "#->get_gsg()".}

proc getCurrentThread*(this: CullTraverser): Thread {.importcpp: "#->get_current_thread()".}

proc setScene*(this: CullTraverser | PipeOcclusionCullTraverser, sceneSetup: SceneSetup, gsg: GraphicsStateGuardianBase, drIncompleteRender: bool) {.importcpp: "#->set_scene(#, #, #)".}

proc getScene*(this: CullTraverser | GraphicsStateGuardian): SceneSetup {.importcpp: "#->get_scene()".}

proc hasTagStateKey*(this: CullTraverser): bool {.importcpp: "#->has_tag_state_key()".}

proc setCameraMask*(this: CullTraverser, cameraMask: DrawMask) {.importcpp: "#->set_camera_mask(#)".}

proc getDepthOffsetDecals*(this: CullTraverser): bool {.importcpp: "#->get_depth_offset_decals()".}

proc setViewFrustum*(this: CullTraverser, viewFrustum: GeometricBoundingVolume) {.importcpp: "#->set_view_frustum(#)".}

proc getViewFrustum*(this: CullTraverser): GeometricBoundingVolume {.importcpp: "#->get_view_frustum()".}

proc getEffectiveIncompleteRender*(this: CullTraverser | GraphicsStateGuardianBase): bool {.importcpp: "#->get_effective_incomplete_render()".}

proc traverse*(this: CullTraverser, data: CullTraverserData) {.importcpp: "#->traverse(#)".}

proc traverse*(this: CullTraverser, root: NodePath) {.importcpp: "#->traverse(#)".}

proc traverseBelow*(this: CullTraverser, data: CullTraverserData) {.importcpp: "#->traverse_below(#)".}

proc endTraverse*(this: CullTraverser | PipeOcclusionCullTraverser) {.importcpp: "#->end_traverse()".}

proc drawBoundingVolume*(this: CullTraverser, vol: BoundingVolume, internalTransform: TransformState) {.importcpp: "#->draw_bounding_volume(#, #)".}

proc getGsg*(this: GeomDrawCallbackData | SceneGraphReducer): GraphicsStateGuardianBase {.importcpp: "#.get_gsg()".}

proc getForce*(this: GeomDrawCallbackData | GeomVertexReader | GeomVertexRewriter): bool {.importcpp: "#.get_force()".}

proc setLostState*(this: GeomDrawCallbackData, lostState: bool) {.importcpp: "#.set_lost_state(#)".}

proc getLostState*(this: GeomDrawCallbackData): bool {.importcpp: "#.get_lost_state()".}

proc getMode*(this: RescaleNormalAttrib): RescaleNormalAttrib_Mode {.importcpp: "#->get_mode()".}

proc makeNext*(this: CullResult): CullResult {.importcpp: "#->make_next()".}

proc finishCull*(this: CullResult, sceneSetup: SceneSetup, currentThread: Thread) {.importcpp: "#->finish_cull(#, #)".}

proc draw*(this: CullResult, currentThread: Thread) {.importcpp: "#->draw(#)".}

proc makeResultGraph*(this: CullResult): PandaNode {.importcpp: "#->make_result_graph()".}

proc getOffset*(this: DepthOffsetAttrib): int {.importcpp: "#->get_offset()".}

proc getMinValue*(this: DepthOffsetAttrib | PGSliderBar): float {.importcpp: "#->get_min_value()".}

proc getMaxValue*(this: DepthOffsetAttrib | PGSliderBar): float {.importcpp: "#->get_max_value()".}

proc getMode*(this: DepthWriteAttrib): DepthWriteAttrib_Mode {.importcpp: "#->get_mode()".}

proc asNode*(this: Light | LightLensNode | LightNode): PandaNode {.importcpp: "#->as_node()".}

proc hasColorTemperature*(this: Light | LightLensNode | LightNode): bool {.importcpp: "#->has_color_temperature()".}

proc getColorTemperature*(this: Light | LightLensNode | LightNode): float {.importcpp: "#->get_color_temperature()".}

proc setColorTemperature*(this: Light | LightLensNode | LightNode, temperature: float) {.importcpp: "#->set_color_temperature(#)".}

proc getExponent*(this: Light | LightLensNode | LightNode): float {.importcpp: "#->get_exponent()".}

proc getSpecularColor*(this: Light | LightLensNode | LightNode): LColor {.importcpp: "#->get_specular_color()".}

proc getAttenuation*(this: Light | LightLensNode | LightNode): LVecBase3 {.importcpp: "#->get_attenuation()".}

proc getClassPriority*(this: Light | LightLensNode | LightNode): int {.importcpp: "#->get_class_priority()".}

proc getOperation*(this: LightAttrib): LightAttrib_Operation {.importcpp: "#->get_operation()".}

proc getNumLights*(this: LightAttrib): int {.importcpp: "#->get_num_lights()".}

proc getLight*(this: LightAttrib, n: int): Light {.importcpp: "#->get_light(#)".}

proc hasLight*(this: LightAttrib, light: LightLensNode | LightNode | Light): bool {.importcpp: "#->has_light(#)".}

proc addLight*(this: LightAttrib, light: LightLensNode | LightNode | Light): RenderAttrib {.importcpp: "deconstify(#->add_light(#))", header: deconstifyCode.}

proc removeLight*(this: LightAttrib, light: LightLensNode | LightNode | Light): RenderAttrib {.importcpp: "deconstify(#->remove_light(#))", header: deconstifyCode.}

proc getNumOnLights*(this: LightAttrib): int {.importcpp: "#->get_num_on_lights()".}

proc getNumNonAmbientLights*(this: LightAttrib): int {.importcpp: "#->get_num_non_ambient_lights()".}

proc getOnLight*(this: LightAttrib, n: int): NodePath {.importcpp: "#->get_on_light(#)".}

proc hasOnLight*(this: LightAttrib, light: NodePath): bool {.importcpp: "#->has_on_light(#)".}

proc hasAnyOnLight*(this: LightAttrib): bool {.importcpp: "#->has_any_on_light()".}

proc getNumOffLights*(this: LightAttrib): int {.importcpp: "#->get_num_off_lights()".}

proc getOffLight*(this: LightAttrib, n: int): NodePath {.importcpp: "#->get_off_light(#)".}

proc hasOffLight*(this: LightAttrib, light: NodePath): bool {.importcpp: "#->has_off_light(#)".}

proc addOnLight*(this: LightAttrib, light: NodePath): RenderAttrib {.importcpp: "deconstify(#->add_on_light(#))", header: deconstifyCode.}

proc removeOnLight*(this: LightAttrib, light: NodePath): RenderAttrib {.importcpp: "deconstify(#->remove_on_light(#))", header: deconstifyCode.}

proc replaceOnLight*(this: LightAttrib, source: NodePath, dest: NodePath): RenderAttrib {.importcpp: "deconstify(#->replace_on_light(#, #))", header: deconstifyCode.}

proc addOffLight*(this: LightAttrib, light: NodePath): RenderAttrib {.importcpp: "deconstify(#->add_off_light(#))", header: deconstifyCode.}

proc removeOffLight*(this: LightAttrib, light: NodePath): RenderAttrib {.importcpp: "deconstify(#->remove_off_light(#))", header: deconstifyCode.}

proc replaceOffLight*(this: LightAttrib, source: NodePath, dest: NodePath): RenderAttrib {.importcpp: "deconstify(#->replace_off_light(#, #))", header: deconstifyCode.}

proc getMostImportantLight*(this: LightAttrib): NodePath {.importcpp: "#->get_most_important_light()".}

proc getAmbientContribution*(this: LightAttrib): LColor {.importcpp: "#->get_ambient_contribution()".}

proc getMode*(this: LightRampAttrib): LightRampAttrib_LightRampMode {.importcpp: "#->get_mode()".}

proc getLevel*(this: LightRampAttrib, n: int): float {.importcpp: "#->get_level(#)".}

proc getThreshold*(this: LightRampAttrib, n: int): float {.importcpp: "#->get_threshold(#)".}

proc upcastToTypedReferenceCount*(this: AnimControl | AsyncTaskChain | AsyncTaskManager | DisplayRegion | Loader | TextFont | Thread): TypedReferenceCount {.importcpp: "(PT(TypedReferenceCount)(#))".}

proc upcastToNamable*(this: Loader): Namable {.importcpp: "((Namable *)(Loader *)(#))".}

proc setTaskManager*(this: Loader, taskManager: AsyncTaskManager) {.importcpp: "#->set_task_manager(#)".}

proc getTaskManager*(this: Loader): AsyncTaskManager {.importcpp: "#->get_task_manager()".}

proc setTaskChain*(this: Loader, taskChain: string) {.importcpp: "#->set_task_chain(nimStringToStdString(#))", header: stringConversionCode.}

proc getTaskChain*(this: AsyncTask | Loader): string {.importcpp: "nimStringFromStdString(#->get_task_chain())", header: stringConversionCode.}

proc stopThreads*(this: AsyncTaskChain | AsyncTaskManager | Loader) {.importcpp: "#->stop_threads()".}

proc remove*(this: AsyncTaskManager | Loader, task: AsyncTask): bool {.importcpp: "#->remove(#)".}

proc loadSync*(this: Loader, filename: Filename, options: LoaderOptions): PandaNode {.importcpp: "#->load_sync(#, #)".}

proc loadSync*(this: Loader, filename: Filename): PandaNode {.importcpp: "#->load_sync(#)".}

proc makeAsyncRequest*(this: Loader, filename: Filename, options: LoaderOptions): AsyncTask {.importcpp: "#->make_async_request(#, #)".}

proc makeAsyncRequest*(this: Loader, filename: Filename): AsyncTask {.importcpp: "#->make_async_request(#)".}

proc loadAsync*(this: Loader, request: AsyncTask) {.importcpp: "#->load_async(#)".}

proc saveSync*(this: Loader, filename: Filename, options: LoaderOptions, node: PandaNode): bool {.importcpp: "#->save_sync(#, #, #)".}

proc makeAsyncSaveRequest*(this: Loader, filename: Filename, options: LoaderOptions, node: PandaNode): AsyncTask {.importcpp: "#->make_async_save_request(#, #, #)".}

proc saveAsync*(this: Loader, request: AsyncTask) {.importcpp: "#->save_async(#)".}

proc loadBamStream*(this: Loader, `in`: istream): PandaNode {.importcpp: "#->load_bam_stream(#)".}

proc getAdditionalExtensions*(this: LoaderFileType): string {.importcpp: "nimStringFromStdString(#.get_additional_extensions())", header: stringConversionCode.}

proc supportsCompressed*(this: LoaderFileType): bool {.importcpp: "#.supports_compressed()".}

proc getAllowDiskCache*(this: LoaderFileType, options: LoaderOptions): bool {.importcpp: "#.get_allow_disk_cache(#)".}

proc getAllowRamCache*(this: LoaderFileType, options: LoaderOptions): bool {.importcpp: "#.get_allow_ram_cache(#)".}

proc supportsLoad*(this: LoaderFileType): bool {.importcpp: "#.supports_load()".}

proc supportsSave*(this: LoaderFileType): bool {.importcpp: "#.supports_save()".}

proc getNumTypes*(this: LoaderFileTypeRegistry | PNMFileTypeRegistry): int {.importcpp: "#.get_num_types()".}

proc getType*(this: LoaderFileTypeRegistry, n: int): LoaderFileType {.importcpp: "#.get_type(#)".}

proc getTypeFromExtension*(this: LoaderFileTypeRegistry, extension: string): LoaderFileType {.importcpp: "#.get_type_from_extension(nimStringToStdString(#))", header: stringConversionCode.}

proc getMaterial*(this: MaterialAttrib): Material {.importcpp: "#->get_material()".}

proc getOrig*(this: ModelFlattenRequest): PandaNode {.importcpp: "#->get_orig()".}

proc isReady*(this: AnimateVerticesRequest | AudioLoadRequest | ModelFlattenRequest | ModelLoadRequest | ModelSaveRequest | TextureReloadRequest): bool {.importcpp: "#->is_ready()".}

proc getModel*(this: ModelFlattenRequest | ModelLoadRequest): PandaNode {.importcpp: "#->get_model()".}

proc getOptions*(this: ModelLoadRequest | ModelSaveRequest): LoaderOptions {.importcpp: "#->get_options()".}

proc getLoader*(this: GraphicsStateGuardian | ModelLoadRequest | ModelSaveRequest): Loader {.importcpp: "#->get_loader()".}

proc setPreserveTransform*(this: ModelNode, preserveTransform: ModelNode_PreserveTransform) {.importcpp: "#->set_preserve_transform(#)".}

proc getPreserveTransform*(this: ModelNode): ModelNode_PreserveTransform {.importcpp: "#->get_preserve_transform()".}

proc setPreserveAttributes*(this: ModelNode, attribMask: int) {.importcpp: "#->set_preserve_attributes(#)".}

proc getPreserveAttributes*(this: ModelNode): int {.importcpp: "#->get_preserve_attributes()".}

proc setTransformLimit*(this: ModelNode, limit: float) {.importcpp: "#->set_transform_limit(#)".}

proc getModelRefCount*(this: ModelRoot): int {.importcpp: "#->get_model_ref_count()".}

proc getFullpath*(this: ModelRoot | Shader | Texture): Filename {.importcpp: "#->get_fullpath()".}

proc setFullpath*(this: ModelRoot | Texture, fullpath: Filename) {.importcpp: "#->set_fullpath(#)".}

proc getNode*(this: ModelSaveRequest | SceneGraphAnalyzerMeter | Transform2SG): PandaNode {.importcpp: "#->get_node()".}

proc getSuccess*(this: ModelSaveRequest): bool {.importcpp: "#->get_success()".}

proc getTexture*(this: GraphicsOutput | GraphicsOutputBase | ParamTextureImage | ParamTextureSampler | PipeOcclusionCullTraverser | TextureAttrib | TextureReloadRequest): Texture {.importcpp: "#->get_texture()".}

proc getNumOnStages*(this: TextureAttrib): int {.importcpp: "#->get_num_on_stages()".}

proc getOnStage*(this: TextureAttrib, n: int): TextureStage {.importcpp: "#->get_on_stage(#)".}

proc getNumOnFfStages*(this: TextureAttrib): int {.importcpp: "#->get_num_on_ff_stages()".}

proc getOnFfStage*(this: TextureAttrib, n: int): TextureStage {.importcpp: "#->get_on_ff_stage(#)".}

proc getFfTcIndex*(this: TextureAttrib, n: int): int {.importcpp: "#->get_ff_tc_index(#)".}

proc hasOnStage*(this: TextureAttrib, stage: TextureStage): bool {.importcpp: "#->has_on_stage(#)".}

proc getOnTexture*(this: TextureAttrib, stage: TextureStage): Texture {.importcpp: "#->get_on_texture(#)".}

proc getOnSampler*(this: TextureAttrib, stage: TextureStage): SamplerState {.importcpp: "#->get_on_sampler(#)".}

proc getOnStageOverride*(this: TextureAttrib, stage: TextureStage): int {.importcpp: "#->get_on_stage_override(#)".}

proc findOnStage*(this: TextureAttrib, stage: TextureStage): int {.importcpp: "#->find_on_stage(#)".}

proc getNumOffStages*(this: TextureAttrib): int {.importcpp: "#->get_num_off_stages()".}

proc getOffStage*(this: TextureAttrib, n: int): TextureStage {.importcpp: "#->get_off_stage(#)".}

proc hasOffStage*(this: TextureAttrib, stage: TextureStage): bool {.importcpp: "#->has_off_stage(#)".}

proc addOnStage*(this: TextureAttrib, stage: TextureStage, tex: Texture, sampler: SamplerState, override: int): RenderAttrib {.importcpp: "deconstify(#->add_on_stage(#, #, #, #))", header: deconstifyCode.}

proc addOnStage*(this: TextureAttrib, stage: TextureStage, tex: Texture, sampler: SamplerState): RenderAttrib {.importcpp: "deconstify(#->add_on_stage(#, #, #))", header: deconstifyCode.}

proc addOnStage*(this: TextureAttrib, stage: TextureStage, tex: Texture, override: int): RenderAttrib {.importcpp: "deconstify(#->add_on_stage(#, #, #))", header: deconstifyCode.}

proc addOnStage*(this: TextureAttrib, stage: TextureStage, tex: Texture): RenderAttrib {.importcpp: "deconstify(#->add_on_stage(#, #))", header: deconstifyCode.}

proc removeOnStage*(this: TextureAttrib, stage: TextureStage): RenderAttrib {.importcpp: "deconstify(#->remove_on_stage(#))", header: deconstifyCode.}

proc addOffStage*(this: TextureAttrib, stage: TextureStage, override: int): RenderAttrib {.importcpp: "deconstify(#->add_off_stage(#, #))", header: deconstifyCode.}

proc addOffStage*(this: TextureAttrib, stage: TextureStage): RenderAttrib {.importcpp: "deconstify(#->add_off_stage(#))", header: deconstifyCode.}

proc removeOffStage*(this: TextureAttrib, stage: TextureStage): RenderAttrib {.importcpp: "deconstify(#->remove_off_stage(#))", header: deconstifyCode.}

proc unifyTextureStages*(this: TextureAttrib, stage: TextureStage): RenderAttrib {.importcpp: "deconstify(#->unify_texture_stages(#))", header: deconstifyCode.}

proc replaceTexture*(this: TextureAttrib, tex: Texture, newTex: Texture): RenderAttrib {.importcpp: "deconstify(#->replace_texture(#, #))", header: deconstifyCode.}

proc replaceTexture*(this: TextureAttrib, tex: Texture, newTex: type(nil)): RenderAttrib {.importcpp: "deconstify(#->replace_texture(#, #))", header: deconstifyCode.}

proc addStage*(this: TexGenAttrib, stage: TextureStage, mode: RenderAttrib_TexGenMode): RenderAttrib {.importcpp: "deconstify(#->add_stage(#, #))", header: deconstifyCode.}

proc addStage*(this: TexGenAttrib, stage: TextureStage, mode: RenderAttrib_TexGenMode, constantValue: LTexCoord3): RenderAttrib {.importcpp: "deconstify(#->add_stage(#, #, #))", header: deconstifyCode.}

proc getMode*(this: TexGenAttrib, stage: TextureStage): RenderAttrib_TexGenMode {.importcpp: "#->get_mode(#)".}

proc hasGenTexcoordStage*(this: TexGenAttrib, stage: TextureStage): bool {.importcpp: "#->has_gen_texcoord_stage(#)".}

proc getConstantValue*(this: TexGenAttrib, stage: TextureStage): LTexCoord3 {.importcpp: "#->get_constant_value(#)".}

proc setDoubleSided*(this: OccluderNode, value: bool) {.importcpp: "#->set_double_sided(#)".}

proc isDoubleSided*(this: OccluderNode): bool {.importcpp: "#->is_double_sided()".}

proc setMinCoverage*(this: OccluderNode, value: float) {.importcpp: "#->set_min_coverage(#)".}

proc getMinCoverage*(this: OccluderNode): float {.importcpp: "#->get_min_coverage()".}

proc setVertices*(this: OccluderNode, v0: LPoint3, v1: LPoint3, v2: LPoint3, v3: LPoint3) {.importcpp: "#->set_vertices((LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc getNumVertices*(this: CollisionFloorMesh | GeomPrimitive | NurbsCurveEvaluator | OccluderNode | PortalNode): int {.importcpp: "#->get_num_vertices()".}

proc getVertex*(this: OccluderNode | PortalNode, n: int): LPoint3 {.importcpp: "#->get_vertex(#)".}

proc setVertex*(this: OccluderNode, n: int, v: LPoint3) {.importcpp: "#->set_vertex(#, (LPoint3 const &)(#))".}

proc getNumOnOccluders*(this: OccluderEffect): int {.importcpp: "#->get_num_on_occluders()".}

proc getOnOccluder*(this: OccluderEffect, n: int): NodePath {.importcpp: "#->get_on_occluder(#)".}

proc hasOnOccluder*(this: OccluderEffect, occluder: NodePath): bool {.importcpp: "#->has_on_occluder(#)".}

proc addOnOccluder*(this: OccluderEffect, occluder: NodePath): RenderEffect {.importcpp: "deconstify(#->add_on_occluder(#))", header: deconstifyCode.}

proc removeOnOccluder*(this: OccluderEffect, occluder: NodePath): RenderEffect {.importcpp: "deconstify(#->remove_on_occluder(#))", header: deconstifyCode.}

proc enable*(this: PolylightNode) {.importcpp: "#->enable()".}

proc disable*(this: PolylightNode) {.importcpp: "#->disable()".}

proc setPos*(this: PolylightNode, position: LPoint3) {.importcpp: "#->set_pos((LPoint3 const &)(#))".}

proc setPos*(this: DriveInterface | PolylightNode | Trackball, x: float, y: float, z: float) {.importcpp: "#->set_pos(#, #, #)".}

proc getColorScenegraph*(this: PolylightNode): LColor {.importcpp: "#->get_color_scenegraph()".}

proc setRadius*(this: PolylightNode, r: float) {.importcpp: "#->set_radius(#)".}

proc setAttenuation*(this: PolylightNode, `type`: PolylightNode_Attenuation_Type): bool {.importcpp: "#->set_attenuation(#)".}

proc getAttenuation*(this: PolylightNode): PolylightNode_Attenuation_Type {.importcpp: "#->get_attenuation()".}

proc setA0*(this: PolylightNode, a0: float) {.importcpp: "#->set_a0(#)".}

proc setA1*(this: PolylightNode, a1: float) {.importcpp: "#->set_a1(#)".}

proc setA2*(this: PolylightNode, a2: float) {.importcpp: "#->set_a2(#)".}

proc getA0*(this: PolylightNode): float {.importcpp: "#->get_a0()".}

proc getA1*(this: PolylightNode): float {.importcpp: "#->get_a1()".}

proc getA2*(this: PolylightNode): float {.importcpp: "#->get_a2()".}

proc flickerOn*(this: PolylightNode) {.importcpp: "#->flicker_on()".}

proc flickerOff*(this: PolylightNode) {.importcpp: "#->flicker_off()".}

proc isFlickering*(this: PolylightNode): bool {.importcpp: "#->is_flickering()".}

proc setFlickerType*(this: PolylightNode, `type`: PolylightNode_Flicker_Type): bool {.importcpp: "#->set_flicker_type(#)".}

proc getFlickerType*(this: PolylightNode): PolylightNode_Flicker_Type {.importcpp: "#->get_flicker_type()".}

proc setOffset*(this: CollisionHandlerFloor | CollisionHandlerGravity | PolylightNode, offset: float) {.importcpp: "#->set_offset(#)".}

proc setScale*(this: PolylightNode, scale: float) {.importcpp: "#->set_scale(#)".}

proc getScale*(this: PolylightNode): float {.importcpp: "#->get_scale()".}

proc setStepSize*(this: PolylightNode, step: float) {.importcpp: "#->set_step_size(#)".}

proc getStepSize*(this: PolylightNode): float {.importcpp: "#->get_step_size()".}

proc setFreq*(this: PolylightNode, f: float) {.importcpp: "#->set_freq(#)".}

proc getFreq*(this: PolylightNode): float {.importcpp: "#->get_freq()".}

proc `==`*(this: PolylightNode, other: PolylightNode): bool {.importcpp: "#->operator ==(#)".}

proc `!=`*(this: PolylightNode, other: PolylightNode): bool {.importcpp: "#->operator !=(#)".}

proc `<`*(this: PolylightNode, other: PolylightNode): bool {.importcpp: "#->operator <(#)".}

proc compareTo*(this: PolylightNode, other: PolylightNode): int {.importcpp: "#->compare_to(#)".}

proc isEnabled*(this: PolylightNode): bool {.importcpp: "#->is_enabled()".}

proc addLight*(this: PolylightEffect, newlight: NodePath): RenderEffect {.importcpp: "deconstify(#->add_light(#))", header: deconstifyCode.}

proc removeLight*(this: PolylightEffect, newlight: NodePath): RenderEffect {.importcpp: "deconstify(#->remove_light(#))", header: deconstifyCode.}

proc setWeight*(this: PolylightEffect, w: float): RenderEffect {.importcpp: "deconstify(#->set_weight(#))", header: deconstifyCode.}

proc setContrib*(this: PolylightEffect, c: PolylightEffect_ContribType): RenderEffect {.importcpp: "deconstify(#->set_contrib(#))", header: deconstifyCode.}

proc setEffectCenter*(this: PolylightEffect, ec: LPoint3): RenderEffect {.importcpp: "deconstify(#->set_effect_center((LPoint3 const &)(#)))", header: deconstifyCode.}

proc getWeight*(this: PolylightEffect): float {.importcpp: "#->get_weight()".}

proc getContrib*(this: PolylightEffect): PolylightEffect_ContribType {.importcpp: "#->get_contrib()".}

proc getEffectCenter*(this: PolylightEffect): LPoint3 {.importcpp: "#->get_effect_center()".}

proc hasLight*(this: PolylightEffect, light: NodePath): bool {.importcpp: "#->has_light(#)".}

proc hasShader*(this: ShaderAttrib): bool {.importcpp: "#->has_shader()".}

proc autoShader*(this: ShaderAttrib): bool {.importcpp: "#->auto_shader()".}

proc getShaderPriority*(this: ShaderAttrib): int {.importcpp: "#->get_shader_priority()".}

proc getInstanceCount*(this: ShaderAttrib): int {.importcpp: "#->get_instance_count()".}

proc autoNormalOn*(this: ShaderAttrib): bool {.importcpp: "#->auto_normal_on()".}

proc autoGlowOn*(this: ShaderAttrib): bool {.importcpp: "#->auto_glow_on()".}

proc autoGlossOn*(this: ShaderAttrib): bool {.importcpp: "#->auto_gloss_on()".}

proc autoRampOn*(this: ShaderAttrib): bool {.importcpp: "#->auto_ramp_on()".}

proc autoShadowOn*(this: ShaderAttrib): bool {.importcpp: "#->auto_shadow_on()".}

proc setShader*(this: ShaderAttrib, s: Shader, priority: int): RenderAttrib {.importcpp: "deconstify(#->set_shader(#, #))", header: deconstifyCode.}

proc setShader*(this: ShaderAttrib, s: Shader): RenderAttrib {.importcpp: "deconstify(#->set_shader(#))", header: deconstifyCode.}

proc setShaderOff*(this: ShaderAttrib, priority: int): RenderAttrib {.importcpp: "deconstify(#->set_shader_off(#))", header: deconstifyCode.}

proc setShaderOff*(this: ShaderAttrib): RenderAttrib {.importcpp: "deconstify(#->set_shader_off())", header: deconstifyCode.}

proc setShaderAuto*(this: ShaderAttrib, shaderSwitch: BitMask32, priority: int): RenderAttrib {.importcpp: "deconstify(#->set_shader_auto(#, #))", header: deconstifyCode.}

proc setShaderAuto*(this: ShaderAttrib, shaderSwitch: BitMask32): RenderAttrib {.importcpp: "deconstify(#->set_shader_auto(#))", header: deconstifyCode.}

proc setShaderAuto*(this: ShaderAttrib, priority: int): RenderAttrib {.importcpp: "deconstify(#->set_shader_auto(#))", header: deconstifyCode.}

proc setShaderAuto*(this: ShaderAttrib): RenderAttrib {.importcpp: "deconstify(#->set_shader_auto())", header: deconstifyCode.}

proc clearShader*(this: ShaderAttrib): RenderAttrib {.importcpp: "deconstify(#->clear_shader())", header: deconstifyCode.}

proc setShaderInput*(this: ShaderAttrib, input: ShaderInput): RenderAttrib {.importcpp: "deconstify(#->set_shader_input(#))", header: deconstifyCode.}

proc setInstanceCount*(this: ShaderAttrib, instanceCount: int): RenderAttrib {.importcpp: "deconstify(#->set_instance_count(#))", header: deconstifyCode.}

proc setFlag*(this: ShaderAttrib, flag: int, value: bool): RenderAttrib {.importcpp: "deconstify(#->set_flag(#, #))", header: deconstifyCode.}

proc clearFlag*(this: ShaderAttrib, flag: int): RenderAttrib {.importcpp: "deconstify(#->clear_flag(#))", header: deconstifyCode.}

proc clearShaderInput*(this: ShaderAttrib, id: InternalName): RenderAttrib {.importcpp: "deconstify(#->clear_shader_input(#))", header: deconstifyCode.}

proc clearShaderInput*(this: ShaderAttrib, id: string): RenderAttrib {.importcpp: "deconstify(#->clear_shader_input(nimStringToStdString(#)))", header: deconstifyCode.}

proc clearAllShaderInputs*(this: ShaderAttrib): RenderAttrib {.importcpp: "deconstify(#->clear_all_shader_inputs())", header: deconstifyCode.}

proc getFlag*(this: ShaderAttrib, flag: int): bool {.importcpp: "#->get_flag(#)".}

proc hasShaderInput*(this: ShaderAttrib, id: InternalName): bool {.importcpp: "#->has_shader_input(#)".}

proc getShader*(this: ShaderAttrib): Shader {.importcpp: "deconstify(#->get_shader())", header: deconstifyCode.}

proc getShaderInput*(this: ShaderAttrib, id: InternalName): ShaderInput {.importcpp: "#->get_shader_input(#)".}

proc getShaderInput*(this: ShaderAttrib, id: string): ShaderInput {.importcpp: "#->get_shader_input(nimStringToStdString(#))", header: stringConversionCode.}

proc getShaderInputNodepath*(this: ShaderAttrib, id: InternalName): NodePath {.importcpp: "#->get_shader_input_nodepath(#)".}

proc getShaderInputVector*(this: ShaderAttrib, id: InternalName): LVecBase4 {.importcpp: "#->get_shader_input_vector(#)".}

proc getShaderInputTexture*(this: ShaderAttrib, id: InternalName, sampler: SamplerState): Texture {.importcpp: "#->get_shader_input_texture(#, #)".}

proc getShaderInputTexture*(this: ShaderAttrib, id: InternalName): Texture {.importcpp: "#->get_shader_input_texture(#)".}

proc getShaderInputMatrix*(this: ShaderAttrib, id: InternalName, matrix: LMatrix4): LMatrix4 {.importcpp: "#->get_shader_input_matrix(#, #)".}

proc getShaderInputBuffer*(this: ShaderAttrib, id: InternalName): ShaderBuffer {.importcpp: "#->get_shader_input_buffer(#)".}

proc getTight*(this: ShowBoundsEffect): bool {.importcpp: "#->get_tight()".}

proc addStage*(this: TexProjectorEffect, stage: TextureStage, `from`: NodePath, to: NodePath, lensIndex: int): RenderEffect {.importcpp: "deconstify(#->add_stage(#, #, #, #))", header: deconstifyCode.}

proc addStage*(this: TexProjectorEffect, stage: TextureStage, `from`: NodePath, to: NodePath): RenderEffect {.importcpp: "deconstify(#->add_stage(#, #, #))", header: deconstifyCode.}

proc removeStage*(this: TexProjectorEffect, stage: TextureStage): RenderEffect {.importcpp: "deconstify(#->remove_stage(#))", header: deconstifyCode.}

proc getFrom*(this: TexProjectorEffect, stage: TextureStage): NodePath {.importcpp: "#->get_from(#)".}

proc getTo*(this: TexProjectorEffect, stage: TextureStage): NodePath {.importcpp: "#->get_to(#)".}

proc getLensIndex*(this: TexProjectorEffect, stage: TextureStage): int {.importcpp: "#->get_lens_index(#)".}

proc addPoint*(this: ScissorEffect, point: LPoint3, node: NodePath): RenderEffect {.importcpp: "deconstify(#->add_point((LPoint3 const &)(#), #))", header: deconstifyCode.}

proc addPoint*(this: ScissorEffect, point: LPoint3): RenderEffect {.importcpp: "deconstify(#->add_point((LPoint3 const &)(#)))", header: deconstifyCode.}

proc isScreen*(this: ScissorEffect): bool {.importcpp: "#->is_screen()".}

proc getFrame*(this: MouseWatcher | MouseWatcherRegion | PGItem | ScissorAttrib | ScissorEffect): LVecBase4 {.importcpp: "#->get_frame()".}

proc getNumPoints*(this: BoundingBox | BoundingHexahedron | CollisionBox | CollisionPolygon | GeomVertexFormat | ScissorEffect): int {.importcpp: "#->get_num_points()".}

proc getPoint*(this: BoundingBox | BoundingHexahedron | CollisionBox | CollisionPolygon | ScissorEffect, n: int): LPoint3 {.importcpp: "#->get_point(#)".}

proc getNode*(this: ScissorEffect, n: int): NodePath {.importcpp: "#->get_node(#)".}

proc getClip*(this: ScissorEffect): bool {.importcpp: "#->get_clip()".}

proc setGsg*(this: SceneGraphReducer, gsg: GraphicsStateGuardianBase) {.importcpp: "#.set_gsg(#)".}

proc clearGsg*(this: SceneGraphReducer) {.importcpp: "#.clear_gsg()".}

proc setCombineRadius*(this: SceneGraphReducer, combineRadius: float) {.importcpp: "#.set_combine_radius(#)".}

proc getCombineRadius*(this: SceneGraphReducer): float {.importcpp: "#.get_combine_radius()".}

proc applyAttribs*(this: SceneGraphReducer, node: PandaNode, attribTypes: int) {.importcpp: "#.apply_attribs(#, #)".}

proc applyAttribs*(this: SceneGraphReducer, node: PandaNode) {.importcpp: "#.apply_attribs(#)".}

proc flatten*(this: SceneGraphReducer, root: PandaNode, combineSiblingsBits: int): int {.importcpp: "#.flatten(#, #)".}

proc removeColumn*(this: SceneGraphReducer, root: PandaNode, column: InternalName): int {.importcpp: "#.remove_column(#, #)".}

proc makeCompatibleState*(this: SceneGraphReducer, root: PandaNode): int {.importcpp: "#.make_compatible_state(#)".}

proc makeCompatibleFormat*(this: SceneGraphReducer, root: PandaNode, collectBits: int): int {.importcpp: "#.make_compatible_format(#, #)".}

proc makeCompatibleFormat*(this: SceneGraphReducer, root: PandaNode): int {.importcpp: "#.make_compatible_format(#)".}

proc decompose*(this: SceneGraphReducer, root: PandaNode) {.importcpp: "#.decompose(#)".}

proc collectVertexData*(this: SceneGraphReducer, root: PandaNode, collectBits: int): int {.importcpp: "#.collect_vertex_data(#, #)".}

proc collectVertexData*(this: SceneGraphReducer, root: PandaNode): int {.importcpp: "#.collect_vertex_data(#)".}

proc makeNonindexed*(this: SceneGraphReducer, root: PandaNode, nonindexedBits: int): int {.importcpp: "#.make_nonindexed(#, #)".}

proc makeNonindexed*(this: SceneGraphReducer, root: PandaNode): int {.importcpp: "#.make_nonindexed(#)".}

proc unify*(this: SceneGraphReducer, root: PandaNode, preserveOrder: bool) {.importcpp: "#.unify(#, #)".}

proc removeUnusedVertices*(this: SceneGraphReducer, root: PandaNode) {.importcpp: "#.remove_unused_vertices(#)".}

proc premunge*(this: SceneGraphReducer, root: PandaNode, initialState: RenderState) {.importcpp: "#.premunge(#, #)".}

proc checkLiveFlatten*(this: SceneGraphReducer, node: PandaNode): bool {.importcpp: "#.check_live_flatten(#)".}

proc setPortalMask*(this: PortalNode, mask: PortalMask) {.importcpp: "#->set_portal_mask(#)".}

proc setFromPortalMask*(this: PortalNode, mask: PortalMask) {.importcpp: "#->set_from_portal_mask(#)".}

proc setIntoPortalMask*(this: PortalNode, mask: PortalMask) {.importcpp: "#->set_into_portal_mask(#)".}

proc getFromPortalMask*(this: PortalNode): PortalMask {.importcpp: "#->get_from_portal_mask()".}

proc getIntoPortalMask*(this: PortalNode): PortalMask {.importcpp: "#->get_into_portal_mask()".}

proc setPortalGeom*(this: PortalNode, flag: bool) {.importcpp: "#->set_portal_geom(#)".}

proc getPortalGeom*(this: PortalNode): bool {.importcpp: "#->get_portal_geom()".}

proc clearVertices*(this: GeomPrimitive | PortalNode) {.importcpp: "#->clear_vertices()".}

proc addVertex*(this: PortalNode, vertex: LPoint3) {.importcpp: "#->add_vertex((LPoint3 const &)(#))".}

proc setCellIn*(this: PortalNode, cell: NodePath) {.importcpp: "#->set_cell_in(#)".}

proc getCellIn*(this: PortalNode): NodePath {.importcpp: "#->get_cell_in()".}

proc setCellOut*(this: PortalNode, cell: NodePath) {.importcpp: "#->set_cell_out(#)".}

proc getCellOut*(this: PortalNode): NodePath {.importcpp: "#->get_cell_out()".}

proc setClipPlane*(this: PortalNode, value: bool) {.importcpp: "#->set_clip_plane(#)".}

proc isClipPlane*(this: PortalNode): bool {.importcpp: "#->is_clip_plane()".}

proc setVisible*(this: PortalNode, value: bool) {.importcpp: "#->set_visible(#)".}

proc isVisible*(this: PortalNode): bool {.importcpp: "#->is_visible()".}

proc setMaxDepth*(this: PortalNode, value: int) {.importcpp: "#->set_max_depth(#)".}

proc getMaxDepth*(this: PortalNode): int {.importcpp: "#->get_max_depth()".}

proc setOpen*(this: PortalNode, value: bool) {.importcpp: "#->set_open(#)".}

proc getMode*(this: ShadeModelAttrib): ShadeModelAttrib_Mode {.importcpp: "#->get_mode()".}

proc getRenderState*(this: StencilAttrib, renderStateIdentifier: StencilAttrib_StencilRenderState): int {.importcpp: "#->get_render_state(#)".}

proc upcastToNamable*(this: MovieAudio): Namable {.importcpp: "((Namable *)(MovieAudio *)(#))".}

proc open*(this: MovieAudio): MovieAudioCursor {.importcpp: "#->open()".}

proc getSource*(this: MovieAudioCursor): MovieAudio {.importcpp: "#->get_source()".}

proc audioRate*(this: MovieAudioCursor): int {.importcpp: "#->audio_rate()".}

proc audioChannels*(this: MovieAudioCursor): int {.importcpp: "#->audio_channels()".}

proc length*(this: MovieAudioCursor | MovieVideoCursor): float64 {.importcpp: "#->length()".}

proc canSeek*(this: MovieAudioCursor | MovieVideoCursor): bool {.importcpp: "#->can_seek()".}

proc canSeekFast*(this: MovieAudioCursor | MovieVideoCursor): bool {.importcpp: "#->can_seek_fast()".}

proc tell*(this: MovieAudioCursor): float64 {.importcpp: "#->tell()".}

proc skipSamples*(this: MovieAudioCursor, n: int) {.importcpp: "#->skip_samples(#)".}

proc aborted*(this: MovieAudioCursor | MovieVideoCursor): bool {.importcpp: "#->aborted()".}

proc ready*(this: MovieAudioCursor): int {.importcpp: "#->ready()".}

proc seek*(this: MovieAudioCursor, offset: float64) {.importcpp: "#->seek(#)".}

proc readSamples*(this: MovieAudioCursor, n: int): string {.importcpp: "nimStringFromStdString(#->read_samples(#))", header: stringConversionCode.}

proc readSamples*(this: MovieAudioCursor, n: int, dg: Datagram) {.importcpp: "#->read_samples(#, #)".}

proc upcastToNamable*(this: MovieVideo): Namable {.importcpp: "((Namable *)(MovieVideo *)(#))".}

proc open*(this: MovieVideo): MovieVideoCursor {.importcpp: "#->open()".}

proc getSubfileInfo*(this: MovieVideo): SubfileInfo {.importcpp: "#->get_subfile_info()".}

proc getSource*(this: MovieVideoCursor): MovieVideo {.importcpp: "#->get_source()".}

proc sizeX*(this: MovieVideoCursor): int {.importcpp: "#->size_x()".}

proc sizeY*(this: MovieVideoCursor): int {.importcpp: "#->size_y()".}

proc getNumComponents*(this: IntersectionBoundingVolume | MovieVideoCursor | Texture | UnionBoundingVolume): int {.importcpp: "#->get_num_components()".}

proc ready*(this: MovieVideoCursor): bool {.importcpp: "#->ready()".}

proc streaming*(this: MovieVideoCursor): bool {.importcpp: "#->streaming()".}

proc setupTexture*(this: MovieVideoCursor, tex: Texture) {.importcpp: "#->setup_texture(#)".}

proc setTime*(this: MovieVideoCursor, timestamp: float64, loopCount: int): bool {.importcpp: "#->set_time(#, #)".}

proc getRate*(this: MicrophoneAudio): int {.importcpp: "#->get_rate()".}

proc append*(this: UserDataAudio, src: DatagramIterator, len: int) {.importcpp: "#->append(#, #)".}

proc append*(this: UserDataAudio, src: DatagramIterator) {.importcpp: "#->append(#)".}

proc append*(this: UserDataAudio, str: string) {.importcpp: "#->append(nimStringToStdString(#))", header: stringConversionCode.}

proc done*(this: UserDataAudio) {.importcpp: "#->done()".}

proc setUvRange*(this: CardMaker, ll: LTexCoord, ur: LTexCoord) {.importcpp: "#->set_uv_range(#, #)".}

proc setUvRange*(this: CardMaker, ll: LTexCoord, lr: LTexCoord, ur: LTexCoord, ul: LTexCoord) {.importcpp: "#->set_uv_range(#, #, #, #)".}

proc setUvRange*(this: CardMaker, ll: LTexCoord3, lr: LTexCoord3, ur: LTexCoord3, ul: LTexCoord3) {.importcpp: "#->set_uv_range(#, #, #, #)".}

proc setUvRange*(this: CardMaker, x: LVector4, y: LVector4, z: LVector4) {.importcpp: "#->set_uv_range((LVector4 const &)(#), (LVector4 const &)(#), (LVector4 const &)(#))".}

proc setUvRange*(this: CardMaker, tex: Texture) {.importcpp: "#->set_uv_range(#)".}

proc setUvRangeCube*(this: CardMaker, face: int) {.importcpp: "#->set_uv_range_cube(#)".}

proc setHasUvs*(this: CardMaker, flag: bool) {.importcpp: "#->set_has_uvs(#)".}

proc setHas3dUvs*(this: CardMaker, flag: bool) {.importcpp: "#->set_has_3d_uvs(#)".}

proc setFrame*(this: CardMaker | MouseWatcher | MouseWatcherRegion | PGItem, frame: LVecBase4) {.importcpp: "#->set_frame((LVecBase4 const &)(#))".}

proc setFrame*(this: CardMaker, ll: LVertex, lr: LVertex, ur: LVertex, ul: LVertex) {.importcpp: "#->set_frame(#, #, #, #)".}

proc setFrame*(this: CardMaker | MouseWatcher | MouseWatcherRegion | PGItem, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_frame(#, #, #, #)".}

proc setFrameFullscreenQuad*(this: CardMaker) {.importcpp: "#->set_frame_fullscreen_quad()".}

proc setColor*(this: CardMaker, r: float, g: float, b: float, a: float) {.importcpp: "#->set_color(#, #, #, #)".}

proc setHasNormals*(this: CardMaker, flag: bool) {.importcpp: "#->set_has_normals(#)".}

proc setSourceGeometry*(this: CardMaker, node: PandaNode, frame: LVecBase4) {.importcpp: "#->set_source_geometry(#, (LVecBase4 const &)(#))".}

proc clearSourceGeometry*(this: CardMaker) {.importcpp: "#->clear_source_geometry()".}

proc generate*(this: CardMaker | FisheyeMaker | TextNode): PandaNode {.importcpp: "#->generate()".}

proc setFov*(this: FisheyeMaker | Lens, fov: float) {.importcpp: "#->set_fov(#)".}

proc setNumVertices*(this: FisheyeMaker, numVertices: int) {.importcpp: "#->set_num_vertices(#)".}

proc setSquareInscribed*(this: FisheyeMaker, squareInscribed: bool, squareRadius: float) {.importcpp: "#->set_square_inscribed(#, #)".}

proc setReflection*(this: FisheyeMaker, reflection: bool) {.importcpp: "#->set_reflection(#)".}

proc setupWindow*(this: FrameRateMeter | SceneGraphAnalyzerMeter, window: GraphicsOutput) {.importcpp: "#->setup_window(#)".}

proc clearWindow*(this: FrameRateMeter | SceneGraphAnalyzerMeter) {.importcpp: "#->clear_window()".}

proc getWindow*(this: DisplayRegion | FrameRateMeter | SceneGraphAnalyzerMeter): GraphicsOutput {.importcpp: "#->get_window()".}

proc setUpdateInterval*(this: FrameRateMeter | SceneGraphAnalyzerMeter, updateInterval: float64) {.importcpp: "#->set_update_interval(#)".}

proc getUpdateInterval*(this: FrameRateMeter | SceneGraphAnalyzerMeter): float64 {.importcpp: "#->get_update_interval()".}

proc setTextPattern*(this: FrameRateMeter, textPattern: string) {.importcpp: "#->set_text_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getTextPattern*(this: FrameRateMeter): string {.importcpp: "nimStringFromStdString(#->get_text_pattern())", header: stringConversionCode.}

proc setClockObject*(this: FrameRateMeter, clockObject: ClockObject) {.importcpp: "#->set_clock_object(#)".}

proc getClockObject*(this: FrameRateMeter): ClockObject {.importcpp: "#->get_clock_object()".}

proc update*(this: AudioManager | Character | FrameRateMeter | SceneGraphAnalyzerMeter | TextNode) {.importcpp: "#->update()".}

proc heightfield*(this: GeoMipTerrain): PNMImage {.importcpp: "#->heightfield()".}

proc setHeightfield*(this: GeoMipTerrain, filename: Filename, `type`: PNMFileType): bool {.importcpp: "#->set_heightfield(#, #)".}

proc setHeightfield*(this: GeoMipTerrain, filename: Filename): bool {.importcpp: "#->set_heightfield(#)".}

proc setHeightfield*(this: GeoMipTerrain, image: PNMImage): bool {.importcpp: "#->set_heightfield(#)".}

proc colorMap*(this: GeoMipTerrain): PNMImage {.importcpp: "#->color_map()".}

proc setColorMap*(this: GeoMipTerrain, filename: Filename, `type`: PNMFileType): bool {.importcpp: "#->set_color_map(#, #)".}

proc setColorMap*(this: GeoMipTerrain, filename: Filename): bool {.importcpp: "#->set_color_map(#)".}

proc setColorMap*(this: GeoMipTerrain, image: PNMImage): bool {.importcpp: "#->set_color_map(#)".}

proc setColorMap*(this: GeoMipTerrain, image: Texture): bool {.importcpp: "#->set_color_map(#)".}

proc setColorMap*(this: GeoMipTerrain, path: string): bool {.importcpp: "#->set_color_map(nimStringToStdString(#))", header: stringConversionCode.}

proc hasColorMap*(this: GeoMipTerrain): bool {.importcpp: "#->has_color_map()".}

proc clearColorMap*(this: GeoMipTerrain) {.importcpp: "#->clear_color_map()".}

proc calcAmbientOcclusion*(this: GeoMipTerrain, radius: float, contrast: float, brightness: float) {.importcpp: "#->calc_ambient_occlusion(#, #, #)".}

proc calcAmbientOcclusion*(this: GeoMipTerrain, radius: float, contrast: float) {.importcpp: "#->calc_ambient_occlusion(#, #)".}

proc calcAmbientOcclusion*(this: GeoMipTerrain, radius: float) {.importcpp: "#->calc_ambient_occlusion(#)".}

proc calcAmbientOcclusion*(this: GeoMipTerrain) {.importcpp: "#->calc_ambient_occlusion()".}

proc getElevation*(this: GeoMipTerrain, x: float64, y: float64): float64 {.importcpp: "#->get_elevation(#, #)".}

proc getNormal*(this: GeoMipTerrain, x: int, y: int): LVector3 {.importcpp: "#->get_normal(#, #)".}

proc getNormal*(this: GeoMipTerrain, mx: int, my: int, x: int, y: int): LVector3 {.importcpp: "#->get_normal(#, #, #, #)".}

proc setBruteforce*(this: GeoMipTerrain, bf: bool) {.importcpp: "#->set_bruteforce(#)".}

proc getBruteforce*(this: GeoMipTerrain): bool {.importcpp: "#->get_bruteforce()".}

proc setAutoFlatten*(this: GeoMipTerrain, mode: int) {.importcpp: "#->set_auto_flatten(#)".}

proc setFocalPoint*(this: GeoMipTerrain, fp: LPoint2d) {.importcpp: "#->set_focal_point((LPoint2d const &)(#))".}

proc setFocalPoint*(this: GeoMipTerrain, fp: LPoint2f) {.importcpp: "#->set_focal_point((LPoint2f const &)(#))".}

proc setFocalPoint*(this: GeoMipTerrain, fp: LPoint3d) {.importcpp: "#->set_focal_point((LPoint3d const &)(#))".}

proc setFocalPoint*(this: GeoMipTerrain, fp: LPoint3f) {.importcpp: "#->set_focal_point((LPoint3f const &)(#))".}

proc setFocalPoint*(this: GeoMipTerrain, fnp: NodePath) {.importcpp: "#->set_focal_point(#)".}

proc setFocalPoint*(this: GeoMipTerrain, x: float64, y: float64) {.importcpp: "#->set_focal_point(#, #)".}

proc getFocalPoint*(this: GeoMipTerrain): NodePath {.importcpp: "#->get_focal_point()".}

proc getRoot*(this: GeoMipTerrain): NodePath {.importcpp: "#->get_root()".}

proc setBlockSize*(this: GeoMipTerrain, newbs: int) {.importcpp: "#->set_block_size(#)".}

proc getBlockSize*(this: GeoMipTerrain): int {.importcpp: "#->get_block_size()".}

proc getMaxLevel*(this: GeoMipTerrain): int {.importcpp: "#->get_max_level()".}

proc setMinLevel*(this: GeoMipTerrain, minlevel: int) {.importcpp: "#->set_min_level(#)".}

proc getMinLevel*(this: GeoMipTerrain): int {.importcpp: "#->get_min_level()".}

proc isDirty*(this: GeoMipTerrain): bool {.importcpp: "#->is_dirty()".}

proc setFactor*(this: GeoMipTerrain, factor: float) {.importcpp: "#->set_factor(#)".}

proc setNearFar*(this: GeoMipTerrain, inputNear: float64, inputFar: float64) {.importcpp: "#->set_near_far(#, #)".}

proc setNear*(this: GeoMipTerrain, inputNear: float64) {.importcpp: "#->set_near(#)".}

proc setFar*(this: GeoMipTerrain, inputFar: float64) {.importcpp: "#->set_far(#)".}

proc getBlockNodePath*(this: GeoMipTerrain, mx: int, my: int): NodePath {.importcpp: "#->get_block_node_path(#, #)".}

proc getBlockFromPos*(this: GeoMipTerrain, x: float64, y: float64): LVecBase2 {.importcpp: "#->get_block_from_pos(#, #)".}

proc setBorderStitching*(this: GeoMipTerrain, stitching: bool) {.importcpp: "#->set_border_stitching(#)".}

proc getBorderStitching*(this: GeoMipTerrain): bool {.importcpp: "#->get_border_stitching()".}

proc getFar*(this: GeoMipTerrain): float64 {.importcpp: "#->get_far()".}

proc getNear*(this: GeoMipTerrain): float64 {.importcpp: "#->get_near()".}

proc getFlattenMode*(this: GeoMipTerrain): int {.importcpp: "#->get_flatten_mode()".}

proc makeSlopeImage*(this: GeoMipTerrain): PNMImage {.importcpp: "#->make_slope_image()".}

proc generate*(this: GeoMipTerrain) {.importcpp: "#->generate()".}

proc update*(this: GeoMipTerrain | PartBundle): bool {.importcpp: "#->update()".}

proc heightfield*(this: HeightfieldTesselator): PNMImage {.importcpp: "#.heightfield()".}

proc setHeightfield*(this: HeightfieldTesselator, filename: Filename, `type`: PNMFileType): bool {.importcpp: "#.set_heightfield(#, #)".}

proc setHeightfield*(this: HeightfieldTesselator, filename: Filename): bool {.importcpp: "#.set_heightfield(#)".}

proc setPolyCount*(this: HeightfieldTesselator, n: int) {.importcpp: "#.set_poly_count(#)".}

proc setVisibilityRadius*(this: HeightfieldTesselator, r: int) {.importcpp: "#.set_visibility_radius(#)".}

proc setFocalPoint*(this: HeightfieldTesselator, x: int, y: int) {.importcpp: "#.set_focal_point(#, #)".}

proc setHorizontalScale*(this: HeightfieldTesselator, h: float64) {.importcpp: "#.set_horizontal_scale(#)".}

proc setVerticalScale*(this: HeightfieldTesselator, v: float64) {.importcpp: "#.set_vertical_scale(#)".}

proc setMaxTriangles*(this: HeightfieldTesselator, n: int) {.importcpp: "#.set_max_triangles(#)".}

proc getElevation*(this: HeightfieldTesselator, x: float64, y: float64): float64 {.importcpp: "#.get_elevation(#, #)".}

proc generate*(this: HeightfieldTesselator): NodePath {.importcpp: "#.generate()".}

proc setThickness*(this: LineSegs, thick: float) {.importcpp: "#.set_thickness(#)".}

proc moveTo*(this: LineSegs, v: LVecBase3) {.importcpp: "#.move_to((LVecBase3 const &)(#))".}

proc moveTo*(this: LineSegs, x: float, y: float, z: float) {.importcpp: "#.move_to(#, #, #)".}

proc drawTo*(this: LineSegs, v: LVecBase3) {.importcpp: "#.draw_to((LVecBase3 const &)(#))".}

proc drawTo*(this: LineSegs, x: float, y: float, z: float) {.importcpp: "#.draw_to(#, #, #)".}

proc getCurrentPosition*(this: LineSegs): LVertex {.importcpp: "#.get_current_position()".}

proc create*(this: LineSegs, previous: GeomNode, dynamic: bool): GeomNode {.importcpp: "#.create(#, #)".}

proc create*(this: LineSegs, previous: GeomNode): GeomNode {.importcpp: "#.create(#)".}

proc create*(this: LineSegs, dynamic: bool): GeomNode {.importcpp: "#.create(#)".}

proc create*(this: LineSegs): GeomNode {.importcpp: "#.create()".}

proc getVertex*(this: LineSegs, n: int): LVertex {.importcpp: "#.get_vertex(#)".}

proc setVertex*(this: LineSegs, n: int, vert: LVertex) {.importcpp: "#.set_vertex(#, #)".}

proc setVertex*(this: LineSegs, vertex: int, x: float, y: float, z: float) {.importcpp: "#.set_vertex(#, #, #, #)".}

proc getVertexColor*(this: LineSegs, vertex: int): LColor {.importcpp: "#.get_vertex_color(#)".}

proc setVertexColor*(this: LineSegs, vertex: int, c: LColor) {.importcpp: "#.set_vertex_color(#, #)".}

proc setVertexColor*(this: LineSegs, vertex: int, r: float, g: float, b: float, a: float) {.importcpp: "#.set_vertex_color(#, #, #, #, #)".}

proc setVertexColor*(this: LineSegs, vertex: int, r: float, g: float, b: float) {.importcpp: "#.set_vertex_color(#, #, #, #)".}

proc setBudget*(this: MeshDrawer | MeshDrawer2D, budget: int) {.importcpp: "#.set_budget(#)".}

proc getBudget*(this: MeshDrawer | MeshDrawer2D): int {.importcpp: "#.get_budget()".}

proc getRoot*(this: MeshDrawer | MeshDrawer2D): NodePath {.importcpp: "#.get_root()".}

proc begin*(this: MeshDrawer, camera: NodePath, render: NodePath) {.importcpp: "#.begin(#, #)".}

proc tri*(this: MeshDrawer, v1: LVector3, c1: LVector4, uv1: LVector2, v2: LVector3, c2: LVector4, uv2: LVector2, v3: LVector3, c3: LVector4, uv3: LVector2) {.importcpp: "#.tri((LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#))".}

proc particle*(this: MeshDrawer, pos: LVector3, frame: LVector4, size: float, color: LVector4, rotation: float) {.importcpp: "#.particle((LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#), #)".}

proc blendedParticle*(this: MeshDrawer, pos: LVector3, frame1: LVector4, frame2: LVector4, blend: float, size: float, color: LVector4, rotation: float) {.importcpp: "#.blended_particle((LVector3 const &)(#), (LVector4 const &)(#), (LVector4 const &)(#), #, #, (LVector4 const &)(#), #)".}

proc billboard*(this: MeshDrawer, pos: LVector3, frame: LVector4, size: float, color: LVector4) {.importcpp: "#.billboard((LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#))".}

proc segment*(this: MeshDrawer, start: LVector3, stop: LVector3, frame: LVector4, thickness: float, color: LVector4) {.importcpp: "#.segment((LVector3 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#))".}

proc crossSegment*(this: MeshDrawer, start: LVector3, stop: LVector3, frame: LVector4, thickness: float, color: LVector4) {.importcpp: "#.cross_segment((LVector3 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#))".}

proc unevenSegment*(this: MeshDrawer, start: LVector3, stop: LVector3, frame: LVector4, thicknessStart: float, colorStart: LVector4, thicknessStop: float, colorStop: LVector4) {.importcpp: "#.uneven_segment((LVector3 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#), #, (LVector4 const &)(#))".}

proc linkSegment*(this: MeshDrawer, pos: LVector3, frame: LVector4, thickness: float, color: LVector4) {.importcpp: "#.link_segment((LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#))".}

proc linkSegmentEnd*(this: MeshDrawer, frame: LVector4, color: LVector4) {.importcpp: "#.link_segment_end((LVector4 const &)(#), (LVector4 const &)(#))".}

proc explosion*(this: MeshDrawer, pos: LVector3, frame: LVector4, size: float, color: LVector4, seed: int, number: int, distance: float) {.importcpp: "#.explosion((LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#), #, #, #)".}

proc stream*(this: MeshDrawer, start: LVector3, stop: LVector3, frame: LVector4, size: float, color: LVector4, number: int, offset: float) {.importcpp: "#.stream((LVector3 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), #, (LVector4 const &)(#), #, #)".}

proc geometry*(this: MeshDrawer, node: NodePath) {.importcpp: "#.geometry(#)".}

proc quadRaw*(this: MeshDrawer2D, v1: LVector3, c1: LVector4, uv1: LVector2, v2: LVector3, c2: LVector4, uv2: LVector2, v3: LVector3, c3: LVector4, uv3: LVector2, v4: LVector3, c4: LVector4, uv4: LVector2) {.importcpp: "#.quad_raw((LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#), (LVector3 const &)(#), (LVector4 const &)(#), (LVector2 const &)(#))".}

proc rectangleRaw*(this: MeshDrawer2D, x: float, y: float, w: float, h: float, u: float, v: float, us: float, vs: float, color: LVector4) {.importcpp: "#.rectangle_raw(#, #, #, #, #, #, #, #, (LVector4 const &)(#))".}

proc setClip*(this: MeshDrawer2D, x: float, y: float, w: float, h: float) {.importcpp: "#.set_clip(#, #, #, #)".}

proc rectangle*(this: MeshDrawer2D, x: float, y: float, w: float, h: float, u: float, v: float, us: float, vs: float, color: LVector4) {.importcpp: "#.rectangle(#, #, #, #, #, #, #, #, (LVector4 const &)(#))".}

proc rectangleBorder*(this: MeshDrawer2D, x: float, y: float, w: float, h: float, r: float, t: float, l: float, b: float, tr: float, tt: float, tl: float, tb: float, u: float, v: float, us: float, vs: float, color: LVector4) {.importcpp: "#.rectangle_border(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, (LVector4 const &)(#))".}

proc rectangleBorderTiled*(this: MeshDrawer2D, x: float, y: float, w: float, h: float, r: float, t: float, l: float, b: float, tr: float, tt: float, tl: float, tb: float, u: float, v: float, us: float, vs: float, color: LVector4) {.importcpp: "#.rectangle_border_tiled(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, (LVector4 const &)(#))".}

proc rectangleTiled*(this: MeshDrawer2D, x: float, y: float, w: float, h: float, u: float, v: float, us: float, vs: float, color: LVector4) {.importcpp: "#.rectangle_tiled(#, #, #, #, #, #, #, #, (LVector4 const &)(#))".}

proc begin*(this: MeshDrawer2D | var LMatrix4d | var LMatrix4f) {.importcpp: "#.begin()".}

proc getVideoLength*(this: MovieTexture): float64 {.importcpp: "#->get_video_length()".}

proc getVideoWidth*(this: MovieTexture | VideoTexture): int {.importcpp: "#->get_video_width()".}

proc getVideoHeight*(this: MovieTexture | VideoTexture): int {.importcpp: "#->get_video_height()".}

proc getColorCursor*(this: MovieTexture, page: int): MovieVideoCursor {.importcpp: "#->get_color_cursor(#)".}

proc getAlphaCursor*(this: MovieTexture, page: int): MovieVideoCursor {.importcpp: "#->get_alpha_cursor(#)".}

proc restart*(this: MovieTexture) {.importcpp: "#->restart()".}

proc stop*(this: AnimControl | AnimInterface | AudioSound | MovieTexture | SequenceNode | VideoTexture) {.importcpp: "#->stop()".}

proc play*(this: AnimControl | AnimInterface | AudioSound | MovieTexture | SequenceNode | VideoTexture) {.importcpp: "#->play()".}

proc setTime*(this: MovieTexture, t: float64) {.importcpp: "#->set_time(#)".}

proc getTime*(this: MovieTexture | TrackerNode): float64 {.importcpp: "#->get_time()".}

proc setLoop*(this: MovieTexture, enable: bool) {.importcpp: "#->set_loop(#)".}

proc getLoop*(this: AudioSound | MovieTexture): bool {.importcpp: "#->get_loop()".}

proc setLoopCount*(this: MovieTexture, count: int) {.importcpp: "#->set_loop_count(#)".}

proc getLoopCount*(this: AudioSound | MovieTexture): int {.importcpp: "#->get_loop_count()".}

proc setPlayRate*(this: AnimControl | AnimInterface | MovieTexture | SequenceNode | VideoTexture, playRate: float64) {.importcpp: "#->set_play_rate(#)".}

proc getPlayRate*(this: AnimControl | AnimInterface | MovieTexture | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_play_rate()".}

proc synchronizeTo*(this: MovieTexture, sound: AudioSound) {.importcpp: "#->synchronize_to(#)".}

proc unsynchronize*(this: MovieTexture) {.importcpp: "#->unsynchronize()".}

proc scan*(this: MultitexReducer, node: NodePath) {.importcpp: "#.scan(#)".}

proc scan*(this: MultitexReducer, node: NodePath, stateFrom: NodePath) {.importcpp: "#.scan(#, #)".}

proc scan*(this: MultitexReducer, node: PandaNode, state: RenderState, transform: TransformState) {.importcpp: "#.scan(#, #, #)".}

proc setTarget*(this: MultitexReducer, stage: TextureStage) {.importcpp: "#.set_target(#)".}

proc setUseGeom*(this: MultitexReducer, useGeom: bool) {.importcpp: "#.set_use_geom(#)".}

proc setAllowTexMat*(this: MultitexReducer, allowTexMat: bool) {.importcpp: "#.set_allow_tex_mat(#)".}

proc flatten*(this: MultitexReducer, window: GraphicsOutput) {.importcpp: "#.flatten(#)".}

proc getNode*(this: NodeVertexTransform): PandaNode {.importcpp: "deconstify(#->get_node())", header: deconstifyCode.}

proc getPrev*(this: NodeVertexTransform): VertexTransform {.importcpp: "deconstify(#->get_prev())", header: deconstifyCode.}

proc setHeightfield*(this: ShaderTerrainMesh, heightfield: Texture) {.importcpp: "#->set_heightfield(#)".}

proc getHeightfield*(this: ShaderTerrainMesh): Texture {.importcpp: "#->get_heightfield()".}

proc setChunkSize*(this: ShaderTerrainMesh, chunkSize: int) {.importcpp: "#->set_chunk_size(#)".}

proc getChunkSize*(this: ShaderTerrainMesh): int {.importcpp: "#->get_chunk_size()".}

proc setGeneratePatches*(this: ShaderTerrainMesh, generatePatches: bool) {.importcpp: "#->set_generate_patches(#)".}

proc getGeneratePatches*(this: ShaderTerrainMesh): bool {.importcpp: "#->get_generate_patches()".}

proc setUpdateEnabled*(this: ShaderTerrainMesh, updateEnabled: bool) {.importcpp: "#->set_update_enabled(#)".}

proc getUpdateEnabled*(this: ShaderTerrainMesh): bool {.importcpp: "#->get_update_enabled()".}

proc setTargetTriangleWidth*(this: ShaderTerrainMesh, targetTriangleWidth: float) {.importcpp: "#->set_target_triangle_width(#)".}

proc getTargetTriangleWidth*(this: ShaderTerrainMesh): float {.importcpp: "#->get_target_triangle_width()".}

proc uvToWorld*(this: ShaderTerrainMesh, coord: LTexCoord): LPoint3 {.importcpp: "#->uv_to_world(#)".}

proc uvToWorld*(this: ShaderTerrainMesh, u: float, v: float): LPoint3 {.importcpp: "#->uv_to_world(#, #)".}

proc generate*(this: ShaderTerrainMesh): bool {.importcpp: "#->generate()".}

proc setNode*(this: SceneGraphAnalyzerMeter | Transform2SG, node: PandaNode) {.importcpp: "#->set_node(#)".}

proc collect*(this: RigidBodyCombiner) {.importcpp: "#->collect()".}

proc getInternalScene*(this: RigidBodyCombiner): NodePath {.importcpp: "#->get_internal_scene()".}

proc upcastToCullTraverser*(this: PipeOcclusionCullTraverser): CullTraverser {.importcpp: "(PT(CullTraverser)(#))".}

proc getBuffer*(this: PipeOcclusionCullTraverser): GraphicsOutput {.importcpp: "#->get_buffer()".}

proc setOcclusionMask*(this: PipeOcclusionCullTraverser, occlusionMask: DrawMask) {.importcpp: "#->set_occlusion_mask(#)".}

proc getOcclusionMask*(this: PipeOcclusionCullTraverser): DrawMask {.importcpp: "#->get_occlusion_mask()".}

proc getPfm*(this: PfmVizzer): PfmFile {.importcpp: "#.get_pfm()".}

proc project*(this: PfmVizzer, lens: Lens, undistLut: PfmFile) {.importcpp: "#.project(#, #)".}

proc project*(this: PfmVizzer, lens: Lens) {.importcpp: "#.project(#)".}

proc extrude*(this: PfmVizzer, lens: Lens) {.importcpp: "#.extrude(#)".}

proc setVisInverse*(this: PfmVizzer, visInverse: bool) {.importcpp: "#.set_vis_inverse(#)".}

proc getVisInverse*(this: PfmVizzer): bool {.importcpp: "#.get_vis_inverse()".}

proc setFlatTexcoordName*(this: PfmVizzer, flatTexcoordName: InternalName) {.importcpp: "#.set_flat_texcoord_name(#)".}

proc clearFlatTexcoordName*(this: PfmVizzer) {.importcpp: "#.clear_flat_texcoord_name()".}

proc getFlatTexcoordName*(this: PfmVizzer): InternalName {.importcpp: "#.get_flat_texcoord_name()".}

proc setVis2d*(this: PfmVizzer, vis2d: bool) {.importcpp: "#.set_vis_2d(#)".}

proc getVis2d*(this: PfmVizzer): bool {.importcpp: "#.get_vis_2d()".}

proc setKeepBeyondLens*(this: PfmVizzer, keepBeyondLens: bool) {.importcpp: "#.set_keep_beyond_lens(#)".}

proc getKeepBeyondLens*(this: PfmVizzer): bool {.importcpp: "#.get_keep_beyond_lens()".}

proc setVisBlend*(this: PfmVizzer, visBlend: PNMImage) {.importcpp: "#.set_vis_blend(#)".}

proc clearVisBlend*(this: PfmVizzer) {.importcpp: "#.clear_vis_blend()".}

proc getVisBlend*(this: PfmVizzer): PNMImage {.importcpp: "#.get_vis_blend()".}

proc setAuxPfm*(this: PfmVizzer, pfm: PfmFile) {.importcpp: "#.set_aux_pfm(#)".}

proc clearAuxPfm*(this: PfmVizzer) {.importcpp: "#.clear_aux_pfm()".}

proc getAuxPfm*(this: PfmVizzer): PfmFile {.importcpp: "#.get_aux_pfm()".}

proc clearVisColumns*(this: PfmVizzer) {.importcpp: "#.clear_vis_columns()".}

proc addVisColumn*(this: PfmVizzer, source: PfmVizzer_ColumnType, target: PfmVizzer_ColumnType, name: InternalName, transform: TransformState, lens: Lens, undistLut: PfmFile) {.importcpp: "#.add_vis_column(#, #, #, #, #, #)".}

proc addVisColumn*(this: PfmVizzer, source: PfmVizzer_ColumnType, target: PfmVizzer_ColumnType, name: InternalName, transform: TransformState, lens: Lens) {.importcpp: "#.add_vis_column(#, #, #, #, #)".}

proc addVisColumn*(this: PfmVizzer, source: PfmVizzer_ColumnType, target: PfmVizzer_ColumnType, name: InternalName, transform: TransformState) {.importcpp: "#.add_vis_column(#, #, #, #)".}

proc addVisColumn*(this: PfmVizzer, source: PfmVizzer_ColumnType, target: PfmVizzer_ColumnType, name: InternalName) {.importcpp: "#.add_vis_column(#, #, #)".}

proc generateVisPoints*(this: PfmVizzer): NodePath {.importcpp: "#.generate_vis_points()".}

proc generateVisMesh*(this: PfmVizzer, face: PfmVizzer_MeshFace): NodePath {.importcpp: "#.generate_vis_mesh(#)".}

proc generateVisMesh*(this: PfmVizzer): NodePath {.importcpp: "#.generate_vis_mesh()".}

proc calcMaxUDisplacement*(this: PfmVizzer): float64 {.importcpp: "#.calc_max_u_displacement()".}

proc calcMaxVDisplacement*(this: PfmVizzer): float64 {.importcpp: "#.calc_max_v_displacement()".}

proc makeDisplacement*(this: PfmVizzer, result: PNMImage, maxU: float64, maxV: float64, for32bit: bool) {.importcpp: "#.make_displacement(#, #, #, #)".}

proc makeDisplacement*(this: PfmVizzer, result: PfmFile, maxU: float64, maxV: float64, for32bit: bool) {.importcpp: "#.make_displacement(#, #, #, #)".}

proc upcastToNamable*(this: AnimGroup): Namable {.importcpp: "((Namable *)(AnimGroup *)(#))".}

proc getChild*(this: AnimGroup, n: int): AnimGroup {.importcpp: "#->get_child(#)".}

proc getChildNamed*(this: AnimGroup, name: string): AnimGroup {.importcpp: "#->get_child_named(nimStringToStdString(#))", header: stringConversionCode.}

proc findChild*(this: AnimGroup, name: string): AnimGroup {.importcpp: "#->find_child(nimStringToStdString(#))", header: stringConversionCode.}

proc sortDescendants*(this: AnimGroup | PartGroup) {.importcpp: "#->sort_descendants()".}

proc copyBundle*(this: AnimBundle): AnimBundle {.importcpp: "#->copy_bundle()".}

proc getBaseFrameRate*(this: AnimBundle): float64 {.importcpp: "#->get_base_frame_rate()".}

proc getBundle*(this: AnimBundleNode): AnimBundle {.importcpp: "#->get_bundle()".}

proc upcastToNamable*(this: PartGroup): Namable {.importcpp: "((Namable *)(PartGroup *)(#))".}

proc isCharacterJoint*(this: PartGroup): bool {.importcpp: "#->is_character_joint()".}

proc makeCopy*(this: PartGroup): PartGroup {.importcpp: "#->make_copy()".}

proc copySubgraph*(this: PartGroup): PartGroup {.importcpp: "#->copy_subgraph()".}

proc getChild*(this: PartGroup, n: int): PartGroup {.importcpp: "#->get_child(#)".}

proc getChildNamed*(this: PartGroup, name: string): PartGroup {.importcpp: "#->get_child_named(nimStringToStdString(#))", header: stringConversionCode.}

proc findChild*(this: PartGroup, name: string): PartGroup {.importcpp: "#->find_child(nimStringToStdString(#))", header: stringConversionCode.}

proc applyFreeze*(this: PartGroup, transform: TransformState): bool {.importcpp: "#->apply_freeze(#)".}

proc applyFreezeMatrix*(this: PartGroup, pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3): bool {.importcpp: "#->apply_freeze_matrix((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc applyFreezeScalar*(this: PartGroup, value: float): bool {.importcpp: "#->apply_freeze_scalar(#)".}

proc applyControl*(this: PartGroup, node: PandaNode): bool {.importcpp: "#->apply_control(#)".}

proc clearForcedChannel*(this: PartGroup): bool {.importcpp: "#->clear_forced_channel()".}

proc getForcedChannel*(this: PartGroup): AnimChannelBase {.importcpp: "#->get_forced_channel()".}

proc writeWithValue*(this: PartGroup, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#->write_with_value(#, #)".}

proc upcastToAnimInterface*(this: AnimControl): AnimInterface {.importcpp: "((AnimInterface *)(AnimControl *)(#))".}

proc upcastToNamable*(this: AnimControl): Namable {.importcpp: "((Namable *)(AnimControl *)(#))".}

proc isPending*(this: AnimControl): bool {.importcpp: "#->is_pending()".}

proc waitPending*(this: AnimControl | PartBundle) {.importcpp: "#->wait_pending()".}

proc hasAnim*(this: AnimControl): bool {.importcpp: "#->has_anim()".}

proc setPendingDoneEvent*(this: AnimControl, doneEvent: string) {.importcpp: "#->set_pending_done_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getPendingDoneEvent*(this: AnimControl): string {.importcpp: "nimStringFromStdString(#->get_pending_done_event())", header: stringConversionCode.}

proc getPart*(this: AnimControl): PartBundle {.importcpp: "#->get_part()".}

proc getAnim*(this: AnimControl): AnimBundle {.importcpp: "#->get_anim()".}

proc getChannelIndex*(this: AnimControl): int {.importcpp: "#->get_channel_index()".}

proc getBoundJoints*(this: AnimControl): BitArray {.importcpp: "#->get_bound_joints()".}

proc setAnimModel*(this: AnimControl, model: PandaNode) {.importcpp: "#->set_anim_model(#)".}

proc getAnimModel*(this: AnimControl): PandaNode {.importcpp: "#->get_anim_model()".}

proc setValue*(this: AnimChannelMatrixDynamic, value: LMatrix4) {.importcpp: "#->set_value(#)".}

proc setValue*(this: AnimChannelMatrixDynamic, value: TransformState) {.importcpp: "#->set_value(#)".}

proc setValueNode*(this: AnimChannelMatrixDynamic | AnimChannelScalarDynamic, node: PandaNode) {.importcpp: "#->set_value_node(#)".}

proc getValueTransform*(this: AnimChannelMatrixDynamic): TransformState {.importcpp: "deconstify(#->get_value_transform())", header: deconstifyCode.}

proc getValueNode*(this: AnimChannelMatrixDynamic): PandaNode {.importcpp: "#->get_value_node()".}

proc clearAllTables*(this: AnimChannelMatrixXfmTable) {.importcpp: "#->clear_all_tables()".}

proc hasTable*(this: AnimChannelMatrixXfmTable, tableId: char): bool {.importcpp: "#->has_table(#)".}

proc clearTable*(this: AnimChannelMatrixXfmTable, tableId: char) {.importcpp: "#->clear_table(#)".}

proc setValue*(this: AnimChannelScalarDynamic | PGSliderBar | PGWaitBar, value: float) {.importcpp: "#->set_value(#)".}

proc hasTable*(this: AnimChannelScalarTable): bool {.importcpp: "#->has_table()".}

proc clearTable*(this: AnimChannelScalarTable) {.importcpp: "#->clear_table()".}

proc storeAnim*(this: AnimControlCollection, control: AnimControl, name: string) {.importcpp: "#.store_anim(#, nimStringToStdString(#))", header: stringConversionCode.}

proc findAnim*(this: AnimControlCollection, name: string): AnimControl {.importcpp: "#.find_anim(nimStringToStdString(#))", header: stringConversionCode.}

proc unbindAnim*(this: AnimControlCollection, name: string): bool {.importcpp: "#.unbind_anim(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumAnims*(this: AnimControlCollection): int {.importcpp: "#.get_num_anims()".}

proc getAnim*(this: AnimControlCollection, n: int): AnimControl {.importcpp: "#.get_anim(#)".}

proc getAnimName*(this: AnimControlCollection, n: int): string {.importcpp: "nimStringFromStdString(#.get_anim_name(#))", header: stringConversionCode.}

proc clearAnims*(this: AnimControlCollection) {.importcpp: "#.clear_anims()".}

proc play*(this: AnimControlCollection, animName: string): bool {.importcpp: "#.play(nimStringToStdString(#))", header: stringConversionCode.}

proc play*(this: AnimControlCollection, animName: string, `from`: float64, to: float64): bool {.importcpp: "#.play(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc loop*(this: AnimControlCollection, animName: string, restart: bool): bool {.importcpp: "#.loop(nimStringToStdString(#), #)", header: stringConversionCode.}

proc loop*(this: AnimControlCollection, animName: string, restart: bool, `from`: float64, to: float64): bool {.importcpp: "#.loop(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc stop*(this: AnimControlCollection, animName: string): bool {.importcpp: "#.stop(nimStringToStdString(#))", header: stringConversionCode.}

proc pose*(this: AnimControlCollection, animName: string, frame: float64): bool {.importcpp: "#.pose(nimStringToStdString(#), #)", header: stringConversionCode.}

proc playAll*(this: AnimControlCollection) {.importcpp: "#.play_all()".}

proc playAll*(this: AnimControlCollection, `from`: float64, to: float64) {.importcpp: "#.play_all(#, #)".}

proc loopAll*(this: AnimControlCollection, restart: bool) {.importcpp: "#.loop_all(#)".}

proc loopAll*(this: AnimControlCollection, restart: bool, `from`: float64, to: float64) {.importcpp: "#.loop_all(#, #, #)".}

proc stopAll*(this: AnimControlCollection): bool {.importcpp: "#.stop_all()".}

proc poseAll*(this: AnimControlCollection, frame: float64) {.importcpp: "#.pose_all(#)".}

proc getFrame*(this: AnimControlCollection): int {.importcpp: "#.get_frame()".}

proc getFrame*(this: AnimControlCollection, animName: string): int {.importcpp: "#.get_frame(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumFrames*(this: AnimControlCollection): int {.importcpp: "#.get_num_frames()".}

proc getNumFrames*(this: AnimControlCollection, animName: string): int {.importcpp: "#.get_num_frames(nimStringToStdString(#))", header: stringConversionCode.}

proc isPlaying*(this: AnimControlCollection): bool {.importcpp: "#.is_playing()".}

proc isPlaying*(this: AnimControlCollection, animName: string): bool {.importcpp: "#.is_playing(nimStringToStdString(#))", header: stringConversionCode.}

proc whichAnimPlaying*(this: AnimControlCollection): string {.importcpp: "nimStringFromStdString(#.which_anim_playing())", header: stringConversionCode.}

proc getNumAnims*(this: AnimPreloadTable): int {.importcpp: "#->get_num_anims()".}

proc findAnim*(this: AnimPreloadTable, basename: string): int {.importcpp: "#->find_anim(nimStringToStdString(#))", header: stringConversionCode.}

proc getBasename*(this: AnimPreloadTable, n: int): string {.importcpp: "nimStringFromStdString(#->get_basename(#))", header: stringConversionCode.}

proc getBaseFrameRate*(this: AnimPreloadTable, n: int): float {.importcpp: "#->get_base_frame_rate(#)".}

proc getNumFrames*(this: AnimPreloadTable, n: int): int {.importcpp: "#->get_num_frames(#)".}

proc clearAnims*(this: AnimPreloadTable) {.importcpp: "#->clear_anims()".}

proc removeAnim*(this: AnimPreloadTable, n: int) {.importcpp: "#->remove_anim(#)".}

proc addAnim*(this: AnimPreloadTable, basename: string, baseFrameRate: float, numFrames: int) {.importcpp: "#->add_anim(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc addAnimsFrom*(this: AnimPreloadTable, other: AnimPreloadTable) {.importcpp: "#->add_anims_from(#)".}

proc addIncludeJoint*(this: PartSubset, name: GlobPattern) {.importcpp: "#.add_include_joint(#)".}

proc addExcludeJoint*(this: PartSubset, name: GlobPattern) {.importcpp: "#.add_exclude_joint(#)".}

proc append*(this: PartSubset, other: PartSubset) {.importcpp: "#.append(#)".}

proc isIncludeEmpty*(this: PartSubset): bool {.importcpp: "#.is_include_empty()".}

proc matchesInclude*(this: PartSubset, jointName: string): bool {.importcpp: "#.matches_include(nimStringToStdString(#))", header: stringConversionCode.}

proc matchesExclude*(this: PartSubset, jointName: string): bool {.importcpp: "#.matches_exclude(nimStringToStdString(#))", header: stringConversionCode.}

proc getAnimPreload*(this: PartBundle): AnimPreloadTable {.importcpp: "deconstify(#->get_anim_preload())", header: deconstifyCode.}

proc modifyAnimPreload*(this: PartBundle): AnimPreloadTable {.importcpp: "#->modify_anim_preload()".}

proc setAnimPreload*(this: PartBundle, table: AnimPreloadTable) {.importcpp: "#->set_anim_preload(#)".}

proc clearAnimPreload*(this: PartBundle) {.importcpp: "#->clear_anim_preload()".}

proc mergeAnimPreloads*(this: PartBundle, other: PartBundle) {.importcpp: "#->merge_anim_preloads(#)".}

proc setBlendType*(this: PartBundle, bt: PartBundle_BlendType) {.importcpp: "#->set_blend_type(#)".}

proc getBlendType*(this: PartBundle): PartBundle_BlendType {.importcpp: "#->get_blend_type()".}

proc setAnimBlendFlag*(this: PartBundle, animBlendFlag: bool) {.importcpp: "#->set_anim_blend_flag(#)".}

proc getAnimBlendFlag*(this: PartBundle): bool {.importcpp: "#->get_anim_blend_flag()".}

proc setFrameBlendFlag*(this: PartBundle, frameBlendFlag: bool) {.importcpp: "#->set_frame_blend_flag(#)".}

proc getFrameBlendFlag*(this: PartBundle): bool {.importcpp: "#->get_frame_blend_flag()".}

proc setRootXform*(this: PartBundle, rootXform: LMatrix4) {.importcpp: "#->set_root_xform(#)".}

proc xform*(this: GeometricBoundingVolume | PartBundle, mat: LMatrix4) {.importcpp: "#->xform(#)".}

proc getRootXform*(this: PartBundle): LMatrix4 {.importcpp: "#->get_root_xform()".}

proc applyTransform*(this: PartBundle, transform: TransformState): PartBundle {.importcpp: "#->apply_transform(#)".}

proc getNumNodes*(this: PartBundle): int {.importcpp: "#->get_num_nodes()".}

proc getNode*(this: PartBundle, n: int): PartBundleNode {.importcpp: "#->get_node(#)".}

proc getNumBundles*(this: PartBundleNode): int {.importcpp: "#->get_num_bundles()".}

proc getBundle*(this: PartBundleNode, n: int): PartBundle {.importcpp: "#->get_bundle(#)".}

proc getBundleHandle*(this: PartBundleNode, n: int): PartBundleHandle {.importcpp: "#->get_bundle_handle(#)".}

proc getBundle*(this: PartBundleHandle): PartBundle {.importcpp: "#->get_bundle()".}

proc setBundle*(this: PartBundleHandle, bundle: PartBundle) {.importcpp: "#->set_bundle(#)".}

proc clearControlEffects*(this: PartBundle) {.importcpp: "#->clear_control_effects()".}

proc setControlEffect*(this: PartBundle, control: AnimControl, effect: float) {.importcpp: "#->set_control_effect(#, #)".}

proc getControlEffect*(this: PartBundle, control: AnimControl): float {.importcpp: "#->get_control_effect(#)".}

proc bindAnim*(this: PartBundle, anim: AnimBundle, hierarchyMatchFlags: int, subset: PartSubset): AnimControl {.importcpp: "#->bind_anim(#, #, #)".}

proc bindAnim*(this: PartBundle, anim: AnimBundle, hierarchyMatchFlags: int): AnimControl {.importcpp: "#->bind_anim(#, #)".}

proc bindAnim*(this: PartBundle, anim: AnimBundle): AnimControl {.importcpp: "#->bind_anim(#)".}

proc loadBindAnim*(this: PartBundle, loader: Loader, filename: Filename, hierarchyMatchFlags: int, subset: PartSubset, allowAsync: bool): AnimControl {.importcpp: "#->load_bind_anim(#, #, #, #, #)".}

proc freezeJoint*(this: PartBundle, jointName: string, pos: LVecBase3, hpr: LVecBase3, scale: LVecBase3): bool {.importcpp: "#->freeze_joint(nimStringToStdString(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#))", header: stringConversionCode.}

proc freezeJoint*(this: PartBundle, jointName: string, value: float): bool {.importcpp: "#->freeze_joint(nimStringToStdString(#), #)", header: stringConversionCode.}

proc freezeJoint*(this: PartBundle, jointName: string, transform: TransformState): bool {.importcpp: "#->freeze_joint(nimStringToStdString(#), #)", header: stringConversionCode.}

proc controlJoint*(this: PartBundle, jointName: string, node: PandaNode): bool {.importcpp: "#->control_joint(nimStringToStdString(#), #)", header: stringConversionCode.}

proc releaseJoint*(this: PartBundle, jointName: string): bool {.importcpp: "#->release_joint(nimStringToStdString(#))", header: stringConversionCode.}

proc forceUpdate*(this: PartBundle): bool {.importcpp: "#->force_update()".}

proc getMaxBound*(this: MovingPartBase): int {.importcpp: "#->get_max_bound()".}

proc getBound*(this: MovingPartBase, n: int): AnimChannelBase {.importcpp: "#->get_bound(#)".}

proc outputValue*(this: MovingPartBase, `out`: iostream | ostream) {.importcpp: "#->output_value(#)".}

proc getValue*(this: MovingPartMatrix): LMatrix4 {.importcpp: "#->get_value()".}

proc getDefaultValue*(this: MovingPartMatrix): LMatrix4 {.importcpp: "#->get_default_value()".}

proc getValue*(this: MovingPartScalar | PGSliderBar | PGWaitBar): float {.importcpp: "#->get_value()".}

proc getDefaultValue*(this: MovingPartScalar): float {.importcpp: "#->get_default_value()".}

proc setClientName*(this: PStatClient, name: string) {.importcpp: "#.set_client_name(nimStringToStdString(#))", header: stringConversionCode.}

proc getClientName*(this: PStatClient): string {.importcpp: "nimStringFromStdString(#.get_client_name())", header: stringConversionCode.}

proc setMaxRate*(this: PStatClient, rate: float64) {.importcpp: "#.set_max_rate(#)".}

proc getMaxRate*(this: PStatClient): float64 {.importcpp: "#.get_max_rate()".}

proc getNumCollectors*(this: PStatClient): int {.importcpp: "#.get_num_collectors()".}

proc getCollector*(this: PStatClient, index: int): PStatCollector {.importcpp: "#.get_collector(#)".}

proc getCollectorName*(this: PStatClient, index: int): string {.importcpp: "nimStringFromStdString(#.get_collector_name(#))", header: stringConversionCode.}

proc getCollectorFullname*(this: PStatClient, index: int): string {.importcpp: "nimStringFromStdString(#.get_collector_fullname(#))", header: stringConversionCode.}

proc getNumThreads*(this: ConnectionWriter | DatagramSinkNet | PStatClient): int {.importcpp: "#.get_num_threads()".}

proc getThread*(this: PStatClient, index: int): PStatThread {.importcpp: "#.get_thread(#)".}

proc getThreadName*(this: PStatClient, index: int): string {.importcpp: "nimStringFromStdString(#.get_thread_name(#))", header: stringConversionCode.}

proc getThreadSyncName*(this: PStatClient, index: int): string {.importcpp: "nimStringFromStdString(#.get_thread_sync_name(#))", header: stringConversionCode.}

proc getThreadObject*(this: PStatClient, index: int): Thread {.importcpp: "#.get_thread_object(#)".}

proc getMainThread*(this: PStatClient): PStatThread {.importcpp: "#.get_main_thread()".}

proc getCurrentThread*(this: PStatClient): PStatThread {.importcpp: "#.get_current_thread()".}

proc getRealTime*(this: PStatClient): float64 {.importcpp: "#.get_real_time()".}

proc isActive*(this: PStatCollector): bool {.importcpp: "#.is_active()".}

proc isActive*(this: PStatCollector, thread: PStatThread): bool {.importcpp: "#.is_active(#)".}

proc isStarted*(this: PStatCollector): bool {.importcpp: "#.is_started()".}

proc isStarted*(this: PStatCollector, thread: PStatThread): bool {.importcpp: "#.is_started(#)".}

proc start*(this: PStatCollector) {.importcpp: "#.start()".}

proc start*(this: PStatCollector, thread: PStatThread) {.importcpp: "#.start(#)".}

proc start*(this: PStatCollector, thread: PStatThread, asOf: float64) {.importcpp: "#.start(#, #)".}

proc stop*(this: PStatCollector) {.importcpp: "#.stop()".}

proc stop*(this: PStatCollector, thread: PStatThread) {.importcpp: "#.stop(#)".}

proc stop*(this: PStatCollector, thread: PStatThread, asOf: float64) {.importcpp: "#.stop(#, #)".}

proc clearLevel*(this: PStatCollector) {.importcpp: "#.clear_level()".}

proc clearLevel*(this: PStatCollector, thread: PStatThread) {.importcpp: "#.clear_level(#)".}

proc setLevel*(this: PStatCollector, thread: PStatThread, level: float64) {.importcpp: "#.set_level(#, #)".}

proc setLevel*(this: PStatCollector, level: float64) {.importcpp: "#.set_level(#)".}

proc addLevel*(this: PStatCollector, thread: PStatThread, increment: float64) {.importcpp: "#.add_level(#, #)".}

proc addLevel*(this: PStatCollector, increment: float64) {.importcpp: "#.add_level(#)".}

proc subLevel*(this: PStatCollector, thread: PStatThread, decrement: float64) {.importcpp: "#.sub_level(#, #)".}

proc subLevel*(this: PStatCollector, decrement: float64) {.importcpp: "#.sub_level(#)".}

proc addLevelNow*(this: PStatCollector, increment: float64) {.importcpp: "#.add_level_now(#)".}

proc subLevelNow*(this: PStatCollector, decrement: float64) {.importcpp: "#.sub_level_now(#)".}

proc flushLevel*(this: PStatCollector) {.importcpp: "#.flush_level()".}

proc getLevel*(this: PStatCollector): float64 {.importcpp: "#.get_level()".}

proc getLevel*(this: PStatCollector, thread: PStatThread): float64 {.importcpp: "#.get_level(#)".}

proc clearThreadLevel*(this: PStatCollector) {.importcpp: "#.clear_thread_level()".}

proc setThreadLevel*(this: PStatCollector, level: float64) {.importcpp: "#.set_thread_level(#)".}

proc addThreadLevel*(this: PStatCollector, increment: float64) {.importcpp: "#.add_thread_level(#)".}

proc subThreadLevel*(this: PStatCollector, decrement: float64) {.importcpp: "#.sub_thread_level(#)".}

proc getThreadLevel*(this: PStatCollector): float64 {.importcpp: "#.get_thread_level()".}

proc newFrame*(this: PStatThread) {.importcpp: "#.new_frame()".}

proc getThread*(this: PStatThread): Thread {.importcpp: "#.get_thread()".}

proc clientMainTick*(this: PStatClient) {.importcpp: "#.client_main_tick()".}

proc clientThreadTick*(this: PStatClient, syncName: string) {.importcpp: "#.client_thread_tick(nimStringToStdString(#))", header: stringConversionCode.}

proc clientConnect*(this: PStatClient, hostname: string, port: int): bool {.importcpp: "#.client_connect(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clientDisconnect*(this: PStatClient) {.importcpp: "#.client_disconnect()".}

proc clientIsConnected*(this: PStatClient): bool {.importcpp: "#.client_is_connected()".}

proc clientResumeAfterPause*(this: PStatClient) {.importcpp: "#.client_resume_after_pause()".}

proc addNetTransform*(this: CharacterJoint, node: PandaNode): bool {.importcpp: "#->add_net_transform(#)".}

proc removeNetTransform*(this: CharacterJoint, node: PandaNode): bool {.importcpp: "#->remove_net_transform(#)".}

proc hasNetTransform*(this: CharacterJoint, node: PandaNode): bool {.importcpp: "#->has_net_transform(#)".}

proc clearNetTransforms*(this: CharacterJoint) {.importcpp: "#->clear_net_transforms()".}

proc getNetTransforms*(this: CharacterJoint): NodePathCollection {.importcpp: "#->get_net_transforms()".}

proc addLocalTransform*(this: CharacterJoint, node: PandaNode): bool {.importcpp: "#->add_local_transform(#)".}

proc removeLocalTransform*(this: CharacterJoint, node: PandaNode): bool {.importcpp: "#->remove_local_transform(#)".}

proc hasLocalTransform*(this: CharacterJoint, node: PandaNode): bool {.importcpp: "#->has_local_transform(#)".}

proc clearLocalTransforms*(this: CharacterJoint) {.importcpp: "#->clear_local_transforms()".}

proc getLocalTransforms*(this: CharacterJoint): NodePathCollection {.importcpp: "#->get_local_transforms()".}

proc getTransform*(this: CharacterJoint | TextNode | TrackerNode): LMatrix4 {.importcpp: "#->get_transform()".}

proc getTransform*(this: CharacterJoint, transform: LMatrix4) {.importcpp: "#->get_transform(#)".}

proc getTransformState*(this: CharacterJoint): TransformState {.importcpp: "deconstify(#->get_transform_state())", header: deconstifyCode.}

proc getNetTransform*(this: CharacterJoint, transform: LMatrix4) {.importcpp: "#->get_net_transform(#)".}

proc getCharacter*(this: CharacterJoint | CharacterJointEffect): Character {.importcpp: "#->get_character()".}

proc getCharSlider*(this: CharacterVertexSlider): CharacterSlider {.importcpp: "deconstify(#->get_char_slider())", header: deconstifyCode.}

proc getJoint*(this: JointVertexTransform): CharacterJoint {.importcpp: "deconstify(#->get_joint())", header: deconstifyCode.}

proc getBundle*(this: Character, i: int): CharacterJointBundle {.importcpp: "#->get_bundle(#)".}

proc mergeBundles*(this: Character, oldBundle: PartBundle, otherBundle: PartBundle) {.importcpp: "#->merge_bundles(#, #)".}

proc mergeBundles*(this: Character, oldBundleHandle: PartBundleHandle, otherBundleHandle: PartBundleHandle) {.importcpp: "#->merge_bundles(#, #)".}

proc setLodAnimation*(this: Character, center: LPoint3, farDistance: float, nearDistance: float, delayFactor: float) {.importcpp: "#->set_lod_animation((LPoint3 const &)(#), #, #, #)".}

proc clearLodAnimation*(this: Character) {.importcpp: "#->clear_lod_animation()".}

proc findJoint*(this: Character, name: string): CharacterJoint {.importcpp: "#->find_joint(nimStringToStdString(#))", header: stringConversionCode.}

proc findSlider*(this: Character, name: string): CharacterSlider {.importcpp: "#->find_slider(nimStringToStdString(#))", header: stringConversionCode.}

proc writeParts*(this: Character, `out`: iostream | ostream) {.importcpp: "#->write_parts(#)".}

proc writePartValues*(this: Character, `out`: iostream | ostream) {.importcpp: "#->write_part_values(#)".}

proc updateToNow*(this: Character) {.importcpp: "#->update_to_now()".}

proc forceUpdate*(this: Character | TextNode) {.importcpp: "#->force_update()".}

proc getNode*(this: CharacterJointBundle, n: int): Character {.importcpp: "#->get_node(#)".}

proc getCollisionOrigin*(this: CollisionSolid): LPoint3 {.importcpp: "#->get_collision_origin()".}

proc setTangible*(this: CollisionSolid, tangible: bool) {.importcpp: "#->set_tangible(#)".}

proc isTangible*(this: CollisionSolid): bool {.importcpp: "#->is_tangible()".}

proc setEffectiveNormal*(this: CollisionSolid, effectiveNormal: LVector3) {.importcpp: "#->set_effective_normal((LVector3 const &)(#))".}

proc clearEffectiveNormal*(this: CollisionSolid) {.importcpp: "#->clear_effective_normal()".}

proc hasEffectiveNormal*(this: CollisionSolid): bool {.importcpp: "#->has_effective_normal()".}

proc getEffectiveNormal*(this: CollisionSolid): LVector3 {.importcpp: "#->get_effective_normal()".}

proc setRespectEffectiveNormal*(this: CollisionSolid, respectEffectiveNormal: bool) {.importcpp: "#->set_respect_effective_normal(#)".}

proc getRespectEffectiveNormal*(this: CollisionSolid): bool {.importcpp: "#->get_respect_effective_normal()".}

proc setBounds*(this: CollisionSolid, boundingVolume: BoundingVolume) {.importcpp: "#->set_bounds(#)".}

proc getPointAabb*(this: CollisionBox, n: int): LPoint3 {.importcpp: "#->get_point_aabb(#)".}

proc setPlane*(this: CollisionBox, n: int): LPlane {.importcpp: "#->set_plane(#)".}

proc getPlane*(this: BoundingBox | BoundingHexahedron | CollisionBox, n: int): LPlane {.importcpp: "#->get_plane(#)".}

proc setCenter*(this: CollisionBox | CollisionSphere, x: float, y: float, z: float) {.importcpp: "#->set_center(#, #, #)".}

proc getMin*(this: CollisionBox | FiniteBoundingVolume): LPoint3 {.importcpp: "#->get_min()".}

proc getMax*(this: CollisionBox | FiniteBoundingVolume): LPoint3 {.importcpp: "#->get_max()".}

proc getDimensions*(this: CollisionBox): LVector3 {.importcpp: "#->get_dimensions()".}

proc setPointA*(this: CollisionCapsule | CollisionSegment, a: LPoint3) {.importcpp: "#->set_point_a((LPoint3 const &)(#))".}

proc setPointA*(this: CollisionCapsule | CollisionSegment, x: float, y: float, z: float) {.importcpp: "#->set_point_a(#, #, #)".}

proc getPointA*(this: BoundingLine | CollisionCapsule | CollisionSegment): LPoint3 {.importcpp: "#->get_point_a()".}

proc setPointB*(this: CollisionCapsule | CollisionSegment, b: LPoint3) {.importcpp: "#->set_point_b((LPoint3 const &)(#))".}

proc setPointB*(this: CollisionCapsule | CollisionSegment, x: float, y: float, z: float) {.importcpp: "#->set_point_b(#, #, #)".}

proc getPointB*(this: BoundingLine | CollisionCapsule | CollisionSegment): LPoint3 {.importcpp: "#->get_point_b()".}

proc setCollideMask*(this: CollisionNode, mask: CollideMask) {.importcpp: "#->set_collide_mask(#)".}

proc setFromCollideMask*(this: CollisionNode, mask: CollideMask) {.importcpp: "#->set_from_collide_mask(#)".}

proc getFromCollideMask*(this: CollisionNode): CollideMask {.importcpp: "#->get_from_collide_mask()".}

proc clearSolids*(this: CollisionNode) {.importcpp: "#->clear_solids()".}

proc getNumSolids*(this: CollisionNode): int {.importcpp: "#->get_num_solids()".}

proc getSolid*(this: CollisionNode, n: int): CollisionSolid {.importcpp: "deconstify(#->get_solid(#))", header: deconstifyCode.}

proc modifySolid*(this: CollisionNode, n: int): CollisionSolid {.importcpp: "#->modify_solid(#)".}

proc setSolid*(this: CollisionNode, n: int, solid: CollisionSolid) {.importcpp: "#->set_solid(#, #)".}

proc insertSolid*(this: CollisionNode, n: int, solid: CollisionSolid) {.importcpp: "#->insert_solid(#, #)".}

proc removeSolid*(this: CollisionNode, n: int) {.importcpp: "#->remove_solid(#)".}

proc addSolid*(this: CollisionNode, solid: CollisionSolid): int {.importcpp: "#->add_solid(#)".}

proc getColliderSort*(this: CollisionNode): int {.importcpp: "#->get_collider_sort()".}

proc setColliderSort*(this: CollisionNode, sort: int) {.importcpp: "#->set_collider_sort(#)".}

proc setRespectPrevTransform*(this: CollisionTraverser, flag: bool) {.importcpp: "#.set_respect_prev_transform(#)".}

proc getRespectPrevTransform*(this: CollisionTraverser): bool {.importcpp: "#.get_respect_prev_transform()".}

proc addCollider*(this: CollisionTraverser, collider: NodePath, handler: CollisionHandler) {.importcpp: "#.add_collider(#, #)".}

proc removeCollider*(this: CollisionTraverser, collider: NodePath): bool {.importcpp: "#.remove_collider(#)".}

proc hasCollider*(this: CollisionTraverser, collider: NodePath): bool {.importcpp: "#.has_collider(#)".}

proc getNumColliders*(this: CollisionTraverser): int {.importcpp: "#.get_num_colliders()".}

proc getCollider*(this: CollisionTraverser, n: int): NodePath {.importcpp: "#.get_collider(#)".}

proc getHandler*(this: CollisionTraverser, collider: NodePath): CollisionHandler {.importcpp: "#.get_handler(#)".}

proc clearColliders*(this: CollisionTraverser) {.importcpp: "#.clear_colliders()".}

proc traverse*(this: CollisionTraverser, root: NodePath) {.importcpp: "#.traverse(#)".}

proc setRecorder*(this: CollisionTraverser, recorder: CollisionVisualizer | CollisionRecorder) {.importcpp: "#.set_recorder(#)".}

proc hasRecorder*(this: CollisionTraverser): bool {.importcpp: "#.has_recorder()".}

proc getRecorder*(this: CollisionTraverser): CollisionRecorder {.importcpp: "#.get_recorder()".}

proc clearRecorder*(this: CollisionTraverser) {.importcpp: "#.clear_recorder()".}

proc showCollisions*(this: CollisionTraverser, root: NodePath): CollisionVisualizer {.importcpp: "#.show_collisions(#)".}

proc hideCollisions*(this: CollisionTraverser) {.importcpp: "#.hide_collisions()".}

proc getFrom*(this: CollisionEntry): CollisionSolid {.importcpp: "deconstify(#->get_from())", header: deconstifyCode.}

proc hasInto*(this: CollisionEntry): bool {.importcpp: "#->has_into()".}

proc getInto*(this: CollisionEntry): CollisionSolid {.importcpp: "deconstify(#->get_into())", header: deconstifyCode.}

proc getFromNode*(this: CollisionEntry): CollisionNode {.importcpp: "#->get_from_node()".}

proc getIntoNode*(this: CollisionEntry): PandaNode {.importcpp: "#->get_into_node()".}

proc getFromNodePath*(this: CollisionEntry): NodePath {.importcpp: "#->get_from_node_path()".}

proc getIntoNodePath*(this: CollisionEntry): NodePath {.importcpp: "#->get_into_node_path()".}

proc setT*(this: CollisionEntry, t: float) {.importcpp: "#->set_t(#)".}

proc getT*(this: CollisionEntry): float {.importcpp: "#->get_t()".}

proc collided*(this: CollisionEntry): bool {.importcpp: "#->collided()".}

proc resetCollided*(this: CollisionEntry) {.importcpp: "#->reset_collided()".}

proc getRespectPrevTransform*(this: CollisionEntry): bool {.importcpp: "#->get_respect_prev_transform()".}

proc setSurfacePoint*(this: CollisionEntry, point: LPoint3) {.importcpp: "#->set_surface_point((LPoint3 const &)(#))".}

proc setSurfaceNormal*(this: CollisionEntry, normal: LVector3) {.importcpp: "#->set_surface_normal((LVector3 const &)(#))".}

proc setInteriorPoint*(this: CollisionEntry, point: LPoint3) {.importcpp: "#->set_interior_point((LPoint3 const &)(#))".}

proc hasSurfacePoint*(this: CollisionEntry): bool {.importcpp: "#->has_surface_point()".}

proc hasSurfaceNormal*(this: CollisionEntry): bool {.importcpp: "#->has_surface_normal()".}

proc hasInteriorPoint*(this: CollisionEntry): bool {.importcpp: "#->has_interior_point()".}

proc setContactPos*(this: CollisionEntry, pos: LPoint3) {.importcpp: "#->set_contact_pos((LPoint3 const &)(#))".}

proc setContactNormal*(this: CollisionEntry, normal: LVector3) {.importcpp: "#->set_contact_normal((LVector3 const &)(#))".}

proc hasContactPos*(this: CollisionEntry): bool {.importcpp: "#->has_contact_pos()".}

proc hasContactNormal*(this: CollisionEntry): bool {.importcpp: "#->has_contact_normal()".}

proc getSurfacePoint*(this: CollisionEntry, space: NodePath): LPoint3 {.importcpp: "#->get_surface_point(#)".}

proc getSurfaceNormal*(this: CollisionEntry, space: NodePath): LVector3 {.importcpp: "#->get_surface_normal(#)".}

proc getInteriorPoint*(this: CollisionEntry, space: NodePath): LPoint3 {.importcpp: "#->get_interior_point(#)".}

proc getAll*(this: CollisionEntry, space: NodePath, surfacePoint: LPoint3, surfaceNormal: LVector3, interiorPoint: LPoint3): bool {.importcpp: "#->get_all(#, (LPoint3 &)(#), (LVector3 &)(#), (LPoint3 &)(#))".}

proc getContactPos*(this: CollisionEntry, space: NodePath): LPoint3 {.importcpp: "#->get_contact_pos(#)".}

proc getContactNormal*(this: CollisionEntry, space: NodePath): LVector3 {.importcpp: "#->get_contact_normal(#)".}

proc getAllContactInfo*(this: CollisionEntry, space: NodePath, contactPos: LPoint3, contactNormal: LVector3): bool {.importcpp: "#->get_all_contact_info(#, (LPoint3 &)(#), (LVector3 &)(#))".}

proc getNormal*(this: CollisionPlane): LVector3 {.importcpp: "#->get_normal()".}

proc distToPlane*(this: CollisionPlane, point: LPoint3): float {.importcpp: "#->dist_to_plane((LPoint3 const &)(#))".}

proc flip*(this: CollisionPlane) {.importcpp: "#->flip()".}

proc addVertex*(this: CollisionFloorMesh, vert: LPoint3) {.importcpp: "#->add_vertex((LPoint3 const &)(#))".}

proc addTriangle*(this: CollisionFloorMesh, pointA: int, pointB: int, pointC: int) {.importcpp: "#->add_triangle(#, #, #)".}

proc getVertex*(this: CollisionFloorMesh, index: int): LPoint3 {.importcpp: "#->get_vertex(#)".}

proc getNumTriangles*(this: CollisionFloorMesh): int {.importcpp: "#->get_num_triangles()".}

proc getTriangle*(this: CollisionFloorMesh, index: int): LPoint3i {.importcpp: "#->get_triangle(#)".}

proc isConcave*(this: CollisionPolygon): bool {.importcpp: "#->is_concave()".}

proc clearInPatterns*(this: CollisionHandlerEvent) {.importcpp: "#->clear_in_patterns()".}

proc addInPattern*(this: CollisionHandlerEvent, inPattern: string) {.importcpp: "#->add_in_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc setInPattern*(this: CollisionHandlerEvent, inPattern: string) {.importcpp: "#->set_in_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumInPatterns*(this: CollisionHandlerEvent): int {.importcpp: "#->get_num_in_patterns()".}

proc getInPattern*(this: CollisionHandlerEvent, n: int): string {.importcpp: "nimStringFromStdString(#->get_in_pattern(#))", header: stringConversionCode.}

proc clearAgainPatterns*(this: CollisionHandlerEvent) {.importcpp: "#->clear_again_patterns()".}

proc addAgainPattern*(this: CollisionHandlerEvent, againPattern: string) {.importcpp: "#->add_again_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc setAgainPattern*(this: CollisionHandlerEvent, againPattern: string) {.importcpp: "#->set_again_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumAgainPatterns*(this: CollisionHandlerEvent): int {.importcpp: "#->get_num_again_patterns()".}

proc getAgainPattern*(this: CollisionHandlerEvent, n: int): string {.importcpp: "nimStringFromStdString(#->get_again_pattern(#))", header: stringConversionCode.}

proc clearOutPatterns*(this: CollisionHandlerEvent) {.importcpp: "#->clear_out_patterns()".}

proc addOutPattern*(this: CollisionHandlerEvent, outPattern: string) {.importcpp: "#->add_out_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc setOutPattern*(this: CollisionHandlerEvent, outPattern: string) {.importcpp: "#->set_out_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumOutPatterns*(this: CollisionHandlerEvent): int {.importcpp: "#->get_num_out_patterns()".}

proc getOutPattern*(this: CollisionHandlerEvent, n: int): string {.importcpp: "nimStringFromStdString(#->get_out_pattern(#))", header: stringConversionCode.}

proc clear*(this: ButtonEventList | CollisionHandlerEvent | CollisionVisualizer | DynamicTextFont | EventQueue | FilterProperties | Lens | ParametricCurveCollection | PointerEventList | Socket_Address | TextNode | TextProperties | Texture) {.importcpp: "#->clear()".}

proc writeDatagram*(this: CollisionHandlerEvent | CollisionHandlerFloor | CollisionHandlerGravity | CollisionHandlerPusher, destination: Datagram) {.importcpp: "#->write_datagram(#)".}

proc readDatagram*(this: CollisionHandlerEvent | CollisionHandlerFloor | CollisionHandlerGravity | CollisionHandlerPusher, source: DatagramIterator) {.importcpp: "#->read_datagram(#)".}

proc addCollider*(this: CollisionHandlerPhysical, collider: NodePath, target: NodePath) {.importcpp: "#->add_collider(#, #)".}

proc addCollider*(this: CollisionHandlerPhysical, collider: NodePath, target: NodePath, driveInterface: DriveInterface) {.importcpp: "#->add_collider(#, #, #)".}

proc removeCollider*(this: CollisionHandlerPhysical, collider: NodePath): bool {.importcpp: "#->remove_collider(#)".}

proc hasCollider*(this: CollisionHandlerPhysical, collider: NodePath): bool {.importcpp: "#->has_collider(#)".}

proc clearColliders*(this: CollisionHandlerPhysical) {.importcpp: "#->clear_colliders()".}

proc setCenter*(this: CollisionHandlerPhysical, center: NodePath) {.importcpp: "#->set_center(#)".}

proc clearCenter*(this: CollisionHandlerPhysical) {.importcpp: "#->clear_center()".}

proc getCenter*(this: CollisionHandlerPhysical): NodePath {.importcpp: "#->get_center()".}

proc hasCenter*(this: CollisionHandlerPhysical): bool {.importcpp: "#->has_center()".}

proc hasContact*(this: CollisionHandlerPhysical): bool {.importcpp: "#->has_contact()".}

proc setReach*(this: CollisionHandlerFloor | CollisionHandlerGravity, reach: float) {.importcpp: "#->set_reach(#)".}

proc getReach*(this: CollisionHandlerFloor | CollisionHandlerGravity): float {.importcpp: "#->get_reach()".}

proc setMaxVelocity*(this: CollisionHandlerFloor | CollisionHandlerGravity, maxVel: float) {.importcpp: "#->set_max_velocity(#)".}

proc getMaxVelocity*(this: CollisionHandlerFloor | CollisionHandlerGravity): float {.importcpp: "#->get_max_velocity()".}

proc setHorizontal*(this: CollisionHandlerPusher, flag: bool) {.importcpp: "#->set_horizontal(#)".}

proc getHorizontal*(this: CollisionHandlerPusher): bool {.importcpp: "#->get_horizontal()".}

proc getAirborneHeight*(this: CollisionHandlerGravity): float {.importcpp: "#->get_airborne_height()".}

proc isOnGround*(this: CollisionHandlerGravity): bool {.importcpp: "#->is_on_ground()".}

proc getImpactVelocity*(this: CollisionHandlerGravity): float {.importcpp: "#->get_impact_velocity()".}

proc getContactNormal*(this: CollisionHandlerGravity): LVector3 {.importcpp: "#->get_contact_normal()".}

proc addVelocity*(this: CollisionHandlerGravity, velocity: float) {.importcpp: "#->add_velocity(#)".}

proc setVelocity*(this: CollisionHandlerGravity, velocity: float) {.importcpp: "#->set_velocity(#)".}

proc getVelocity*(this: CollisionHandlerGravity): float {.importcpp: "#->get_velocity()".}

proc setGravity*(this: CollisionHandlerGravity, gravity: float) {.importcpp: "#->set_gravity(#)".}

proc getGravity*(this: CollisionHandlerGravity): float {.importcpp: "#->get_gravity()".}

proc setLegacyMode*(this: CollisionHandlerGravity, legacyMode: bool) {.importcpp: "#->set_legacy_mode(#)".}

proc getLegacyMode*(this: CollisionHandlerGravity): bool {.importcpp: "#->get_legacy_mode()".}

proc sortEntries*(this: CollisionHandlerQueue) {.importcpp: "#->sort_entries()".}

proc clearEntries*(this: CollisionHandlerQueue) {.importcpp: "#->clear_entries()".}

proc getNumEntries*(this: CollisionHandlerQueue): int {.importcpp: "#->get_num_entries()".}

proc getEntry*(this: CollisionHandlerQueue, n: int): CollisionEntry {.importcpp: "#->get_entry(#)".}

proc setOrigin*(this: CollisionRay, origin: LPoint3) {.importcpp: "#->set_origin((LPoint3 const &)(#))".}

proc setOrigin*(this: CollisionRay, x: float, y: float, z: float) {.importcpp: "#->set_origin(#, #, #)".}

proc getOrigin*(this: CollisionRay | Trackball): LPoint3 {.importcpp: "#->get_origin()".}

proc setDirection*(this: CollisionRay, x: float, y: float, z: float) {.importcpp: "#->set_direction(#, #, #)".}

proc setFromLens*(this: CollisionRay | CollisionSegment, camera: LensNode, point: LPoint2): bool {.importcpp: "#->set_from_lens(#, (LPoint2 const &)(#))".}

proc setFromLens*(this: CollisionRay | CollisionSegment, camera: LensNode, px: float, py: float): bool {.importcpp: "#->set_from_lens(#, #, #)".}

proc setParabola*(this: CollisionParabola, parabola: LParabola) {.importcpp: "#->set_parabola(#)".}

proc getParabola*(this: CollisionParabola): LParabola {.importcpp: "#->get_parabola()".}

proc setT1*(this: CollisionParabola, t1: float) {.importcpp: "#->set_t1(#)".}

proc getT1*(this: CollisionParabola): float {.importcpp: "#->get_t1()".}

proc setT2*(this: CollisionParabola, t2: float) {.importcpp: "#->set_t2(#)".}

proc getT2*(this: CollisionParabola): float {.importcpp: "#->get_t2()".}

proc upcastToCollisionRecorder*(this: CollisionVisualizer): CollisionRecorder {.importcpp: "((CollisionRecorder *)(CollisionVisualizer *)(#))".}

proc setPointScale*(this: CollisionVisualizer, pointScale: float) {.importcpp: "#->set_point_scale(#)".}

proc getPointScale*(this: CollisionVisualizer): float {.importcpp: "#->get_point_scale()".}

proc setNormalScale*(this: CollisionVisualizer, normalScale: float) {.importcpp: "#->set_normal_scale(#)".}

proc getNormalScale*(this: CollisionVisualizer): float {.importcpp: "#->get_normal_scale()".}

proc hasTracker*(this: InputDevice): bool {.importcpp: "#->has_tracker()".}

proc hasBattery*(this: InputDevice): bool {.importcpp: "#->has_battery()".}

proc getNumButtons*(this: ButtonMap | ButtonNode | InputDevice): int {.importcpp: "#->get_num_buttons()".}

proc getNumAxes*(this: InputDevice): int {.importcpp: "#->get_num_axes()".}

proc mapButton*(this: InputDevice, index: int, handle: ButtonHandle) {.importcpp: "#->map_button(#, #)".}

proc setVibration*(this: InputDevice, strong: float64, weak: float64) {.importcpp: "#->set_vibration(#, #)".}

proc enablePointerEvents*(this: InputDevice) {.importcpp: "#->enable_pointer_events()".}

proc disablePointerEvents*(this: InputDevice) {.importcpp: "#->disable_pointer_events()".}

proc poll*(this: AsyncTaskChain | AsyncTaskManager | ConnectionReader | DatagramGeneratorNet | InputDevice) {.importcpp: "#->poll()".}

proc hasButtonEvent*(this: InputDevice): bool {.importcpp: "#->has_button_event()".}

proc getButtonEvents*(this: InputDevice): ButtonEventList {.importcpp: "#->get_button_events()".}

proc hasPointerEvent*(this: InputDevice): bool {.importcpp: "#->has_pointer_event()".}

proc getPointerEvents*(this: InputDevice): PointerEventList {.importcpp: "#->get_pointer_events()".}

proc forkAsynchronousThread*(this: ClientBase, pollTime: float64): bool {.importcpp: "#->fork_asynchronous_thread(#)".}

proc isForked*(this: ClientBase): bool {.importcpp: "#->is_forked()".}

proc poll*(this: ClientBase): bool {.importcpp: "#->poll()".}

proc getLastPollTime*(this: ClientBase): float64 {.importcpp: "#->get_last_poll_time()".}

proc setCoordinateSystem*(this: ClientBase | GraphicsStateGuardian | Lens | TextNode | Trackball, cs: CoordinateSystem) {.importcpp: "#->set_coordinate_system(#)".}

proc getCoordinateSystem*(this: ClientBase | GraphicsStateGuardian | Lens | TextNode | Trackball): CoordinateSystem {.importcpp: "#->get_coordinate_system()".}

proc getNumControls*(this: AnalogNode): int {.importcpp: "#->get_num_controls()".}

proc getControlState*(this: AnalogNode, index: int): float64 {.importcpp: "#->get_control_state(#)".}

proc isControlKnown*(this: AnalogNode, index: int): bool {.importcpp: "#->is_control_known(#)".}

proc setOutput*(this: AnalogNode, channel: int, index: int, flip: bool) {.importcpp: "#->set_output(#, #, #)".}

proc clearOutput*(this: AnalogNode, channel: int) {.importcpp: "#->clear_output(#)".}

proc getOutput*(this: AnalogNode, channel: int): int {.importcpp: "#->get_output(#)".}

proc isOutputFlipped*(this: AnalogNode, channel: int): bool {.importcpp: "#->is_output_flipped(#)".}

proc setButtonMap*(this: ButtonNode, index: int, button: ButtonHandle) {.importcpp: "#->set_button_map(#, #)".}

proc getButtonMap*(this: ButtonNode, index: int): ButtonHandle {.importcpp: "#->get_button_map(#)".}

proc getButtonState*(this: ButtonNode, index: int): bool {.importcpp: "#->get_button_state(#)".}

proc isButtonKnown*(this: ButtonNode, index: int): bool {.importcpp: "#->is_button_known(#)".}

proc getNumDials*(this: DialNode): int {.importcpp: "#->get_num_dials()".}

proc readDial*(this: DialNode, index: int): float64 {.importcpp: "#->read_dial(#)".}

proc isDialKnown*(this: DialNode, index: int): bool {.importcpp: "#->is_dial_known(#)".}

proc `[]`*(this: InputDeviceSet, index: int): InputDevice {.importcpp: "#.operator [](#)".}

proc getDevices*(this: InputDeviceManager): InputDeviceSet {.importcpp: "#.get_devices()".}

proc addDevice*(this: InputDeviceManager, device: InputDevice) {.importcpp: "#.add_device(#)".}

proc removeDevice*(this: InputDeviceManager, device: InputDevice) {.importcpp: "#.remove_device(#)".}

proc update*(this: InputDeviceManager) {.importcpp: "#.update()".}

proc checkEvents*(this: LinuxJoystickDevice): bool {.importcpp: "#->check_events()".}

proc getOrient*(this: TrackerNode): LOrientation {.importcpp: "#->get_orient()".}

proc hasTime*(this: TrackerNode): bool {.importcpp: "#->has_time()".}

proc setTrackerCoordinateSystem*(this: TrackerNode, cs: CoordinateSystem) {.importcpp: "#->set_tracker_coordinate_system(#)".}

proc getTrackerCoordinateSystem*(this: TrackerNode): CoordinateSystem {.importcpp: "#->get_tracker_coordinate_system()".}

proc setGraphCoordinateSystem*(this: TrackerNode, cs: CoordinateSystem) {.importcpp: "#->set_graph_coordinate_system(#)".}

proc getGraphCoordinateSystem*(this: TrackerNode): CoordinateSystem {.importcpp: "#->get_graph_coordinate_system()".}

proc setMousePos*(this: VirtualMouse, x: int, y: int) {.importcpp: "#->set_mouse_pos(#, #)".}

proc setWindowSize*(this: VirtualMouse, width: int, height: int) {.importcpp: "#->set_window_size(#, #)".}

proc setMouseOn*(this: VirtualMouse, flag: bool) {.importcpp: "#->set_mouse_on(#)".}

proc pressButton*(this: VirtualMouse, button: ButtonHandle) {.importcpp: "#->press_button(#)".}

proc releaseButton*(this: VirtualMouse, button: ButtonHandle) {.importcpp: "#->release_button(#)".}

proc getCurrentThread*(this: DataGraphTraverser | GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): Thread {.importcpp: "#.get_current_thread()".}

proc traverse*(this: DataGraphTraverser, node: PandaNode) {.importcpp: "#.traverse(#)".}

proc collectLeftovers*(this: DataGraphTraverser) {.importcpp: "#.collect_leftovers()".}

proc writeInputs*(this: DataNode, `out`: iostream | ostream) {.importcpp: "#->write_inputs(#)".}

proc writeOutputs*(this: DataNode, `out`: iostream | ostream) {.importcpp: "#->write_outputs(#)".}

proc writeConnections*(this: DataNode, `out`: iostream | ostream) {.importcpp: "#->write_connections(#)".}

proc getPipe*(this: DisplayRegion | GraphicsDevice | GraphicsOutput | GraphicsStateGuardian): GraphicsPipe {.importcpp: "#->get_pipe()".}

proc getSupportedTypes*(this: GraphicsPipe): int {.importcpp: "#->get_supported_types()".}

proc supportsType*(this: GraphicsPipe, flags: int): bool {.importcpp: "#->supports_type(#)".}

proc getDisplayWidth*(this: GraphicsPipe): int {.importcpp: "#->get_display_width()".}

proc getDisplayHeight*(this: GraphicsPipe): int {.importcpp: "#->get_display_height()".}

proc getDisplayZoom*(this: GraphicsPipe): float {.importcpp: "#->get_display_zoom()".}

proc getDisplayInformation*(this: GraphicsPipe): DisplayInformation {.importcpp: "#->get_display_information()".}

proc getDisplayState*(this: DisplayInformation): int {.importcpp: "#.get_display_state()".}

proc getMaximumWindowWidth*(this: DisplayInformation): int {.importcpp: "#.get_maximum_window_width()".}

proc getMaximumWindowHeight*(this: DisplayInformation): int {.importcpp: "#.get_maximum_window_height()".}

proc getWindowBitsPerPixel*(this: DisplayInformation): int {.importcpp: "#.get_window_bits_per_pixel()".}

proc getTotalDisplayModes*(this: DisplayInformation): int {.importcpp: "#.get_total_display_modes()".}

proc getDisplayMode*(this: DisplayInformation, displayIndex: int): DisplayMode {.importcpp: "#.get_display_mode(#)".}

proc getDisplayModeWidth*(this: DisplayInformation, displayIndex: int): int {.importcpp: "#.get_display_mode_width(#)".}

proc getDisplayModeHeight*(this: DisplayInformation, displayIndex: int): int {.importcpp: "#.get_display_mode_height(#)".}

proc getDisplayModeBitsPerPixel*(this: DisplayInformation, displayIndex: int): int {.importcpp: "#.get_display_mode_bits_per_pixel(#)".}

proc getDisplayModeRefreshRate*(this: DisplayInformation, displayIndex: int): int {.importcpp: "#.get_display_mode_refresh_rate(#)".}

proc getDisplayModeFullscreenOnly*(this: DisplayInformation, displayIndex: int): int {.importcpp: "#.get_display_mode_fullscreen_only(#)".}

proc getShaderModel*(this: DisplayInformation): GraphicsStateGuardian_ShaderModel {.importcpp: "#.get_shader_model()".}

proc getVideoMemory*(this: DisplayInformation): int {.importcpp: "#.get_video_memory()".}

proc getTextureMemory*(this: DisplayInformation): int {.importcpp: "#.get_texture_memory()".}

proc updateMemoryInformation*(this: DisplayInformation) {.importcpp: "#.update_memory_information()".}

proc getPhysicalMemory*(this: DisplayInformation): clonglong {.importcpp: "#.get_physical_memory()".}

proc getAvailablePhysicalMemory*(this: DisplayInformation): clonglong {.importcpp: "#.get_available_physical_memory()".}

proc getPageFileSize*(this: DisplayInformation): clonglong {.importcpp: "#.get_page_file_size()".}

proc getAvailablePageFileSize*(this: DisplayInformation): clonglong {.importcpp: "#.get_available_page_file_size()".}

proc getProcessVirtualMemory*(this: DisplayInformation): clonglong {.importcpp: "#.get_process_virtual_memory()".}

proc getAvailableProcessVirtualMemory*(this: DisplayInformation): clonglong {.importcpp: "#.get_available_process_virtual_memory()".}

proc getMemoryLoad*(this: DisplayInformation): int {.importcpp: "#.get_memory_load()".}

proc getPageFaultCount*(this: DisplayInformation): clonglong {.importcpp: "#.get_page_fault_count()".}

proc getProcessMemory*(this: DisplayInformation): clonglong {.importcpp: "#.get_process_memory()".}

proc getPeakProcessMemory*(this: DisplayInformation): clonglong {.importcpp: "#.get_peak_process_memory()".}

proc getPageFileUsage*(this: DisplayInformation): clonglong {.importcpp: "#.get_page_file_usage()".}

proc getPeakPageFileUsage*(this: DisplayInformation): clonglong {.importcpp: "#.get_peak_page_file_usage()".}

proc getVendorId*(this: DisplayInformation): int {.importcpp: "#.get_vendor_id()".}

proc getDeviceId*(this: DisplayInformation): int {.importcpp: "#.get_device_id()".}

proc getDriverProduct*(this: DisplayInformation): int {.importcpp: "#.get_driver_product()".}

proc getDriverVersion*(this: DisplayInformation): int {.importcpp: "#.get_driver_version()".}

proc getDriverSubVersion*(this: DisplayInformation): int {.importcpp: "#.get_driver_sub_version()".}

proc getDriverBuild*(this: DisplayInformation): int {.importcpp: "#.get_driver_build()".}

proc getDriverDateMonth*(this: DisplayInformation): int {.importcpp: "#.get_driver_date_month()".}

proc getDriverDateDay*(this: DisplayInformation): int {.importcpp: "#.get_driver_date_day()".}

proc getDriverDateYear*(this: DisplayInformation): int {.importcpp: "#.get_driver_date_year()".}

proc getCpuVendorString*(this: DisplayInformation): string {.importcpp: "nimStringFromStdString(#.get_cpu_vendor_string())", header: stringConversionCode.}

proc getCpuBrandString*(this: DisplayInformation): string {.importcpp: "nimStringFromStdString(#.get_cpu_brand_string())", header: stringConversionCode.}

proc getCpuVersionInformation*(this: DisplayInformation): int {.importcpp: "#.get_cpu_version_information()".}

proc getCpuBrandIndex*(this: DisplayInformation): int {.importcpp: "#.get_cpu_brand_index()".}

proc getCpuFrequency*(this: DisplayInformation): clonglong {.importcpp: "#.get_cpu_frequency()".}

proc getMaximumCpuFrequency*(this: DisplayInformation): clonglong {.importcpp: "#.get_maximum_cpu_frequency()".}

proc getCurrentCpuFrequency*(this: DisplayInformation): clonglong {.importcpp: "#.get_current_cpu_frequency()".}

proc updateCpuFrequency*(this: DisplayInformation, processorNumber: int) {.importcpp: "#.update_cpu_frequency(#)".}

proc getNumCpuCores*(this: DisplayInformation): int {.importcpp: "#.get_num_cpu_cores()".}

proc getNumLogicalCpus*(this: DisplayInformation): int {.importcpp: "#.get_num_logical_cpus()".}

proc getOsVersionMajor*(this: DisplayInformation): int {.importcpp: "#.get_os_version_major()".}

proc getOsVersionMinor*(this: DisplayInformation): int {.importcpp: "#.get_os_version_minor()".}

proc getOsVersionBuild*(this: DisplayInformation): int {.importcpp: "#.get_os_version_build()".}

proc getOsPlatformId*(this: DisplayInformation): int {.importcpp: "#.get_os_platform_id()".}

proc lookupCpuData*(this: GraphicsPipe) {.importcpp: "#->lookup_cpu_data()".}

proc getInterfaceName*(this: GraphicsPipe): string {.importcpp: "nimStringFromStdString(#->get_interface_name())", header: stringConversionCode.}

proc setClearColorActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput, clearColorActive: bool) {.importcpp: "#->set_clear_color_active(#)".}

proc getClearColorActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput): bool {.importcpp: "#->get_clear_color_active()".}

proc setClearDepthActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput, clearDepthActive: bool) {.importcpp: "#->set_clear_depth_active(#)".}

proc getClearDepthActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput): bool {.importcpp: "#->get_clear_depth_active()".}

proc setClearStencilActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput, clearStencilActive: bool) {.importcpp: "#->set_clear_stencil_active(#)".}

proc getClearStencilActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput): bool {.importcpp: "#->get_clear_stencil_active()".}

proc setClearColor*(this: DisplayRegion | DrawableRegion | GraphicsOutput | Texture, color: LColor) {.importcpp: "#->set_clear_color(#)".}

proc getClearColor*(this: DisplayRegion | DrawableRegion | GraphicsOutput | Texture): LColor {.importcpp: "#->get_clear_color()".}

proc setClearDepth*(this: DisplayRegion | DrawableRegion | GraphicsOutput, depth: float) {.importcpp: "#->set_clear_depth(#)".}

proc getClearDepth*(this: DisplayRegion | DrawableRegion | GraphicsOutput): float {.importcpp: "#->get_clear_depth()".}

proc setClearStencil*(this: DisplayRegion | DrawableRegion | GraphicsOutput, stencil: int) {.importcpp: "#->set_clear_stencil(#)".}

proc getClearStencil*(this: DisplayRegion | DrawableRegion | GraphicsOutput): int {.importcpp: "#->get_clear_stencil()".}

proc setClearActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput, n: int, clearAuxActive: bool) {.importcpp: "#->set_clear_active(#, #)".}

proc getClearActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput, n: int): bool {.importcpp: "#->get_clear_active(#)".}

proc setClearValue*(this: DisplayRegion | DrawableRegion | GraphicsOutput, n: int, clearValue: LColor) {.importcpp: "#->set_clear_value(#, #)".}

proc getClearValue*(this: DisplayRegion | DrawableRegion | GraphicsOutput, n: int): LColor {.importcpp: "#->get_clear_value(#)".}

proc disableClears*(this: DisplayRegion | DrawableRegion | GraphicsOutput) {.importcpp: "#->disable_clears()".}

proc isAnyClearActive*(this: DisplayRegion | DrawableRegion | GraphicsOutput): bool {.importcpp: "#->is_any_clear_active()".}

proc setPixelZoom*(this: DisplayRegion | DrawableRegion | GraphicsOutput, pixelZoom: float) {.importcpp: "#->set_pixel_zoom(#)".}

proc getPixelZoom*(this: DisplayRegion | DrawableRegion | GraphicsOutput): float {.importcpp: "#->get_pixel_zoom()".}

proc getPixelFactor*(this: DisplayRegion | DrawableRegion | GraphicsOutput): float {.importcpp: "#->get_pixel_factor()".}

proc supportsPixelZoom*(this: DisplayRegion | DrawableRegion | GraphicsOutput): bool {.importcpp: "#->supports_pixel_zoom()".}

proc sendWindowsMessage*(this: WindowHandle, msg: int, wparam: int, lparam: int) {.importcpp: "#->send_windows_message(#, #, #)".}

proc getIntHandle*(this: WindowHandle): int {.importcpp: "#->get_int_handle()".}

proc `==`*(this: WindowProperties, other: WindowProperties): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: WindowProperties, other: WindowProperties): bool {.importcpp: "#.operator !=(#)".}

proc isAnySpecified*(this: FrameBufferProperties | WindowProperties): bool {.importcpp: "#.is_any_specified()".}

proc setOrigin*(this: var WindowProperties, origin: LPoint2i) {.importcpp: "#.set_origin((LPoint2i const &)(#))".}

proc setOrigin*(this: var WindowProperties, xOrigin: int, yOrigin: int) {.importcpp: "#.set_origin(#, #)".}

proc getOrigin*(this: WindowProperties): LPoint2i {.importcpp: "#.get_origin()".}

proc getXOrigin*(this: WindowProperties): int {.importcpp: "#.get_x_origin()".}

proc getYOrigin*(this: WindowProperties): int {.importcpp: "#.get_y_origin()".}

proc hasOrigin*(this: WindowProperties): bool {.importcpp: "#.has_origin()".}

proc clearOrigin*(this: var WindowProperties) {.importcpp: "#.clear_origin()".}

proc setSize*(this: var WindowProperties, size: LVector2i) {.importcpp: "#.set_size((LVector2i const &)(#))".}

proc setSize*(this: var WindowProperties, xSize: int, ySize: int) {.importcpp: "#.set_size(#, #)".}

proc getSize*(this: WindowProperties): LVector2i {.importcpp: "#.get_size()".}

proc getXSize*(this: PNMImageHeader | WindowProperties): int {.importcpp: "#.get_x_size()".}

proc getYSize*(this: PNMImageHeader | WindowProperties): int {.importcpp: "#.get_y_size()".}

proc hasSize*(this: WindowProperties): bool {.importcpp: "#.has_size()".}

proc clearSize*(this: var WindowProperties) {.importcpp: "#.clear_size()".}

proc hasMouseMode*(this: WindowProperties): bool {.importcpp: "#.has_mouse_mode()".}

proc setMouseMode*(this: var WindowProperties, mode: WindowProperties_MouseMode) {.importcpp: "#.set_mouse_mode(#)".}

proc getMouseMode*(this: WindowProperties): WindowProperties_MouseMode {.importcpp: "#.get_mouse_mode()".}

proc clearMouseMode*(this: var WindowProperties) {.importcpp: "#.clear_mouse_mode()".}

proc setTitle*(this: var WindowProperties, title: string) {.importcpp: "#.set_title(nimStringToStdString(#))", header: stringConversionCode.}

proc getTitle*(this: WindowProperties): string {.importcpp: "nimStringFromStdString(#.get_title())", header: stringConversionCode.}

proc hasTitle*(this: WindowProperties): bool {.importcpp: "#.has_title()".}

proc clearTitle*(this: var WindowProperties) {.importcpp: "#.clear_title()".}

proc setUndecorated*(this: var WindowProperties, undecorated: bool) {.importcpp: "#.set_undecorated(#)".}

proc getUndecorated*(this: WindowProperties): bool {.importcpp: "#.get_undecorated()".}

proc hasUndecorated*(this: WindowProperties): bool {.importcpp: "#.has_undecorated()".}

proc clearUndecorated*(this: var WindowProperties) {.importcpp: "#.clear_undecorated()".}

proc setFixedSize*(this: var WindowProperties, fixedSize: bool) {.importcpp: "#.set_fixed_size(#)".}

proc getFixedSize*(this: WindowProperties): bool {.importcpp: "#.get_fixed_size()".}

proc hasFixedSize*(this: WindowProperties): bool {.importcpp: "#.has_fixed_size()".}

proc clearFixedSize*(this: var WindowProperties) {.importcpp: "#.clear_fixed_size()".}

proc setFullscreen*(this: var WindowProperties, fullscreen: bool) {.importcpp: "#.set_fullscreen(#)".}

proc getFullscreen*(this: WindowProperties): bool {.importcpp: "#.get_fullscreen()".}

proc hasFullscreen*(this: WindowProperties): bool {.importcpp: "#.has_fullscreen()".}

proc clearFullscreen*(this: var WindowProperties) {.importcpp: "#.clear_fullscreen()".}

proc setForeground*(this: var WindowProperties, foreground: bool) {.importcpp: "#.set_foreground(#)".}

proc getForeground*(this: WindowProperties): bool {.importcpp: "#.get_foreground()".}

proc hasForeground*(this: WindowProperties): bool {.importcpp: "#.has_foreground()".}

proc clearForeground*(this: var WindowProperties) {.importcpp: "#.clear_foreground()".}

proc setMinimized*(this: var WindowProperties, minimized: bool) {.importcpp: "#.set_minimized(#)".}

proc getMinimized*(this: WindowProperties): bool {.importcpp: "#.get_minimized()".}

proc hasMinimized*(this: WindowProperties): bool {.importcpp: "#.has_minimized()".}

proc clearMinimized*(this: var WindowProperties) {.importcpp: "#.clear_minimized()".}

proc setRawMice*(this: var WindowProperties, rawMice: bool) {.importcpp: "#.set_raw_mice(#)".}

proc getRawMice*(this: WindowProperties): bool {.importcpp: "#.get_raw_mice()".}

proc hasRawMice*(this: WindowProperties): bool {.importcpp: "#.has_raw_mice()".}

proc clearRawMice*(this: var WindowProperties) {.importcpp: "#.clear_raw_mice()".}

proc setOpen*(this: var WindowProperties, open: bool) {.importcpp: "#.set_open(#)".}

proc getOpen*(this: WindowProperties): bool {.importcpp: "#.get_open()".}

proc hasOpen*(this: WindowProperties): bool {.importcpp: "#.has_open()".}

proc clearOpen*(this: var WindowProperties) {.importcpp: "#.clear_open()".}

proc setCursorHidden*(this: var WindowProperties, cursorHidden: bool) {.importcpp: "#.set_cursor_hidden(#)".}

proc getCursorHidden*(this: WindowProperties): bool {.importcpp: "#.get_cursor_hidden()".}

proc hasCursorHidden*(this: WindowProperties): bool {.importcpp: "#.has_cursor_hidden()".}

proc clearCursorHidden*(this: var WindowProperties) {.importcpp: "#.clear_cursor_hidden()".}

proc setIconFilename*(this: var WindowProperties, iconFilename: Filename) {.importcpp: "#.set_icon_filename(#)".}

proc getIconFilename*(this: WindowProperties): Filename {.importcpp: "#.get_icon_filename()".}

proc hasIconFilename*(this: WindowProperties): bool {.importcpp: "#.has_icon_filename()".}

proc clearIconFilename*(this: var WindowProperties) {.importcpp: "#.clear_icon_filename()".}

proc setCursorFilename*(this: var WindowProperties, cursorFilename: Filename) {.importcpp: "#.set_cursor_filename(#)".}

proc getCursorFilename*(this: WindowProperties): Filename {.importcpp: "#.get_cursor_filename()".}

proc hasCursorFilename*(this: WindowProperties): bool {.importcpp: "#.has_cursor_filename()".}

proc clearCursorFilename*(this: var WindowProperties) {.importcpp: "#.clear_cursor_filename()".}

proc setZOrder*(this: var WindowProperties, zOrder: WindowProperties_ZOrder) {.importcpp: "#.set_z_order(#)".}

proc getZOrder*(this: WindowProperties): WindowProperties_ZOrder {.importcpp: "#.get_z_order()".}

proc hasZOrder*(this: WindowProperties): bool {.importcpp: "#.has_z_order()".}

proc clearZOrder*(this: var WindowProperties) {.importcpp: "#.clear_z_order()".}

proc setParentWindow*(this: var WindowProperties, parentWindow: WindowHandle) {.importcpp: "#.set_parent_window(#)".}

proc setParentWindow*(this: var WindowProperties) {.importcpp: "#.set_parent_window()".}

proc setParentWindow*(this: var WindowProperties, parent: int) {.importcpp: "#.set_parent_window(#)".}

proc getParentWindow*(this: WindowProperties): WindowHandle {.importcpp: "#.get_parent_window()".}

proc hasParentWindow*(this: WindowProperties): bool {.importcpp: "#.has_parent_window()".}

proc clearParentWindow*(this: var WindowProperties) {.importcpp: "#.clear_parent_window()".}

proc addProperties*(this: var WindowProperties, other: WindowProperties) {.importcpp: "#.add_properties(#)".}

proc upcastToDrawableRegion*(this: DisplayRegion): DrawableRegion {.importcpp: "((DrawableRegion *)(DisplayRegion *)(#))".}

proc getNumRegions*(this: DisplayRegion | MouseWatcher | MouseWatcherBase): int {.importcpp: "#->get_num_regions()".}

proc setNumRegions*(this: DisplayRegion, i: int) {.importcpp: "#->set_num_regions(#)".}

proc getDimensions*(this: DisplayRegion, i: int): LVecBase4 {.importcpp: "#->get_dimensions(#)".}

proc getDimensions*(this: DisplayRegion): LVecBase4 {.importcpp: "#->get_dimensions()".}

proc getLeft*(this: DisplayRegion, i: int): float {.importcpp: "#->get_left(#)".}

proc getLeft*(this: DisplayRegion | DynamicTextGlyph | MouseSubregion | TextNode): float {.importcpp: "#->get_left()".}

proc getRight*(this: DisplayRegion, i: int): float {.importcpp: "#->get_right(#)".}

proc getRight*(this: DisplayRegion | DynamicTextGlyph | MouseSubregion | TextNode): float {.importcpp: "#->get_right()".}

proc getBottom*(this: DisplayRegion, i: int): float {.importcpp: "#->get_bottom(#)".}

proc getBottom*(this: DisplayRegion | DynamicTextGlyph | MouseSubregion | TextNode): float {.importcpp: "#->get_bottom()".}

proc getTop*(this: DisplayRegion, i: int): float {.importcpp: "#->get_top(#)".}

proc getTop*(this: DisplayRegion | DynamicTextGlyph | MouseSubregion | TextNode): float {.importcpp: "#->get_top()".}

proc setDimensions*(this: DisplayRegion, dimensions: LVecBase4) {.importcpp: "#->set_dimensions((LVecBase4 const &)(#))".}

proc setDimensions*(this: DisplayRegion | MouseSubregion, l: float, r: float, b: float, t: float) {.importcpp: "#->set_dimensions(#, #, #, #)".}

proc setDimensions*(this: DisplayRegion, i: int, dimensions: LVecBase4) {.importcpp: "#->set_dimensions(#, (LVecBase4 const &)(#))".}

proc setDimensions*(this: DisplayRegion, i: int, l: float, r: float, b: float, t: float) {.importcpp: "#->set_dimensions(#, #, #, #, #)".}

proc isStereo*(this: DisplayRegion | GraphicsOutput): bool {.importcpp: "#->is_stereo()".}

proc upcastToGraphicsOutputBase*(this: GraphicsOutput): GraphicsOutputBase {.importcpp: "(PT(GraphicsOutputBase)(#))".}

proc upcastToDrawableRegion*(this: GraphicsOutput): DrawableRegion {.importcpp: "((DrawableRegion *)(GraphicsOutput *)(#))".}

proc getGsg*(this: GraphicsOutput): GraphicsStateGuardian {.importcpp: "#->get_gsg()".}

proc getEngine*(this: GraphicsOutput | GraphicsStateGuardian): GraphicsEngine {.importcpp: "#->get_engine()".}

proc releaseAll*(this: GraphicsStateGuardian | PreparedGraphicsObjects) {.importcpp: "#->release_all()".}

proc releaseAllTextures*(this: GraphicsStateGuardian | PreparedGraphicsObjects): int {.importcpp: "#->release_all_textures()".}

proc releaseAllSamplers*(this: GraphicsStateGuardian | PreparedGraphicsObjects): int {.importcpp: "#->release_all_samplers()".}

proc releaseAllGeoms*(this: GraphicsStateGuardian | PreparedGraphicsObjects): int {.importcpp: "#->release_all_geoms()".}

proc releaseAllVertexBuffers*(this: GraphicsStateGuardian | PreparedGraphicsObjects): int {.importcpp: "#->release_all_vertex_buffers()".}

proc releaseAllIndexBuffers*(this: GraphicsStateGuardian | PreparedGraphicsObjects): int {.importcpp: "#->release_all_index_buffers()".}

proc releaseAllShaderBuffers*(this: GraphicsStateGuardian | PreparedGraphicsObjects): int {.importcpp: "#->release_all_shader_buffers()".}

proc needsReset*(this: GraphicsStateGuardian): bool {.importcpp: "#->needs_reset()".}

proc setIncompleteRender*(this: DisplayRegion | GraphicsStateGuardian, incompleteRender: bool) {.importcpp: "#->set_incomplete_render(#)".}

proc setLoader*(this: GraphicsStateGuardian, loader: Loader) {.importcpp: "#->set_loader(#)".}

proc setShaderGenerator*(this: GraphicsStateGuardian, shaderGenerator: ShaderGenerator) {.importcpp: "#->set_shader_generator(#)".}

proc getShaderGenerator*(this: GraphicsStateGuardian): ShaderGenerator {.importcpp: "#->get_shader_generator()".}

proc getThreadingModel*(this: GraphicsEngine | GraphicsStateGuardian): GraphicsThreadingModel {.importcpp: "#->get_threading_model()".}

proc isHardware*(this: GraphicsStateGuardian): bool {.importcpp: "#->is_hardware()".}

proc getMaxTextureStages*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_texture_stages()".}

proc getMax3dTextureDimension*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_3d_texture_dimension()".}

proc getMax2dTextureArrayLayers*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_2d_texture_array_layers()".}

proc getMaxCubeMapDimension*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_cube_map_dimension()".}

proc getMaxBufferTextureSize*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_buffer_texture_size()".}

proc getSupportsTextureCombine*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_texture_combine()".}

proc getSupportsTextureSavedResult*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_texture_saved_result()".}

proc getSupportsTextureDot3*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_texture_dot3()".}

proc getSupports3dTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_3d_texture()".}

proc getSupports2dTextureArray*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_2d_texture_array()".}

proc getSupportsCubeMap*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_cube_map()".}

proc getSupportsBufferTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_buffer_texture()".}

proc getSupportsCubeMapArray*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_cube_map_array()".}

proc getSupportsTexNonPow2*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_tex_non_pow2()".}

proc getSupportsCompressedTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_compressed_texture()".}

proc getMaxLights*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_lights()".}

proc getMaxClipPlanes*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_clip_planes()".}

proc getMaxVertexTransforms*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_vertex_transforms()".}

proc getMaxVertexTransformIndices*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_vertex_transform_indices()".}

proc getCopyTextureInverted*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_copy_texture_inverted()".}

proc getSupportsGenerateMipmap*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_generate_mipmap()".}

proc getSupportsDepthTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_depth_texture()".}

proc getSupportsDepthStencil*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_depth_stencil()".}

proc getSupportsLuminanceTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_luminance_texture()".}

proc getSupportsSamplerObjects*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_sampler_objects()".}

proc getSupportsBasicShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_basic_shaders()".}

proc getSupportsGeometryShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_geometry_shaders()".}

proc getSupportsTessellationShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_tessellation_shaders()".}

proc getSupportsComputeShaders*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_compute_shaders()".}

proc getSupportsGlsl*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_glsl()".}

proc getSupportsStencil*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_stencil()".}

proc getSupportsTwoSidedStencil*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_two_sided_stencil()".}

proc getSupportsGeometryInstancing*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_geometry_instancing()".}

proc getSupportsIndirectDraw*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_indirect_draw()".}

proc getSupportsOcclusionQuery*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_occlusion_query()".}

proc getSupportsTimerQuery*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_timer_query()".}

proc getTimerQueriesActive*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_timer_queries_active()".}

proc getMaxColorTargets*(this: GraphicsStateGuardian): int {.importcpp: "#->get_max_color_targets()".}

proc getMaximumSimultaneousRenderTargets*(this: GraphicsStateGuardian): int {.importcpp: "#->get_maximum_simultaneous_render_targets()".}

proc getSupportsDualSourceBlending*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_supports_dual_source_blending()".}

proc getShaderModel*(this: GraphicsStateGuardian): GraphicsStateGuardian_ShaderModel {.importcpp: "#->get_shader_model()".}

proc setShaderModel*(this: GraphicsStateGuardian, shaderModel: GraphicsStateGuardian_ShaderModel) {.importcpp: "#->set_shader_model(#)".}

proc getSupportsCgProfile*(this: GraphicsStateGuardian, name: string): bool {.importcpp: "#->get_supports_cg_profile(nimStringToStdString(#))", header: stringConversionCode.}

proc getColorScaleViaLighting*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_color_scale_via_lighting()".}

proc getAlphaScaleViaTexture*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_alpha_scale_via_texture()".}

proc getAlphaScaleViaTexture*(this: GraphicsStateGuardian, texAttrib: TextureAttrib): bool {.importcpp: "#->get_alpha_scale_via_texture(#)".}

proc getRuntimeColorScale*(this: GraphicsStateGuardian): bool {.importcpp: "#->get_runtime_color_scale()".}

proc getInternalCoordinateSystem*(this: GraphicsStateGuardian): CoordinateSystem {.importcpp: "#->get_internal_coordinate_system()".}

proc getPreparedObjects*(this: GraphicsStateGuardian): PreparedGraphicsObjects {.importcpp: "#->get_prepared_objects()".}

proc setGamma*(this: GraphicsStateGuardian, gamma: float): bool {.importcpp: "#->set_gamma(#)".}

proc getGamma*(this: GraphicsStateGuardian): float {.importcpp: "#->get_gamma()".}

proc restoreGamma*(this: GraphicsStateGuardian) {.importcpp: "#->restore_gamma()".}

proc setTextureQualityOverride*(this: GraphicsStateGuardian, qualityLevel: Texture_QualityLevel) {.importcpp: "#->set_texture_quality_override(#)".}

proc getTextureQualityOverride*(this: GraphicsStateGuardian): Texture_QualityLevel {.importcpp: "#->get_texture_quality_override()".}

proc setFlashTexture*(this: GraphicsStateGuardian, tex: Texture) {.importcpp: "#->set_flash_texture(#)".}

proc clearFlashTexture*(this: GraphicsStateGuardian) {.importcpp: "#->clear_flash_texture()".}

proc getFlashTexture*(this: GraphicsStateGuardian): Texture {.importcpp: "#->get_flash_texture()".}

proc hasExtension*(this: GraphicsStateGuardian, extension: string): bool {.importcpp: "#->has_extension(nimStringToStdString(#))", header: stringConversionCode.}

proc getDriverVendor*(this: GraphicsStateGuardian): string {.importcpp: "nimStringFromStdString(#->get_driver_vendor())", header: stringConversionCode.}

proc getDriverRenderer*(this: GraphicsStateGuardian): string {.importcpp: "nimStringFromStdString(#->get_driver_renderer())", header: stringConversionCode.}

proc getDriverVersion*(this: GraphicsStateGuardian): string {.importcpp: "nimStringFromStdString(#->get_driver_version())", header: stringConversionCode.}

proc getDriverVersionMajor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_version_major()".}

proc getDriverVersionMinor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_version_minor()".}

proc getDriverShaderVersionMajor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_shader_version_major()".}

proc getDriverShaderVersionMinor*(this: GraphicsStateGuardian): int {.importcpp: "#->get_driver_shader_version_minor()".}

proc setScene*(this: GraphicsStateGuardian, sceneSetup: SceneSetup): bool {.importcpp: "#->set_scene(#)".}

proc beginScene*(this: GraphicsStateGuardian): bool {.importcpp: "#->begin_scene()".}

proc endScene*(this: GraphicsStateGuardian) {.importcpp: "#->end_scene()".}

proc setThreadingModel*(this: GraphicsEngine, threadingModel: GraphicsThreadingModel) {.importcpp: "#->set_threading_model(#)".}

proc getModel*(this: GraphicsThreadingModel): string {.importcpp: "nimStringFromStdString(#.get_model())", header: stringConversionCode.}

proc getCullName*(this: GraphicsThreadingModel): string {.importcpp: "nimStringFromStdString(#.get_cull_name())", header: stringConversionCode.}

proc setCullName*(this: GraphicsThreadingModel, cullName: string) {.importcpp: "#.set_cull_name(nimStringToStdString(#))", header: stringConversionCode.}

proc getCullStage*(this: GraphicsThreadingModel): int {.importcpp: "#.get_cull_stage()".}

proc getDrawName*(this: GraphicsThreadingModel): string {.importcpp: "nimStringFromStdString(#.get_draw_name())", header: stringConversionCode.}

proc setDrawName*(this: GraphicsThreadingModel, cullName: string) {.importcpp: "#.set_draw_name(nimStringToStdString(#))", header: stringConversionCode.}

proc getDrawStage*(this: GraphicsThreadingModel): int {.importcpp: "#.get_draw_stage()".}

proc getCullSorting*(this: GraphicsThreadingModel): bool {.importcpp: "#.get_cull_sorting()".}

proc setCullSorting*(this: GraphicsThreadingModel, cullSorting: bool) {.importcpp: "#.set_cull_sorting(#)".}

proc isSingleThreaded*(this: GraphicsThreadingModel): bool {.importcpp: "#.is_single_threaded()".}

proc isDefault*(this: GraphicsThreadingModel): bool {.importcpp: "#.is_default()".}

proc getRenderLock*(this: GraphicsEngine): ReMutex {.importcpp: "#->get_render_lock()".}

proc setAutoFlip*(this: GraphicsEngine, autoFlip: bool) {.importcpp: "#->set_auto_flip(#)".}

proc getAutoFlip*(this: GraphicsEngine): bool {.importcpp: "#->get_auto_flip()".}

proc setPortalCull*(this: GraphicsEngine, value: bool) {.importcpp: "#->set_portal_cull(#)".}

proc getPortalCull*(this: GraphicsEngine): bool {.importcpp: "#->get_portal_cull()".}

proc setDefaultLoader*(this: GraphicsEngine, loader: Loader) {.importcpp: "#->set_default_loader(#)".}

proc getDefaultLoader*(this: GraphicsEngine): Loader {.importcpp: "#->get_default_loader()".}

proc makeOutput*(this: GraphicsEngine, pipe: GraphicsPipe, name: string, sort: int, fbProp: FrameBufferProperties, winProp: WindowProperties, flags: int, gsg: GraphicsStateGuardian, host: GraphicsOutput): GraphicsOutput {.importcpp: "#->make_output(#, nimStringToStdString(#), #, #, #, #, #, #)", header: stringConversionCode.}

proc makeOutput*(this: GraphicsEngine, pipe: GraphicsPipe, name: string, sort: int, fbProp: FrameBufferProperties, winProp: WindowProperties, flags: int, gsg: GraphicsStateGuardian): GraphicsOutput {.importcpp: "#->make_output(#, nimStringToStdString(#), #, #, #, #, #)", header: stringConversionCode.}

proc makeOutput*(this: GraphicsEngine, pipe: GraphicsPipe, name: string, sort: int, fbProp: FrameBufferProperties, winProp: WindowProperties, flags: int): GraphicsOutput {.importcpp: "#->make_output(#, nimStringToStdString(#), #, #, #, #)", header: stringConversionCode.}

proc makeBuffer*(this: GraphicsEngine, host: GraphicsOutput, name: string, sort: int, xSize: int, ySize: int): GraphicsOutput {.importcpp: "#->make_buffer(#, nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc makeBuffer*(this: GraphicsEngine, gsg: GraphicsStateGuardian, name: string, sort: int, xSize: int, ySize: int): GraphicsOutput {.importcpp: "#->make_buffer(#, nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc makeParasite*(this: GraphicsEngine, host: GraphicsOutput, name: string, sort: int, xSize: int, ySize: int): GraphicsOutput {.importcpp: "#->make_parasite(#, nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc addWindow*(this: GraphicsEngine, window: GraphicsOutput, sort: int): bool {.importcpp: "#->add_window(#, #)".}

proc removeWindow*(this: GraphicsEngine, window: GraphicsOutput): bool {.importcpp: "#->remove_window(#)".}

proc removeAllWindows*(this: GraphicsEngine) {.importcpp: "#->remove_all_windows()".}

proc resetAllWindows*(this: GraphicsEngine, swapchain: bool) {.importcpp: "#->reset_all_windows(#)".}

proc getNumWindows*(this: GraphicsEngine): int {.importcpp: "#->get_num_windows()".}

proc getWindow*(this: GraphicsEngine, n: int): GraphicsOutput {.importcpp: "#->get_window(#)".}

proc renderFrame*(this: GraphicsEngine) {.importcpp: "#->render_frame()".}

proc openWindows*(this: GraphicsEngine) {.importcpp: "#->open_windows()".}

proc syncFrame*(this: GraphicsEngine) {.importcpp: "#->sync_frame()".}

proc readyFlip*(this: GraphicsEngine) {.importcpp: "#->ready_flip()".}

proc flipFrame*(this: GraphicsEngine) {.importcpp: "#->flip_frame()".}

proc extractTextureData*(this: GraphicsEngine, tex: Texture, gsg: GraphicsStateGuardian): bool {.importcpp: "#->extract_texture_data(#, #)".}

proc dispatchCompute*(this: GraphicsEngine, workGroups: LVecBase3i, sattr: ShaderAttrib, gsg: GraphicsStateGuardian) {.importcpp: "#->dispatch_compute((LVecBase3i const &)(#), #, #)".}

proc countTextures*(this: GraphicsOutput): int {.importcpp: "#->count_textures()".}

proc hasTexture*(this: GraphicsOutput): bool {.importcpp: "#->has_texture()".}

proc getTexture*(this: GraphicsOutput | GraphicsOutputBase, i: int): Texture {.importcpp: "#->get_texture(#)".}

proc getTexturePlane*(this: GraphicsOutput, i: int): DrawableRegion_RenderTexturePlane {.importcpp: "#->get_texture_plane(#)".}

proc getTexturePlane*(this: GraphicsOutput): DrawableRegion_RenderTexturePlane {.importcpp: "#->get_texture_plane()".}

proc getRtmMode*(this: GraphicsOutput, i: int): GraphicsOutput_RenderTextureMode {.importcpp: "#->get_rtm_mode(#)".}

proc getRtmMode*(this: GraphicsOutput): GraphicsOutput_RenderTextureMode {.importcpp: "#->get_rtm_mode()".}

proc clearRenderTextures*(this: GraphicsOutput) {.importcpp: "#->clear_render_textures()".}

proc addRenderTexture*(this: GraphicsOutput, tex: Texture, mode: GraphicsOutput_RenderTextureMode, bitplane: DrawableRegion_RenderTexturePlane) {.importcpp: "#->add_render_texture(#, #, #)".}

proc addRenderTexture*(this: GraphicsOutput, tex: Texture, mode: GraphicsOutput_RenderTextureMode) {.importcpp: "#->add_render_texture(#, #)".}

proc setupRenderTexture*(this: GraphicsOutput, tex: Texture, allowBind: bool, toRam: bool) {.importcpp: "#->setup_render_texture(#, #, #)".}

proc getSize*(this: DynamicTextPage | GraphicsOutput): LVecBase2i {.importcpp: "#->get_size()".}

proc getXSize*(this: DynamicTextPage | GraphicsOutput | Texture | TexturePeeker): int {.importcpp: "#->get_x_size()".}

proc getYSize*(this: DynamicTextPage | GraphicsOutput | Texture | TexturePeeker): int {.importcpp: "#->get_y_size()".}

proc getFbSize*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_fb_size()".}

proc getFbXSize*(this: GraphicsOutput): int {.importcpp: "#->get_fb_x_size()".}

proc getFbYSize*(this: GraphicsOutput): int {.importcpp: "#->get_fb_y_size()".}

proc getSbsLeftSize*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_sbs_left_size()".}

proc getSbsLeftXSize*(this: GraphicsOutput): int {.importcpp: "#->get_sbs_left_x_size()".}

proc getSbsLeftYSize*(this: GraphicsOutput): int {.importcpp: "#->get_sbs_left_y_size()".}

proc getSbsRightSize*(this: GraphicsOutput): LVecBase2i {.importcpp: "#->get_sbs_right_size()".}

proc getSbsRightXSize*(this: GraphicsOutput): int {.importcpp: "#->get_sbs_right_x_size()".}

proc getSbsRightYSize*(this: GraphicsOutput): int {.importcpp: "#->get_sbs_right_y_size()".}

proc hasSize*(this: GraphicsOutput): bool {.importcpp: "#->has_size()".}

proc isNonzeroSize*(this: GraphicsOutput): bool {.importcpp: "#->is_nonzero_size()".}

proc setOneShot*(this: GraphicsOutput, oneShot: bool) {.importcpp: "#->set_one_shot(#)".}

proc getOneShot*(this: GraphicsOutput): bool {.importcpp: "#->get_one_shot()".}

proc setSwapEyes*(this: GraphicsOutput, swapEyes: bool) {.importcpp: "#->set_swap_eyes(#)".}

proc getSwapEyes*(this: GraphicsOutput): bool {.importcpp: "#->get_swap_eyes()".}

proc setRedBlueStereo*(this: GraphicsOutput, redBlueStereo: bool, leftEyeColorMask: int, rightEyeColorMask: int) {.importcpp: "#->set_red_blue_stereo(#, #, #)".}

proc getRedBlueStereo*(this: GraphicsOutput): bool {.importcpp: "#->get_red_blue_stereo()".}

proc getLeftEyeColorMask*(this: GraphicsOutput): int {.importcpp: "#->get_left_eye_color_mask()".}

proc getRightEyeColorMask*(this: GraphicsOutput): int {.importcpp: "#->get_right_eye_color_mask()".}

proc setSideBySideStereo*(this: GraphicsOutput, sideBySideStereo: bool) {.importcpp: "#->set_side_by_side_stereo(#)".}

proc setSideBySideStereo*(this: GraphicsOutput, sideBySideStereo: bool, sbsLeftDimensions: LVecBase4, sbsRightDimensions: LVecBase4) {.importcpp: "#->set_side_by_side_stereo(#, (LVecBase4 const &)(#), (LVecBase4 const &)(#))".}

proc getSideBySideStereo*(this: GraphicsOutput): bool {.importcpp: "#->get_side_by_side_stereo()".}

proc getSbsLeftDimensions*(this: GraphicsOutput): LVecBase4 {.importcpp: "#->get_sbs_left_dimensions()".}

proc getSbsRightDimensions*(this: GraphicsOutput): LVecBase4 {.importcpp: "#->get_sbs_right_dimensions()".}

proc getFbProperties*(this: GraphicsOutput): FrameBufferProperties {.importcpp: "#->get_fb_properties()".}

proc clearDeleteFlag*(this: GraphicsOutput) {.importcpp: "#->clear_delete_flag()".}

proc getDeleteFlag*(this: GraphicsOutput): bool {.importcpp: "#->get_delete_flag()".}

proc setSort*(this: AsyncTask | DisplayRegion | GraphicsOutput | GraphicsOutputBase | MouseWatcherRegion | TextureStage, sort: int) {.importcpp: "#->set_sort(#)".}

proc getSort*(this: AsyncTask | DisplayRegion | GraphicsOutput | MouseWatcherRegion | TextureStage): int {.importcpp: "#->get_sort()".}

proc setChildSort*(this: GraphicsOutput, childSort: int) {.importcpp: "#->set_child_sort(#)".}

proc clearChildSort*(this: GraphicsOutput) {.importcpp: "#->clear_child_sort()".}

proc getChildSort*(this: GraphicsOutput): int {.importcpp: "#->get_child_sort()".}

proc triggerCopy*(this: GraphicsOutput): AsyncFuture {.importcpp: "#->trigger_copy()".}

proc makeDisplayRegion*(this: GraphicsOutput): DisplayRegion {.importcpp: "#->make_display_region()".}

proc makeDisplayRegion*(this: GraphicsOutput, dimensions: LVecBase4): DisplayRegion {.importcpp: "#->make_display_region((LVecBase4 const &)(#))".}

proc makeDisplayRegion*(this: GraphicsOutput, l: float, r: float, b: float, t: float): DisplayRegion {.importcpp: "#->make_display_region(#, #, #, #)".}

proc makeMonoDisplayRegion*(this: GraphicsOutput): DisplayRegion {.importcpp: "#->make_mono_display_region()".}

proc makeMonoDisplayRegion*(this: GraphicsOutput, dimensions: LVecBase4): DisplayRegion {.importcpp: "#->make_mono_display_region((LVecBase4 const &)(#))".}

proc makeMonoDisplayRegion*(this: GraphicsOutput, l: float, r: float, b: float, t: float): DisplayRegion {.importcpp: "#->make_mono_display_region(#, #, #, #)".}

proc makeStereoDisplayRegion*(this: GraphicsOutput): StereoDisplayRegion {.importcpp: "#->make_stereo_display_region()".}

proc makeStereoDisplayRegion*(this: GraphicsOutput, dimensions: LVecBase4): StereoDisplayRegion {.importcpp: "#->make_stereo_display_region((LVecBase4 const &)(#))".}

proc makeStereoDisplayRegion*(this: GraphicsOutput, l: float, r: float, b: float, t: float): StereoDisplayRegion {.importcpp: "#->make_stereo_display_region(#, #, #, #)".}

proc removeDisplayRegion*(this: GraphicsOutput, displayRegion: DisplayRegion): bool {.importcpp: "#->remove_display_region(#)".}

proc removeAllDisplayRegions*(this: GraphicsOutput) {.importcpp: "#->remove_all_display_regions()".}

proc getOverlayDisplayRegion*(this: GraphicsOutput): DisplayRegion {.importcpp: "#->get_overlay_display_region()".}

proc setOverlayDisplayRegion*(this: GraphicsOutput, displayRegion: DisplayRegion) {.importcpp: "#->set_overlay_display_region(#)".}

proc getNumActiveDisplayRegions*(this: GraphicsOutput): int {.importcpp: "#->get_num_active_display_regions()".}

proc getActiveDisplayRegion*(this: GraphicsOutput, n: int): DisplayRegion {.importcpp: "#->get_active_display_region(#)".}

proc makeTextureBuffer*(this: GraphicsOutput, name: string, xSize: int, ySize: int, tex: Texture, toRam: bool, fbp: FrameBufferProperties): GraphicsOutput {.importcpp: "#->make_texture_buffer(nimStringToStdString(#), #, #, #, #, #)", header: stringConversionCode.}

proc makeTextureBuffer*(this: GraphicsOutput, name: string, xSize: int, ySize: int, tex: Texture, toRam: bool): GraphicsOutput {.importcpp: "#->make_texture_buffer(nimStringToStdString(#), #, #, #, #)", header: stringConversionCode.}

proc makeTextureBuffer*(this: GraphicsOutput, name: string, xSize: int, ySize: int, tex: Texture): GraphicsOutput {.importcpp: "#->make_texture_buffer(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc makeTextureBuffer*(this: GraphicsOutput, name: string, xSize: int, ySize: int): GraphicsOutput {.importcpp: "#->make_texture_buffer(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc makeCubeMap*(this: GraphicsOutput, name: string, size: int, cameraRig: NodePath, cameraMask: DrawMask, toRam: bool, fbp: FrameBufferProperties): GraphicsOutput {.importcpp: "#->make_cube_map(nimStringToStdString(#), #, #, #, #, #)", header: stringConversionCode.}

proc makeCubeMap*(this: GraphicsOutput, name: string, size: int, cameraRig: NodePath, cameraMask: DrawMask, toRam: bool): GraphicsOutput {.importcpp: "#->make_cube_map(nimStringToStdString(#), #, #, #, #)", header: stringConversionCode.}

proc makeCubeMap*(this: GraphicsOutput, name: string, size: int, cameraRig: NodePath, cameraMask: DrawMask): GraphicsOutput {.importcpp: "#->make_cube_map(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc makeCubeMap*(this: GraphicsOutput, name: string, size: int, cameraRig: NodePath): GraphicsOutput {.importcpp: "#->make_cube_map(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc saveScreenshotDefault*(this: DisplayRegion | GraphicsOutput, prefix: string): Filename {.importcpp: "#->save_screenshot_default(nimStringToStdString(#))", header: stringConversionCode.}

proc saveScreenshotDefault*(this: DisplayRegion | GraphicsOutput): Filename {.importcpp: "#->save_screenshot_default()".}

proc saveScreenshot*(this: DisplayRegion | GraphicsOutput, filename: Filename, imageComment: string): bool {.importcpp: "#->save_screenshot(#, nimStringToStdString(#))", header: stringConversionCode.}

proc saveScreenshot*(this: DisplayRegion | GraphicsOutput, filename: Filename): bool {.importcpp: "#->save_screenshot(#)".}

proc getScreenshot*(this: DisplayRegion | GraphicsOutput): Texture {.importcpp: "#->get_screenshot()".}

proc getScreenshot*(this: DisplayRegion | GraphicsOutput, image: PNMImage): bool {.importcpp: "#->get_screenshot(#)".}

proc getTextureCard*(this: GraphicsOutput): NodePath {.importcpp: "#->get_texture_card()".}

proc shareDepthBuffer*(this: GraphicsOutput, graphicsOutput: GraphicsOutput): bool {.importcpp: "#->share_depth_buffer(#)".}

proc unshareDepthBuffer*(this: GraphicsOutput) {.importcpp: "#->unshare_depth_buffer()".}

proc getSupportsRenderTexture*(this: GraphicsOutput): bool {.importcpp: "#->get_supports_render_texture()".}

proc flipReady*(this: GraphicsOutput): bool {.importcpp: "#->flip_ready()".}

proc getHost*(this: GraphicsOutput): GraphicsOutput {.importcpp: "#->get_host()".}

proc setCamera*(this: DisplayRegion, camera: NodePath) {.importcpp: "#->set_camera(#)".}

proc setStereoChannel*(this: DisplayRegion, stereoChannel: Lens_StereoChannel) {.importcpp: "#->set_stereo_channel(#)".}

proc getStereoChannel*(this: DisplayRegion): Lens_StereoChannel {.importcpp: "#->get_stereo_channel()".}

proc setTexViewOffset*(this: DisplayRegion | TextureStage, texViewOffset: int) {.importcpp: "#->set_tex_view_offset(#)".}

proc getTexViewOffset*(this: DisplayRegion | TextureStage): int {.importcpp: "#->get_tex_view_offset()".}

proc getIncompleteRender*(this: DisplayRegion | GraphicsStateGuardianBase): bool {.importcpp: "#->get_incomplete_render()".}

proc setTextureReloadPriority*(this: DisplayRegion, textureReloadPriority: int) {.importcpp: "#->set_texture_reload_priority(#)".}

proc getTextureReloadPriority*(this: DisplayRegion): int {.importcpp: "#->get_texture_reload_priority()".}

proc setLensIndex*(this: DisplayRegion, index: int) {.importcpp: "#->set_lens_index(#)".}

proc getLensIndex*(this: DisplayRegion): int {.importcpp: "#->get_lens_index()".}

proc setCullTraverser*(this: DisplayRegion, trav: CullTraverser) {.importcpp: "#->set_cull_traverser(#)".}

proc getCullTraverser*(this: DisplayRegion): CullTraverser {.importcpp: "#->get_cull_traverser()".}

proc setCubeMapIndex*(this: DisplayRegion, cubeMapIndex: int) {.importcpp: "#->set_cube_map_index(#)".}

proc setTargetTexPage*(this: DisplayRegion, page: int) {.importcpp: "#->set_target_tex_page(#)".}

proc getTargetTexPage*(this: DisplayRegion): int {.importcpp: "#->get_target_tex_page()".}

proc setScissorEnabled*(this: DisplayRegion, scissorEnabled: bool) {.importcpp: "#->set_scissor_enabled(#)".}

proc getScissorEnabled*(this: DisplayRegion): bool {.importcpp: "#->get_scissor_enabled()".}

proc getPixelWidth*(this: DisplayRegion, i: int): int {.importcpp: "#->get_pixel_width(#)".}

proc getPixelWidth*(this: DisplayRegion): int {.importcpp: "#->get_pixel_width()".}

proc getPixelHeight*(this: DisplayRegion, i: int): int {.importcpp: "#->get_pixel_height(#)".}

proc getPixelHeight*(this: DisplayRegion): int {.importcpp: "#->get_pixel_height()".}

proc getPixelSize*(this: DisplayRegion, i: int): LVecBase2i {.importcpp: "#->get_pixel_size(#)".}

proc getPixelSize*(this: DisplayRegion): LVecBase2i {.importcpp: "#->get_pixel_size()".}

proc clearCullResult*(this: DisplayRegion) {.importcpp: "#->clear_cull_result()".}

proc makeCullResultGraph*(this: DisplayRegion): PandaNode {.importcpp: "#->make_cull_result_graph()".}

proc getLeftEye*(this: StereoDisplayRegion): DisplayRegion {.importcpp: "#->get_left_eye()".}

proc getRightEye*(this: StereoDisplayRegion): DisplayRegion {.importcpp: "#->get_right_eye()".}

proc getDepthBits*(this: FrameBufferProperties): int {.importcpp: "#.get_depth_bits()".}

proc getColorBits*(this: FrameBufferProperties): int {.importcpp: "#.get_color_bits()".}

proc getRedBits*(this: FrameBufferProperties): int {.importcpp: "#.get_red_bits()".}

proc getGreenBits*(this: FrameBufferProperties): int {.importcpp: "#.get_green_bits()".}

proc getBlueBits*(this: FrameBufferProperties): int {.importcpp: "#.get_blue_bits()".}

proc getAlphaBits*(this: FrameBufferProperties): int {.importcpp: "#.get_alpha_bits()".}

proc getStencilBits*(this: FrameBufferProperties): int {.importcpp: "#.get_stencil_bits()".}

proc getAccumBits*(this: FrameBufferProperties): int {.importcpp: "#.get_accum_bits()".}

proc getAuxRgba*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_rgba()".}

proc getAuxHrgba*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_hrgba()".}

proc getAuxFloat*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_float()".}

proc getMultisamples*(this: FrameBufferProperties): int {.importcpp: "#.get_multisamples()".}

proc getCoverageSamples*(this: FrameBufferProperties): int {.importcpp: "#.get_coverage_samples()".}

proc getBackBuffers*(this: FrameBufferProperties): int {.importcpp: "#.get_back_buffers()".}

proc getIndexedColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_indexed_color()".}

proc getRgbColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_rgb_color()".}

proc getStereo*(this: FrameBufferProperties): bool {.importcpp: "#.get_stereo()".}

proc getForceHardware*(this: FrameBufferProperties): bool {.importcpp: "#.get_force_hardware()".}

proc getForceSoftware*(this: FrameBufferProperties): bool {.importcpp: "#.get_force_software()".}

proc getSrgbColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_srgb_color()".}

proc getFloatColor*(this: FrameBufferProperties): bool {.importcpp: "#.get_float_color()".}

proc getFloatDepth*(this: FrameBufferProperties): bool {.importcpp: "#.get_float_depth()".}

proc setDepthBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_depth_bits(#)".}

proc setColorBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_color_bits(#)".}

proc setRgbaBits*(this: var FrameBufferProperties, r: int, g: int, b: int, a: int) {.importcpp: "#.set_rgba_bits(#, #, #, #)".}

proc setRedBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_red_bits(#)".}

proc setGreenBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_green_bits(#)".}

proc setBlueBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_blue_bits(#)".}

proc setAlphaBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_alpha_bits(#)".}

proc setStencilBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_stencil_bits(#)".}

proc setAccumBits*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_accum_bits(#)".}

proc setAuxRgba*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_aux_rgba(#)".}

proc setAuxHrgba*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_aux_hrgba(#)".}

proc setAuxFloat*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_aux_float(#)".}

proc setMultisamples*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_multisamples(#)".}

proc setCoverageSamples*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_coverage_samples(#)".}

proc setBackBuffers*(this: var FrameBufferProperties, n: int) {.importcpp: "#.set_back_buffers(#)".}

proc setIndexedColor*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_indexed_color(#)".}

proc setRgbColor*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_rgb_color(#)".}

proc setStereo*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_stereo(#)".}

proc setForceHardware*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_force_hardware(#)".}

proc setForceSoftware*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_force_software(#)".}

proc setSrgbColor*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_srgb_color(#)".}

proc setFloatColor*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_float_color(#)".}

proc setFloatDepth*(this: var FrameBufferProperties, n: bool) {.importcpp: "#.set_float_depth(#)".}

proc `==`*(this: FrameBufferProperties, other: FrameBufferProperties): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: FrameBufferProperties, other: FrameBufferProperties): bool {.importcpp: "#.operator !=(#)".}

proc setAllSpecified*(this: var FrameBufferProperties) {.importcpp: "#.set_all_specified()".}

proc subsumes*(this: FrameBufferProperties, other: FrameBufferProperties): bool {.importcpp: "#.subsumes(#)".}

proc addProperties*(this: var FrameBufferProperties, other: FrameBufferProperties) {.importcpp: "#.add_properties(#)".}

proc setOneBitPerChannel*(this: var FrameBufferProperties) {.importcpp: "#.set_one_bit_per_channel()".}

proc isStereo*(this: FrameBufferProperties): bool {.importcpp: "#.is_stereo()".}

proc isSingleBuffered*(this: FrameBufferProperties): bool {.importcpp: "#.is_single_buffered()".}

proc getQuality*(this: FrameBufferProperties, reqs: FrameBufferProperties): int {.importcpp: "#.get_quality(#)".}

proc isBasic*(this: FrameBufferProperties): bool {.importcpp: "#.is_basic()".}

proc getAuxMask*(this: FrameBufferProperties): int {.importcpp: "#.get_aux_mask()".}

proc getBufferMask*(this: FrameBufferProperties): int {.importcpp: "#.get_buffer_mask()".}

proc verifyHardwareSoftware*(this: FrameBufferProperties, props: FrameBufferProperties, renderer: string): bool {.importcpp: "#.verify_hardware_software(#, nimStringToStdString(#))", header: stringConversionCode.}

proc setupColorTexture*(this: FrameBufferProperties, tex: Texture): bool {.importcpp: "#.setup_color_texture(#)".}

proc setupDepthTexture*(this: FrameBufferProperties, tex: Texture): bool {.importcpp: "#.setup_depth_texture(#)".}

proc buttonDown*(this: GraphicsWindowInputDevice, button: ButtonHandle, time: float64) {.importcpp: "#->button_down(#, #)".}

proc buttonDown*(this: GraphicsWindowInputDevice, button: ButtonHandle) {.importcpp: "#->button_down(#)".}

proc buttonResumeDown*(this: GraphicsWindowInputDevice, button: ButtonHandle, time: float64) {.importcpp: "#->button_resume_down(#, #)".}

proc buttonResumeDown*(this: GraphicsWindowInputDevice, button: ButtonHandle) {.importcpp: "#->button_resume_down(#)".}

proc buttonUp*(this: GraphicsWindowInputDevice, button: ButtonHandle, time: float64) {.importcpp: "#->button_up(#, #)".}

proc buttonUp*(this: GraphicsWindowInputDevice, button: ButtonHandle) {.importcpp: "#->button_up(#)".}

proc keystroke*(this: GraphicsWindowInputDevice, keycode: int, time: float64) {.importcpp: "#->keystroke(#, #)".}

proc keystroke*(this: GraphicsWindowInputDevice, keycode: int) {.importcpp: "#->keystroke(#)".}

proc candidate*(this: GraphicsWindowInputDevice, candidateString: string, highlightStart: int, highlightEnd: int, cursorPos: int) {.importcpp: "#->candidate(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc focusLost*(this: GraphicsWindowInputDevice, time: float64) {.importcpp: "#->focus_lost(#)".}

proc focusLost*(this: GraphicsWindowInputDevice) {.importcpp: "#->focus_lost()".}

proc rawButtonDown*(this: GraphicsWindowInputDevice, button: ButtonHandle, time: float64) {.importcpp: "#->raw_button_down(#, #)".}

proc rawButtonDown*(this: GraphicsWindowInputDevice, button: ButtonHandle) {.importcpp: "#->raw_button_down(#)".}

proc rawButtonUp*(this: GraphicsWindowInputDevice, button: ButtonHandle, time: float64) {.importcpp: "#->raw_button_up(#, #)".}

proc rawButtonUp*(this: GraphicsWindowInputDevice, button: ButtonHandle) {.importcpp: "#->raw_button_up(#)".}

proc getPointer*(this: GraphicsWindowInputDevice): PointerData {.importcpp: "#->get_pointer()".}

proc setPointerInWindow*(this: GraphicsWindowInputDevice, x: float64, y: float64, time: float64) {.importcpp: "#->set_pointer_in_window(#, #, #)".}

proc setPointerInWindow*(this: GraphicsWindowInputDevice, x: float64, y: float64) {.importcpp: "#->set_pointer_in_window(#, #)".}

proc setPointerOutOfWindow*(this: GraphicsWindowInputDevice, time: float64) {.importcpp: "#->set_pointer_out_of_window(#)".}

proc setPointerOutOfWindow*(this: GraphicsWindowInputDevice) {.importcpp: "#->set_pointer_out_of_window()".}

proc updatePointer*(this: GraphicsWindowInputDevice, data: PointerData, time: float64) {.importcpp: "#->update_pointer(#, #)".}

proc updatePointer*(this: GraphicsWindowInputDevice, data: PointerData) {.importcpp: "#->update_pointer(#)".}

proc pointerMoved*(this: GraphicsWindowInputDevice, x: float64, y: float64, time: float64) {.importcpp: "#->pointer_moved(#, #, #)".}

proc pointerMoved*(this: GraphicsWindowInputDevice, x: float64, y: float64) {.importcpp: "#->pointer_moved(#, #)".}

proc removePointer*(this: GraphicsWindowInputDevice, id: int) {.importcpp: "#->remove_pointer(#)".}

proc getX*(this: TouchInfo): int {.importcpp: "#.get_x()".}

proc getY*(this: TouchInfo): int {.importcpp: "#.get_y()".}

proc getId*(this: TouchInfo): int {.importcpp: "#.get_id()".}

proc isTouchEvent*(this: GraphicsWindowProcCallbackData): bool {.importcpp: "#.is_touch_event()".}

proc getNumTouches*(this: GraphicsWindowProcCallbackData): int {.importcpp: "#.get_num_touches()".}

proc getTouchInfo*(this: GraphicsWindowProcCallbackData, index: int): TouchInfo {.importcpp: "#.get_touch_info(#)".}

proc getProperties*(this: GraphicsWindow): WindowProperties {.importcpp: "#->get_properties()".}

proc getRequestedProperties*(this: GraphicsWindow): WindowProperties {.importcpp: "#->get_requested_properties()".}

proc clearRejectedProperties*(this: GraphicsWindow) {.importcpp: "#->clear_rejected_properties()".}

proc getRejectedProperties*(this: GraphicsWindow): WindowProperties {.importcpp: "#->get_rejected_properties()".}

proc requestProperties*(this: GraphicsWindow, requestedProperties: WindowProperties) {.importcpp: "#->request_properties(#)".}

proc isFullscreen*(this: GraphicsWindow): bool {.importcpp: "#->is_fullscreen()".}

proc setWindowEvent*(this: GraphicsWindow, windowEvent: string) {.importcpp: "#->set_window_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getWindowEvent*(this: GraphicsWindow): string {.importcpp: "nimStringFromStdString(#->get_window_event())", header: stringConversionCode.}

proc setCloseRequestEvent*(this: GraphicsWindow, closeRequestEvent: string) {.importcpp: "#->set_close_request_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getCloseRequestEvent*(this: GraphicsWindow): string {.importcpp: "nimStringFromStdString(#->get_close_request_event())", header: stringConversionCode.}

proc setUnexposedDraw*(this: GraphicsWindow, unexposedDraw: bool) {.importcpp: "#->set_unexposed_draw(#)".}

proc getUnexposedDraw*(this: GraphicsWindow): bool {.importcpp: "#->get_unexposed_draw()".}

proc getWindowHandle*(this: GraphicsWindow): WindowHandle {.importcpp: "#->get_window_handle()".}

proc getNumInputDevices*(this: GraphicsWindow): int {.importcpp: "#->get_num_input_devices()".}

proc getInputDevice*(this: GraphicsWindow, i: int): InputDevice {.importcpp: "#->get_input_device(#)".}

proc getInputDeviceName*(this: GraphicsWindow, device: int): string {.importcpp: "nimStringFromStdString(#->get_input_device_name(#))", header: stringConversionCode.}

proc hasPointer*(this: GraphicsWindow, device: int): bool {.importcpp: "#->has_pointer(#)".}

proc hasKeyboard*(this: GraphicsWindow, device: int): bool {.importcpp: "#->has_keyboard(#)".}

proc getKeyboardMap*(this: GraphicsWindow): ButtonMap {.importcpp: "#->get_keyboard_map()".}

proc enablePointerEvents*(this: GraphicsWindow, device: int) {.importcpp: "#->enable_pointer_events(#)".}

proc disablePointerEvents*(this: GraphicsWindow, device: int) {.importcpp: "#->disable_pointer_events(#)".}

proc getPointer*(this: GraphicsWindow, device: int): MouseData {.importcpp: "#->get_pointer(#)".}

proc movePointer*(this: GraphicsWindow, device: int, x: int, y: int): bool {.importcpp: "#->move_pointer(#, #, #)".}

proc closeIme*(this: GraphicsWindow) {.importcpp: "#->close_ime()".}

proc setEventsCallback*(this: CallbackGraphicsWindow, `object`: CallbackObject) {.importcpp: "#->set_events_callback(#)".}

proc clearEventsCallback*(this: CallbackGraphicsWindow) {.importcpp: "#->clear_events_callback()".}

proc getEventsCallback*(this: CallbackGraphicsWindow): CallbackObject {.importcpp: "#->get_events_callback()".}

proc setPropertiesCallback*(this: CallbackGraphicsWindow, `object`: CallbackObject) {.importcpp: "#->set_properties_callback(#)".}

proc clearPropertiesCallback*(this: CallbackGraphicsWindow) {.importcpp: "#->clear_properties_callback()".}

proc getPropertiesCallback*(this: CallbackGraphicsWindow): CallbackObject {.importcpp: "#->get_properties_callback()".}

proc setRenderCallback*(this: CallbackGraphicsWindow, `object`: CallbackObject) {.importcpp: "#->set_render_callback(#)".}

proc clearRenderCallback*(this: CallbackGraphicsWindow) {.importcpp: "#->clear_render_callback()".}

proc getRenderCallback*(this: CallbackGraphicsWindow): CallbackObject {.importcpp: "#->get_render_callback()".}

proc createInputDevice*(this: CallbackGraphicsWindow, name: string): int {.importcpp: "#->create_input_device(nimStringToStdString(#))", header: stringConversionCode.}

proc `==`*(this: DisplayMode, other: DisplayMode): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: DisplayMode, other: DisplayMode): bool {.importcpp: "#.operator !=(#)".}

proc getSceneSetup*(this: DisplayRegionCullCallbackData | DisplayRegionDrawCallbackData): SceneSetup {.importcpp: "#.get_scene_setup()".}

proc getCullResult*(this: DisplayRegionDrawCallbackData): CullResult {.importcpp: "#.get_cull_result()".}

proc setMinimumWidth*(this: DisplaySearchParameters, minimumWidth: int) {.importcpp: "#.set_minimum_width(#)".}

proc setMaximumWidth*(this: DisplaySearchParameters, maximumWidth: int) {.importcpp: "#.set_maximum_width(#)".}

proc setMinimumHeight*(this: DisplaySearchParameters, minimumHeight: int) {.importcpp: "#.set_minimum_height(#)".}

proc setMaximumHeight*(this: DisplaySearchParameters, maximumHeight: int) {.importcpp: "#.set_maximum_height(#)".}

proc setMinimumBitsPerPixel*(this: DisplaySearchParameters, minimumBitsPerPixel: int) {.importcpp: "#.set_minimum_bits_per_pixel(#)".}

proc setMaximumBitsPerPixel*(this: DisplaySearchParameters, maximumBitsPerPixel: int) {.importcpp: "#.set_maximum_bits_per_pixel(#)".}

proc setSize*(this: GraphicsBuffer | ParasiteBuffer, x: int, y: int) {.importcpp: "#->set_size(#, #)".}

proc getNumPipeTypes*(this: GraphicsPipeSelection): int {.importcpp: "#->get_num_pipe_types()".}

proc getPipeType*(this: GraphicsPipeSelection, n: int): TypeHandle {.importcpp: "#->get_pipe_type(#)".}

proc printPipeTypes*(this: GraphicsPipeSelection) {.importcpp: "#->print_pipe_types()".}

proc makePipe*(this: GraphicsPipeSelection, `type`: TypeHandle): GraphicsPipe {.importcpp: "#->make_pipe(#)".}

proc makePipe*(this: GraphicsPipeSelection, typeName: string, moduleName: string): GraphicsPipe {.importcpp: "#->make_pipe(nimStringToStdString(#), nimStringToStdString(#))", header: stringConversionCode.}

proc makePipe*(this: GraphicsPipeSelection, typeName: string): GraphicsPipe {.importcpp: "#->make_pipe(nimStringToStdString(#))", header: stringConversionCode.}

proc makeModulePipe*(this: GraphicsPipeSelection, moduleName: string): GraphicsPipe {.importcpp: "#->make_module_pipe(nimStringToStdString(#))", header: stringConversionCode.}

proc makeDefaultPipe*(this: GraphicsPipeSelection): GraphicsPipe {.importcpp: "#->make_default_pipe()".}

proc getNumAuxModules*(this: GraphicsPipeSelection): int {.importcpp: "#->get_num_aux_modules()".}

proc loadAuxModules*(this: GraphicsPipeSelection) {.importcpp: "#->load_aux_modules()".}

proc setSource*(this: MouseAndKeyboard, window: GraphicsWindow, device: int) {.importcpp: "#->set_source(#, #)".}

proc upcastToNamable*(this: Thread): Namable {.importcpp: "((Namable *)(Thread *)(#))".}

proc getSyncName*(this: Thread): string {.importcpp: "nimStringFromStdString(#->get_sync_name())", header: stringConversionCode.}

proc getPstatsIndex*(this: Thread): int {.importcpp: "#->get_pstats_index()".}

proc getPythonIndex*(this: Thread): int {.importcpp: "#->get_python_index()".}

proc getUniqueId*(this: Thread): string {.importcpp: "nimStringFromStdString(#->get_unique_id())", header: stringConversionCode.}

proc getPipelineStage*(this: Thread): int {.importcpp: "#->get_pipeline_stage()".}

proc setPipelineStage*(this: Thread, pipelineStage: int) {.importcpp: "#->set_pipeline_stage(#)".}

proc setMinPipelineStage*(this: Thread, minPipelineStage: int) {.importcpp: "#->set_min_pipeline_stage(#)".}

proc outputBlocker*(this: Thread, `out`: iostream | ostream) {.importcpp: "#->output_blocker(#)".}

proc isStarted*(this: AsyncTaskChain | Thread): bool {.importcpp: "#->is_started()".}

proc isJoinable*(this: Thread): bool {.importcpp: "#->is_joinable()".}

proc start*(this: Thread, priority: ThreadPriority, joinable: bool): bool {.importcpp: "#->start(#, #)".}

proc join*(this: Thread) {.importcpp: "#->join()".}

proc preempt*(this: Thread) {.importcpp: "#->preempt()".}

proc getCurrentTask*(this: Thread): TypedReferenceCount {.importcpp: "#->get_current_task()".}

proc setPythonIndex*(this: Thread, index: int) {.importcpp: "#->set_python_index(#)".}

proc tryAcquire*(this: MutexDirect | Semaphore): bool {.importcpp: "#.try_acquire()".}

proc debugIsLocked*(this: LightMutexDirect | LightReMutexDirect | MutexDirect | ReMutexDirect): bool {.importcpp: "#.debug_is_locked()".}

proc clearName*(this: LightMutexDirect | LightReMutexDirect | MutexDirect | ReMutexDirect) {.importcpp: "#.clear_name()".}

proc hasName*(this: LightMutexDirect | LightReMutexDirect | MutexDirect | ReMutexDirect): bool {.importcpp: "#.has_name()".}

proc getMutex*(this: ConditionVarDirect | ConditionVarFullDirect): MutexDirect {.importcpp: "#.get_mutex()".}

proc wait*(this: ConditionVarDirect | ConditionVarFullDirect) {.importcpp: "#.wait()".}

proc wait*(this: ConditionVarDirect | ConditionVarFullDirect, timeout: float64) {.importcpp: "#.wait(#)".}

proc notify*(this: ConditionVarDirect | ConditionVarFullDirect) {.importcpp: "#.notify()".}

proc getMutex*(this: ConditionVar | ConditionVarFull): Mutex {.importcpp: "#.get_mutex()".}

proc notifyAll*(this: ConditionVarFullDirect) {.importcpp: "#.notify_all()".}

proc elevateLock*(this: LightReMutexDirect | ReMutexDirect) {.importcpp: "#.elevate_lock()".}

proc release*(this: Semaphore): int {.importcpp: "#.release()".}

proc getCount*(this: Semaphore): int {.importcpp: "#.get_count()".}

proc isInt*(this: EventParameter): bool {.importcpp: "#.is_int()".}

proc getIntValue*(this: EventParameter): int {.importcpp: "#.get_int_value()".}

proc isDouble*(this: EventParameter): bool {.importcpp: "#.is_double()".}

proc getDoubleValue*(this: EventParameter): float64 {.importcpp: "#.get_double_value()".}

proc isString*(this: EventParameter): bool {.importcpp: "#.is_string()".}

proc isWstring*(this: EventParameter): bool {.importcpp: "#.is_wstring()".}

proc getWstringValue*(this: EventParameter): string {.importcpp: "nimStringFromStdString(#.get_wstring_value())", header: stringConversionCode.}

proc isTypedRefCount*(this: EventParameter): bool {.importcpp: "#.is_typed_ref_count()".}

proc getTypedRefCountValue*(this: EventParameter): TypedReferenceCount {.importcpp: "#.get_typed_ref_count_value()".}

proc getPtr*(this: EventParameter): TypedWritableReferenceCount {.importcpp: "#.get_ptr()".}

proc done*(this: AsyncFuture): bool {.importcpp: "#->done()".}

proc cancelled*(this: AsyncFuture): bool {.importcpp: "#->cancelled()".}

proc cancel*(this: AsyncFuture): bool {.importcpp: "#->cancel()".}

proc setDoneEvent*(this: AsyncFuture | AsyncTask, doneEvent: string) {.importcpp: "#->set_done_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getDoneEvent*(this: AsyncFuture): string {.importcpp: "nimStringFromStdString(#->get_done_event())", header: stringConversionCode.}

proc wait*(this: AsyncFuture) {.importcpp: "#->wait()".}

proc wait*(this: AsyncFuture, timeout: float64) {.importcpp: "#->wait(#)".}

proc upcastToAsyncFuture*(this: AsyncTask): AsyncFuture {.importcpp: "(PT(AsyncFuture)(#))".}

proc upcastToNamable*(this: AsyncTask): Namable {.importcpp: "((Namable *)(AsyncTask *)(#))".}

proc getState*(this: AsyncTask): AsyncTask_State {.importcpp: "#->get_state()".}

proc isAlive*(this: AsyncTask): bool {.importcpp: "#->is_alive()".}

proc getManager*(this: AsyncTask): AsyncTaskManager {.importcpp: "#->get_manager()".}

proc remove*(this: AsyncTask): bool {.importcpp: "#->remove()".}

proc setDelay*(this: AsyncTask, delay: float64) {.importcpp: "#->set_delay(#)".}

proc clearDelay*(this: AsyncTask) {.importcpp: "#->clear_delay()".}

proc hasDelay*(this: AsyncTask): bool {.importcpp: "#->has_delay()".}

proc getDelay*(this: AsyncTask): float64 {.importcpp: "#->get_delay()".}

proc getWakeTime*(this: AsyncTask): float64 {.importcpp: "#->get_wake_time()".}

proc recalcWakeTime*(this: AsyncTask) {.importcpp: "#->recalc_wake_time()".}

proc getStartTime*(this: AsyncTask): float64 {.importcpp: "#->get_start_time()".}

proc getElapsedTime*(this: AsyncTask): float64 {.importcpp: "#->get_elapsed_time()".}

proc getStartFrame*(this: AsyncTask): int {.importcpp: "#->get_start_frame()".}

proc getElapsedFrames*(this: AsyncTask): int {.importcpp: "#->get_elapsed_frames()".}

proc getNamePrefix*(this: AsyncTask): string {.importcpp: "nimStringFromStdString(#->get_name_prefix())", header: stringConversionCode.}

proc getTaskId*(this: AsyncTask): int {.importcpp: "#->get_task_id()".}

proc setTaskChain*(this: AsyncTask, chainName: string) {.importcpp: "#->set_task_chain(nimStringToStdString(#))", header: stringConversionCode.}

proc getDt*(this: AsyncTask): float64 {.importcpp: "#->get_dt()".}

proc getMaxDt*(this: AsyncTask | ClockObject): float64 {.importcpp: "#->get_max_dt()".}

proc getAverageDt*(this: AsyncTask): float64 {.importcpp: "#->get_average_dt()".}

proc upcastToNamable*(this: AsyncTaskManager): Namable {.importcpp: "((Namable *)(AsyncTaskManager *)(#))".}

proc cleanup*(this: AsyncTaskManager) {.importcpp: "#->cleanup()".}

proc setClock*(this: AsyncTaskManager, clock: ClockObject) {.importcpp: "#->set_clock(#)".}

proc getClock*(this: AsyncTaskManager): ClockObject {.importcpp: "#->get_clock()".}

proc getNumTaskChains*(this: AsyncTaskManager): int {.importcpp: "#->get_num_task_chains()".}

proc getTaskChain*(this: AsyncTaskManager, n: int): AsyncTaskChain {.importcpp: "#->get_task_chain(#)".}

proc makeTaskChain*(this: AsyncTaskManager, name: string): AsyncTaskChain {.importcpp: "#->make_task_chain(nimStringToStdString(#))", header: stringConversionCode.}

proc findTaskChain*(this: AsyncTaskManager, name: string): AsyncTaskChain {.importcpp: "#->find_task_chain(nimStringToStdString(#))", header: stringConversionCode.}

proc removeTaskChain*(this: AsyncTaskManager, name: string): bool {.importcpp: "#->remove_task_chain(nimStringToStdString(#))", header: stringConversionCode.}

proc add*(this: AsyncTaskManager, task: AsyncTask) {.importcpp: "#->add(#)".}

proc hasTask*(this: AsyncTaskChain | AsyncTaskManager, task: AsyncTask): bool {.importcpp: "#->has_task(#)".}

proc findTask*(this: AsyncTaskManager, name: string): AsyncTask {.importcpp: "#->find_task(nimStringToStdString(#))", header: stringConversionCode.}

proc findTasks*(this: AsyncTaskManager, name: string): AsyncTaskCollection {.importcpp: "#->find_tasks(nimStringToStdString(#))", header: stringConversionCode.}

proc findTasksMatching*(this: AsyncTaskManager, pattern: GlobPattern): AsyncTaskCollection {.importcpp: "#->find_tasks_matching(#)".}

proc remove*(this: AsyncTaskManager, tasks: AsyncTaskSequence | AsyncTaskCollection): int {.importcpp: "#->remove(#)".}

proc waitForTasks*(this: AsyncTaskChain | AsyncTaskManager) {.importcpp: "#->wait_for_tasks()".}

proc startThreads*(this: AsyncTaskChain | AsyncTaskManager) {.importcpp: "#->start_threads()".}

proc getNumTasks*(this: AsyncTaskChain | AsyncTaskManager): int {.importcpp: "#->get_num_tasks()".}

proc getTasks*(this: AsyncTaskChain | AsyncTaskManager): AsyncTaskCollection {.importcpp: "#->get_tasks()".}

proc getActiveTasks*(this: AsyncTaskChain | AsyncTaskManager): AsyncTaskCollection {.importcpp: "#->get_active_tasks()".}

proc getSleepingTasks*(this: AsyncTaskChain | AsyncTaskManager): AsyncTaskCollection {.importcpp: "#->get_sleeping_tasks()".}

proc addTask*(this: AsyncTaskCollection | AsyncTaskSequence, task: AsyncTask) {.importcpp: "#.add_task(#)".}

proc removeTask*(this: AsyncTaskCollection | AsyncTaskSequence, task: AsyncTask): bool {.importcpp: "#.remove_task(#)".}

proc removeTask*(this: AsyncTaskCollection | AsyncTaskSequence, index: int) {.importcpp: "#.remove_task(#)".}

proc addTasksFrom*(this: AsyncTaskCollection | AsyncTaskSequence, other: AsyncTaskSequence | AsyncTaskCollection) {.importcpp: "#.add_tasks_from(#)".}

proc removeTasksFrom*(this: AsyncTaskCollection | AsyncTaskSequence, other: AsyncTaskSequence | AsyncTaskCollection) {.importcpp: "#.remove_tasks_from(#)".}

proc removeDuplicateTasks*(this: AsyncTaskCollection | AsyncTaskSequence) {.importcpp: "#.remove_duplicate_tasks()".}

proc hasTask*(this: AsyncTaskCollection | AsyncTaskSequence, task: AsyncTask): bool {.importcpp: "#.has_task(#)".}

proc findTask*(this: AsyncTaskCollection | AsyncTaskSequence, name: string): AsyncTask {.importcpp: "#.find_task(nimStringToStdString(#))", header: stringConversionCode.}

proc getNumTasks*(this: AsyncTaskCollection | AsyncTaskSequence): int {.importcpp: "#.get_num_tasks()".}

proc getTask*(this: AsyncTaskCollection | AsyncTaskSequence, index: int): AsyncTask {.importcpp: "#.get_task(#)".}

proc `[]`*(this: AsyncTaskCollection | AsyncTaskSequence, index: int): AsyncTask {.importcpp: "#.operator [](#)".}

proc `+=`*(this: AsyncTaskCollection | var AsyncTaskSequence, other: AsyncTaskSequence | AsyncTaskCollection) {.importcpp: "#.operator +=(#)".}

proc `+`*(this: AsyncTaskCollection | AsyncTaskSequence, other: AsyncTaskSequence | AsyncTaskCollection): AsyncTaskCollection {.importcpp: "#.operator +(#)".}

proc getNextWakeTime*(this: AsyncTaskChain | AsyncTaskManager): float64 {.importcpp: "#->get_next_wake_time()".}

proc upcastToNamable*(this: AsyncTaskChain): Namable {.importcpp: "((Namable *)(AsyncTaskChain *)(#))".}

proc setTickClock*(this: AsyncTaskChain, tickClock: bool) {.importcpp: "#->set_tick_clock(#)".}

proc getTickClock*(this: AsyncTaskChain): bool {.importcpp: "#->get_tick_clock()".}

proc setNumThreads*(this: AsyncTaskChain, numThreads: int) {.importcpp: "#->set_num_threads(#)".}

proc getNumThreads*(this: AsyncTaskChain | ConnectionReader | DatagramGeneratorNet): int {.importcpp: "#->get_num_threads()".}

proc getNumRunningThreads*(this: AsyncTaskChain): int {.importcpp: "#->get_num_running_threads()".}

proc setThreadPriority*(this: AsyncTaskChain, priority: ThreadPriority) {.importcpp: "#->set_thread_priority(#)".}

proc getThreadPriority*(this: AsyncTaskChain): ThreadPriority {.importcpp: "#->get_thread_priority()".}

proc setFrameBudget*(this: AsyncTaskChain, frameBudget: float64) {.importcpp: "#->set_frame_budget(#)".}

proc getFrameBudget*(this: AsyncTaskChain): float64 {.importcpp: "#->get_frame_budget()".}

proc setFrameSync*(this: AsyncTaskChain, frameSync: bool) {.importcpp: "#->set_frame_sync(#)".}

proc getFrameSync*(this: AsyncTaskChain): bool {.importcpp: "#->get_frame_sync()".}

proc setTimeslicePriority*(this: AsyncTaskChain, timeslicePriority: bool) {.importcpp: "#->set_timeslice_priority(#)".}

proc getTimeslicePriority*(this: AsyncTaskChain): bool {.importcpp: "#->get_timeslice_priority()".}

proc upcastToAsyncTask*(this: AsyncTaskSequence): AsyncTask {.importcpp: "(PT(AsyncTask)(#))".}

proc upcastToAsyncTaskCollection*(this: AsyncTaskSequence): AsyncTaskCollection {.importcpp: "((AsyncTaskCollection *)(AsyncTaskSequence *)(#))".}

proc setRepeatCount*(this: AsyncTaskSequence, repeatCount: int) {.importcpp: "#->set_repeat_count(#)".}

proc getRepeatCount*(this: AsyncTaskSequence): int {.importcpp: "#->get_repeat_count()".}

proc getCurrentTaskIndex*(this: AsyncTaskSequence): int {.importcpp: "#->get_current_task_index()".}

proc `==`*(this: ButtonEvent, other: ButtonEvent): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: ButtonEvent, other: ButtonEvent): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: ButtonEvent, other: ButtonEvent): bool {.importcpp: "#.operator <(#)".}

proc addEvent*(this: ButtonEventList, event: ButtonEvent) {.importcpp: "#->add_event(#)".}

proc getNumEvents*(this: ButtonEventList | PointerEventList): int {.importcpp: "#->get_num_events()".}

proc getEvent*(this: ButtonEventList, n: int): ButtonEvent {.importcpp: "#->get_event(#)".}

proc addEvents*(this: ButtonEventList, other: ButtonEventList) {.importcpp: "#->add_events(#)".}

proc updateMods*(this: ButtonEventList, mods: ModifierButtons) {.importcpp: "#->update_mods(#)".}

proc addParameter*(this: ButtonThrower | Event, obj: EventParameter) {.importcpp: "#->add_parameter(#)".}

proc getNumParameters*(this: ButtonThrower | Event): int {.importcpp: "#->get_num_parameters()".}

proc getParameter*(this: ButtonThrower | Event, n: int): EventParameter {.importcpp: "#->get_parameter(#)".}

proc hasReceiver*(this: Event): bool {.importcpp: "#->has_receiver()".}

proc clearReceiver*(this: Event) {.importcpp: "#->clear_receiver()".}

proc getFuture*(this: EventHandler, eventName: string): AsyncFuture {.importcpp: "#.get_future(nimStringToStdString(#))", header: stringConversionCode.}

proc processEvents*(this: EventHandler) {.importcpp: "#.process_events()".}

proc dispatchEvent*(this: EventHandler, event: Event) {.importcpp: "#.dispatch_event(#)".}

proc queueEvent*(this: EventQueue, event: Event) {.importcpp: "#->queue_event(#)".}

proc isQueueEmpty*(this: EventQueue): bool {.importcpp: "#->is_queue_empty()".}

proc isQueueFull*(this: EventQueue): bool {.importcpp: "#->is_queue_full()".}

proc dequeueEvent*(this: EventQueue): Event {.importcpp: "deconstify(#->dequeue_event())", header: deconstifyCode.}

proc getInWindow*(this: PointerEventList, n: int): bool {.importcpp: "#->get_in_window(#)".}

proc getXpos*(this: PointerEventList, n: int): int {.importcpp: "#->get_xpos(#)".}

proc getYpos*(this: PointerEventList, n: int): int {.importcpp: "#->get_ypos(#)".}

proc getDx*(this: PointerEventList, n: int): float64 {.importcpp: "#->get_dx(#)".}

proc getDy*(this: PointerEventList, n: int): float64 {.importcpp: "#->get_dy(#)".}

proc getSequence*(this: PointerEventList, n: int): int {.importcpp: "#->get_sequence(#)".}

proc getLength*(this: PointerEventList, n: int): float64 {.importcpp: "#->get_length(#)".}

proc getDirection*(this: PointerEventList, n: int): float64 {.importcpp: "#->get_direction(#)".}

proc getRotation*(this: PointerEventList, n: int): float64 {.importcpp: "#->get_rotation(#)".}

proc getTime*(this: PointerEventList, n: int): float64 {.importcpp: "#->get_time(#)".}

proc popFront*(this: PointerEventList) {.importcpp: "#->pop_front()".}

proc addEvent*(this: PointerEventList, data: PointerData, seq: int, time: float64) {.importcpp: "#->add_event(#, #, #)".}

proc addEvent*(this: PointerEventList, inWin: bool, xpos: int, ypos: int, xdelta: float64, ydelta: float64, seq: int, time: float64) {.importcpp: "#->add_event(#, #, #, #, #, #, #)".}

proc addEvent*(this: PointerEventList, inWin: bool, xpos: int, ypos: int, seq: int, time: float64) {.importcpp: "#->add_event(#, #, #, #, #)".}

proc encircles*(this: PointerEventList, x: int, y: int): bool {.importcpp: "#->encircles(#, #)".}

proc totalTurns*(this: PointerEventList, sec: float64): float64 {.importcpp: "#->total_turns(#)".}

proc matchPattern*(this: PointerEventList, pattern: string, rot: float64, seglen: float64): float64 {.importcpp: "#->match_pattern(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc getTotalSize*(this: AdaptiveLru | GeomCacheManager | SimpleLru): int {.importcpp: "#.get_total_size()".}

proc getMaxSize*(this: AdaptiveLru | GeomCacheManager | SimpleLru): int {.importcpp: "#.get_max_size()".}

proc setMaxSize*(this: AdaptiveLru | GeomCacheManager | SimpleLru, maxSize: int) {.importcpp: "#.set_max_size(#)".}

proc countActiveSize*(this: AdaptiveLru | SimpleLru): int {.importcpp: "#.count_active_size()".}

proc considerEvict*(this: AdaptiveLru | SimpleLru) {.importcpp: "#.consider_evict()".}

proc evictTo*(this: AdaptiveLru | SimpleLru, targetSize: int) {.importcpp: "#.evict_to(#)".}

proc beginEpoch*(this: AdaptiveLru | SimpleLru) {.importcpp: "#.begin_epoch()".}

proc validate*(this: AdaptiveLru | SimpleLru): bool {.importcpp: "#.validate()".}

proc setWeight*(this: AdaptiveLru, weight: float) {.importcpp: "#.set_weight(#)".}

proc getWeight*(this: AdaptiveLru): float {.importcpp: "#.get_weight()".}

proc setMaxUpdatesPerFrame*(this: AdaptiveLru, maxUpdatesPerFrame: int) {.importcpp: "#.set_max_updates_per_frame(#)".}

proc getMaxUpdatesPerFrame*(this: AdaptiveLru): int {.importcpp: "#.get_max_updates_per_frame()".}

proc getLru*(this: AdaptiveLruPage | IndexBufferContext | TextureContext | VertexBufferContext): AdaptiveLru {.importcpp: "#->get_lru()".}

proc enqueueLru*(this: AdaptiveLruPage | IndexBufferContext | TextureContext | VertexBufferContext, lru: AdaptiveLru) {.importcpp: "#->enqueue_lru(#)".}

proc dequeueLru*(this: AdaptiveLruPage | GeomVertexArrayData | IndexBufferContext | SimpleLruPage | TextureContext | VertexBufferContext | VertexDataPage) {.importcpp: "#->dequeue_lru()".}

proc markUsedLru*(this: AdaptiveLruPage | IndexBufferContext | TextureContext | VertexBufferContext, lru: AdaptiveLru) {.importcpp: "#->mark_used_lru(#)".}

proc getLruSize*(this: AdaptiveLruPage | GeomVertexArrayData | IndexBufferContext | SimpleLruPage | TextureContext | VertexBufferContext | VertexDataPage): int {.importcpp: "#->get_lru_size()".}

proc setLruSize*(this: AdaptiveLruPage | GeomVertexArrayData | IndexBufferContext | SimpleLruPage | TextureContext | VertexBufferContext | VertexDataPage, lruSize: int) {.importcpp: "#->set_lru_size(#)".}

proc evictLru*(this: AdaptiveLruPage | GeomVertexArrayData | IndexBufferContext | SimpleLruPage | TextureContext | VertexBufferContext | VertexDataPage) {.importcpp: "#->evict_lru()".}

proc getNumInactiveFrames*(this: AdaptiveLruPage | IndexBufferContext | TextureContext | VertexBufferContext): int {.importcpp: "#->get_num_inactive_frames()".}

proc getAnimationType*(this: GeomVertexAnimationSpec): GeomEnums_AnimationType {.importcpp: "#.get_animation_type()".}

proc getIndexedTransforms*(this: GeomVertexAnimationSpec): bool {.importcpp: "#.get_indexed_transforms()".}

proc setNone*(this: GeomVertexAnimationSpec) {.importcpp: "#.set_none()".}

proc setPanda*(this: GeomVertexAnimationSpec) {.importcpp: "#.set_panda()".}

proc setHardware*(this: GeomVertexAnimationSpec, numTransforms: int, indexedTransforms: bool) {.importcpp: "#.set_hardware(#, #)".}

proc append*(this: InternalName, basename: string): InternalName {.importcpp: "#->append(nimStringToStdString(#))", header: stringConversionCode.}

proc getParent*(this: InternalName): InternalName {.importcpp: "#->get_parent()".}

proc join*(this: InternalName, sep: string): string {.importcpp: "nimStringFromStdString(#->join(nimStringToStdString(#)))", header: stringConversionCode.}

proc getBasename*(this: InternalName): string {.importcpp: "nimStringFromStdString(#->get_basename())", header: stringConversionCode.}

proc findAncestor*(this: InternalName, basename: string): int {.importcpp: "#->find_ancestor(nimStringToStdString(#))", header: stringConversionCode.}

proc getAncestor*(this: InternalName, n: int): InternalName {.importcpp: "deconstify(#->get_ancestor(#))", header: deconstifyCode.}

proc getTop*(this: InternalName): InternalName {.importcpp: "deconstify(#->get_top())", header: deconstifyCode.}

proc getNetBasename*(this: InternalName, n: int): string {.importcpp: "nimStringFromStdString(#->get_net_basename(#))", header: stringConversionCode.}

proc getNumComponents*(this: GeomVertexColumn | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | UnalignedLMatrix4d | UnalignedLMatrix4f): int {.importcpp: "#.get_num_components()".}

proc getNumElements*(this: GeomVertexColumn): int {.importcpp: "#.get_num_elements()".}

proc getNumericType*(this: GeomVertexColumn): GeomEnums_NumericType {.importcpp: "#.get_numeric_type()".}

proc getContents*(this: GeomVertexColumn): GeomEnums_Contents {.importcpp: "#.get_contents()".}

proc getStart*(this: GeomVertexColumn): int {.importcpp: "#.get_start()".}

proc getColumnAlignment*(this: GeomVertexColumn): int {.importcpp: "#.get_column_alignment()".}

proc getElementStride*(this: GeomVertexColumn): int {.importcpp: "#.get_element_stride()".}

proc getComponentBytes*(this: GeomVertexColumn): int {.importcpp: "#.get_component_bytes()".}

proc getTotalBytes*(this: GeomVertexColumn): int {.importcpp: "#.get_total_bytes()".}

proc hasHomogeneousCoord*(this: GeomVertexColumn): bool {.importcpp: "#.has_homogeneous_coord()".}

proc overlapsWith*(this: GeomVertexColumn, startByte: int, numBytes: int): bool {.importcpp: "#.overlaps_with(#, #)".}

proc isBytewiseEquivalent*(this: GeomVertexColumn, other: GeomVertexColumn): bool {.importcpp: "#.is_bytewise_equivalent(#)".}

proc setName*(this: GeomVertexColumn, name: InternalName) {.importcpp: "#.set_name(#)".}

proc setNumComponents*(this: GeomVertexColumn, numComponents: int) {.importcpp: "#.set_num_components(#)".}

proc setNumericType*(this: GeomVertexColumn, numericType: GeomEnums_NumericType) {.importcpp: "#.set_numeric_type(#)".}

proc setContents*(this: GeomVertexColumn, contents: GeomEnums_Contents) {.importcpp: "#.set_contents(#)".}

proc setStart*(this: GeomVertexColumn, start: int) {.importcpp: "#.set_start(#)".}

proc setColumnAlignment*(this: GeomVertexColumn, columnAlignment: int) {.importcpp: "#.set_column_alignment(#)".}

proc upcastToGeomEnums*(this: GeomVertexArrayFormat): GeomEnums {.importcpp: "((GeomEnums *)(GeomVertexArrayFormat *)(#))".}

proc isRegistered*(this: GeomVertexArrayFormat | GeomVertexFormat | SliderTable | TransformTable): bool {.importcpp: "#->is_registered()".}

proc getStride*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_stride()".}

proc setStride*(this: GeomVertexArrayFormat, stride: int) {.importcpp: "#->set_stride(#)".}

proc getPadTo*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_pad_to()".}

proc setPadTo*(this: GeomVertexArrayFormat, padTo: int) {.importcpp: "#->set_pad_to(#)".}

proc getDivisor*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_divisor()".}

proc setDivisor*(this: GeomVertexArrayFormat, divisor: int) {.importcpp: "#->set_divisor(#)".}

proc getTotalBytes*(this: GeomVertexArrayFormat): int {.importcpp: "#->get_total_bytes()".}

proc addColumn*(this: GeomVertexArrayFormat, name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents, start: int, columnAlignment: int): int {.importcpp: "#->add_column(#, #, #, #, #, #)".}

proc addColumn*(this: GeomVertexArrayFormat, name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents, start: int): int {.importcpp: "#->add_column(#, #, #, #, #)".}

proc addColumn*(this: GeomVertexArrayFormat, name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents): int {.importcpp: "#->add_column(#, #, #, #)".}

proc addColumn*(this: GeomVertexArrayFormat, column: GeomVertexColumn): int {.importcpp: "#->add_column(#)".}

proc removeColumn*(this: GeomVertexArrayFormat | GeomVertexFormat, name: InternalName) {.importcpp: "#->remove_column(#)".}

proc clearColumns*(this: GeomVertexArrayFormat) {.importcpp: "#->clear_columns()".}

proc packColumns*(this: GeomVertexArrayFormat | GeomVertexFormat) {.importcpp: "#->pack_columns()".}

proc alignColumnsForAnimation*(this: GeomVertexArrayFormat | GeomVertexFormat) {.importcpp: "#->align_columns_for_animation()".}

proc getNumColumns*(this: GeomVertexArrayFormat | GeomVertexFormat): int {.importcpp: "#->get_num_columns()".}

proc getColumn*(this: GeomVertexArrayFormat | GeomVertexFormat, name: InternalName): GeomVertexColumn {.importcpp: "#->get_column(#)".}

proc getColumn*(this: GeomVertexArrayFormat | GeomVertexFormat, i: int): GeomVertexColumn {.importcpp: "#->get_column(#)".}

proc getColumn*(this: GeomVertexArrayFormat, startByte: int, numBytes: int): GeomVertexColumn {.importcpp: "#->get_column(#, #)".}

proc hasColumn*(this: GeomVertexArrayData | GeomVertexArrayFormat | GeomVertexData | GeomVertexFormat, name: InternalName): bool {.importcpp: "#->has_column(#)".}

proc isDataSubsetOf*(this: GeomVertexArrayFormat, other: GeomVertexArrayFormat): bool {.importcpp: "#->is_data_subset_of(#)".}

proc countUnusedSpace*(this: GeomVertexArrayFormat): int {.importcpp: "#->count_unused_space()".}

proc writeWithData*(this: GeomVertexArrayFormat, `out`: iostream | ostream, indentLevel: int, arrayData: GeomVertexArrayData) {.importcpp: "#->write_with_data(#, #, #)".}

proc getFormatString*(this: GeomVertexArrayFormat, pad: bool): string {.importcpp: "nimStringFromStdString(#->get_format_string(#))", header: stringConversionCode.}

proc getFormatString*(this: GeomVertexArrayFormat): string {.importcpp: "nimStringFromStdString(#->get_format_string())", header: stringConversionCode.}

proc upcastToGeomEnums*(this: GeomVertexFormat): GeomEnums {.importcpp: "((GeomEnums *)(GeomVertexFormat *)(#))".}

proc getAnimation*(this: GeomVertexFormat): GeomVertexAnimationSpec {.importcpp: "#->get_animation()".}

proc setAnimation*(this: GeomVertexFormat, animation: GeomVertexAnimationSpec) {.importcpp: "#->set_animation(#)".}

proc getPostAnimatedFormat*(this: GeomVertexFormat): GeomVertexFormat {.importcpp: "deconstify(#->get_post_animated_format())", header: deconstifyCode.}

proc getUnionFormat*(this: GeomVertexFormat, other: GeomVertexFormat): GeomVertexFormat {.importcpp: "deconstify(#->get_union_format(#))", header: deconstifyCode.}

proc getNumArrays*(this: GeomVertexData | GeomVertexFormat): int {.importcpp: "#->get_num_arrays()".}

proc getArray*(this: GeomVertexFormat, array: int): GeomVertexArrayFormat {.importcpp: "deconstify(#->get_array(#))", header: deconstifyCode.}

proc modifyArray*(this: GeomVertexFormat, array: int): GeomVertexArrayFormat {.importcpp: "#->modify_array(#)".}

proc setArray*(this: GeomVertexFormat, array: int, format: GeomVertexArrayFormat) {.importcpp: "#->set_array(#, #)".}

proc removeArray*(this: GeomVertexFormat, array: int) {.importcpp: "#->remove_array(#)".}

proc addArray*(this: GeomVertexFormat, arrayFormat: GeomVertexArrayFormat): int {.importcpp: "#->add_array(#)".}

proc insertArray*(this: GeomVertexFormat, array: int, arrayFormat: GeomVertexArrayFormat) {.importcpp: "#->insert_array(#, #)".}

proc clearArrays*(this: GeomVertexFormat) {.importcpp: "#->clear_arrays()".}

proc removeEmptyArrays*(this: GeomVertexFormat) {.importcpp: "#->remove_empty_arrays()".}

proc getArrayWith*(this: GeomVertexFormat, name: InternalName): int {.importcpp: "#->get_array_with(#)".}

proc getArrayWith*(this: GeomVertexFormat, i: int): int {.importcpp: "#->get_array_with(#)".}

proc getColumnName*(this: GeomVertexFormat, i: int): InternalName {.importcpp: "deconstify(#->get_column_name(#))", header: deconstifyCode.}

proc removeColumn*(this: GeomVertexFormat, name: InternalName, keepEmptyArray: bool) {.importcpp: "#->remove_column(#, #)".}

proc maybeAlignColumnsForAnimation*(this: GeomVertexFormat) {.importcpp: "#->maybe_align_columns_for_animation()".}

proc getPoint*(this: GeomVertexFormat, n: int): InternalName {.importcpp: "deconstify(#->get_point(#))", header: deconstifyCode.}

proc getNumVectors*(this: GeomVertexFormat): int {.importcpp: "#->get_num_vectors()".}

proc getVector*(this: GeomVertexFormat, n: int): InternalName {.importcpp: "deconstify(#->get_vector(#))", header: deconstifyCode.}

proc getNumTexcoords*(this: GeomVertexFormat): int {.importcpp: "#->get_num_texcoords()".}

proc getTexcoord*(this: GeomVertexFormat, n: int): InternalName {.importcpp: "deconstify(#->get_texcoord(#))", header: deconstifyCode.}

proc getNumMorphs*(this: GeomVertexFormat): int {.importcpp: "#->get_num_morphs()".}

proc getMorphSlider*(this: GeomVertexFormat, n: int): InternalName {.importcpp: "deconstify(#->get_morph_slider(#))", header: deconstifyCode.}

proc getMorphBase*(this: GeomVertexFormat, n: int): InternalName {.importcpp: "deconstify(#->get_morph_base(#))", header: deconstifyCode.}

proc getMorphDelta*(this: GeomVertexFormat, n: int): InternalName {.importcpp: "deconstify(#->get_morph_delta(#))", header: deconstifyCode.}

proc writeWithData*(this: GeomVertexFormat, `out`: iostream | ostream, indentLevel: int, data: GeomVertexData) {.importcpp: "#->write_with_data(#, #, #)".}

proc upcastToNamable*(this: SimpleLru): var Namable {.importcpp: "((Namable *)&(#))".}

proc getLru*(this: GeomVertexArrayData | SimpleLruPage | VertexDataPage): SimpleLru {.importcpp: "#->get_lru()".}

proc enqueueLru*(this: GeomVertexArrayData | SimpleLruPage | VertexDataPage, lru: SimpleLru) {.importcpp: "#->enqueue_lru(#)".}

proc markUsedLru*(this: GeomVertexArrayData | SimpleLruPage | VertexDataPage, lru: SimpleLru) {.importcpp: "#->mark_used_lru(#)".}

proc alloc*(this: SimpleAllocator, size: int, alignment: int): SimpleAllocatorBlock {.importcpp: "#->alloc(#, #)".}

proc alloc*(this: SimpleAllocator, size: int): SimpleAllocatorBlock {.importcpp: "#->alloc(#)".}

proc getTotalSize*(this: SimpleAllocator): int {.importcpp: "#->get_total_size()".}

proc getMaxSize*(this: SimpleAllocator | SimpleAllocatorBlock): int {.importcpp: "#->get_max_size()".}

proc setMaxSize*(this: SimpleAllocator, maxSize: int) {.importcpp: "#->set_max_size(#)".}

proc getContiguous*(this: SimpleAllocator): int {.importcpp: "#->get_contiguous()".}

proc getFirstBlock*(this: SimpleAllocator): SimpleAllocatorBlock {.importcpp: "#->get_first_block()".}

proc free*(this: SimpleAllocatorBlock) {.importcpp: "#->free()".}

proc getAllocator*(this: SimpleAllocatorBlock): SimpleAllocator {.importcpp: "#->get_allocator()".}

proc getStart*(this: SimpleAllocatorBlock): int {.importcpp: "#->get_start()".}

proc getSize*(this: SimpleAllocatorBlock): int {.importcpp: "#->get_size()".}

proc isFree*(this: SimpleAllocatorBlock): bool {.importcpp: "#->is_free()".}

proc realloc*(this: SimpleAllocatorBlock, size: int): bool {.importcpp: "#->realloc(#)".}

proc getNextBlock*(this: SimpleAllocatorBlock): SimpleAllocatorBlock {.importcpp: "#->get_next_block()".}

proc getTotalFileSize*(this: VertexDataSaveFile): int {.importcpp: "#->get_total_file_size()".}

proc getUsedFileSize*(this: VertexDataSaveFile): int {.importcpp: "#->get_used_file_size()".}

proc upcastToSimpleAllocator*(this: VertexDataPage): var SimpleAllocator {.importcpp: "((SimpleAllocator *)&(#))".}

proc upcastToSimpleLruPage*(this: VertexDataPage): var SimpleLruPage {.importcpp: "((SimpleLruPage *)&(#))".}

proc getRamClass*(this: VertexDataPage): VertexDataPage_RamClass {.importcpp: "#.get_ram_class()".}

proc getPendingRamClass*(this: VertexDataPage): VertexDataPage_RamClass {.importcpp: "#.get_pending_ram_class()".}

proc requestResident*(this: VertexDataPage) {.importcpp: "#.request_resident()".}

proc alloc*(this: VertexDataBook | VertexDataPage, size: int): VertexDataBlock {.importcpp: "#.alloc(#)".}

proc getFirstBlock*(this: VertexDataPage): VertexDataBlock {.importcpp: "#.get_first_block()".}

proc getBook*(this: VertexDataPage): VertexDataBook {.importcpp: "#.get_book()".}

proc saveToDisk*(this: VertexDataPage): bool {.importcpp: "#.save_to_disk()".}

proc getNumPages*(this: VertexDataBook): int {.importcpp: "#.get_num_pages()".}

proc countTotalPageSize*(this: VertexDataBook): int {.importcpp: "#.count_total_page_size()".}

proc countTotalPageSize*(this: VertexDataBook, ramClass: VertexDataPage_RamClass): int {.importcpp: "#.count_total_page_size(#)".}

proc countAllocatedSize*(this: VertexDataBook): int {.importcpp: "#.count_allocated_size()".}

proc countAllocatedSize*(this: VertexDataBook, ramClass: VertexDataPage_RamClass): int {.importcpp: "#.count_allocated_size(#)".}

proc saveToDisk*(this: VertexDataBook) {.importcpp: "#.save_to_disk()".}

proc upcastToSimpleAllocatorBlock*(this: VertexDataBlock): SimpleAllocatorBlock {.importcpp: "((SimpleAllocatorBlock *)(VertexDataBlock *)(#))".}

proc getPage*(this: VertexDataBlock): VertexDataPage {.importcpp: "#->get_page()".}

proc getNextBlock*(this: VertexDataBlock): VertexDataBlock {.importcpp: "#->get_next_block()".}

proc upcastToCopyOnWriteObject*(this: Geom | GeomPrimitive | GeomVertexArrayData | GeomVertexData): CopyOnWriteObject {.importcpp: "(PT(CopyOnWriteObject)(#))".}

proc upcastToSimpleLruPage*(this: GeomVertexArrayData): SimpleLruPage {.importcpp: "((SimpleLruPage *)(GeomVertexArrayData *)(#))".}

proc upcastToGeomEnums*(this: GeomVertexArrayData): GeomEnums {.importcpp: "((GeomEnums *)(GeomVertexArrayData *)(#))".}

proc compareTo*(this: GeomVertexArrayData, other: GeomVertexArrayData): int {.importcpp: "#->compare_to(#)".}

proc getArrayFormat*(this: GeomVertexArrayData | GeomVertexArrayDataHandle): GeomVertexArrayFormat {.importcpp: "deconstify(#->get_array_format())", header: deconstifyCode.}

proc getUsageHint*(this: Geom | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData | TextNode | Texture): GeomEnums_UsageHint {.importcpp: "#->get_usage_hint()".}

proc setUsageHint*(this: Geom | GeomPrimitive | GeomVertexArrayData | GeomVertexData | TextNode, usageHint: GeomEnums_UsageHint) {.importcpp: "#->set_usage_hint(#)".}

proc getNumRows*(this: GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData | TextNode): int {.importcpp: "#->get_num_rows()".}

proc setNumRows*(this: GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData, n: int): bool {.importcpp: "#->set_num_rows(#)".}

proc uncleanSetNumRows*(this: GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData, n: int): bool {.importcpp: "#->unclean_set_num_rows(#)".}

proc reserveNumRows*(this: GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData, n: int): bool {.importcpp: "#->reserve_num_rows(#)".}

proc clearRows*(this: GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexData) {.importcpp: "#->clear_rows()".}

proc getDataSizeBytes*(this: BufferContext | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayDataHandle): int {.importcpp: "#->get_data_size_bytes()".}

proc getModified*(this: BufferContext | GeomPrimitive | GeomVertexArrayData | GeomVertexArrayDataHandle): UpdateSeq {.importcpp: "#->get_modified()".}

proc requestResident*(this: Geom | GeomVertexArrayDataHandle | GeomVertexData): bool {.importcpp: "#->request_resident()".}

proc prepare*(this: Geom | GeomVertexArrayData | ShaderBuffer, preparedObjects: PreparedGraphicsObjects) {.importcpp: "#->prepare(#)".}

proc isPrepared*(this: Geom | GeomVertexArrayData | Shader | ShaderBuffer | Texture, preparedObjects: PreparedGraphicsObjects): bool {.importcpp: "#->is_prepared(#)".}

proc prepareNow*(this: GeomVertexArrayData | GeomVertexArrayDataHandle, preparedObjects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase): VertexBufferContext {.importcpp: "#->prepare_now(#, #)".}

proc release*(this: Geom | GeomVertexArrayData | Shader | ShaderBuffer | Texture, preparedObjects: PreparedGraphicsObjects): bool {.importcpp: "#->release(#)".}

proc releaseAll*(this: Geom | GeomVertexArrayData | Shader | ShaderBuffer | Texture): int {.importcpp: "#->release_all()".}

proc upcastToGeomEnums*(this: GeomVertexArrayDataHandle): GeomEnums {.importcpp: "((GeomEnums *)(GeomVertexArrayDataHandle *)(#))".}

proc getObject*(this: GeomVertexArrayDataHandle): GeomVertexArrayData {.importcpp: "#->get_object()".}

proc copyDataFrom*(this: GeomVertexArrayDataHandle, other: GeomVertexArrayDataHandle) {.importcpp: "#->copy_data_from(#)".}

proc copySubdataFrom*(this: GeomVertexArrayDataHandle, toStart: int, toSize: int, other: GeomVertexArrayDataHandle, fromStart: int, fromSize: int) {.importcpp: "#->copy_subdata_from(#, #, #, #, #)".}

proc markUsed*(this: GeomVertexArrayDataHandle) {.importcpp: "#->mark_used()".}

proc getMatrix*(this: VertexTransform, matrix: LMatrix4) {.importcpp: "#->get_matrix(#)".}

proc multMatrix*(this: VertexTransform, result: LMatrix4, previous: LMatrix4) {.importcpp: "#->mult_matrix(#, #)".}

proc accumulateMatrix*(this: VertexTransform, accum: LMatrix4, weight: float) {.importcpp: "#->accumulate_matrix(#, #)".}

proc getNumTransforms*(this: TransformBlendTable | TransformTable): int {.importcpp: "#->get_num_transforms()".}

proc getTransform*(this: TransformTable, n: int): VertexTransform {.importcpp: "deconstify(#->get_transform(#))", header: deconstifyCode.}

proc setTransform*(this: TransformTable, n: int, transform: VertexTransform) {.importcpp: "#->set_transform(#, #)".}

proc insertTransform*(this: TransformTable, n: int, transform: VertexTransform) {.importcpp: "#->insert_transform(#, #)".}

proc removeTransform*(this: TransformTable, n: int) {.importcpp: "#->remove_transform(#)".}

proc addTransform*(this: TransformTable, transform: VertexTransform): int {.importcpp: "#->add_transform(#)".}

proc compareTo*(this: TransformBlend, other: TransformBlend): int {.importcpp: "#.compare_to(#)".}

proc `<`*(this: TransformBlend, other: TransformBlend): bool {.importcpp: "#.operator <(#)".}

proc `==`*(this: TransformBlend, other: TransformBlend): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: TransformBlend, other: TransformBlend): bool {.importcpp: "#.operator !=(#)".}

proc addTransform*(this: TransformBlend, transform: VertexTransform, weight: float) {.importcpp: "#.add_transform(#, #)".}

proc removeTransform*(this: TransformBlend, transform: VertexTransform) {.importcpp: "#.remove_transform(#)".}

proc removeTransform*(this: TransformBlend, n: int) {.importcpp: "#.remove_transform(#)".}

proc limitTransforms*(this: TransformBlend, maxTransforms: int) {.importcpp: "#.limit_transforms(#)".}

proc normalizeWeights*(this: TransformBlend) {.importcpp: "#.normalize_weights()".}

proc hasTransform*(this: TransformBlend, transform: VertexTransform): bool {.importcpp: "#.has_transform(#)".}

proc getWeight*(this: TransformBlend, transform: VertexTransform): float {.importcpp: "#.get_weight(#)".}

proc getWeight*(this: TransformBlend, n: int): float {.importcpp: "#.get_weight(#)".}

proc getTransform*(this: TransformBlend, n: int): VertexTransform {.importcpp: "#.get_transform(#)".}

proc setTransform*(this: TransformBlend, n: int, transform: VertexTransform) {.importcpp: "#.set_transform(#, #)".}

proc setWeight*(this: TransformBlend, n: int, weight: float) {.importcpp: "#.set_weight(#, #)".}

proc updateBlend*(this: TransformBlend, currentThread: Thread) {.importcpp: "#.update_blend(#)".}

proc getBlend*(this: TransformBlend, result: LMatrix4, currentThread: Thread) {.importcpp: "#.get_blend(#, #)".}

proc transformPoint*(this: TransformBlend, point: LPoint3d, currentThread: Thread) {.importcpp: "#.transform_point((LPoint3d &)(#), #)".}

proc transformPoint*(this: TransformBlend, point: LPoint3f, currentThread: Thread) {.importcpp: "#.transform_point((LPoint3f &)(#), #)".}

proc transformPoint*(this: TransformBlend, point: LPoint4d, currentThread: Thread) {.importcpp: "#.transform_point((LPoint4d &)(#), #)".}

proc transformPoint*(this: TransformBlend, point: LPoint4f, currentThread: Thread) {.importcpp: "#.transform_point((LPoint4f &)(#), #)".}

proc transformVector*(this: TransformBlend, point: LVector3d, currentThread: Thread) {.importcpp: "#.transform_vector((LVector3d &)(#), #)".}

proc transformVector*(this: TransformBlend, point: LVector3f, currentThread: Thread) {.importcpp: "#.transform_vector((LVector3f &)(#), #)".}

proc getNumBlends*(this: TransformBlendTable): int {.importcpp: "#->get_num_blends()".}

proc getBlend*(this: TransformBlendTable, n: int): TransformBlend {.importcpp: "#->get_blend(#)".}

proc setBlend*(this: TransformBlendTable, n: int, blend: TransformBlend) {.importcpp: "#->set_blend(#, #)".}

proc removeBlend*(this: TransformBlendTable, n: int) {.importcpp: "#->remove_blend(#)".}

proc addBlend*(this: TransformBlendTable, blend: TransformBlend): int {.importcpp: "#->add_blend(#)".}

proc getMaxSimultaneousTransforms*(this: TransformBlendTable): int {.importcpp: "#->get_max_simultaneous_transforms()".}

proc setRows*(this: TransformBlendTable, rows: SparseArray) {.importcpp: "#->set_rows(#)".}

proc getRows*(this: TransformBlendTable): SparseArray {.importcpp: "#->get_rows()".}

proc modifyRows*(this: TransformBlendTable): SparseArray {.importcpp: "#->modify_rows()".}

proc getName*(this: VertexSlider): InternalName {.importcpp: "deconstify(#->get_name())", header: deconstifyCode.}

proc getSlider*(this: VertexSlider): float {.importcpp: "#->get_slider()".}

proc getNumSliders*(this: SliderTable): int {.importcpp: "#->get_num_sliders()".}

proc getSlider*(this: SliderTable, n: int): VertexSlider {.importcpp: "deconstify(#->get_slider(#))", header: deconstifyCode.}

proc getSliderRows*(this: SliderTable, n: int): SparseArray {.importcpp: "#->get_slider_rows(#)".}

proc findSliders*(this: SliderTable, name: InternalName): SparseArray {.importcpp: "#->find_sliders(#)".}

proc hasSlider*(this: SliderTable, name: InternalName): bool {.importcpp: "#->has_slider(#)".}

proc setSlider*(this: SliderTable, n: int, slider: VertexSlider) {.importcpp: "#->set_slider(#, #)".}

proc setSliderRows*(this: SliderTable, n: int, rows: SparseArray) {.importcpp: "#->set_slider_rows(#, #)".}

proc removeSlider*(this: SliderTable, n: int) {.importcpp: "#->remove_slider(#)".}

proc addSlider*(this: SliderTable, slider: VertexSlider, rows: SparseArray): int {.importcpp: "#->add_slider(#, #)".}

proc upcastToGeomEnums*(this: GeomVertexData): GeomEnums {.importcpp: "((GeomEnums *)(GeomVertexData *)(#))".}

proc compareTo*(this: GeomVertexData, other: GeomVertexData): int {.importcpp: "#->compare_to(#)".}

proc getFormat*(this: GeomVertexData): GeomVertexFormat {.importcpp: "deconstify(#->get_format())", header: deconstifyCode.}

proc setFormat*(this: GeomVertexData, format: GeomVertexFormat) {.importcpp: "#->set_format(#)".}

proc uncleanSetFormat*(this: GeomVertexData, format: GeomVertexFormat) {.importcpp: "#->unclean_set_format(#)".}

proc getArray*(this: GeomVertexData, i: int): GeomVertexArrayData {.importcpp: "deconstify(#->get_array(#))", header: deconstifyCode.}

proc getArrayHandle*(this: GeomVertexData, i: int): GeomVertexArrayDataHandle {.importcpp: "deconstify(#->get_array_handle(#))", header: deconstifyCode.}

proc modifyArray*(this: GeomVertexData, i: int): GeomVertexArrayData {.importcpp: "#->modify_array(#)".}

proc modifyArrayHandle*(this: GeomVertexData, i: int): GeomVertexArrayDataHandle {.importcpp: "#->modify_array_handle(#)".}

proc setArray*(this: GeomVertexData, i: int, array: GeomVertexArrayData) {.importcpp: "#->set_array(#, #)".}

proc getTransformTable*(this: GeomVertexData): TransformTable {.importcpp: "deconstify(#->get_transform_table())", header: deconstifyCode.}

proc setTransformTable*(this: GeomVertexData, table: TransformTable) {.importcpp: "#->set_transform_table(#)".}

proc clearTransformTable*(this: GeomVertexData) {.importcpp: "#->clear_transform_table()".}

proc getTransformBlendTable*(this: GeomVertexData): TransformBlendTable {.importcpp: "deconstify(#->get_transform_blend_table())", header: deconstifyCode.}

proc modifyTransformBlendTable*(this: GeomVertexData): TransformBlendTable {.importcpp: "#->modify_transform_blend_table()".}

proc setTransformBlendTable*(this: GeomVertexData, table: TransformBlendTable) {.importcpp: "#->set_transform_blend_table(#)".}

proc clearTransformBlendTable*(this: GeomVertexData) {.importcpp: "#->clear_transform_blend_table()".}

proc getSliderTable*(this: GeomVertexData): SliderTable {.importcpp: "deconstify(#->get_slider_table())", header: deconstifyCode.}

proc setSliderTable*(this: GeomVertexData, table: SliderTable) {.importcpp: "#->set_slider_table(#)".}

proc clearSliderTable*(this: GeomVertexData) {.importcpp: "#->clear_slider_table()".}

proc getNumBytes*(this: Geom | GeomPrimitive | GeomVertexData): int {.importcpp: "#->get_num_bytes()".}

proc copyRowFrom*(this: GeomVertexData, destRow: int, source: GeomVertexData, sourceRow: int, currentThread: Thread) {.importcpp: "#->copy_row_from(#, #, #, #)".}

proc convertTo*(this: GeomVertexData, newFormat: GeomVertexFormat): GeomVertexData {.importcpp: "deconstify(#->convert_to(#))", header: deconstifyCode.}

proc scaleColor*(this: GeomVertexData, colorScale: LVecBase4): GeomVertexData {.importcpp: "deconstify(#->scale_color((LVecBase4 const &)(#)))", header: deconstifyCode.}

proc scaleColor*(this: GeomVertexData, colorScale: LVecBase4, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents): GeomVertexData {.importcpp: "deconstify(#->scale_color((LVecBase4 const &)(#), #, #, #))", header: deconstifyCode.}

proc setColor*(this: GeomVertexData, color: LColor): GeomVertexData {.importcpp: "deconstify(#->set_color(#))", header: deconstifyCode.}

proc setColor*(this: GeomVertexData, color: LColor, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents): GeomVertexData {.importcpp: "deconstify(#->set_color(#, #, #, #))", header: deconstifyCode.}

proc reverseNormals*(this: GeomVertexData): GeomVertexData {.importcpp: "deconstify(#->reverse_normals())", header: deconstifyCode.}

proc animateVertices*(this: GeomVertexData, force: bool, currentThread: Thread): GeomVertexData {.importcpp: "deconstify(#->animate_vertices(#, #))", header: deconstifyCode.}

proc clearAnimatedVertices*(this: GeomVertexData) {.importcpp: "#->clear_animated_vertices()".}

proc transformVertices*(this: Geom | GeomVertexData, mat: LMatrix4) {.importcpp: "#->transform_vertices(#)".}

proc transformVertices*(this: GeomVertexData, mat: LMatrix4, rows: SparseArray) {.importcpp: "#->transform_vertices(#, #)".}

proc transformVertices*(this: GeomVertexData, mat: LMatrix4, beginRow: int, endRow: int) {.importcpp: "#->transform_vertices(#, #, #)".}

proc replaceColumn*(this: GeomVertexData, name: InternalName, numComponents: int, numericType: GeomEnums_NumericType, contents: GeomEnums_Contents): GeomVertexData {.importcpp: "#->replace_column(#, #, #, #)".}

proc describeVertex*(this: GeomVertexData, `out`: iostream | ostream, row: int) {.importcpp: "#->describe_vertex(#, #)".}

proc clearCache*(this: AudioManager | Geom | GeomVertexData) {.importcpp: "#->clear_cache()".}

proc clearCacheStage*(this: GeomVertexData) {.importcpp: "#->clear_cache_stage()".}

proc upcastToSavedContext*(this: BufferContext): SavedContext {.importcpp: "((SavedContext *)(#))".}

proc getActive*(this: AudioManager | AudioSound | BufferContext | MouseWatcherRegion | PGItem): bool {.importcpp: "#->get_active()".}

proc getResident*(this: BufferContext): bool {.importcpp: "#->get_resident()".}

proc upcastToGeomEnums*(this: GeomPrimitive): GeomEnums {.importcpp: "((GeomEnums *)(GeomPrimitive *)(#))".}

proc makeCopy*(this: GeomPrimitive): GeomPrimitive {.importcpp: "#->make_copy()".}

proc getPrimitiveType*(this: Geom | GeomPrimitive): GeomEnums_PrimitiveType {.importcpp: "#->get_primitive_type()".}

proc getGeomRendering*(this: Geom | GeomPrimitive): int {.importcpp: "#->get_geom_rendering()".}

proc getShadeModel*(this: Geom | GeomPrimitive): GeomEnums_ShadeModel {.importcpp: "#->get_shade_model()".}

proc setShadeModel*(this: GeomPrimitive, shadeModel: GeomEnums_ShadeModel) {.importcpp: "#->set_shade_model(#)".}

proc getIndexType*(this: GeomPrimitive): GeomEnums_NumericType {.importcpp: "#->get_index_type()".}

proc setIndexType*(this: GeomPrimitive, indexType: GeomEnums_NumericType) {.importcpp: "#->set_index_type(#)".}

proc isComposite*(this: GeomPrimitive): bool {.importcpp: "#->is_composite()".}

proc isIndexed*(this: GeomPrimitive): bool {.importcpp: "#->is_indexed()".}

proc getFirstVertex*(this: GeomPrimitive): int {.importcpp: "#->get_first_vertex()".}

proc getVertex*(this: GeomPrimitive, i: int): int {.importcpp: "#->get_vertex(#)".}

proc addVertex*(this: GeomPrimitive, vertex: int) {.importcpp: "#->add_vertex(#)".}

proc addVertices*(this: GeomPrimitive, v1: int, v2: int) {.importcpp: "#->add_vertices(#, #)".}

proc addVertices*(this: GeomPrimitive, v1: int, v2: int, v3: int) {.importcpp: "#->add_vertices(#, #, #)".}

proc addVertices*(this: GeomPrimitive, v1: int, v2: int, v3: int, v4: int) {.importcpp: "#->add_vertices(#, #, #, #)".}

proc addConsecutiveVertices*(this: GeomPrimitive, start: int, numVertices: int) {.importcpp: "#->add_consecutive_vertices(#, #)".}

proc addNextVertices*(this: GeomPrimitive, numVertices: int) {.importcpp: "#->add_next_vertices(#)".}

proc reserveNumVertices*(this: GeomPrimitive, numVertices: int) {.importcpp: "#->reserve_num_vertices(#)".}

proc closePrimitive*(this: GeomPrimitive): bool {.importcpp: "#->close_primitive()".}

proc offsetVertices*(this: GeomPrimitive, offset: int) {.importcpp: "#->offset_vertices(#)".}

proc offsetVertices*(this: GeomPrimitive, offset: int, beginRow: int, endRow: int) {.importcpp: "#->offset_vertices(#, #, #)".}

proc makeNonindexed*(this: GeomPrimitive, dest: GeomVertexData, source: GeomVertexData) {.importcpp: "#->make_nonindexed(#, #)".}

proc packVertices*(this: GeomPrimitive, dest: GeomVertexData, source: GeomVertexData) {.importcpp: "#->pack_vertices(#, #)".}

proc makeIndexed*(this: GeomPrimitive) {.importcpp: "#->make_indexed()".}

proc getNumPrimitives*(this: Geom | GeomPrimitive): int {.importcpp: "#->get_num_primitives()".}

proc getPrimitiveStart*(this: GeomPrimitive, n: int): int {.importcpp: "#->get_primitive_start(#)".}

proc getPrimitiveEnd*(this: GeomPrimitive, n: int): int {.importcpp: "#->get_primitive_end(#)".}

proc getPrimitiveNumVertices*(this: GeomPrimitive, n: int): int {.importcpp: "#->get_primitive_num_vertices(#)".}

proc getNumUsedVertices*(this: GeomPrimitive): int {.importcpp: "#->get_num_used_vertices()".}

proc getNumFaces*(this: GeomPrimitive): int {.importcpp: "#->get_num_faces()".}

proc getPrimitiveNumFaces*(this: GeomPrimitive, n: int): int {.importcpp: "#->get_primitive_num_faces(#)".}

proc getMinVertex*(this: GeomPrimitive): int {.importcpp: "#->get_min_vertex()".}

proc getPrimitiveMinVertex*(this: GeomPrimitive, n: int): int {.importcpp: "#->get_primitive_min_vertex(#)".}

proc getMaxVertex*(this: GeomPrimitive): int {.importcpp: "#->get_max_vertex()".}

proc getPrimitiveMaxVertex*(this: GeomPrimitive, n: int): int {.importcpp: "#->get_primitive_max_vertex(#)".}

proc decompose*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->decompose())", header: deconstifyCode.}

proc rotate*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->rotate())", header: deconstifyCode.}

proc doubleside*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->doubleside())", header: deconstifyCode.}

proc reverse*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->reverse())", header: deconstifyCode.}

proc matchShadeModel*(this: GeomPrimitive, shadeModel: GeomEnums_ShadeModel): GeomPrimitive {.importcpp: "deconstify(#->match_shade_model(#))", header: deconstifyCode.}

proc makePoints*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->make_points())", header: deconstifyCode.}

proc makeLines*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->make_lines())", header: deconstifyCode.}

proc makePatches*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->make_patches())", header: deconstifyCode.}

proc makeAdjacency*(this: GeomPrimitive): GeomPrimitive {.importcpp: "deconstify(#->make_adjacency())", header: deconstifyCode.}

proc checkValid*(this: Geom | GeomPrimitive, vertexData: GeomVertexData): bool {.importcpp: "#->check_valid(#)".}

proc getVertices*(this: GeomPrimitive): GeomVertexArrayData {.importcpp: "deconstify(#->get_vertices())", header: deconstifyCode.}

proc getVerticesHandle*(this: GeomPrimitive, currentThread: Thread): GeomVertexArrayDataHandle {.importcpp: "deconstify(#->get_vertices_handle(#))", header: deconstifyCode.}

proc modifyVertices*(this: GeomPrimitive, numVertices: int): GeomVertexArrayData {.importcpp: "#->modify_vertices(#)".}

proc modifyVertices*(this: GeomPrimitive): GeomVertexArrayData {.importcpp: "#->modify_vertices()".}

proc modifyVerticesHandle*(this: GeomPrimitive, currentThread: Thread): GeomVertexArrayDataHandle {.importcpp: "#->modify_vertices_handle(#)".}

proc setVertices*(this: GeomPrimitive, vertices: GeomVertexArrayData, numVertices: int) {.importcpp: "#->set_vertices(#, #)".}

proc setVertices*(this: GeomPrimitive, vertices: GeomVertexArrayData) {.importcpp: "#->set_vertices(#)".}

proc setNonindexedVertices*(this: GeomPrimitive, firstVertex: int, numVertices: int) {.importcpp: "#->set_nonindexed_vertices(#, #)".}

proc getIndexStride*(this: GeomPrimitive): int {.importcpp: "#->get_index_stride()".}

proc getStripCutIndex*(this: GeomPrimitive): int {.importcpp: "#->get_strip_cut_index()".}

proc getMins*(this: GeomPrimitive): GeomVertexArrayData {.importcpp: "deconstify(#->get_mins())", header: deconstifyCode.}

proc getMaxs*(this: GeomPrimitive): GeomVertexArrayData {.importcpp: "deconstify(#->get_maxs())", header: deconstifyCode.}

proc setMinmax*(this: GeomPrimitive, minVertex: int, maxVertex: int, mins: GeomVertexArrayData, maxs: GeomVertexArrayData) {.importcpp: "#->set_minmax(#, #, #, #)".}

proc clearMinmax*(this: GeomPrimitive) {.importcpp: "#->clear_minmax()".}

proc getNumVerticesPerPrimitive*(this: GeomPrimitive): int {.importcpp: "#->get_num_vertices_per_primitive()".}

proc getMinNumVerticesPerPrimitive*(this: GeomPrimitive): int {.importcpp: "#->get_min_num_vertices_per_primitive()".}

proc getNumUnusedVerticesPerPrimitive*(this: GeomPrimitive): int {.importcpp: "#->get_num_unused_vertices_per_primitive()".}

proc setTexcoordName*(this: TextureStage, name: InternalName) {.importcpp: "#->set_texcoord_name(#)".}

proc setTexcoordName*(this: TextureStage, texcoordName: string) {.importcpp: "#->set_texcoord_name(nimStringToStdString(#))", header: stringConversionCode.}

proc getTexcoordName*(this: TextureStage): InternalName {.importcpp: "#->get_texcoord_name()".}

proc getTangentName*(this: TextureStage): InternalName {.importcpp: "#->get_tangent_name()".}

proc getBinormalName*(this: TextureStage): InternalName {.importcpp: "#->get_binormal_name()".}

proc setMode*(this: TextureStage, mode: TextureStage_Mode) {.importcpp: "#->set_mode(#)".}

proc getMode*(this: TextureStage): TextureStage_Mode {.importcpp: "#->get_mode()".}

proc isFixedFunction*(this: TextureStage): bool {.importcpp: "#->is_fixed_function()".}

proc setRgbScale*(this: TextureStage, rgbScale: int) {.importcpp: "#->set_rgb_scale(#)".}

proc getRgbScale*(this: TextureStage): int {.importcpp: "#->get_rgb_scale()".}

proc setAlphaScale*(this: TextureStage, alphaScale: int) {.importcpp: "#->set_alpha_scale(#)".}

proc getAlphaScale*(this: TextureStage): int {.importcpp: "#->get_alpha_scale()".}

proc setSavedResult*(this: TextureStage, savedResult: bool) {.importcpp: "#->set_saved_result(#)".}

proc getSavedResult*(this: TextureStage): bool {.importcpp: "#->get_saved_result()".}

proc setCombineRgb*(this: TextureStage, mode: TextureStage_CombineMode, source0: TextureStage_CombineSource, operand0: TextureStage_CombineOperand) {.importcpp: "#->set_combine_rgb(#, #, #)".}

proc setCombineRgb*(this: TextureStage, mode: TextureStage_CombineMode, source0: TextureStage_CombineSource, operand0: TextureStage_CombineOperand, source1: TextureStage_CombineSource, operand1: TextureStage_CombineOperand) {.importcpp: "#->set_combine_rgb(#, #, #, #, #)".}

proc setCombineRgb*(this: TextureStage, mode: TextureStage_CombineMode, source0: TextureStage_CombineSource, operand0: TextureStage_CombineOperand, source1: TextureStage_CombineSource, operand1: TextureStage_CombineOperand, source2: TextureStage_CombineSource, operand2: TextureStage_CombineOperand) {.importcpp: "#->set_combine_rgb(#, #, #, #, #, #, #)".}

proc getCombineRgbMode*(this: TextureStage): TextureStage_CombineMode {.importcpp: "#->get_combine_rgb_mode()".}

proc getNumCombineRgbOperands*(this: TextureStage): int {.importcpp: "#->get_num_combine_rgb_operands()".}

proc getCombineRgbSource0*(this: TextureStage): TextureStage_CombineSource {.importcpp: "#->get_combine_rgb_source0()".}

proc getCombineRgbOperand0*(this: TextureStage): TextureStage_CombineOperand {.importcpp: "#->get_combine_rgb_operand0()".}

proc getCombineRgbSource1*(this: TextureStage): TextureStage_CombineSource {.importcpp: "#->get_combine_rgb_source1()".}

proc getCombineRgbOperand1*(this: TextureStage): TextureStage_CombineOperand {.importcpp: "#->get_combine_rgb_operand1()".}

proc getCombineRgbSource2*(this: TextureStage): TextureStage_CombineSource {.importcpp: "#->get_combine_rgb_source2()".}

proc getCombineRgbOperand2*(this: TextureStage): TextureStage_CombineOperand {.importcpp: "#->get_combine_rgb_operand2()".}

proc setCombineAlpha*(this: TextureStage, mode: TextureStage_CombineMode, source0: TextureStage_CombineSource, operand0: TextureStage_CombineOperand) {.importcpp: "#->set_combine_alpha(#, #, #)".}

proc setCombineAlpha*(this: TextureStage, mode: TextureStage_CombineMode, source0: TextureStage_CombineSource, operand0: TextureStage_CombineOperand, source1: TextureStage_CombineSource, operand1: TextureStage_CombineOperand) {.importcpp: "#->set_combine_alpha(#, #, #, #, #)".}

proc setCombineAlpha*(this: TextureStage, mode: TextureStage_CombineMode, source0: TextureStage_CombineSource, operand0: TextureStage_CombineOperand, source1: TextureStage_CombineSource, operand1: TextureStage_CombineOperand, source2: TextureStage_CombineSource, operand2: TextureStage_CombineOperand) {.importcpp: "#->set_combine_alpha(#, #, #, #, #, #, #)".}

proc getCombineAlphaMode*(this: TextureStage): TextureStage_CombineMode {.importcpp: "#->get_combine_alpha_mode()".}

proc getNumCombineAlphaOperands*(this: TextureStage): int {.importcpp: "#->get_num_combine_alpha_operands()".}

proc getCombineAlphaSource0*(this: TextureStage): TextureStage_CombineSource {.importcpp: "#->get_combine_alpha_source0()".}

proc getCombineAlphaOperand0*(this: TextureStage): TextureStage_CombineOperand {.importcpp: "#->get_combine_alpha_operand0()".}

proc getCombineAlphaSource1*(this: TextureStage): TextureStage_CombineSource {.importcpp: "#->get_combine_alpha_source1()".}

proc getCombineAlphaOperand1*(this: TextureStage): TextureStage_CombineOperand {.importcpp: "#->get_combine_alpha_operand1()".}

proc getCombineAlphaSource2*(this: TextureStage): TextureStage_CombineSource {.importcpp: "#->get_combine_alpha_source2()".}

proc getCombineAlphaOperand2*(this: TextureStage): TextureStage_CombineOperand {.importcpp: "#->get_combine_alpha_operand2()".}

proc usesColor*(this: TextureStage): bool {.importcpp: "#->uses_color()".}

proc usesPrimaryColor*(this: TextureStage): bool {.importcpp: "#->uses_primary_color()".}

proc usesLastSavedResult*(this: TextureStage): bool {.importcpp: "#->uses_last_saved_result()".}

proc `==`*(this: TextureStage, other: TextureStage): bool {.importcpp: "#->operator ==(#)".}

proc `!=`*(this: TextureStage, other: TextureStage): bool {.importcpp: "#->operator !=(#)".}

proc `<`*(this: TextureStage, other: TextureStage): bool {.importcpp: "#->operator <(#)".}

proc compareTo*(this: TextureStage, other: TextureStage): int {.importcpp: "#->compare_to(#)".}

proc upcastToGeomEnums*(this: Geom): GeomEnums {.importcpp: "((GeomEnums *)(Geom *)(#))".}

proc makeCopy*(this: Geom): Geom {.importcpp: "#->make_copy()".}

proc modifyVertexData*(this: Geom): GeomVertexData {.importcpp: "#->modify_vertex_data()".}

proc setVertexData*(this: Geom, data: GeomVertexData) {.importcpp: "#->set_vertex_data(#)".}

proc offsetVertices*(this: Geom, data: GeomVertexData, offset: int) {.importcpp: "#->offset_vertices(#, #)".}

proc makeNonindexed*(this: Geom, compositeOnly: bool): int {.importcpp: "#->make_nonindexed(#)".}

proc getPrimitive*(this: Geom, i: int): GeomPrimitive {.importcpp: "deconstify(#->get_primitive(#))", header: deconstifyCode.}

proc modifyPrimitive*(this: Geom, i: int): GeomPrimitive {.importcpp: "#->modify_primitive(#)".}

proc setPrimitive*(this: Geom, i: int, primitive: GeomPrimitive) {.importcpp: "#->set_primitive(#, #)".}

proc insertPrimitive*(this: Geom, i: int, primitive: GeomPrimitive) {.importcpp: "#->insert_primitive(#, #)".}

proc addPrimitive*(this: Geom, primitive: GeomPrimitive) {.importcpp: "#->add_primitive(#)".}

proc removePrimitive*(this: Geom, i: int) {.importcpp: "#->remove_primitive(#)".}

proc clearPrimitives*(this: Geom) {.importcpp: "#->clear_primitives()".}

proc decompose*(this: Geom): Geom {.importcpp: "#->decompose()".}

proc doubleside*(this: Geom): Geom {.importcpp: "#->doubleside()".}

proc reverse*(this: Geom): Geom {.importcpp: "#->reverse()".}

proc rotate*(this: Geom): Geom {.importcpp: "#->rotate()".}

proc unify*(this: Geom, maxIndices: int, preserveOrder: bool): Geom {.importcpp: "#->unify(#, #)".}

proc makePoints*(this: Geom): Geom {.importcpp: "#->make_points()".}

proc makeLines*(this: Geom): Geom {.importcpp: "#->make_lines()".}

proc makePatches*(this: Geom): Geom {.importcpp: "#->make_patches()".}

proc makeAdjacency*(this: Geom): Geom {.importcpp: "#->make_adjacency()".}

proc decomposeInPlace*(this: Geom) {.importcpp: "#->decompose_in_place()".}

proc doublesideInPlace*(this: Geom) {.importcpp: "#->doubleside_in_place()".}

proc reverseInPlace*(this: Geom) {.importcpp: "#->reverse_in_place()".}

proc rotateInPlace*(this: Geom) {.importcpp: "#->rotate_in_place()".}

proc unifyInPlace*(this: Geom, maxIndices: int, preserveOrder: bool) {.importcpp: "#->unify_in_place(#, #)".}

proc makePointsInPlace*(this: Geom) {.importcpp: "#->make_points_in_place()".}

proc makeLinesInPlace*(this: Geom) {.importcpp: "#->make_lines_in_place()".}

proc makePatchesInPlace*(this: Geom) {.importcpp: "#->make_patches_in_place()".}

proc makeAdjacencyInPlace*(this: Geom) {.importcpp: "#->make_adjacency_in_place()".}

proc copyPrimitivesFrom*(this: Geom, other: Geom): bool {.importcpp: "#->copy_primitives_from(#)".}

proc clearCacheStage*(this: Geom, currentThread: Thread) {.importcpp: "#->clear_cache_stage(#)".}

proc prepareNow*(this: Geom, preparedObjects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase): GeomContext {.importcpp: "#->prepare_now(#, #)".}

proc getGeom*(this: GeomContext): Geom {.importcpp: "#.get_geom()".}

proc getVertexData*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): GeomVertexData {.importcpp: "#.get_vertex_data()".}

proc getArrayData*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): GeomVertexArrayData {.importcpp: "#.get_array_data()".}

proc getArrayHandle*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): GeomVertexArrayDataHandle {.importcpp: "#.get_array_handle()".}

proc getStride*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): int {.importcpp: "#.get_stride()".}

proc setForce*(this: GeomVertexReader | GeomVertexRewriter, force: bool) {.importcpp: "#.set_force(#)".}

proc setColumn*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter, name: InternalName): bool {.importcpp: "#.set_column(#)".}

proc setColumn*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter, column: int): bool {.importcpp: "#.set_column(#)".}

proc setColumn*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter, array: int, column: GeomVertexColumn): bool {.importcpp: "#.set_column(#, #)".}

proc hasColumn*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): bool {.importcpp: "#.has_column()".}

proc getArray*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): int {.importcpp: "#.get_array()".}

proc getColumn*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): GeomVertexColumn {.importcpp: "#.get_column()".}

proc setRowUnsafe*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter, row: int) {.importcpp: "#.set_row_unsafe(#)".}

proc setRow*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter, row: int) {.importcpp: "#.set_row(#)".}

proc getStartRow*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): int {.importcpp: "#.get_start_row()".}

proc getReadRow*(this: GeomVertexReader | GeomVertexRewriter): int {.importcpp: "#.get_read_row()".}

proc isAtEnd*(this: GeomVertexReader | GeomVertexRewriter | GeomVertexWriter): bool {.importcpp: "#.is_at_end()".}

proc getData1f*(this: GeomVertexReader | GeomVertexRewriter): float32 {.importcpp: "#.get_data1f()".}

proc getData2f*(this: GeomVertexReader | GeomVertexRewriter): LVecBase2f {.importcpp: "#.get_data2f()".}

proc getData3f*(this: GeomVertexReader | GeomVertexRewriter): LVecBase3f {.importcpp: "#.get_data3f()".}

proc getData4f*(this: GeomVertexReader | GeomVertexRewriter): LVecBase4f {.importcpp: "#.get_data4f()".}

proc getMatrix3f*(this: GeomVertexReader | GeomVertexRewriter): LMatrix3f {.importcpp: "#.get_matrix3f()".}

proc getMatrix4f*(this: GeomVertexReader | GeomVertexRewriter): LMatrix4f {.importcpp: "#.get_matrix4f()".}

proc getData1d*(this: GeomVertexReader | GeomVertexRewriter): float64 {.importcpp: "#.get_data1d()".}

proc getData2d*(this: GeomVertexReader | GeomVertexRewriter): LVecBase2d {.importcpp: "#.get_data2d()".}

proc getData3d*(this: GeomVertexReader | GeomVertexRewriter): LVecBase3d {.importcpp: "#.get_data3d()".}

proc getData4d*(this: GeomVertexReader | GeomVertexRewriter): LVecBase4d {.importcpp: "#.get_data4d()".}

proc getMatrix3d*(this: GeomVertexReader | GeomVertexRewriter): LMatrix3d {.importcpp: "#.get_matrix3d()".}

proc getMatrix4d*(this: GeomVertexReader | GeomVertexRewriter): LMatrix4d {.importcpp: "#.get_matrix4d()".}

proc getData1*(this: GeomVertexReader | GeomVertexRewriter): float {.importcpp: "#.get_data1()".}

proc getData2*(this: GeomVertexReader | GeomVertexRewriter): LVecBase2 {.importcpp: "#.get_data2()".}

proc getData3*(this: GeomVertexReader | GeomVertexRewriter): LVecBase3 {.importcpp: "#.get_data3()".}

proc getData4*(this: GeomVertexReader | GeomVertexRewriter): LVecBase4 {.importcpp: "#.get_data4()".}

proc getMatrix3*(this: GeomVertexReader | GeomVertexRewriter): LMatrix3 {.importcpp: "#.get_matrix3()".}

proc getMatrix4*(this: GeomVertexReader | GeomVertexRewriter): LMatrix4 {.importcpp: "#.get_matrix4()".}

proc getData1i*(this: GeomVertexReader | GeomVertexRewriter): int {.importcpp: "#.get_data1i()".}

proc getData2i*(this: GeomVertexReader | GeomVertexRewriter): LVecBase2i {.importcpp: "#.get_data2i()".}

proc getData3i*(this: GeomVertexReader | GeomVertexRewriter): LVecBase3i {.importcpp: "#.get_data3i()".}

proc getData4i*(this: GeomVertexReader | GeomVertexRewriter): LVecBase4i {.importcpp: "#.get_data4i()".}

proc reserveNumRows*(this: GeomVertexWriter, numRows: int): bool {.importcpp: "#.reserve_num_rows(#)".}

proc getWriteRow*(this: GeomVertexWriter): int {.importcpp: "#.get_write_row()".}

proc setData1f*(this: GeomVertexWriter, data: float32) {.importcpp: "#.set_data1f(#)".}

proc setData2f*(this: GeomVertexWriter, data: LVecBase2f) {.importcpp: "#.set_data2f((LVecBase2f const &)(#))".}

proc setData2f*(this: GeomVertexWriter, x: float32, y: float32) {.importcpp: "#.set_data2f(#, #)".}

proc setData3f*(this: GeomVertexWriter, data: LVecBase3f) {.importcpp: "#.set_data3f((LVecBase3f const &)(#))".}

proc setData3f*(this: GeomVertexWriter, x: float32, y: float32, z: float32) {.importcpp: "#.set_data3f(#, #, #)".}

proc setData4f*(this: GeomVertexWriter, data: LVecBase4f) {.importcpp: "#.set_data4f((LVecBase4f const &)(#))".}

proc setData4f*(this: GeomVertexWriter, x: float32, y: float32, z: float32, w: float32) {.importcpp: "#.set_data4f(#, #, #, #)".}

proc setMatrix3f*(this: GeomVertexWriter, mat: LMatrix3f) {.importcpp: "#.set_matrix3f(#)".}

proc setMatrix4f*(this: GeomVertexWriter, mat: LMatrix4f) {.importcpp: "#.set_matrix4f(#)".}

proc setData1d*(this: GeomVertexWriter, data: float64) {.importcpp: "#.set_data1d(#)".}

proc setData2d*(this: GeomVertexWriter, data: LVecBase2d) {.importcpp: "#.set_data2d((LVecBase2d const &)(#))".}

proc setData2d*(this: GeomVertexWriter, x: float64, y: float64) {.importcpp: "#.set_data2d(#, #)".}

proc setData3d*(this: GeomVertexWriter, data: LVecBase3d) {.importcpp: "#.set_data3d((LVecBase3d const &)(#))".}

proc setData3d*(this: GeomVertexWriter, x: float64, y: float64, z: float64) {.importcpp: "#.set_data3d(#, #, #)".}

proc setData4d*(this: GeomVertexWriter, data: LVecBase4d) {.importcpp: "#.set_data4d((LVecBase4d const &)(#))".}

proc setData4d*(this: GeomVertexWriter, x: float64, y: float64, z: float64, w: float64) {.importcpp: "#.set_data4d(#, #, #, #)".}

proc setMatrix3d*(this: GeomVertexWriter, mat: LMatrix3d) {.importcpp: "#.set_matrix3d(#)".}

proc setMatrix4d*(this: GeomVertexWriter, mat: LMatrix4d) {.importcpp: "#.set_matrix4d(#)".}

proc setData1*(this: GeomVertexWriter, data: float) {.importcpp: "#.set_data1(#)".}

proc setData2*(this: GeomVertexWriter, data: LVecBase2) {.importcpp: "#.set_data2((LVecBase2 const &)(#))".}

proc setData2*(this: GeomVertexWriter, x: float, y: float) {.importcpp: "#.set_data2(#, #)".}

proc setData3*(this: GeomVertexWriter, data: LVecBase3) {.importcpp: "#.set_data3((LVecBase3 const &)(#))".}

proc setData3*(this: GeomVertexWriter, x: float, y: float, z: float) {.importcpp: "#.set_data3(#, #, #)".}

proc setData4*(this: GeomVertexWriter, data: LVecBase4) {.importcpp: "#.set_data4((LVecBase4 const &)(#))".}

proc setData4*(this: GeomVertexWriter, x: float, y: float, z: float, w: float) {.importcpp: "#.set_data4(#, #, #, #)".}

proc setMatrix3*(this: GeomVertexWriter, mat: LMatrix3) {.importcpp: "#.set_matrix3(#)".}

proc setMatrix4*(this: GeomVertexWriter, mat: LMatrix4) {.importcpp: "#.set_matrix4(#)".}

proc setData1i*(this: GeomVertexWriter, data: int) {.importcpp: "#.set_data1i(#)".}

proc setData2i*(this: GeomVertexWriter, data: LVecBase2i) {.importcpp: "#.set_data2i((LVecBase2i const &)(#))".}

proc setData2i*(this: GeomVertexWriter, a: int, b: int) {.importcpp: "#.set_data2i(#, #)".}

proc setData3i*(this: GeomVertexWriter, data: LVecBase3i) {.importcpp: "#.set_data3i((LVecBase3i const &)(#))".}

proc setData3i*(this: GeomVertexWriter, a: int, b: int, c: int) {.importcpp: "#.set_data3i(#, #, #)".}

proc setData4i*(this: GeomVertexWriter, data: LVecBase4i) {.importcpp: "#.set_data4i((LVecBase4i const &)(#))".}

proc setData4i*(this: GeomVertexWriter, a: int, b: int, c: int, d: int) {.importcpp: "#.set_data4i(#, #, #, #)".}

proc addData1f*(this: GeomVertexWriter, data: float32) {.importcpp: "#.add_data1f(#)".}

proc addData2f*(this: GeomVertexWriter, data: LVecBase2f) {.importcpp: "#.add_data2f((LVecBase2f const &)(#))".}

proc addData2f*(this: GeomVertexWriter, x: float32, y: float32) {.importcpp: "#.add_data2f(#, #)".}

proc addData3f*(this: GeomVertexWriter, data: LVecBase3f) {.importcpp: "#.add_data3f((LVecBase3f const &)(#))".}

proc addData3f*(this: GeomVertexWriter, x: float32, y: float32, z: float32) {.importcpp: "#.add_data3f(#, #, #)".}

proc addData4f*(this: GeomVertexWriter, data: LVecBase4f) {.importcpp: "#.add_data4f((LVecBase4f const &)(#))".}

proc addData4f*(this: GeomVertexWriter, x: float32, y: float32, z: float32, w: float32) {.importcpp: "#.add_data4f(#, #, #, #)".}

proc addMatrix3f*(this: GeomVertexWriter, mat: LMatrix3f) {.importcpp: "#.add_matrix3f(#)".}

proc addMatrix4f*(this: GeomVertexWriter, mat: LMatrix4f) {.importcpp: "#.add_matrix4f(#)".}

proc addData1d*(this: GeomVertexWriter, data: float64) {.importcpp: "#.add_data1d(#)".}

proc addData2d*(this: GeomVertexWriter, data: LVecBase2d) {.importcpp: "#.add_data2d((LVecBase2d const &)(#))".}

proc addData2d*(this: GeomVertexWriter, x: float64, y: float64) {.importcpp: "#.add_data2d(#, #)".}

proc addData3d*(this: GeomVertexWriter, data: LVecBase3d) {.importcpp: "#.add_data3d((LVecBase3d const &)(#))".}

proc addData3d*(this: GeomVertexWriter, x: float64, y: float64, z: float64) {.importcpp: "#.add_data3d(#, #, #)".}

proc addData4d*(this: GeomVertexWriter, data: LVecBase4d) {.importcpp: "#.add_data4d((LVecBase4d const &)(#))".}

proc addData4d*(this: GeomVertexWriter, x: float64, y: float64, z: float64, w: float64) {.importcpp: "#.add_data4d(#, #, #, #)".}

proc addMatrix3d*(this: GeomVertexWriter, mat: LMatrix3d) {.importcpp: "#.add_matrix3d(#)".}

proc addMatrix4d*(this: GeomVertexWriter, mat: LMatrix4d) {.importcpp: "#.add_matrix4d(#)".}

proc addData1*(this: GeomVertexWriter, data: float) {.importcpp: "#.add_data1(#)".}

proc addData2*(this: GeomVertexWriter, data: LVecBase2) {.importcpp: "#.add_data2((LVecBase2 const &)(#))".}

proc addData2*(this: GeomVertexWriter, x: float, y: float) {.importcpp: "#.add_data2(#, #)".}

proc addData3*(this: GeomVertexWriter, data: LVecBase3) {.importcpp: "#.add_data3((LVecBase3 const &)(#))".}

proc addData3*(this: GeomVertexWriter, x: float, y: float, z: float) {.importcpp: "#.add_data3(#, #, #)".}

proc addData4*(this: GeomVertexWriter, data: LVecBase4) {.importcpp: "#.add_data4((LVecBase4 const &)(#))".}

proc addData4*(this: GeomVertexWriter, x: float, y: float, z: float, w: float) {.importcpp: "#.add_data4(#, #, #, #)".}

proc addMatrix3*(this: GeomVertexWriter, mat: LMatrix3) {.importcpp: "#.add_matrix3(#)".}

proc addMatrix4*(this: GeomVertexWriter, mat: LMatrix4) {.importcpp: "#.add_matrix4(#)".}

proc addData1i*(this: GeomVertexWriter, data: int) {.importcpp: "#.add_data1i(#)".}

proc addData2i*(this: GeomVertexWriter, data: LVecBase2i) {.importcpp: "#.add_data2i((LVecBase2i const &)(#))".}

proc addData2i*(this: GeomVertexWriter, a: int, b: int) {.importcpp: "#.add_data2i(#, #)".}

proc addData3i*(this: GeomVertexWriter, data: LVecBase3i) {.importcpp: "#.add_data3i((LVecBase3i const &)(#))".}

proc addData3i*(this: GeomVertexWriter, a: int, b: int, c: int) {.importcpp: "#.add_data3i(#, #, #)".}

proc addData4i*(this: GeomVertexWriter, data: LVecBase4i) {.importcpp: "#.add_data4i((LVecBase4i const &)(#))".}

proc addData4i*(this: GeomVertexWriter, a: int, b: int, c: int, d: int) {.importcpp: "#.add_data4i(#, #, #, #)".}

proc upcastToGeomVertexWriter*(this: GeomVertexRewriter): var GeomVertexWriter {.importcpp: "((GeomVertexWriter *)&(#))".}

proc upcastToGeomVertexReader*(this: GeomVertexRewriter): var GeomVertexReader {.importcpp: "((GeomVertexReader *)&(#))".}

proc setWrapU*(this: var SamplerState, wrap: SamplerState_WrapMode) {.importcpp: "#.set_wrap_u(#)".}

proc setWrapV*(this: var SamplerState, wrap: SamplerState_WrapMode) {.importcpp: "#.set_wrap_v(#)".}

proc setWrapW*(this: var SamplerState, wrap: SamplerState_WrapMode) {.importcpp: "#.set_wrap_w(#)".}

proc setMinfilter*(this: var SamplerState, filter: SamplerState_FilterType) {.importcpp: "#.set_minfilter(#)".}

proc setMagfilter*(this: var SamplerState, filter: SamplerState_FilterType) {.importcpp: "#.set_magfilter(#)".}

proc setAnisotropicDegree*(this: var SamplerState, anisotropicDegree: int) {.importcpp: "#.set_anisotropic_degree(#)".}

proc setBorderColor*(this: var SamplerState, color: LColor) {.importcpp: "#.set_border_color(#)".}

proc setMinLod*(this: var SamplerState, minLod: float) {.importcpp: "#.set_min_lod(#)".}

proc setMaxLod*(this: var SamplerState, maxLod: float) {.importcpp: "#.set_max_lod(#)".}

proc setLodBias*(this: var SamplerState, lodBias: float) {.importcpp: "#.set_lod_bias(#)".}

proc getWrapU*(this: SamplerState): SamplerState_WrapMode {.importcpp: "#.get_wrap_u()".}

proc getWrapV*(this: SamplerState): SamplerState_WrapMode {.importcpp: "#.get_wrap_v()".}

proc getWrapW*(this: SamplerState): SamplerState_WrapMode {.importcpp: "#.get_wrap_w()".}

proc getMinfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_minfilter()".}

proc getMagfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_magfilter()".}

proc getEffectiveMinfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_effective_minfilter()".}

proc getEffectiveMagfilter*(this: SamplerState): SamplerState_FilterType {.importcpp: "#.get_effective_magfilter()".}

proc getAnisotropicDegree*(this: SamplerState): int {.importcpp: "#.get_anisotropic_degree()".}

proc getEffectiveAnisotropicDegree*(this: SamplerState): int {.importcpp: "#.get_effective_anisotropic_degree()".}

proc getBorderColor*(this: SamplerState): LColor {.importcpp: "#.get_border_color()".}

proc getMinLod*(this: SamplerState): float {.importcpp: "#.get_min_lod()".}

proc getMaxLod*(this: SamplerState): float {.importcpp: "#.get_max_lod()".}

proc getLodBias*(this: SamplerState): float {.importcpp: "#.get_lod_bias()".}

proc usesMipmaps*(this: SamplerState): bool {.importcpp: "#.uses_mipmaps()".}

proc `==`*(this: SamplerState, other: SamplerState): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: SamplerState, other: SamplerState): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: SamplerState, other: SamplerState): bool {.importcpp: "#.operator <(#)".}

proc prepare*(this: SamplerState, preparedObjects: PreparedGraphicsObjects) {.importcpp: "#.prepare(#)".}

proc isPrepared*(this: SamplerState, preparedObjects: PreparedGraphicsObjects): bool {.importcpp: "#.is_prepared(#)".}

proc release*(this: SamplerState, preparedObjects: PreparedGraphicsObjects) {.importcpp: "#.release(#)".}

proc upcastToNamable*(this: Texture): Namable {.importcpp: "((Namable *)(Texture *)(#))".}

proc makeCopy*(this: Texture): Texture {.importcpp: "#->make_copy()".}

proc setupTexture*(this: Texture, textureType: Texture_TextureType, xSize: int, ySize: int, zSize: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_texture(#, #, #, #, #, #)".}

proc setup1dTexture*(this: Texture) {.importcpp: "#->setup_1d_texture()".}

proc setup1dTexture*(this: Texture, xSize: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_1d_texture(#, #, #)".}

proc setup2dTexture*(this: Texture) {.importcpp: "#->setup_2d_texture()".}

proc setup2dTexture*(this: Texture, xSize: int, ySize: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_2d_texture(#, #, #, #)".}

proc setup3dTexture*(this: Texture, zSize: int) {.importcpp: "#->setup_3d_texture(#)".}

proc setup3dTexture*(this: Texture) {.importcpp: "#->setup_3d_texture()".}

proc setup3dTexture*(this: Texture, xSize: int, ySize: int, zSize: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_3d_texture(#, #, #, #, #)".}

proc setupCubeMap*(this: Texture) {.importcpp: "#->setup_cube_map()".}

proc setupCubeMap*(this: Texture, size: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_cube_map(#, #, #)".}

proc setup2dTextureArray*(this: Texture, zSize: int) {.importcpp: "#->setup_2d_texture_array(#)".}

proc setup2dTextureArray*(this: Texture) {.importcpp: "#->setup_2d_texture_array()".}

proc setup2dTextureArray*(this: Texture, xSize: int, ySize: int, zSize: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_2d_texture_array(#, #, #, #, #)".}

proc setupCubeMapArray*(this: Texture, numCubeMaps: int) {.importcpp: "#->setup_cube_map_array(#)".}

proc setupCubeMapArray*(this: Texture, size: int, numCubeMaps: int, componentType: Texture_ComponentType, format: Texture_Format) {.importcpp: "#->setup_cube_map_array(#, #, #, #)".}

proc setupBufferTexture*(this: Texture, size: int, componentType: Texture_ComponentType, format: Texture_Format, usage: GeomEnums_UsageHint) {.importcpp: "#->setup_buffer_texture(#, #, #, #)".}

proc generateNormalizationCubeMap*(this: Texture, size: int) {.importcpp: "#->generate_normalization_cube_map(#)".}

proc generateAlphaScaleMap*(this: Texture) {.importcpp: "#->generate_alpha_scale_map()".}

proc clearImage*(this: Texture) {.importcpp: "#->clear_image()".}

proc hasClearColor*(this: Texture): bool {.importcpp: "#->has_clear_color()".}

proc clearClearColor*(this: Texture) {.importcpp: "#->clear_clear_color()".}

proc read*(this: Texture, fullpath: Filename, alphaFullpath: Filename, primaryFileNumChannels: int, alphaFileChannel: int, options: LoaderOptions): bool {.importcpp: "#->read(#, #, #, #, #)".}

proc read*(this: Texture, fullpath: Filename, alphaFullpath: Filename, primaryFileNumChannels: int, alphaFileChannel: int): bool {.importcpp: "#->read(#, #, #, #)".}

proc read*(this: Texture, fullpath: Filename, alphaFullpath: Filename, primaryFileNumChannels: int, alphaFileChannel: int, z: int, n: int, readPages: bool, readMipmaps: bool, record: BamCacheRecord, options: LoaderOptions): bool {.importcpp: "#->read(#, #, #, #, #, #, #, #, #, #)".}

proc read*(this: Texture, fullpath: Filename, alphaFullpath: Filename, primaryFileNumChannels: int, alphaFileChannel: int, z: int, n: int, readPages: bool, readMipmaps: bool, record: BamCacheRecord): bool {.importcpp: "#->read(#, #, #, #, #, #, #, #, #)".}

proc read*(this: Texture, fullpath: Filename, alphaFullpath: Filename, primaryFileNumChannels: int, alphaFileChannel: int, z: int, n: int, readPages: bool, readMipmaps: bool): bool {.importcpp: "#->read(#, #, #, #, #, #, #, #)".}

proc read*(this: Texture, fullpath: Filename, options: LoaderOptions): bool {.importcpp: "#->read(#, #)".}

proc read*(this: Texture, fullpath: Filename): bool {.importcpp: "#->read(#)".}

proc read*(this: Texture, fullpath: Filename, z: int, n: int, readPages: bool, readMipmaps: bool, options: LoaderOptions): bool {.importcpp: "#->read(#, #, #, #, #, #)".}

proc read*(this: Texture, fullpath: Filename, z: int, n: int, readPages: bool, readMipmaps: bool): bool {.importcpp: "#->read(#, #, #, #, #)".}

proc write*(this: Texture, fullpath: Filename): bool {.importcpp: "#->write(#)".}

proc write*(this: Texture, fullpath: Filename, z: int, n: int, writePages: bool, writeMipmaps: bool): bool {.importcpp: "#->write(#, #, #, #, #)".}

proc readTxo*(this: Texture, `in`: istream, filename: string): bool {.importcpp: "#->read_txo(#, nimStringToStdString(#))", header: stringConversionCode.}

proc readTxo*(this: Texture, `in`: istream): bool {.importcpp: "#->read_txo(#)".}

proc writeTxo*(this: Texture, `out`: iostream | ostream, filename: string): bool {.importcpp: "#->write_txo(#, nimStringToStdString(#))", header: stringConversionCode.}

proc writeTxo*(this: Texture, `out`: iostream | ostream): bool {.importcpp: "#->write_txo(#)".}

proc readDds*(this: Texture, `in`: istream, filename: string, headerOnly: bool): bool {.importcpp: "#->read_dds(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc readDds*(this: Texture, `in`: istream, filename: string): bool {.importcpp: "#->read_dds(#, nimStringToStdString(#))", header: stringConversionCode.}

proc readDds*(this: Texture, `in`: istream): bool {.importcpp: "#->read_dds(#)".}

proc readKtx*(this: Texture, `in`: istream, filename: string, headerOnly: bool): bool {.importcpp: "#->read_ktx(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc readKtx*(this: Texture, `in`: istream, filename: string): bool {.importcpp: "#->read_ktx(#, nimStringToStdString(#))", header: stringConversionCode.}

proc readKtx*(this: Texture, `in`: istream): bool {.importcpp: "#->read_ktx(#)".}

proc load*(this: Texture, pnmimage: PNMImage, options: LoaderOptions): bool {.importcpp: "#->load(#, #)".}

proc load*(this: Texture, pnmimage: PNMImage): bool {.importcpp: "#->load(#)".}

proc load*(this: Texture, pnmimage: PNMImage, z: int, n: int, options: LoaderOptions): bool {.importcpp: "#->load(#, #, #, #)".}

proc load*(this: Texture, pnmimage: PNMImage, z: int, n: int): bool {.importcpp: "#->load(#, #, #)".}

proc load*(this: Texture, pfm: PfmFile, options: LoaderOptions): bool {.importcpp: "#->load(#, #)".}

proc load*(this: Texture, pfm: PfmFile): bool {.importcpp: "#->load(#)".}

proc load*(this: Texture, pfm: PfmFile, z: int, n: int, options: LoaderOptions): bool {.importcpp: "#->load(#, #, #, #)".}

proc load*(this: Texture, pfm: PfmFile, z: int, n: int): bool {.importcpp: "#->load(#, #, #)".}

proc loadSubImage*(this: Texture, pnmimage: PNMImage, x: int, y: int, z: int, n: int): bool {.importcpp: "#->load_sub_image(#, #, #, #, #)".}

proc loadSubImage*(this: Texture, pnmimage: PNMImage, x: int, y: int, z: int): bool {.importcpp: "#->load_sub_image(#, #, #, #)".}

proc loadSubImage*(this: Texture, pnmimage: PNMImage, x: int, y: int): bool {.importcpp: "#->load_sub_image(#, #, #)".}

proc store*(this: Texture, pnmimage: PNMImage): bool {.importcpp: "#->store(#)".}

proc store*(this: Texture, pnmimage: PNMImage, z: int, n: int): bool {.importcpp: "#->store(#, #, #)".}

proc store*(this: Texture, pfm: PfmFile): bool {.importcpp: "#->store(#)".}

proc store*(this: Texture, pfm: PfmFile, z: int, n: int): bool {.importcpp: "#->store(#, #, #)".}

proc reload*(this: Texture): bool {.importcpp: "#->reload()".}

proc loadRelated*(this: Texture, suffix: InternalName): Texture {.importcpp: "#->load_related(#)".}

proc hasFilename*(this: Texture): bool {.importcpp: "#->has_filename()".}

proc setFilename*(this: Texture, filename: Filename) {.importcpp: "#->set_filename(#)".}

proc clearFilename*(this: Texture) {.importcpp: "#->clear_filename()".}

proc hasAlphaFilename*(this: Texture): bool {.importcpp: "#->has_alpha_filename()".}

proc getAlphaFilename*(this: Texture): Filename {.importcpp: "#->get_alpha_filename()".}

proc setAlphaFilename*(this: Texture, alphaFilename: Filename) {.importcpp: "#->set_alpha_filename(#)".}

proc clearAlphaFilename*(this: Texture) {.importcpp: "#->clear_alpha_filename()".}

proc hasFullpath*(this: Shader | Texture): bool {.importcpp: "#->has_fullpath()".}

proc clearFullpath*(this: Texture) {.importcpp: "#->clear_fullpath()".}

proc hasAlphaFullpath*(this: Texture): bool {.importcpp: "#->has_alpha_fullpath()".}

proc getAlphaFullpath*(this: Texture): Filename {.importcpp: "#->get_alpha_fullpath()".}

proc setAlphaFullpath*(this: Texture, alphaFullpath: Filename) {.importcpp: "#->set_alpha_fullpath(#)".}

proc clearAlphaFullpath*(this: Texture) {.importcpp: "#->clear_alpha_fullpath()".}

proc setXSize*(this: Texture, xSize: int) {.importcpp: "#->set_x_size(#)".}

proc setYSize*(this: Texture, ySize: int) {.importcpp: "#->set_y_size(#)".}

proc getZSize*(this: Texture | TexturePeeker): int {.importcpp: "#->get_z_size()".}

proc setZSize*(this: Texture, zSize: int) {.importcpp: "#->set_z_size(#)".}

proc getNumViews*(this: Texture): int {.importcpp: "#->get_num_views()".}

proc setNumViews*(this: Texture, numViews: int) {.importcpp: "#->set_num_views(#)".}

proc getNumPages*(this: DynamicTextFont | Texture): int {.importcpp: "#->get_num_pages()".}

proc getComponentWidth*(this: Texture): int {.importcpp: "#->get_component_width()".}

proc getTextureType*(this: Texture): Texture_TextureType {.importcpp: "#->get_texture_type()".}

proc getFormat*(this: Texture): Texture_Format {.importcpp: "#->get_format()".}

proc setFormat*(this: Texture, format: Texture_Format) {.importcpp: "#->set_format(#)".}

proc getComponentType*(this: Texture): Texture_ComponentType {.importcpp: "#->get_component_type()".}

proc setComponentType*(this: Texture, componentType: Texture_ComponentType) {.importcpp: "#->set_component_type(#)".}

proc getWrapU*(this: Texture): SamplerState_WrapMode {.importcpp: "#->get_wrap_u()".}

proc setWrapU*(this: Texture, wrap: SamplerState_WrapMode) {.importcpp: "#->set_wrap_u(#)".}

proc getWrapV*(this: Texture): SamplerState_WrapMode {.importcpp: "#->get_wrap_v()".}

proc setWrapV*(this: Texture, wrap: SamplerState_WrapMode) {.importcpp: "#->set_wrap_v(#)".}

proc getWrapW*(this: Texture): SamplerState_WrapMode {.importcpp: "#->get_wrap_w()".}

proc setWrapW*(this: Texture, wrap: SamplerState_WrapMode) {.importcpp: "#->set_wrap_w(#)".}

proc getMinfilter*(this: DynamicTextFont | Texture): SamplerState_FilterType {.importcpp: "#->get_minfilter()".}

proc getEffectiveMinfilter*(this: Texture): SamplerState_FilterType {.importcpp: "#->get_effective_minfilter()".}

proc setMinfilter*(this: DynamicTextFont | Texture, filter: SamplerState_FilterType) {.importcpp: "#->set_minfilter(#)".}

proc getMagfilter*(this: DynamicTextFont | Texture): SamplerState_FilterType {.importcpp: "#->get_magfilter()".}

proc getEffectiveMagfilter*(this: Texture): SamplerState_FilterType {.importcpp: "#->get_effective_magfilter()".}

proc setMagfilter*(this: DynamicTextFont | Texture, filter: SamplerState_FilterType) {.importcpp: "#->set_magfilter(#)".}

proc getAnisotropicDegree*(this: DynamicTextFont | Texture): int {.importcpp: "#->get_anisotropic_degree()".}

proc getEffectiveAnisotropicDegree*(this: Texture): int {.importcpp: "#->get_effective_anisotropic_degree()".}

proc setAnisotropicDegree*(this: DynamicTextFont | Texture, anisotropicDegree: int) {.importcpp: "#->set_anisotropic_degree(#)".}

proc getBorderColor*(this: Texture): LColor {.importcpp: "#->get_border_color()".}

proc setBorderColor*(this: Texture, color: LColor) {.importcpp: "#->set_border_color(#)".}

proc hasCompression*(this: Texture): bool {.importcpp: "#->has_compression()".}

proc getCompression*(this: Texture): Texture_CompressionMode {.importcpp: "#->get_compression()".}

proc setCompression*(this: Texture, compression: Texture_CompressionMode) {.importcpp: "#->set_compression(#)".}

proc getRenderToTexture*(this: Texture): bool {.importcpp: "#->get_render_to_texture()".}

proc setRenderToTexture*(this: Texture, renderToTexture: bool) {.importcpp: "#->set_render_to_texture(#)".}

proc getDefaultSampler*(this: Texture): SamplerState {.importcpp: "#->get_default_sampler()".}

proc setDefaultSampler*(this: Texture, sampler: SamplerState) {.importcpp: "#->set_default_sampler(#)".}

proc usesMipmaps*(this: Texture): bool {.importcpp: "#->uses_mipmaps()".}

proc getQualityLevel*(this: Texture): Texture_QualityLevel {.importcpp: "#->get_quality_level()".}

proc getEffectiveQualityLevel*(this: Texture): Texture_QualityLevel {.importcpp: "#->get_effective_quality_level()".}

proc setQualityLevel*(this: Texture, qualityLevel: Texture_QualityLevel) {.importcpp: "#->set_quality_level(#)".}

proc getExpectedNumMipmapLevels*(this: Texture): int {.importcpp: "#->get_expected_num_mipmap_levels()".}

proc getExpectedMipmapXSize*(this: Texture, n: int): int {.importcpp: "#->get_expected_mipmap_x_size(#)".}

proc getExpectedMipmapYSize*(this: Texture, n: int): int {.importcpp: "#->get_expected_mipmap_y_size(#)".}

proc getExpectedMipmapZSize*(this: Texture, n: int): int {.importcpp: "#->get_expected_mipmap_z_size(#)".}

proc getExpectedMipmapNumPages*(this: Texture, n: int): int {.importcpp: "#->get_expected_mipmap_num_pages(#)".}

proc hasRamImage*(this: Texture): bool {.importcpp: "#->has_ram_image()".}

proc hasUncompressedRamImage*(this: Texture): bool {.importcpp: "#->has_uncompressed_ram_image()".}

proc mightHaveRamImage*(this: Texture): bool {.importcpp: "#->might_have_ram_image()".}

proc getRamImageSize*(this: Texture): int {.importcpp: "#->get_ram_image_size()".}

proc getRamViewSize*(this: Texture): int {.importcpp: "#->get_ram_view_size()".}

proc getRamPageSize*(this: Texture): int {.importcpp: "#->get_ram_page_size()".}

proc getExpectedRamImageSize*(this: Texture): int {.importcpp: "#->get_expected_ram_image_size()".}

proc getExpectedRamPageSize*(this: Texture): int {.importcpp: "#->get_expected_ram_page_size()".}

proc getRamImageCompression*(this: Texture): Texture_CompressionMode {.importcpp: "#->get_ram_image_compression()".}

proc clearRamImage*(this: Texture) {.importcpp: "#->clear_ram_image()".}

proc setKeepRamImage*(this: Texture, keepRamImage: bool) {.importcpp: "#->set_keep_ram_image(#)".}

proc getKeepRamImage*(this: Texture | VideoTexture): bool {.importcpp: "#->get_keep_ram_image()".}

proc isCacheable*(this: Texture): bool {.importcpp: "#->is_cacheable()".}

proc compressRamImage*(this: Texture, compression: Texture_CompressionMode, qualityLevel: Texture_QualityLevel, gsg: GraphicsStateGuardianBase): bool {.importcpp: "#->compress_ram_image(#, #, #)".}

proc compressRamImage*(this: Texture, compression: Texture_CompressionMode, qualityLevel: Texture_QualityLevel): bool {.importcpp: "#->compress_ram_image(#, #)".}

proc compressRamImage*(this: Texture, compression: Texture_CompressionMode): bool {.importcpp: "#->compress_ram_image(#)".}

proc compressRamImage*(this: Texture): bool {.importcpp: "#->compress_ram_image()".}

proc uncompressRamImage*(this: Texture): bool {.importcpp: "#->uncompress_ram_image()".}

proc getNumRamMipmapImages*(this: Texture): int {.importcpp: "#->get_num_ram_mipmap_images()".}

proc hasRamMipmapImage*(this: Texture, n: int): bool {.importcpp: "#->has_ram_mipmap_image(#)".}

proc getNumLoadableRamMipmapImages*(this: Texture): int {.importcpp: "#->get_num_loadable_ram_mipmap_images()".}

proc hasAllRamMipmapImages*(this: Texture): bool {.importcpp: "#->has_all_ram_mipmap_images()".}

proc getRamMipmapImageSize*(this: Texture, n: int): int {.importcpp: "#->get_ram_mipmap_image_size(#)".}

proc getRamMipmapViewSize*(this: Texture, n: int): int {.importcpp: "#->get_ram_mipmap_view_size(#)".}

proc getRamMipmapPageSize*(this: Texture, n: int): int {.importcpp: "#->get_ram_mipmap_page_size(#)".}

proc getExpectedRamMipmapImageSize*(this: Texture, n: int): int {.importcpp: "#->get_expected_ram_mipmap_image_size(#)".}

proc getExpectedRamMipmapViewSize*(this: Texture, n: int): int {.importcpp: "#->get_expected_ram_mipmap_view_size(#)".}

proc getExpectedRamMipmapPageSize*(this: Texture, n: int): int {.importcpp: "#->get_expected_ram_mipmap_page_size(#)".}

proc getRamMipmapPointer*(this: Texture, n: int) {.importcpp: "#->get_ram_mipmap_pointer(#)".}

proc setRamMipmapPointerFromInt*(this: Texture, pointer: clonglong, n: int, pageSize: int) {.importcpp: "#->set_ram_mipmap_pointer_from_int(#, #, #)".}

proc clearRamMipmapImage*(this: Texture, n: int) {.importcpp: "#->clear_ram_mipmap_image(#)".}

proc clearRamMipmapImages*(this: Texture) {.importcpp: "#->clear_ram_mipmap_images()".}

proc generateRamMipmapImages*(this: Texture) {.importcpp: "#->generate_ram_mipmap_images()".}

proc getSimpleXSize*(this: Texture): int {.importcpp: "#->get_simple_x_size()".}

proc getSimpleYSize*(this: Texture): int {.importcpp: "#->get_simple_y_size()".}

proc hasSimpleRamImage*(this: Texture): bool {.importcpp: "#->has_simple_ram_image()".}

proc getSimpleRamImageSize*(this: Texture): int {.importcpp: "#->get_simple_ram_image_size()".}

proc generateSimpleRamImage*(this: Texture) {.importcpp: "#->generate_simple_ram_image()".}

proc clearSimpleRamImage*(this: Texture) {.importcpp: "#->clear_simple_ram_image()".}

proc peek*(this: Texture): TexturePeeker {.importcpp: "#->peek()".}

proc getPropertiesModified*(this: Texture): UpdateSeq {.importcpp: "#->get_properties_modified()".}

proc getImageModified*(this: Texture): UpdateSeq {.importcpp: "#->get_image_modified()".}

proc getSimpleImageModified*(this: Texture): UpdateSeq {.importcpp: "#->get_simple_image_modified()".}

proc hasAutoTextureScale*(this: Texture): bool {.importcpp: "#->has_auto_texture_scale()".}

proc getAutoTextureScale*(this: Texture): AutoTextureScale {.importcpp: "#->get_auto_texture_scale()".}

proc setAutoTextureScale*(this: Texture, scale: AutoTextureScale) {.importcpp: "#->set_auto_texture_scale(#)".}

proc prepare*(this: Shader | Texture, preparedObjects: PreparedGraphicsObjects): AsyncFuture {.importcpp: "#->prepare(#)".}

proc wasImageModified*(this: Texture, preparedObjects: PreparedGraphicsObjects): bool {.importcpp: "#->was_image_modified(#)".}

proc getDataSizeBytes*(this: Texture, preparedObjects: PreparedGraphicsObjects): int {.importcpp: "#->get_data_size_bytes(#)".}

proc getActive*(this: Texture, preparedObjects: PreparedGraphicsObjects): bool {.importcpp: "#->get_active(#)".}

proc getResident*(this: Texture, preparedObjects: PreparedGraphicsObjects): bool {.importcpp: "#->get_resident(#)".}

proc estimateTextureMemory*(this: Texture): int {.importcpp: "#->estimate_texture_memory()".}

proc setAuxData*(this: Texture, key: string, auxData: TypedReferenceCount) {.importcpp: "#->set_aux_data(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clearAuxData*(this: Texture, key: string) {.importcpp: "#->clear_aux_data(nimStringToStdString(#))", header: stringConversionCode.}

proc getAuxData*(this: Texture, key: string): TypedReferenceCount {.importcpp: "#->get_aux_data(nimStringToStdString(#))", header: stringConversionCode.}

proc getPadXSize*(this: Texture): int {.importcpp: "#->get_pad_x_size()".}

proc getPadYSize*(this: Texture): int {.importcpp: "#->get_pad_y_size()".}

proc getPadZSize*(this: Texture): int {.importcpp: "#->get_pad_z_size()".}

proc getTexScale*(this: Texture): LVecBase2 {.importcpp: "#->get_tex_scale()".}

proc setPadSize*(this: Texture, x: int, y: int, z: int) {.importcpp: "#->set_pad_size(#, #, #)".}

proc setPadSize*(this: Texture, x: int, y: int) {.importcpp: "#->set_pad_size(#, #)".}

proc setPadSize*(this: Texture, x: int) {.importcpp: "#->set_pad_size(#)".}

proc setPadSize*(this: Texture) {.importcpp: "#->set_pad_size()".}

proc setSizePadded*(this: Texture, x: int, y: int, z: int) {.importcpp: "#->set_size_padded(#, #, #)".}

proc setSizePadded*(this: Texture, x: int, y: int) {.importcpp: "#->set_size_padded(#, #)".}

proc setSizePadded*(this: Texture, x: int) {.importcpp: "#->set_size_padded(#)".}

proc setSizePadded*(this: Texture) {.importcpp: "#->set_size_padded()".}

proc getOrigFileXSize*(this: Texture): int {.importcpp: "#->get_orig_file_x_size()".}

proc getOrigFileYSize*(this: Texture): int {.importcpp: "#->get_orig_file_y_size()".}

proc getOrigFileZSize*(this: Texture): int {.importcpp: "#->get_orig_file_z_size()".}

proc setOrigFileSize*(this: Texture, x: int, y: int, z: int) {.importcpp: "#->set_orig_file_size(#, #, #)".}

proc setOrigFileSize*(this: Texture, x: int, y: int) {.importcpp: "#->set_orig_file_size(#, #)".}

proc setLoadedFromImage*(this: Texture, flag: bool) {.importcpp: "#->set_loaded_from_image(#)".}

proc setLoadedFromImage*(this: Texture) {.importcpp: "#->set_loaded_from_image()".}

proc getLoadedFromImage*(this: Texture): bool {.importcpp: "#->get_loaded_from_image()".}

proc setLoadedFromTxo*(this: Texture, flag: bool) {.importcpp: "#->set_loaded_from_txo(#)".}

proc setLoadedFromTxo*(this: Texture) {.importcpp: "#->set_loaded_from_txo()".}

proc getLoadedFromTxo*(this: Texture): bool {.importcpp: "#->get_loaded_from_txo()".}

proc getMatchFramebufferFormat*(this: Texture): bool {.importcpp: "#->get_match_framebuffer_format()".}

proc setMatchFramebufferFormat*(this: Texture, flag: bool) {.importcpp: "#->set_match_framebuffer_format(#)".}

proc getPostLoadStoreCache*(this: Texture): bool {.importcpp: "#->get_post_load_store_cache()".}

proc setPostLoadStoreCache*(this: Texture, flag: bool) {.importcpp: "#->set_post_load_store_cache(#)".}

proc prepareNow*(this: Texture, view: int, preparedObjects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase): TextureContext {.importcpp: "#->prepare_now(#, #, #)".}

proc considerRescale*(this: Texture, pnmimage: PNMImage) {.importcpp: "#->consider_rescale(#)".}

proc rescaleTexture*(this: Texture): bool {.importcpp: "#->rescale_texture()".}

proc getFilename*(this: Shader, `type`: Shader_ShaderType): Filename {.importcpp: "#->get_filename(#)".}

proc setFilename*(this: Shader, `type`: Shader_ShaderType, filename: Filename) {.importcpp: "#->set_filename(#, #)".}

proc getText*(this: Shader, `type`: Shader_ShaderType): string {.importcpp: "nimStringFromStdString(#->get_text(#))", header: stringConversionCode.}

proc getText*(this: PGEntry | Shader): string {.importcpp: "nimStringFromStdString(#->get_text())", header: stringConversionCode.}

proc getErrorFlag*(this: Shader): bool {.importcpp: "#->get_error_flag()".}

proc getLanguage*(this: Shader): Shader_ShaderLanguage {.importcpp: "#->get_language()".}

proc getCacheCompiledShader*(this: Shader): bool {.importcpp: "#->get_cache_compiled_shader()".}

proc setCacheCompiledShader*(this: Shader, flag: bool) {.importcpp: "#->set_cache_compiled_shader(#)".}

proc prepareNow*(this: Shader, preparedObjects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase): ShaderContext {.importcpp: "#->prepare_now(#, #)".}

proc upcastToNamable*(this: ShaderBuffer): Namable {.importcpp: "((Namable *)(ShaderBuffer *)(#))".}

proc upcastToGeomEnums*(this: ShaderBuffer): GeomEnums {.importcpp: "((GeomEnums *)(ShaderBuffer *)(#))".}

proc prepareNow*(this: ShaderBuffer, preparedObjects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase): BufferContext {.importcpp: "#->prepare_now(#, #)".}

proc setGraphicsMemoryLimit*(this: PreparedGraphicsObjects, limit: int) {.importcpp: "#->set_graphics_memory_limit(#)".}

proc getGraphicsMemoryLimit*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_graphics_memory_limit()".}

proc showGraphicsMemoryLru*(this: PreparedGraphicsObjects, `out`: iostream | ostream) {.importcpp: "#->show_graphics_memory_lru(#)".}

proc showResidencyTrackers*(this: PreparedGraphicsObjects, `out`: iostream | ostream) {.importcpp: "#->show_residency_trackers(#)".}

proc getNumQueued*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued()".}

proc getNumPrepared*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared()".}

proc enqueueTexture*(this: PreparedGraphicsObjects, tex: Texture) {.importcpp: "#->enqueue_texture(#)".}

proc isTextureQueued*(this: PreparedGraphicsObjects, tex: Texture): bool {.importcpp: "#->is_texture_queued(#)".}

proc dequeueTexture*(this: PreparedGraphicsObjects, tex: Texture): bool {.importcpp: "#->dequeue_texture(#)".}

proc isTexturePrepared*(this: PreparedGraphicsObjects, tex: Texture): bool {.importcpp: "#->is_texture_prepared(#)".}

proc releaseTexture*(this: PreparedGraphicsObjects, tex: Texture) {.importcpp: "#->release_texture(#)".}

proc releaseTexture*(this: PreparedGraphicsObjects, tc: TextureContext) {.importcpp: "#->release_texture(#)".}

proc getNumQueuedTextures*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_textures()".}

proc getNumPreparedTextures*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_textures()".}

proc prepareTextureNow*(this: PreparedGraphicsObjects, tex: Texture, view: int, gsg: GraphicsStateGuardianBase): TextureContext {.importcpp: "#->prepare_texture_now(#, #, #)".}

proc enqueueSampler*(this: PreparedGraphicsObjects, sampler: SamplerState) {.importcpp: "#->enqueue_sampler(#)".}

proc isSamplerQueued*(this: PreparedGraphicsObjects, sampler: SamplerState): bool {.importcpp: "#->is_sampler_queued(#)".}

proc dequeueSampler*(this: PreparedGraphicsObjects, sampler: SamplerState): bool {.importcpp: "#->dequeue_sampler(#)".}

proc isSamplerPrepared*(this: PreparedGraphicsObjects, sampler: SamplerState): bool {.importcpp: "#->is_sampler_prepared(#)".}

proc releaseSampler*(this: PreparedGraphicsObjects, sampler: SamplerState) {.importcpp: "#->release_sampler(#)".}

proc getNumQueuedSamplers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_samplers()".}

proc getNumPreparedSamplers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_samplers()".}

proc enqueueGeom*(this: PreparedGraphicsObjects, geom: Geom) {.importcpp: "#->enqueue_geom(#)".}

proc isGeomQueued*(this: PreparedGraphicsObjects, geom: Geom): bool {.importcpp: "#->is_geom_queued(#)".}

proc dequeueGeom*(this: PreparedGraphicsObjects, geom: Geom): bool {.importcpp: "#->dequeue_geom(#)".}

proc isGeomPrepared*(this: PreparedGraphicsObjects, geom: Geom): bool {.importcpp: "#->is_geom_prepared(#)".}

proc releaseGeom*(this: PreparedGraphicsObjects, gc: GeomContext) {.importcpp: "#->release_geom(#)".}

proc getNumQueuedGeoms*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_geoms()".}

proc getNumPreparedGeoms*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_geoms()".}

proc prepareGeomNow*(this: PreparedGraphicsObjects, geom: Geom, gsg: GraphicsStateGuardianBase): GeomContext {.importcpp: "#->prepare_geom_now(#, #)".}

proc enqueueShader*(this: PreparedGraphicsObjects, shader: Shader) {.importcpp: "#->enqueue_shader(#)".}

proc isShaderQueued*(this: PreparedGraphicsObjects, shader: Shader): bool {.importcpp: "#->is_shader_queued(#)".}

proc dequeueShader*(this: PreparedGraphicsObjects, shader: Shader): bool {.importcpp: "#->dequeue_shader(#)".}

proc isShaderPrepared*(this: PreparedGraphicsObjects, shader: Shader): bool {.importcpp: "#->is_shader_prepared(#)".}

proc releaseShader*(this: PreparedGraphicsObjects, sc: ShaderContext) {.importcpp: "#->release_shader(#)".}

proc releaseAllShaders*(this: PreparedGraphicsObjects): int {.importcpp: "#->release_all_shaders()".}

proc getNumQueuedShaders*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_shaders()".}

proc getNumPreparedShaders*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_shaders()".}

proc prepareShaderNow*(this: PreparedGraphicsObjects, shader: Shader, gsg: GraphicsStateGuardianBase): ShaderContext {.importcpp: "#->prepare_shader_now(#, #)".}

proc enqueueVertexBuffer*(this: PreparedGraphicsObjects, data: GeomVertexArrayData) {.importcpp: "#->enqueue_vertex_buffer(#)".}

proc isVertexBufferQueued*(this: PreparedGraphicsObjects, data: GeomVertexArrayData): bool {.importcpp: "#->is_vertex_buffer_queued(#)".}

proc dequeueVertexBuffer*(this: PreparedGraphicsObjects, data: GeomVertexArrayData): bool {.importcpp: "#->dequeue_vertex_buffer(#)".}

proc isVertexBufferPrepared*(this: PreparedGraphicsObjects, data: GeomVertexArrayData): bool {.importcpp: "#->is_vertex_buffer_prepared(#)".}

proc releaseVertexBuffer*(this: PreparedGraphicsObjects, vbc: VertexBufferContext) {.importcpp: "#->release_vertex_buffer(#)".}

proc getNumQueuedVertexBuffers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_vertex_buffers()".}

proc getNumPreparedVertexBuffers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_vertex_buffers()".}

proc prepareVertexBufferNow*(this: PreparedGraphicsObjects, data: GeomVertexArrayData, gsg: GraphicsStateGuardianBase): VertexBufferContext {.importcpp: "#->prepare_vertex_buffer_now(#, #)".}

proc enqueueIndexBuffer*(this: PreparedGraphicsObjects, data: GeomPrimitive) {.importcpp: "#->enqueue_index_buffer(#)".}

proc isIndexBufferQueued*(this: PreparedGraphicsObjects, data: GeomPrimitive): bool {.importcpp: "#->is_index_buffer_queued(#)".}

proc dequeueIndexBuffer*(this: PreparedGraphicsObjects, data: GeomPrimitive): bool {.importcpp: "#->dequeue_index_buffer(#)".}

proc isIndexBufferPrepared*(this: PreparedGraphicsObjects, data: GeomPrimitive): bool {.importcpp: "#->is_index_buffer_prepared(#)".}

proc releaseIndexBuffer*(this: PreparedGraphicsObjects, ibc: IndexBufferContext) {.importcpp: "#->release_index_buffer(#)".}

proc getNumQueuedIndexBuffers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_index_buffers()".}

proc getNumPreparedIndexBuffers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_index_buffers()".}

proc prepareIndexBufferNow*(this: PreparedGraphicsObjects, data: GeomPrimitive, gsg: GraphicsStateGuardianBase): IndexBufferContext {.importcpp: "#->prepare_index_buffer_now(#, #)".}

proc enqueueShaderBuffer*(this: PreparedGraphicsObjects, data: ShaderBuffer) {.importcpp: "#->enqueue_shader_buffer(#)".}

proc isShaderBufferQueued*(this: PreparedGraphicsObjects, data: ShaderBuffer): bool {.importcpp: "#->is_shader_buffer_queued(#)".}

proc dequeueShaderBuffer*(this: PreparedGraphicsObjects, data: ShaderBuffer): bool {.importcpp: "#->dequeue_shader_buffer(#)".}

proc isShaderBufferPrepared*(this: PreparedGraphicsObjects, data: ShaderBuffer): bool {.importcpp: "#->is_shader_buffer_prepared(#)".}

proc releaseShaderBuffer*(this: PreparedGraphicsObjects, bc: BufferContext) {.importcpp: "#->release_shader_buffer(#)".}

proc getNumQueuedShaderBuffers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_queued_shader_buffers()".}

proc getNumPreparedShaderBuffers*(this: PreparedGraphicsObjects): int {.importcpp: "#->get_num_prepared_shader_buffers()".}

proc prepareShaderBufferNow*(this: PreparedGraphicsObjects, data: ShaderBuffer, gsg: GraphicsStateGuardianBase): BufferContext {.importcpp: "#->prepare_shader_buffer_now(#, #)".}

proc upcastToBufferContext*(this: IndexBufferContext | TextureContext | VertexBufferContext): var BufferContext {.importcpp: "((BufferContext *)&(#))".}

proc upcastToAdaptiveLruPage*(this: IndexBufferContext | TextureContext | VertexBufferContext): var AdaptiveLruPage {.importcpp: "((AdaptiveLruPage *)&(#))".}

proc getData*(this: IndexBufferContext): GeomPrimitive {.importcpp: "#.get_data()".}

proc makeCopy*(this: Lens): Lens {.importcpp: "#->make_copy()".}

proc extrude*(this: Lens, point2d: LPoint2, nearPoint: LPoint3, farPoint: LPoint3): bool {.importcpp: "#->extrude((LPoint2 const &)(#), (LPoint3 &)(#), (LPoint3 &)(#))".}

proc extrude*(this: Lens, point2d: LPoint3, nearPoint: LPoint3, farPoint: LPoint3): bool {.importcpp: "#->extrude((LPoint3 const &)(#), (LPoint3 &)(#), (LPoint3 &)(#))".}

proc extrudeDepth*(this: Lens, point2d: LPoint3, point3d: LPoint3): bool {.importcpp: "#->extrude_depth((LPoint3 const &)(#), (LPoint3 &)(#))".}

proc extrudeVec*(this: Lens, point2d: LPoint2, vec3d: LVector3): bool {.importcpp: "#->extrude_vec((LPoint2 const &)(#), (LVector3 &)(#))".}

proc extrudeVec*(this: Lens, point2d: LPoint3, vec3d: LVector3): bool {.importcpp: "#->extrude_vec((LPoint3 const &)(#), (LVector3 &)(#))".}

proc project*(this: Lens, point3d: LPoint3, point2d: LPoint2): bool {.importcpp: "#->project((LPoint3 const &)(#), (LPoint2 &)(#))".}

proc project*(this: Lens, point3d: LPoint3, point2d: LPoint3): bool {.importcpp: "#->project((LPoint3 const &)(#), (LPoint3 &)(#))".}

proc setChangeEvent*(this: Lens, event: string) {.importcpp: "#->set_change_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getChangeEvent*(this: Lens): string {.importcpp: "nimStringFromStdString(#->get_change_event())", header: stringConversionCode.}

proc setFilmSize*(this: Lens, filmSize: LVecBase2) {.importcpp: "#->set_film_size((LVecBase2 const &)(#))".}

proc setFilmSize*(this: Lens, width: float) {.importcpp: "#->set_film_size(#)".}

proc setFilmSize*(this: Lens, width: float, height: float) {.importcpp: "#->set_film_size(#, #)".}

proc getFilmSize*(this: Lens): LVecBase2 {.importcpp: "#->get_film_size()".}

proc setFilmOffset*(this: Lens, filmOffset: LVecBase2) {.importcpp: "#->set_film_offset((LVecBase2 const &)(#))".}

proc setFilmOffset*(this: Lens, x: float, y: float) {.importcpp: "#->set_film_offset(#, #)".}

proc getFilmOffset*(this: Lens): LVector2 {.importcpp: "#->get_film_offset()".}

proc setFocalLength*(this: Lens, focalLength: float) {.importcpp: "#->set_focal_length(#)".}

proc getFocalLength*(this: Lens): float {.importcpp: "#->get_focal_length()".}

proc setMinFov*(this: Lens, minFov: float) {.importcpp: "#->set_min_fov(#)".}

proc setFov*(this: Lens, fov: LVecBase2) {.importcpp: "#->set_fov((LVecBase2 const &)(#))".}

proc setFov*(this: Lens, hfov: float, vfov: float) {.importcpp: "#->set_fov(#, #)".}

proc getFov*(this: Lens): LVecBase2 {.importcpp: "#->get_fov()".}

proc getHfov*(this: Lens): float {.importcpp: "#->get_hfov()".}

proc getVfov*(this: Lens): float {.importcpp: "#->get_vfov()".}

proc getMinFov*(this: Lens): float {.importcpp: "#->get_min_fov()".}

proc setAspectRatio*(this: Lens, aspectRatio: float) {.importcpp: "#->set_aspect_ratio(#)".}

proc getAspectRatio*(this: Lens): float {.importcpp: "#->get_aspect_ratio()".}

proc setNear*(this: Lens, nearDistance: float) {.importcpp: "#->set_near(#)".}

proc getNear*(this: Lens): float {.importcpp: "#->get_near()".}

proc setFar*(this: Lens, farDistance: float) {.importcpp: "#->set_far(#)".}

proc getFar*(this: Lens): float {.importcpp: "#->get_far()".}

proc setNearFar*(this: Lens, nearDistance: float, farDistance: float) {.importcpp: "#->set_near_far(#, #)".}

proc setViewHpr*(this: Lens, viewHpr: LVecBase3) {.importcpp: "#->set_view_hpr((LVecBase3 const &)(#))".}

proc setViewHpr*(this: Lens, h: float, p: float, r: float) {.importcpp: "#->set_view_hpr(#, #, #)".}

proc getViewHpr*(this: Lens): LVecBase3 {.importcpp: "#->get_view_hpr()".}

proc setViewVector*(this: Lens, viewVector: LVector3, upVector: LVector3) {.importcpp: "#->set_view_vector((LVector3 const &)(#), (LVector3 const &)(#))".}

proc setViewVector*(this: Lens, x: float, y: float, z: float, i: float, j: float, k: float) {.importcpp: "#->set_view_vector(#, #, #, #, #, #)".}

proc getViewVector*(this: Lens): LVector3 {.importcpp: "#->get_view_vector()".}

proc getNodalPoint*(this: Lens): LPoint3 {.importcpp: "#->get_nodal_point()".}

proc setInterocularDistance*(this: Lens, interocularDistance: float) {.importcpp: "#->set_interocular_distance(#)".}

proc getInterocularDistance*(this: Lens): float {.importcpp: "#->get_interocular_distance()".}

proc setConvergenceDistance*(this: Lens, convergenceDistance: float) {.importcpp: "#->set_convergence_distance(#)".}

proc getConvergenceDistance*(this: Lens): float {.importcpp: "#->get_convergence_distance()".}

proc setViewMat*(this: Lens, viewMat: LMatrix4) {.importcpp: "#->set_view_mat(#)".}

proc getViewMat*(this: Lens): LMatrix4 {.importcpp: "#->get_view_mat()".}

proc clearViewMat*(this: Lens) {.importcpp: "#->clear_view_mat()".}

proc setKeystone*(this: Lens, keystone: LVecBase2) {.importcpp: "#->set_keystone((LVecBase2 const &)(#))".}

proc getKeystone*(this: Lens): LVecBase2 {.importcpp: "#->get_keystone()".}

proc clearKeystone*(this: Lens) {.importcpp: "#->clear_keystone()".}

proc setCustomFilmMat*(this: Lens, customFilmMat: LMatrix4) {.importcpp: "#->set_custom_film_mat(#)".}

proc getCustomFilmMat*(this: Lens): LMatrix4 {.importcpp: "#->get_custom_film_mat()".}

proc clearCustomFilmMat*(this: Lens) {.importcpp: "#->clear_custom_film_mat()".}

proc setFrustumFromCorners*(this: Lens, ul: LVecBase3, ur: LVecBase3, ll: LVecBase3, lr: LVecBase3, flags: int) {.importcpp: "#->set_frustum_from_corners((LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), (LVecBase3 const &)(#), #)".}

proc recomputeAll*(this: Lens) {.importcpp: "#->recompute_all()".}

proc isLinear*(this: Lens): bool {.importcpp: "#->is_linear()".}

proc isPerspective*(this: Lens): bool {.importcpp: "#->is_perspective()".}

proc isOrthographic*(this: Lens): bool {.importcpp: "#->is_orthographic()".}

proc makeGeometry*(this: Lens): Geom {.importcpp: "#->make_geometry()".}

proc makeBounds*(this: Lens): BoundingVolume {.importcpp: "#->make_bounds()".}

proc getProjectionMat*(this: Lens, channel: Lens_StereoChannel): LMatrix4 {.importcpp: "#->get_projection_mat(#)".}

proc getProjectionMat*(this: Lens): LMatrix4 {.importcpp: "#->get_projection_mat()".}

proc getProjectionMatInv*(this: Lens, channel: Lens_StereoChannel): LMatrix4 {.importcpp: "#->get_projection_mat_inv(#)".}

proc getProjectionMatInv*(this: Lens): LMatrix4 {.importcpp: "#->get_projection_mat_inv()".}

proc getFilmMat*(this: Lens): LMatrix4 {.importcpp: "#->get_film_mat()".}

proc getFilmMatInv*(this: Lens): LMatrix4 {.importcpp: "#->get_film_mat_inv()".}

proc getLensMat*(this: Lens): LMatrix4 {.importcpp: "#->get_lens_mat()".}

proc getLensMatInv*(this: Lens): LMatrix4 {.importcpp: "#->get_lens_mat_inv()".}

proc getLastChange*(this: Lens): UpdateSeq {.importcpp: "#->get_last_change()".}

proc upcastToNamable*(this: Material): Namable {.importcpp: "((Namable *)(Material *)(#))".}

proc hasBaseColor*(this: Material): bool {.importcpp: "#->has_base_color()".}

proc getBaseColor*(this: Material): LColor {.importcpp: "#->get_base_color()".}

proc setBaseColor*(this: Material, color: LColor) {.importcpp: "#->set_base_color(#)".}

proc clearBaseColor*(this: Material) {.importcpp: "#->clear_base_color()".}

proc hasAmbient*(this: Material): bool {.importcpp: "#->has_ambient()".}

proc getAmbient*(this: Material): LColor {.importcpp: "#->get_ambient()".}

proc setAmbient*(this: Material, color: LColor) {.importcpp: "#->set_ambient(#)".}

proc clearAmbient*(this: Material) {.importcpp: "#->clear_ambient()".}

proc hasDiffuse*(this: Material): bool {.importcpp: "#->has_diffuse()".}

proc getDiffuse*(this: Material): LColor {.importcpp: "#->get_diffuse()".}

proc setDiffuse*(this: Material, color: LColor) {.importcpp: "#->set_diffuse(#)".}

proc clearDiffuse*(this: Material) {.importcpp: "#->clear_diffuse()".}

proc hasSpecular*(this: Material): bool {.importcpp: "#->has_specular()".}

proc getSpecular*(this: Material): LColor {.importcpp: "#->get_specular()".}

proc setSpecular*(this: Material, color: LColor) {.importcpp: "#->set_specular(#)".}

proc clearSpecular*(this: Material) {.importcpp: "#->clear_specular()".}

proc hasEmission*(this: Material): bool {.importcpp: "#->has_emission()".}

proc getEmission*(this: Material): LColor {.importcpp: "#->get_emission()".}

proc setEmission*(this: Material, color: LColor) {.importcpp: "#->set_emission(#)".}

proc clearEmission*(this: Material) {.importcpp: "#->clear_emission()".}

proc getShininess*(this: Material): float {.importcpp: "#->get_shininess()".}

proc setShininess*(this: Material, shininess: float) {.importcpp: "#->set_shininess(#)".}

proc hasRoughness*(this: Material): bool {.importcpp: "#->has_roughness()".}

proc getRoughness*(this: Material): float {.importcpp: "#->get_roughness()".}

proc setRoughness*(this: Material, roughness: float) {.importcpp: "#->set_roughness(#)".}

proc hasMetallic*(this: Material): bool {.importcpp: "#->has_metallic()".}

proc getMetallic*(this: Material): float {.importcpp: "#->get_metallic()".}

proc setMetallic*(this: Material, metallic: float) {.importcpp: "#->set_metallic(#)".}

proc clearMetallic*(this: Material) {.importcpp: "#->clear_metallic()".}

proc hasRefractiveIndex*(this: Material): bool {.importcpp: "#->has_refractive_index()".}

proc getRefractiveIndex*(this: Material): float {.importcpp: "#->get_refractive_index()".}

proc setRefractiveIndex*(this: Material, refractiveIndex: float) {.importcpp: "#->set_refractive_index(#)".}

proc getLocal*(this: Material): bool {.importcpp: "#->get_local()".}

proc setLocal*(this: Material, local: bool) {.importcpp: "#->set_local(#)".}

proc getTwoside*(this: Material): bool {.importcpp: "#->get_twoside()".}

proc setTwoside*(this: Material, twoside: bool) {.importcpp: "#->set_twoside(#)".}

proc `==`*(this: Material, other: Material): bool {.importcpp: "#->operator ==(#)".}

proc `!=`*(this: Material, other: Material): bool {.importcpp: "#->operator !=(#)".}

proc `<`*(this: Material, other: Material): bool {.importcpp: "#->operator <(#)".}

proc compareTo*(this: Material, other: Material): int {.importcpp: "#->compare_to(#)".}

proc write*(this: Material, `out`: iostream | ostream, indent: int) {.importcpp: "#->write(#, #)".}

proc isAttribLocked*(this: Material): bool {.importcpp: "#->is_attrib_locked()".}

proc setAttribLock*(this: Material) {.importcpp: "#->set_attrib_lock()".}

proc setUserMat*(this: MatrixLens, userMat: LMatrix4) {.importcpp: "#->set_user_mat(#)".}

proc getUserMat*(this: MatrixLens): LMatrix4 {.importcpp: "#->get_user_mat()".}

proc setLeftEyeMat*(this: MatrixLens, userMat: LMatrix4) {.importcpp: "#->set_left_eye_mat(#)".}

proc clearLeftEyeMat*(this: MatrixLens) {.importcpp: "#->clear_left_eye_mat()".}

proc hasLeftEyeMat*(this: MatrixLens): bool {.importcpp: "#->has_left_eye_mat()".}

proc getLeftEyeMat*(this: MatrixLens): LMatrix4 {.importcpp: "#->get_left_eye_mat()".}

proc setRightEyeMat*(this: MatrixLens, userMat: LMatrix4) {.importcpp: "#->set_right_eye_mat(#)".}

proc clearRightEyeMat*(this: MatrixLens) {.importcpp: "#->clear_right_eye_mat()".}

proc hasRightEyeMat*(this: MatrixLens): bool {.importcpp: "#->has_right_eye_mat()".}

proc getRightEyeMat*(this: MatrixLens): LMatrix4 {.importcpp: "#->get_right_eye_mat()".}

proc getSampler*(this: ParamTextureSampler): SamplerState {.importcpp: "#->get_sampler()".}

proc hasReadAccess*(this: ParamTextureImage): bool {.importcpp: "#->has_read_access()".}

proc hasWriteAccess*(this: ParamTextureImage): bool {.importcpp: "#->has_write_access()".}

proc getBindLayered*(this: ParamTextureImage): bool {.importcpp: "#->get_bind_layered()".}

proc getBindLevel*(this: ParamTextureImage): int {.importcpp: "#->get_bind_level()".}

proc getBindLayer*(this: ParamTextureImage): int {.importcpp: "#->get_bind_layer()".}

proc getPreparedGraphicsObjects*(this: TextureReloadRequest): PreparedGraphicsObjects {.importcpp: "#->get_prepared_graphics_objects()".}

proc getAllowCompressed*(this: TextureReloadRequest): bool {.importcpp: "#->get_allow_compressed()".}

proc getView*(this: TextureContext): int {.importcpp: "#.get_view()".}

proc getNativeId*(this: TextureContext): clonglong {.importcpp: "#.get_native_id()".}

proc getNativeBufferId*(this: TextureContext): clonglong {.importcpp: "#.get_native_buffer_id()".}

proc wasModified*(this: TextureContext): bool {.importcpp: "#.was_modified()".}

proc wasPropertiesModified*(this: TextureContext): bool {.importcpp: "#.was_properties_modified()".}

proc wasImageModified*(this: TextureContext): bool {.importcpp: "#.was_image_modified()".}

proc wasSimpleImageModified*(this: TextureContext): bool {.importcpp: "#.was_simple_image_modified()".}

proc getPropertiesModified*(this: TextureContext): UpdateSeq {.importcpp: "#.get_properties_modified()".}

proc getImageModified*(this: TextureContext): UpdateSeq {.importcpp: "#.get_image_modified()".}

proc getSimpleImageModified*(this: TextureContext): UpdateSeq {.importcpp: "#.get_simple_image_modified()".}

proc setSlider*(this: UserVertexSlider, slider: float) {.importcpp: "#->set_slider(#)".}

proc setMatrix*(this: RopeNode | UserVertexTransform, matrix: LMatrix4) {.importcpp: "#->set_matrix(#)".}

proc upcastToTexture*(this: VideoTexture): Texture {.importcpp: "(PT(Texture)(#))".}

proc upcastToAnimInterface*(this: VideoTexture): AnimInterface {.importcpp: "((AnimInterface *)(VideoTexture *)(#))".}

proc getData*(this: VertexBufferContext): GeomVertexArrayData {.importcpp: "#.get_data()".}

proc changedSize*(this: VertexBufferContext, reader: GeomVertexArrayDataHandle): bool {.importcpp: "#.changed_size(#)".}

proc changedUsageHint*(this: VertexBufferContext, reader: GeomVertexArrayDataHandle): bool {.importcpp: "#.changed_usage_hint(#)".}

proc wasModified*(this: VertexBufferContext, reader: GeomVertexArrayDataHandle): bool {.importcpp: "#.was_modified(#)".}

proc addTexture*(this: TextureCollection, texture: Texture) {.importcpp: "#.add_texture(#)".}

proc removeTexture*(this: TextureCollection, texture: Texture): bool {.importcpp: "#.remove_texture(#)".}

proc addTexturesFrom*(this: TextureCollection, other: TextureCollection) {.importcpp: "#.add_textures_from(#)".}

proc removeTexturesFrom*(this: TextureCollection, other: TextureCollection) {.importcpp: "#.remove_textures_from(#)".}

proc removeDuplicateTextures*(this: TextureCollection) {.importcpp: "#.remove_duplicate_textures()".}

proc hasTexture*(this: TextureCollection, texture: Texture): bool {.importcpp: "#.has_texture(#)".}

proc getNumTextures*(this: TextureCollection): int {.importcpp: "#.get_num_textures()".}

proc getTexture*(this: TextureCollection, index: int): Texture {.importcpp: "#.get_texture(#)".}

proc `[]`*(this: TextureCollection, index: int): Texture {.importcpp: "#.operator [](#)".}

proc `+=`*(this: var TextureCollection, other: TextureCollection) {.importcpp: "#.operator +=(#)".}

proc `+`*(this: TextureCollection, other: TextureCollection): TextureCollection {.importcpp: "#.operator +(#)".}

proc append*(this: TextureCollection, texture: Texture) {.importcpp: "#.append(#)".}

proc extend*(this: TextureCollection, other: TextureCollection) {.importcpp: "#.extend(#)".}

proc hasPixel*(this: TexturePeeker, x: int, y: int): bool {.importcpp: "#->has_pixel(#, #)".}

proc hasPixel*(this: TexturePeeker, x: int, y: int, z: int): bool {.importcpp: "#->has_pixel(#, #, #)".}

proc lookup*(this: TexturePeeker, color: LColor, u: float, v: float) {.importcpp: "#->lookup(#, #, #)".}

proc lookup*(this: TexturePeeker, color: LColor, u: float, v: float, w: float) {.importcpp: "#->lookup(#, #, #, #)".}

proc fetchPixel*(this: TexturePeeker, color: LColor, x: int, y: int) {.importcpp: "#->fetch_pixel(#, #, #)".}

proc fetchPixel*(this: TexturePeeker, color: LColor, x: int, y: int, z: int) {.importcpp: "#->fetch_pixel(#, #, #, #)".}

proc lookupBilinear*(this: TexturePeeker, color: LColor, u: float, v: float): bool {.importcpp: "#->lookup_bilinear(#, #, #)".}

proc filterRect*(this: TexturePeeker, color: LColor, minU: float, minV: float, maxU: float, maxV: float) {.importcpp: "#->filter_rect(#, #, #, #, #)".}

proc filterRect*(this: TexturePeeker, color: LColor, minU: float, minV: float, minW: float, maxU: float, maxV: float, maxW: float) {.importcpp: "#->filter_rect(#, #, #, #, #, #, #)".}

proc prefersTriangleStrips*(this: GraphicsStateGuardianBase): bool {.importcpp: "#->prefers_triangle_strips()".}

proc getMaxVerticesPerArray*(this: GraphicsStateGuardianBase): int {.importcpp: "#->get_max_vertices_per_array()".}

proc getMaxVerticesPerPrimitive*(this: GraphicsStateGuardianBase): int {.importcpp: "#->get_max_vertices_per_primitive()".}

proc getMaxTextureDimension*(this: GraphicsStateGuardianBase): int {.importcpp: "#->get_max_texture_dimension()".}

proc getSupportsCompressedTextureFormat*(this: GraphicsStateGuardianBase, compressionMode: int): bool {.importcpp: "#->get_supports_compressed_texture_format(#)".}

proc getSupportsMultisample*(this: GraphicsStateGuardianBase): bool {.importcpp: "#->get_supports_multisample()".}

proc getSupportedGeomRendering*(this: GraphicsStateGuardianBase): int {.importcpp: "#->get_supported_geom_rendering()".}

proc getSupportsShadowFilter*(this: GraphicsStateGuardianBase): bool {.importcpp: "#->get_supports_shadow_filter()".}

proc getSupportsTextureSrgb*(this: GraphicsStateGuardianBase): bool {.importcpp: "#->get_supports_texture_srgb()".}

proc getSupportsHlsl*(this: GraphicsStateGuardianBase): bool {.importcpp: "#->get_supports_hlsl()".}

proc `[]=`*(this: var LVecBase2f, i: int, assignVal: float32) {.importcpp: "((LVecBase2f &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase2f, i: int): float32 {.importcpp: "((LVecBase2f const &)#).operator [](#)".}

proc isNan*(this: LVecBase2f): bool {.importcpp: "((LVecBase2f const &)#).is_nan()".}

proc getCell*(this: LVecBase2f, i: int): float32 {.importcpp: "((LVecBase2f const &)#).get_cell(#)".}

proc setCell*(this: var LVecBase2f, i: int, value: float32) {.importcpp: "((LVecBase2f &)#).set_cell(#, #)".}

proc getX*(this: LVecBase2f): float32 {.importcpp: "((LVecBase2f const &)#).get_x()".}

proc getY*(this: LVecBase2f): float32 {.importcpp: "((LVecBase2f const &)#).get_y()".}

proc setX*(this: var LVecBase2f, value: float32) {.importcpp: "((LVecBase2f &)#).set_x(#)".}

proc setY*(this: var LVecBase2f, value: float32) {.importcpp: "((LVecBase2f &)#).set_y(#)".}

proc addToCell*(this: var LVecBase2f, i: int, value: float32) {.importcpp: "((LVecBase2f &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase2f, value: float32) {.importcpp: "((LVecBase2f &)#).add_x(#)".}

proc addY*(this: var LVecBase2f, value: float32) {.importcpp: "((LVecBase2f &)#).add_y(#)".}

proc getData*(this: LVecBase2f) {.importcpp: "((LVecBase2f const &)#).get_data()".}

proc fill*(this: var LVecBase2f, fillValue: float32) {.importcpp: "((LVecBase2f &)#).fill(#)".}

proc set*(this: var LVecBase2f, x: float32, y: float32) {.importcpp: "((LVecBase2f &)#).set(#, #)".}

proc dot*(this: LVecBase2f, other: LVecBase2f): float32 {.importcpp: "((LVecBase2f const &)#).dot((LVecBase2f const &)(#))".}

proc lengthSquared*(this: LVecBase2f): float32 {.importcpp: "((LVecBase2f const &)#).length_squared()".}

proc length*(this: LVecBase2f): float32 {.importcpp: "((LVecBase2f const &)#).length()".}

proc normalize*(this: var LVecBase2f): bool {.importcpp: "((LVecBase2f &)#).normalize()".}

proc normalized*(this: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).normalized()".}

proc project*(this: LVecBase2f, onto: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).project((LVecBase2f const &)(#))".}

proc `<`*(this: LVecBase2f, other: LVecBase2f): bool {.importcpp: "((LVecBase2f const &)#).operator <((LVecBase2f const &)(#))".}

proc `==`*(this: LVecBase2f, other: LVecBase2f): bool {.importcpp: "((LVecBase2f const &)#).operator ==((LVecBase2f const &)(#))".}

proc `!=`*(this: LVecBase2f, other: LVecBase2f): bool {.importcpp: "((LVecBase2f const &)#).operator !=((LVecBase2f const &)(#))".}

proc compareTo*(this: LVecBase2f, other: LVecBase2f): int {.importcpp: "((LVecBase2f const &)#).compare_to((LVecBase2f const &)(#))".}

proc compareTo*(this: LVecBase2f, other: LVecBase2f, threshold: float32): int {.importcpp: "((LVecBase2f const &)#).compare_to((LVecBase2f const &)(#), #)".}

proc getHash*(this: LVecBase2f): int {.importcpp: "((LVecBase2f const &)#).get_hash()".}

proc getHash*(this: LVecBase2f, threshold: float32): int {.importcpp: "((LVecBase2f const &)#).get_hash(#)".}

proc addHash*(this: LVecBase2f, hash: int): int {.importcpp: "((LVecBase2f const &)#).add_hash(#)".}

proc addHash*(this: LVecBase2f, hash: int, threshold: float32): int {.importcpp: "((LVecBase2f const &)#).add_hash(#, #)".}

proc `-`*(this: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).operator -()".}

proc `+`*(this: LVecBase2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).operator +((LVecBase2f const &)(#))".}

proc `-`*(this: LVecBase2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).operator -((LVecBase2f const &)(#))".}

proc `*`*(this: LVecBase2f, scalar: float32): LVecBase2f {.importcpp: "((LVecBase2f const &)#).operator *(#)".}

proc `/`*(this: LVecBase2f, scalar: float32): LVecBase2f {.importcpp: "((LVecBase2f const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase2f, other: LVecBase2f) {.importcpp: "((LVecBase2f &)#).operator +=((LVecBase2f const &)(#))".}

proc `-=`*(this: var LVecBase2f, other: LVecBase2f) {.importcpp: "((LVecBase2f &)#).operator -=((LVecBase2f const &)(#))".}

proc `*=`*(this: var LVecBase2f, scalar: float32) {.importcpp: "((LVecBase2f &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase2f, scalar: float32) {.importcpp: "((LVecBase2f &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase2f, other: LVecBase2f) {.importcpp: "((LVecBase2f &)#).componentwise_mult((LVecBase2f const &)(#))".}

proc fmax*(this: LVecBase2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).fmax((LVecBase2f const &)(#))".}

proc fmin*(this: LVecBase2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LVecBase2f const &)#).fmin((LVecBase2f const &)(#))".}

proc almostEqual*(this: LVecBase2f, other: LVecBase2f): bool {.importcpp: "((LVecBase2f const &)#).almost_equal((LVecBase2f const &)(#))".}

proc almostEqual*(this: LVecBase2f, other: LVecBase2f, threshold: float32): bool {.importcpp: "((LVecBase2f const &)#).almost_equal((LVecBase2f const &)(#), #)".}

proc output*(this: LVecBase2f, `out`: iostream | ostream) {.importcpp: "((LVecBase2f const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase2f, destination: Datagram) {.importcpp: "((LVecBase2f const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase2f, source: DatagramIterator) {.importcpp: "((LVecBase2f &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase2f, destination: Datagram) {.importcpp: "((LVecBase2f const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase2f, source: DatagramIterator) {.importcpp: "((LVecBase2f &)#).read_datagram(#)".}

proc `[]=`*(this: var LVecBase2d, i: int, assignVal: float64) {.importcpp: "((LVecBase2d &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase2d, i: int): float64 {.importcpp: "((LVecBase2d const &)#).operator [](#)".}

proc isNan*(this: LVecBase2d): bool {.importcpp: "((LVecBase2d const &)#).is_nan()".}

proc getCell*(this: LVecBase2d, i: int): float64 {.importcpp: "((LVecBase2d const &)#).get_cell(#)".}

proc setCell*(this: var LVecBase2d, i: int, value: float64) {.importcpp: "((LVecBase2d &)#).set_cell(#, #)".}

proc getX*(this: LVecBase2d): float64 {.importcpp: "((LVecBase2d const &)#).get_x()".}

proc getY*(this: LVecBase2d): float64 {.importcpp: "((LVecBase2d const &)#).get_y()".}

proc setX*(this: var LVecBase2d, value: float64) {.importcpp: "((LVecBase2d &)#).set_x(#)".}

proc setY*(this: var LVecBase2d, value: float64) {.importcpp: "((LVecBase2d &)#).set_y(#)".}

proc addToCell*(this: var LVecBase2d, i: int, value: float64) {.importcpp: "((LVecBase2d &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase2d, value: float64) {.importcpp: "((LVecBase2d &)#).add_x(#)".}

proc addY*(this: var LVecBase2d, value: float64) {.importcpp: "((LVecBase2d &)#).add_y(#)".}

proc getData*(this: LVecBase2d) {.importcpp: "((LVecBase2d const &)#).get_data()".}

proc fill*(this: var LVecBase2d, fillValue: float64) {.importcpp: "((LVecBase2d &)#).fill(#)".}

proc set*(this: var LVecBase2d, x: float64, y: float64) {.importcpp: "((LVecBase2d &)#).set(#, #)".}

proc dot*(this: LVecBase2d, other: LVecBase2d): float64 {.importcpp: "((LVecBase2d const &)#).dot((LVecBase2d const &)(#))".}

proc lengthSquared*(this: LVecBase2d): float64 {.importcpp: "((LVecBase2d const &)#).length_squared()".}

proc length*(this: LVecBase2d): float64 {.importcpp: "((LVecBase2d const &)#).length()".}

proc normalize*(this: var LVecBase2d): bool {.importcpp: "((LVecBase2d &)#).normalize()".}

proc normalized*(this: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).normalized()".}

proc project*(this: LVecBase2d, onto: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).project((LVecBase2d const &)(#))".}

proc `<`*(this: LVecBase2d, other: LVecBase2d): bool {.importcpp: "((LVecBase2d const &)#).operator <((LVecBase2d const &)(#))".}

proc `==`*(this: LVecBase2d, other: LVecBase2d): bool {.importcpp: "((LVecBase2d const &)#).operator ==((LVecBase2d const &)(#))".}

proc `!=`*(this: LVecBase2d, other: LVecBase2d): bool {.importcpp: "((LVecBase2d const &)#).operator !=((LVecBase2d const &)(#))".}

proc compareTo*(this: LVecBase2d, other: LVecBase2d): int {.importcpp: "((LVecBase2d const &)#).compare_to((LVecBase2d const &)(#))".}

proc compareTo*(this: LVecBase2d, other: LVecBase2d, threshold: float64): int {.importcpp: "((LVecBase2d const &)#).compare_to((LVecBase2d const &)(#), #)".}

proc getHash*(this: LVecBase2d): int {.importcpp: "((LVecBase2d const &)#).get_hash()".}

proc getHash*(this: LVecBase2d, threshold: float64): int {.importcpp: "((LVecBase2d const &)#).get_hash(#)".}

proc addHash*(this: LVecBase2d, hash: int): int {.importcpp: "((LVecBase2d const &)#).add_hash(#)".}

proc addHash*(this: LVecBase2d, hash: int, threshold: float64): int {.importcpp: "((LVecBase2d const &)#).add_hash(#, #)".}

proc `-`*(this: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).operator -()".}

proc `+`*(this: LVecBase2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).operator +((LVecBase2d const &)(#))".}

proc `-`*(this: LVecBase2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).operator -((LVecBase2d const &)(#))".}

proc `*`*(this: LVecBase2d, scalar: float64): LVecBase2d {.importcpp: "((LVecBase2d const &)#).operator *(#)".}

proc `/`*(this: LVecBase2d, scalar: float64): LVecBase2d {.importcpp: "((LVecBase2d const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase2d, other: LVecBase2d) {.importcpp: "((LVecBase2d &)#).operator +=((LVecBase2d const &)(#))".}

proc `-=`*(this: var LVecBase2d, other: LVecBase2d) {.importcpp: "((LVecBase2d &)#).operator -=((LVecBase2d const &)(#))".}

proc `*=`*(this: var LVecBase2d, scalar: float64) {.importcpp: "((LVecBase2d &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase2d, scalar: float64) {.importcpp: "((LVecBase2d &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase2d, other: LVecBase2d) {.importcpp: "((LVecBase2d &)#).componentwise_mult((LVecBase2d const &)(#))".}

proc fmax*(this: LVecBase2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).fmax((LVecBase2d const &)(#))".}

proc fmin*(this: LVecBase2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LVecBase2d const &)#).fmin((LVecBase2d const &)(#))".}

proc almostEqual*(this: LVecBase2d, other: LVecBase2d): bool {.importcpp: "((LVecBase2d const &)#).almost_equal((LVecBase2d const &)(#))".}

proc almostEqual*(this: LVecBase2d, other: LVecBase2d, threshold: float64): bool {.importcpp: "((LVecBase2d const &)#).almost_equal((LVecBase2d const &)(#), #)".}

proc output*(this: LVecBase2d, `out`: iostream | ostream) {.importcpp: "((LVecBase2d const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase2d, destination: Datagram) {.importcpp: "((LVecBase2d const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase2d, source: DatagramIterator) {.importcpp: "((LVecBase2d &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase2d, destination: Datagram) {.importcpp: "((LVecBase2d const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase2d, source: DatagramIterator) {.importcpp: "((LVecBase2d &)#).read_datagram(#)".}

proc `[]=`*(this: var LVecBase2i, i: int, assignVal: int) {.importcpp: "((LVecBase2i &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase2i, i: int): int {.importcpp: "((LVecBase2i const &)#).operator [](#)".}

proc isNan*(this: LVecBase2i): bool {.importcpp: "((LVecBase2i const &)#).is_nan()".}

proc getCell*(this: LVecBase2i, i: int): int {.importcpp: "((LVecBase2i const &)#).get_cell(#)".}

proc setCell*(this: var LVecBase2i, i: int, value: int) {.importcpp: "((LVecBase2i &)#).set_cell(#, #)".}

proc getX*(this: LVecBase2i): int {.importcpp: "((LVecBase2i const &)#).get_x()".}

proc getY*(this: LVecBase2i): int {.importcpp: "((LVecBase2i const &)#).get_y()".}

proc setX*(this: var LVecBase2i, value: int) {.importcpp: "((LVecBase2i &)#).set_x(#)".}

proc setY*(this: var LVecBase2i, value: int) {.importcpp: "((LVecBase2i &)#).set_y(#)".}

proc addToCell*(this: var LVecBase2i, i: int, value: int) {.importcpp: "((LVecBase2i &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase2i, value: int) {.importcpp: "((LVecBase2i &)#).add_x(#)".}

proc addY*(this: var LVecBase2i, value: int) {.importcpp: "((LVecBase2i &)#).add_y(#)".}

proc getData*(this: LVecBase2i) {.importcpp: "((LVecBase2i const &)#).get_data()".}

proc fill*(this: var LVecBase2i, fillValue: int) {.importcpp: "((LVecBase2i &)#).fill(#)".}

proc set*(this: var LVecBase2i, x: int, y: int) {.importcpp: "((LVecBase2i &)#).set(#, #)".}

proc dot*(this: LVecBase2i, other: LVecBase2i): int {.importcpp: "((LVecBase2i const &)#).dot((LVecBase2i const &)(#))".}

proc lengthSquared*(this: LVecBase2i): int {.importcpp: "((LVecBase2i const &)#).length_squared()".}

proc `<`*(this: LVecBase2i, other: LVecBase2i): bool {.importcpp: "((LVecBase2i const &)#).operator <((LVecBase2i const &)(#))".}

proc `==`*(this: LVecBase2i, other: LVecBase2i): bool {.importcpp: "((LVecBase2i const &)#).operator ==((LVecBase2i const &)(#))".}

proc `!=`*(this: LVecBase2i, other: LVecBase2i): bool {.importcpp: "((LVecBase2i const &)#).operator !=((LVecBase2i const &)(#))".}

proc compareTo*(this: LVecBase2i, other: LVecBase2i): int {.importcpp: "((LVecBase2i const &)#).compare_to((LVecBase2i const &)(#))".}

proc getHash*(this: LVecBase2i): int {.importcpp: "((LVecBase2i const &)#).get_hash()".}

proc addHash*(this: LVecBase2i, hash: int): int {.importcpp: "((LVecBase2i const &)#).add_hash(#)".}

proc `-`*(this: LVecBase2i): LVecBase2i {.importcpp: "((LVecBase2i const &)#).operator -()".}

proc `+`*(this: LVecBase2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LVecBase2i const &)#).operator +((LVecBase2i const &)(#))".}

proc `-`*(this: LVecBase2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LVecBase2i const &)#).operator -((LVecBase2i const &)(#))".}

proc `*`*(this: LVecBase2i, scalar: int): LVecBase2i {.importcpp: "((LVecBase2i const &)#).operator *(#)".}

proc `/`*(this: LVecBase2i, scalar: int): LVecBase2i {.importcpp: "((LVecBase2i const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase2i, other: LVecBase2i) {.importcpp: "((LVecBase2i &)#).operator +=((LVecBase2i const &)(#))".}

proc `-=`*(this: var LVecBase2i, other: LVecBase2i) {.importcpp: "((LVecBase2i &)#).operator -=((LVecBase2i const &)(#))".}

proc `*=`*(this: var LVecBase2i, scalar: int) {.importcpp: "((LVecBase2i &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase2i, scalar: int) {.importcpp: "((LVecBase2i &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase2i, other: LVecBase2i) {.importcpp: "((LVecBase2i &)#).componentwise_mult((LVecBase2i const &)(#))".}

proc fmax*(this: LVecBase2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LVecBase2i const &)#).fmax((LVecBase2i const &)(#))".}

proc fmin*(this: LVecBase2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LVecBase2i const &)#).fmin((LVecBase2i const &)(#))".}

proc almostEqual*(this: LVecBase2i, other: LVecBase2i): bool {.importcpp: "((LVecBase2i const &)#).almost_equal((LVecBase2i const &)(#))".}

proc almostEqual*(this: LVecBase2i, other: LVecBase2i, threshold: int): bool {.importcpp: "((LVecBase2i const &)#).almost_equal((LVecBase2i const &)(#), #)".}

proc output*(this: LVecBase2i, `out`: iostream | ostream) {.importcpp: "((LVecBase2i const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase2i, destination: Datagram) {.importcpp: "((LVecBase2i const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase2i, source: DatagramIterator) {.importcpp: "((LVecBase2i &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase2i, destination: Datagram) {.importcpp: "((LVecBase2i const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase2i, source: DatagramIterator) {.importcpp: "((LVecBase2i &)#).read_datagram(#)".}

proc `-`*(this: LVector2f): LVector2f {.importcpp: "((LVector2f const &)#).operator -()".}

proc `+`*(this: LVector2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LVector2f const &)#).operator +((LVecBase2f const &)(#))".}

proc `+`*(this: LVector2f, other: LVector2f): LVector2f {.importcpp: "((LVector2f const &)#).operator +((LVector2f const &)(#))".}

proc `-`*(this: LVector2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LVector2f const &)#).operator -((LVecBase2f const &)(#))".}

proc `-`*(this: LVector2f, other: LVector2f): LVector2f {.importcpp: "((LVector2f const &)#).operator -((LVector2f const &)(#))".}

proc `*`*(this: LVector2f, scalar: float32): LVector2f {.importcpp: "((LVector2f const &)#).operator *(#)".}

proc `/`*(this: LVector2f, scalar: float32): LVector2f {.importcpp: "((LVector2f const &)#).operator /(#)".}

proc normalized*(this: LVector2f): LVector2f {.importcpp: "((LVector2f const &)#).normalized()".}

proc project*(this: LVector2f, onto: LVecBase2f): LVector2f {.importcpp: "((LVector2f const &)#).project((LVecBase2f const &)(#))".}

proc signedAngleRad*(this: LVector2f, other: LVector2f): float32 {.importcpp: "((LVector2f const &)#).signed_angle_rad((LVector2f const &)(#))".}

proc signedAngleDeg*(this: LVector2f, other: LVector2f): float32 {.importcpp: "((LVector2f const &)#).signed_angle_deg((LVector2f const &)(#))".}

proc `-`*(this: LVector2d): LVector2d {.importcpp: "((LVector2d const &)#).operator -()".}

proc `+`*(this: LVector2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LVector2d const &)#).operator +((LVecBase2d const &)(#))".}

proc `+`*(this: LVector2d, other: LVector2d): LVector2d {.importcpp: "((LVector2d const &)#).operator +((LVector2d const &)(#))".}

proc `-`*(this: LVector2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LVector2d const &)#).operator -((LVecBase2d const &)(#))".}

proc `-`*(this: LVector2d, other: LVector2d): LVector2d {.importcpp: "((LVector2d const &)#).operator -((LVector2d const &)(#))".}

proc `*`*(this: LVector2d, scalar: float64): LVector2d {.importcpp: "((LVector2d const &)#).operator *(#)".}

proc `/`*(this: LVector2d, scalar: float64): LVector2d {.importcpp: "((LVector2d const &)#).operator /(#)".}

proc normalized*(this: LVector2d): LVector2d {.importcpp: "((LVector2d const &)#).normalized()".}

proc project*(this: LVector2d, onto: LVecBase2d): LVector2d {.importcpp: "((LVector2d const &)#).project((LVecBase2d const &)(#))".}

proc signedAngleRad*(this: LVector2d, other: LVector2d): float64 {.importcpp: "((LVector2d const &)#).signed_angle_rad((LVector2d const &)(#))".}

proc signedAngleDeg*(this: LVector2d, other: LVector2d): float64 {.importcpp: "((LVector2d const &)#).signed_angle_deg((LVector2d const &)(#))".}

proc `-`*(this: LVector2i): LVector2i {.importcpp: "((LVector2i const &)#).operator -()".}

proc `+`*(this: LVector2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LVector2i const &)#).operator +((LVecBase2i const &)(#))".}

proc `+`*(this: LVector2i, other: LVector2i): LVector2i {.importcpp: "((LVector2i const &)#).operator +((LVector2i const &)(#))".}

proc `-`*(this: LVector2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LVector2i const &)#).operator -((LVecBase2i const &)(#))".}

proc `-`*(this: LVector2i, other: LVector2i): LVector2i {.importcpp: "((LVector2i const &)#).operator -((LVector2i const &)(#))".}

proc `*`*(this: LVector2i, scalar: int): LVector2i {.importcpp: "((LVector2i const &)#).operator *(#)".}

proc `/`*(this: LVector2i, scalar: int): LVector2i {.importcpp: "((LVector2i const &)#).operator /(#)".}

proc `-`*(this: LPoint2f): LPoint2f {.importcpp: "((LPoint2f const &)#).operator -()".}

proc `+`*(this: LPoint2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LPoint2f const &)#).operator +((LVecBase2f const &)(#))".}

proc `+`*(this: LPoint2f, other: LVector2f): LPoint2f {.importcpp: "((LPoint2f const &)#).operator +((LVector2f const &)(#))".}

proc `-`*(this: LPoint2f, other: LPoint2f): LVector2f {.importcpp: "((LPoint2f const &)#).operator -((LPoint2f const &)(#))".}

proc `-`*(this: LPoint2f, other: LVecBase2f): LVecBase2f {.importcpp: "((LPoint2f const &)#).operator -((LVecBase2f const &)(#))".}

proc `-`*(this: LPoint2f, other: LVector2f): LPoint2f {.importcpp: "((LPoint2f const &)#).operator -((LVector2f const &)(#))".}

proc `*`*(this: LPoint2f, scalar: float32): LPoint2f {.importcpp: "((LPoint2f const &)#).operator *(#)".}

proc `/`*(this: LPoint2f, scalar: float32): LPoint2f {.importcpp: "((LPoint2f const &)#).operator /(#)".}

proc normalized*(this: LPoint2f): LPoint2f {.importcpp: "((LPoint2f const &)#).normalized()".}

proc project*(this: LPoint2f, onto: LVecBase2f): LPoint2f {.importcpp: "((LPoint2f const &)#).project((LVecBase2f const &)(#))".}

proc `-`*(this: LPoint2d): LPoint2d {.importcpp: "((LPoint2d const &)#).operator -()".}

proc `+`*(this: LPoint2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LPoint2d const &)#).operator +((LVecBase2d const &)(#))".}

proc `+`*(this: LPoint2d, other: LVector2d): LPoint2d {.importcpp: "((LPoint2d const &)#).operator +((LVector2d const &)(#))".}

proc `-`*(this: LPoint2d, other: LPoint2d): LVector2d {.importcpp: "((LPoint2d const &)#).operator -((LPoint2d const &)(#))".}

proc `-`*(this: LPoint2d, other: LVecBase2d): LVecBase2d {.importcpp: "((LPoint2d const &)#).operator -((LVecBase2d const &)(#))".}

proc `-`*(this: LPoint2d, other: LVector2d): LPoint2d {.importcpp: "((LPoint2d const &)#).operator -((LVector2d const &)(#))".}

proc `*`*(this: LPoint2d, scalar: float64): LPoint2d {.importcpp: "((LPoint2d const &)#).operator *(#)".}

proc `/`*(this: LPoint2d, scalar: float64): LPoint2d {.importcpp: "((LPoint2d const &)#).operator /(#)".}

proc normalized*(this: LPoint2d): LPoint2d {.importcpp: "((LPoint2d const &)#).normalized()".}

proc project*(this: LPoint2d, onto: LVecBase2d): LPoint2d {.importcpp: "((LPoint2d const &)#).project((LVecBase2d const &)(#))".}

proc `-`*(this: LPoint2i): LPoint2i {.importcpp: "((LPoint2i const &)#).operator -()".}

proc `+`*(this: LPoint2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LPoint2i const &)#).operator +((LVecBase2i const &)(#))".}

proc `+`*(this: LPoint2i, other: LVector2i): LPoint2i {.importcpp: "((LPoint2i const &)#).operator +((LVector2i const &)(#))".}

proc `-`*(this: LPoint2i, other: LPoint2i): LVector2i {.importcpp: "((LPoint2i const &)#).operator -((LPoint2i const &)(#))".}

proc `-`*(this: LPoint2i, other: LVecBase2i): LVecBase2i {.importcpp: "((LPoint2i const &)#).operator -((LVecBase2i const &)(#))".}

proc `-`*(this: LPoint2i, other: LVector2i): LPoint2i {.importcpp: "((LPoint2i const &)#).operator -((LVector2i const &)(#))".}

proc `*`*(this: LPoint2i, scalar: int): LPoint2i {.importcpp: "((LPoint2i const &)#).operator *(#)".}

proc `/`*(this: LPoint2i, scalar: int): LPoint2i {.importcpp: "((LPoint2i const &)#).operator /(#)".}

proc `[]=`*(this: var LVecBase3f, i: int, assignVal: float32) {.importcpp: "((LVecBase3f &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase3f, i: int): float32 {.importcpp: "((LVecBase3f const &)#).operator [](#)".}

proc isNan*(this: LVecBase3f): bool {.importcpp: "((LVecBase3f const &)#).is_nan()".}

proc getCell*(this: LVecBase3f, i: int): float32 {.importcpp: "((LVecBase3f const &)#).get_cell(#)".}

proc getX*(this: LVecBase3f): float32 {.importcpp: "((LVecBase3f const &)#).get_x()".}

proc getY*(this: LVecBase3f): float32 {.importcpp: "((LVecBase3f const &)#).get_y()".}

proc getZ*(this: LVecBase3f): float32 {.importcpp: "((LVecBase3f const &)#).get_z()".}

proc setCell*(this: var LVecBase3f, i: int, value: float32) {.importcpp: "((LVecBase3f &)#).set_cell(#, #)".}

proc setX*(this: var LVecBase3f, value: float32) {.importcpp: "((LVecBase3f &)#).set_x(#)".}

proc setY*(this: var LVecBase3f, value: float32) {.importcpp: "((LVecBase3f &)#).set_y(#)".}

proc setZ*(this: var LVecBase3f, value: float32) {.importcpp: "((LVecBase3f &)#).set_z(#)".}

proc getXy*(this: LVecBase3f): LVecBase2f {.importcpp: "((LVecBase3f const &)#).get_xy()".}

proc getXz*(this: LVecBase3f): LVecBase2f {.importcpp: "((LVecBase3f const &)#).get_xz()".}

proc getYz*(this: LVecBase3f): LVecBase2f {.importcpp: "((LVecBase3f const &)#).get_yz()".}

proc addToCell*(this: var LVecBase3f, i: int, value: float32) {.importcpp: "((LVecBase3f &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase3f, value: float32) {.importcpp: "((LVecBase3f &)#).add_x(#)".}

proc addY*(this: var LVecBase3f, value: float32) {.importcpp: "((LVecBase3f &)#).add_y(#)".}

proc addZ*(this: var LVecBase3f, value: float32) {.importcpp: "((LVecBase3f &)#).add_z(#)".}

proc getData*(this: LVecBase3f) {.importcpp: "((LVecBase3f const &)#).get_data()".}

proc fill*(this: var LVecBase3f, fillValue: float32) {.importcpp: "((LVecBase3f &)#).fill(#)".}

proc set*(this: var LVecBase3f, x: float32, y: float32, z: float32) {.importcpp: "((LVecBase3f &)#).set(#, #, #)".}

proc dot*(this: LVecBase3f, other: LVecBase3f): float32 {.importcpp: "((LVecBase3f const &)#).dot((LVecBase3f const &)(#))".}

proc lengthSquared*(this: LVecBase3f): float32 {.importcpp: "((LVecBase3f const &)#).length_squared()".}

proc length*(this: LVecBase3f): float32 {.importcpp: "((LVecBase3f const &)#).length()".}

proc normalize*(this: var LVecBase3f): bool {.importcpp: "((LVecBase3f &)#).normalize()".}

proc normalized*(this: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).normalized()".}

proc project*(this: LVecBase3f, onto: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).project((LVecBase3f const &)(#))".}

proc cross*(this: LVecBase3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).cross((LVecBase3f const &)(#))".}

proc `<`*(this: LVecBase3f, other: LVecBase3f): bool {.importcpp: "((LVecBase3f const &)#).operator <((LVecBase3f const &)(#))".}

proc `==`*(this: LVecBase3f, other: LVecBase3f): bool {.importcpp: "((LVecBase3f const &)#).operator ==((LVecBase3f const &)(#))".}

proc `!=`*(this: LVecBase3f, other: LVecBase3f): bool {.importcpp: "((LVecBase3f const &)#).operator !=((LVecBase3f const &)(#))".}

proc getStandardizedHpr*(this: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).get_standardized_hpr()".}

proc compareTo*(this: LVecBase3f, other: LVecBase3f): int {.importcpp: "((LVecBase3f const &)#).compare_to((LVecBase3f const &)(#))".}

proc compareTo*(this: LVecBase3f, other: LVecBase3f, threshold: float32): int {.importcpp: "((LVecBase3f const &)#).compare_to((LVecBase3f const &)(#), #)".}

proc getHash*(this: LVecBase3f): int {.importcpp: "((LVecBase3f const &)#).get_hash()".}

proc getHash*(this: LVecBase3f, threshold: float32): int {.importcpp: "((LVecBase3f const &)#).get_hash(#)".}

proc addHash*(this: LVecBase3f, hash: int): int {.importcpp: "((LVecBase3f const &)#).add_hash(#)".}

proc addHash*(this: LVecBase3f, hash: int, threshold: float32): int {.importcpp: "((LVecBase3f const &)#).add_hash(#, #)".}

proc `-`*(this: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).operator -()".}

proc `+`*(this: LVecBase3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).operator +((LVecBase3f const &)(#))".}

proc `-`*(this: LVecBase3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).operator -((LVecBase3f const &)(#))".}

proc `*`*(this: LVecBase3f, scalar: float32): LVecBase3f {.importcpp: "((LVecBase3f const &)#).operator *(#)".}

proc `/`*(this: LVecBase3f, scalar: float32): LVecBase3f {.importcpp: "((LVecBase3f const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase3f, other: LVecBase3f) {.importcpp: "((LVecBase3f &)#).operator +=((LVecBase3f const &)(#))".}

proc `-=`*(this: var LVecBase3f, other: LVecBase3f) {.importcpp: "((LVecBase3f &)#).operator -=((LVecBase3f const &)(#))".}

proc `*=`*(this: var LVecBase3f, scalar: float32) {.importcpp: "((LVecBase3f &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase3f, scalar: float32) {.importcpp: "((LVecBase3f &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase3f, other: LVecBase3f) {.importcpp: "((LVecBase3f &)#).componentwise_mult((LVecBase3f const &)(#))".}

proc fmax*(this: LVecBase3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).fmax((LVecBase3f const &)(#))".}

proc fmin*(this: LVecBase3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVecBase3f const &)#).fmin((LVecBase3f const &)(#))".}

proc crossInto*(this: var LVecBase3f, other: LVecBase3f) {.importcpp: "((LVecBase3f &)#).cross_into((LVecBase3f const &)(#))".}

proc almostEqual*(this: LVecBase3f, other: LVecBase3f): bool {.importcpp: "((LVecBase3f const &)#).almost_equal((LVecBase3f const &)(#))".}

proc almostEqual*(this: LVecBase3f, other: LVecBase3f, threshold: float32): bool {.importcpp: "((LVecBase3f const &)#).almost_equal((LVecBase3f const &)(#), #)".}

proc output*(this: LVecBase3f, `out`: iostream | ostream) {.importcpp: "((LVecBase3f const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase3f, destination: Datagram) {.importcpp: "((LVecBase3f const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase3f, source: DatagramIterator) {.importcpp: "((LVecBase3f &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase3f, destination: Datagram) {.importcpp: "((LVecBase3f const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase3f, source: DatagramIterator) {.importcpp: "((LVecBase3f &)#).read_datagram(#)".}

proc `[]=`*(this: var LVecBase3d, i: int, assignVal: float64) {.importcpp: "((LVecBase3d &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase3d, i: int): float64 {.importcpp: "((LVecBase3d const &)#).operator [](#)".}

proc isNan*(this: LVecBase3d): bool {.importcpp: "((LVecBase3d const &)#).is_nan()".}

proc getCell*(this: LVecBase3d, i: int): float64 {.importcpp: "((LVecBase3d const &)#).get_cell(#)".}

proc getX*(this: LVecBase3d): float64 {.importcpp: "((LVecBase3d const &)#).get_x()".}

proc getY*(this: LVecBase3d): float64 {.importcpp: "((LVecBase3d const &)#).get_y()".}

proc getZ*(this: LVecBase3d): float64 {.importcpp: "((LVecBase3d const &)#).get_z()".}

proc setCell*(this: var LVecBase3d, i: int, value: float64) {.importcpp: "((LVecBase3d &)#).set_cell(#, #)".}

proc setX*(this: var LVecBase3d, value: float64) {.importcpp: "((LVecBase3d &)#).set_x(#)".}

proc setY*(this: var LVecBase3d, value: float64) {.importcpp: "((LVecBase3d &)#).set_y(#)".}

proc setZ*(this: var LVecBase3d, value: float64) {.importcpp: "((LVecBase3d &)#).set_z(#)".}

proc getXy*(this: LVecBase3d): LVecBase2d {.importcpp: "((LVecBase3d const &)#).get_xy()".}

proc getXz*(this: LVecBase3d): LVecBase2d {.importcpp: "((LVecBase3d const &)#).get_xz()".}

proc getYz*(this: LVecBase3d): LVecBase2d {.importcpp: "((LVecBase3d const &)#).get_yz()".}

proc addToCell*(this: var LVecBase3d, i: int, value: float64) {.importcpp: "((LVecBase3d &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase3d, value: float64) {.importcpp: "((LVecBase3d &)#).add_x(#)".}

proc addY*(this: var LVecBase3d, value: float64) {.importcpp: "((LVecBase3d &)#).add_y(#)".}

proc addZ*(this: var LVecBase3d, value: float64) {.importcpp: "((LVecBase3d &)#).add_z(#)".}

proc getData*(this: LVecBase3d) {.importcpp: "((LVecBase3d const &)#).get_data()".}

proc fill*(this: var LVecBase3d, fillValue: float64) {.importcpp: "((LVecBase3d &)#).fill(#)".}

proc set*(this: var LVecBase3d, x: float64, y: float64, z: float64) {.importcpp: "((LVecBase3d &)#).set(#, #, #)".}

proc dot*(this: LVecBase3d, other: LVecBase3d): float64 {.importcpp: "((LVecBase3d const &)#).dot((LVecBase3d const &)(#))".}

proc lengthSquared*(this: LVecBase3d): float64 {.importcpp: "((LVecBase3d const &)#).length_squared()".}

proc length*(this: LVecBase3d): float64 {.importcpp: "((LVecBase3d const &)#).length()".}

proc normalize*(this: var LVecBase3d): bool {.importcpp: "((LVecBase3d &)#).normalize()".}

proc normalized*(this: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).normalized()".}

proc project*(this: LVecBase3d, onto: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).project((LVecBase3d const &)(#))".}

proc cross*(this: LVecBase3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).cross((LVecBase3d const &)(#))".}

proc `<`*(this: LVecBase3d, other: LVecBase3d): bool {.importcpp: "((LVecBase3d const &)#).operator <((LVecBase3d const &)(#))".}

proc `==`*(this: LVecBase3d, other: LVecBase3d): bool {.importcpp: "((LVecBase3d const &)#).operator ==((LVecBase3d const &)(#))".}

proc `!=`*(this: LVecBase3d, other: LVecBase3d): bool {.importcpp: "((LVecBase3d const &)#).operator !=((LVecBase3d const &)(#))".}

proc getStandardizedHpr*(this: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).get_standardized_hpr()".}

proc compareTo*(this: LVecBase3d, other: LVecBase3d): int {.importcpp: "((LVecBase3d const &)#).compare_to((LVecBase3d const &)(#))".}

proc compareTo*(this: LVecBase3d, other: LVecBase3d, threshold: float64): int {.importcpp: "((LVecBase3d const &)#).compare_to((LVecBase3d const &)(#), #)".}

proc getHash*(this: LVecBase3d): int {.importcpp: "((LVecBase3d const &)#).get_hash()".}

proc getHash*(this: LVecBase3d, threshold: float64): int {.importcpp: "((LVecBase3d const &)#).get_hash(#)".}

proc addHash*(this: LVecBase3d, hash: int): int {.importcpp: "((LVecBase3d const &)#).add_hash(#)".}

proc addHash*(this: LVecBase3d, hash: int, threshold: float64): int {.importcpp: "((LVecBase3d const &)#).add_hash(#, #)".}

proc `-`*(this: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).operator -()".}

proc `+`*(this: LVecBase3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).operator +((LVecBase3d const &)(#))".}

proc `-`*(this: LVecBase3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).operator -((LVecBase3d const &)(#))".}

proc `*`*(this: LVecBase3d, scalar: float64): LVecBase3d {.importcpp: "((LVecBase3d const &)#).operator *(#)".}

proc `/`*(this: LVecBase3d, scalar: float64): LVecBase3d {.importcpp: "((LVecBase3d const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase3d, other: LVecBase3d) {.importcpp: "((LVecBase3d &)#).operator +=((LVecBase3d const &)(#))".}

proc `-=`*(this: var LVecBase3d, other: LVecBase3d) {.importcpp: "((LVecBase3d &)#).operator -=((LVecBase3d const &)(#))".}

proc `*=`*(this: var LVecBase3d, scalar: float64) {.importcpp: "((LVecBase3d &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase3d, scalar: float64) {.importcpp: "((LVecBase3d &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase3d, other: LVecBase3d) {.importcpp: "((LVecBase3d &)#).componentwise_mult((LVecBase3d const &)(#))".}

proc fmax*(this: LVecBase3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).fmax((LVecBase3d const &)(#))".}

proc fmin*(this: LVecBase3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVecBase3d const &)#).fmin((LVecBase3d const &)(#))".}

proc crossInto*(this: var LVecBase3d, other: LVecBase3d) {.importcpp: "((LVecBase3d &)#).cross_into((LVecBase3d const &)(#))".}

proc almostEqual*(this: LVecBase3d, other: LVecBase3d): bool {.importcpp: "((LVecBase3d const &)#).almost_equal((LVecBase3d const &)(#))".}

proc almostEqual*(this: LVecBase3d, other: LVecBase3d, threshold: float64): bool {.importcpp: "((LVecBase3d const &)#).almost_equal((LVecBase3d const &)(#), #)".}

proc output*(this: LVecBase3d, `out`: iostream | ostream) {.importcpp: "((LVecBase3d const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase3d, destination: Datagram) {.importcpp: "((LVecBase3d const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase3d, source: DatagramIterator) {.importcpp: "((LVecBase3d &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase3d, destination: Datagram) {.importcpp: "((LVecBase3d const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase3d, source: DatagramIterator) {.importcpp: "((LVecBase3d &)#).read_datagram(#)".}

proc `[]=`*(this: var LVecBase3i, i: int, assignVal: int) {.importcpp: "((LVecBase3i &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase3i, i: int): int {.importcpp: "((LVecBase3i const &)#).operator [](#)".}

proc isNan*(this: LVecBase3i): bool {.importcpp: "((LVecBase3i const &)#).is_nan()".}

proc getCell*(this: LVecBase3i, i: int): int {.importcpp: "((LVecBase3i const &)#).get_cell(#)".}

proc getX*(this: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).get_x()".}

proc getY*(this: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).get_y()".}

proc getZ*(this: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).get_z()".}

proc setCell*(this: var LVecBase3i, i: int, value: int) {.importcpp: "((LVecBase3i &)#).set_cell(#, #)".}

proc setX*(this: var LVecBase3i, value: int) {.importcpp: "((LVecBase3i &)#).set_x(#)".}

proc setY*(this: var LVecBase3i, value: int) {.importcpp: "((LVecBase3i &)#).set_y(#)".}

proc setZ*(this: var LVecBase3i, value: int) {.importcpp: "((LVecBase3i &)#).set_z(#)".}

proc getXy*(this: LVecBase3i): LVecBase2i {.importcpp: "((LVecBase3i const &)#).get_xy()".}

proc getXz*(this: LVecBase3i): LVecBase2i {.importcpp: "((LVecBase3i const &)#).get_xz()".}

proc getYz*(this: LVecBase3i): LVecBase2i {.importcpp: "((LVecBase3i const &)#).get_yz()".}

proc addToCell*(this: var LVecBase3i, i: int, value: int) {.importcpp: "((LVecBase3i &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase3i, value: int) {.importcpp: "((LVecBase3i &)#).add_x(#)".}

proc addY*(this: var LVecBase3i, value: int) {.importcpp: "((LVecBase3i &)#).add_y(#)".}

proc addZ*(this: var LVecBase3i, value: int) {.importcpp: "((LVecBase3i &)#).add_z(#)".}

proc getData*(this: LVecBase3i) {.importcpp: "((LVecBase3i const &)#).get_data()".}

proc fill*(this: var LVecBase3i, fillValue: int) {.importcpp: "((LVecBase3i &)#).fill(#)".}

proc set*(this: var LVecBase3i, x: int, y: int, z: int) {.importcpp: "((LVecBase3i &)#).set(#, #, #)".}

proc dot*(this: LVecBase3i, other: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).dot((LVecBase3i const &)(#))".}

proc lengthSquared*(this: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).length_squared()".}

proc cross*(this: LVecBase3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVecBase3i const &)#).cross((LVecBase3i const &)(#))".}

proc `<`*(this: LVecBase3i, other: LVecBase3i): bool {.importcpp: "((LVecBase3i const &)#).operator <((LVecBase3i const &)(#))".}

proc `==`*(this: LVecBase3i, other: LVecBase3i): bool {.importcpp: "((LVecBase3i const &)#).operator ==((LVecBase3i const &)(#))".}

proc `!=`*(this: LVecBase3i, other: LVecBase3i): bool {.importcpp: "((LVecBase3i const &)#).operator !=((LVecBase3i const &)(#))".}

proc compareTo*(this: LVecBase3i, other: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).compare_to((LVecBase3i const &)(#))".}

proc getHash*(this: LVecBase3i): int {.importcpp: "((LVecBase3i const &)#).get_hash()".}

proc addHash*(this: LVecBase3i, hash: int): int {.importcpp: "((LVecBase3i const &)#).add_hash(#)".}

proc `-`*(this: LVecBase3i): LVecBase3i {.importcpp: "((LVecBase3i const &)#).operator -()".}

proc `+`*(this: LVecBase3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVecBase3i const &)#).operator +((LVecBase3i const &)(#))".}

proc `-`*(this: LVecBase3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVecBase3i const &)#).operator -((LVecBase3i const &)(#))".}

proc `*`*(this: LVecBase3i, scalar: int): LVecBase3i {.importcpp: "((LVecBase3i const &)#).operator *(#)".}

proc `/`*(this: LVecBase3i, scalar: int): LVecBase3i {.importcpp: "((LVecBase3i const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase3i, other: LVecBase3i) {.importcpp: "((LVecBase3i &)#).operator +=((LVecBase3i const &)(#))".}

proc `-=`*(this: var LVecBase3i, other: LVecBase3i) {.importcpp: "((LVecBase3i &)#).operator -=((LVecBase3i const &)(#))".}

proc `*=`*(this: var LVecBase3i, scalar: int) {.importcpp: "((LVecBase3i &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase3i, scalar: int) {.importcpp: "((LVecBase3i &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase3i, other: LVecBase3i) {.importcpp: "((LVecBase3i &)#).componentwise_mult((LVecBase3i const &)(#))".}

proc fmax*(this: LVecBase3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVecBase3i const &)#).fmax((LVecBase3i const &)(#))".}

proc fmin*(this: LVecBase3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVecBase3i const &)#).fmin((LVecBase3i const &)(#))".}

proc crossInto*(this: var LVecBase3i, other: LVecBase3i) {.importcpp: "((LVecBase3i &)#).cross_into((LVecBase3i const &)(#))".}

proc almostEqual*(this: LVecBase3i, other: LVecBase3i): bool {.importcpp: "((LVecBase3i const &)#).almost_equal((LVecBase3i const &)(#))".}

proc almostEqual*(this: LVecBase3i, other: LVecBase3i, threshold: int): bool {.importcpp: "((LVecBase3i const &)#).almost_equal((LVecBase3i const &)(#), #)".}

proc output*(this: LVecBase3i, `out`: iostream | ostream) {.importcpp: "((LVecBase3i const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase3i, destination: Datagram) {.importcpp: "((LVecBase3i const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase3i, source: DatagramIterator) {.importcpp: "((LVecBase3i &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase3i, destination: Datagram) {.importcpp: "((LVecBase3i const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase3i, source: DatagramIterator) {.importcpp: "((LVecBase3i &)#).read_datagram(#)".}

proc getXy*(this: LVector3f): LVector2f {.importcpp: "((LVector3f const &)#).get_xy()".}

proc getXz*(this: LVector3f): LVector2f {.importcpp: "((LVector3f const &)#).get_xz()".}

proc getYz*(this: LVector3f): LVector2f {.importcpp: "((LVector3f const &)#).get_yz()".}

proc `-`*(this: LVector3f): LVector3f {.importcpp: "((LVector3f const &)#).operator -()".}

proc `+`*(this: LVector3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVector3f const &)#).operator +((LVecBase3f const &)(#))".}

proc `+`*(this: LVector3f, other: LVector3f): LVector3f {.importcpp: "((LVector3f const &)#).operator +((LVector3f const &)(#))".}

proc `-`*(this: LVector3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LVector3f const &)#).operator -((LVecBase3f const &)(#))".}

proc `-`*(this: LVector3f, other: LVector3f): LVector3f {.importcpp: "((LVector3f const &)#).operator -((LVector3f const &)(#))".}

proc cross*(this: LVector3f, other: LVecBase3f): LVector3f {.importcpp: "((LVector3f const &)#).cross((LVecBase3f const &)(#))".}

proc normalized*(this: LVector3f): LVector3f {.importcpp: "((LVector3f const &)#).normalized()".}

proc project*(this: LVector3f, onto: LVecBase3f): LVector3f {.importcpp: "((LVector3f const &)#).project((LVecBase3f const &)(#))".}

proc angleRad*(this: LVector3f, other: LVector3f): float32 {.importcpp: "((LVector3f const &)#).angle_rad((LVector3f const &)(#))".}

proc angleDeg*(this: LVector3f, other: LVector3f): float32 {.importcpp: "((LVector3f const &)#).angle_deg((LVector3f const &)(#))".}

proc signedAngleRad*(this: LVector3f, other: LVector3f, `ref`: LVector3f): float32 {.importcpp: "((LVector3f const &)#).signed_angle_rad((LVector3f const &)(#), (LVector3f const &)(#))".}

proc signedAngleDeg*(this: LVector3f, other: LVector3f, `ref`: LVector3f): float32 {.importcpp: "((LVector3f const &)#).signed_angle_deg((LVector3f const &)(#), (LVector3f const &)(#))".}

proc relativeAngleRad*(this: LVector3f, other: LVector3f): float32 {.importcpp: "((LVector3f const &)#).relative_angle_rad((LVector3f const &)(#))".}

proc relativeAngleDeg*(this: LVector3f, other: LVector3f): float32 {.importcpp: "((LVector3f const &)#).relative_angle_deg((LVector3f const &)(#))".}

proc `*`*(this: LVector3f, scalar: float32): LVector3f {.importcpp: "((LVector3f const &)#).operator *(#)".}

proc `/`*(this: LVector3f, scalar: float32): LVector3f {.importcpp: "((LVector3f const &)#).operator /(#)".}

proc getXy*(this: LVector3d): LVector2d {.importcpp: "((LVector3d const &)#).get_xy()".}

proc getXz*(this: LVector3d): LVector2d {.importcpp: "((LVector3d const &)#).get_xz()".}

proc getYz*(this: LVector3d): LVector2d {.importcpp: "((LVector3d const &)#).get_yz()".}

proc `-`*(this: LVector3d): LVector3d {.importcpp: "((LVector3d const &)#).operator -()".}

proc `+`*(this: LVector3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVector3d const &)#).operator +((LVecBase3d const &)(#))".}

proc `+`*(this: LVector3d, other: LVector3d): LVector3d {.importcpp: "((LVector3d const &)#).operator +((LVector3d const &)(#))".}

proc `-`*(this: LVector3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LVector3d const &)#).operator -((LVecBase3d const &)(#))".}

proc `-`*(this: LVector3d, other: LVector3d): LVector3d {.importcpp: "((LVector3d const &)#).operator -((LVector3d const &)(#))".}

proc cross*(this: LVector3d, other: LVecBase3d): LVector3d {.importcpp: "((LVector3d const &)#).cross((LVecBase3d const &)(#))".}

proc normalized*(this: LVector3d): LVector3d {.importcpp: "((LVector3d const &)#).normalized()".}

proc project*(this: LVector3d, onto: LVecBase3d): LVector3d {.importcpp: "((LVector3d const &)#).project((LVecBase3d const &)(#))".}

proc angleRad*(this: LVector3d, other: LVector3d): float64 {.importcpp: "((LVector3d const &)#).angle_rad((LVector3d const &)(#))".}

proc angleDeg*(this: LVector3d, other: LVector3d): float64 {.importcpp: "((LVector3d const &)#).angle_deg((LVector3d const &)(#))".}

proc signedAngleRad*(this: LVector3d, other: LVector3d, `ref`: LVector3d): float64 {.importcpp: "((LVector3d const &)#).signed_angle_rad((LVector3d const &)(#), (LVector3d const &)(#))".}

proc signedAngleDeg*(this: LVector3d, other: LVector3d, `ref`: LVector3d): float64 {.importcpp: "((LVector3d const &)#).signed_angle_deg((LVector3d const &)(#), (LVector3d const &)(#))".}

proc relativeAngleRad*(this: LVector3d, other: LVector3d): float64 {.importcpp: "((LVector3d const &)#).relative_angle_rad((LVector3d const &)(#))".}

proc relativeAngleDeg*(this: LVector3d, other: LVector3d): float64 {.importcpp: "((LVector3d const &)#).relative_angle_deg((LVector3d const &)(#))".}

proc `*`*(this: LVector3d, scalar: float64): LVector3d {.importcpp: "((LVector3d const &)#).operator *(#)".}

proc `/`*(this: LVector3d, scalar: float64): LVector3d {.importcpp: "((LVector3d const &)#).operator /(#)".}

proc getXy*(this: LVector3i): LVector2i {.importcpp: "((LVector3i const &)#).get_xy()".}

proc getXz*(this: LVector3i): LVector2i {.importcpp: "((LVector3i const &)#).get_xz()".}

proc getYz*(this: LVector3i): LVector2i {.importcpp: "((LVector3i const &)#).get_yz()".}

proc `-`*(this: LVector3i): LVector3i {.importcpp: "((LVector3i const &)#).operator -()".}

proc `+`*(this: LVector3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVector3i const &)#).operator +((LVecBase3i const &)(#))".}

proc `+`*(this: LVector3i, other: LVector3i): LVector3i {.importcpp: "((LVector3i const &)#).operator +((LVector3i const &)(#))".}

proc `-`*(this: LVector3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LVector3i const &)#).operator -((LVecBase3i const &)(#))".}

proc `-`*(this: LVector3i, other: LVector3i): LVector3i {.importcpp: "((LVector3i const &)#).operator -((LVector3i const &)(#))".}

proc cross*(this: LVector3i, other: LVecBase3i): LVector3i {.importcpp: "((LVector3i const &)#).cross((LVecBase3i const &)(#))".}

proc `*`*(this: LVector3i, scalar: int): LVector3i {.importcpp: "((LVector3i const &)#).operator *(#)".}

proc `/`*(this: LVector3i, scalar: int): LVector3i {.importcpp: "((LVector3i const &)#).operator /(#)".}

proc getXy*(this: LPoint3f): LPoint2f {.importcpp: "((LPoint3f const &)#).get_xy()".}

proc getXz*(this: LPoint3f): LPoint2f {.importcpp: "((LPoint3f const &)#).get_xz()".}

proc getYz*(this: LPoint3f): LPoint2f {.importcpp: "((LPoint3f const &)#).get_yz()".}

proc `-`*(this: LPoint3f): LPoint3f {.importcpp: "((LPoint3f const &)#).operator -()".}

proc `+`*(this: LPoint3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LPoint3f const &)#).operator +((LVecBase3f const &)(#))".}

proc `+`*(this: LPoint3f, other: LVector3f): LPoint3f {.importcpp: "((LPoint3f const &)#).operator +((LVector3f const &)(#))".}

proc `-`*(this: LPoint3f, other: LPoint3f): LVector3f {.importcpp: "((LPoint3f const &)#).operator -((LPoint3f const &)(#))".}

proc `-`*(this: LPoint3f, other: LVecBase3f): LVecBase3f {.importcpp: "((LPoint3f const &)#).operator -((LVecBase3f const &)(#))".}

proc `-`*(this: LPoint3f, other: LVector3f): LPoint3f {.importcpp: "((LPoint3f const &)#).operator -((LVector3f const &)(#))".}

proc cross*(this: LPoint3f, other: LVecBase3f): LPoint3f {.importcpp: "((LPoint3f const &)#).cross((LVecBase3f const &)(#))".}

proc normalized*(this: LPoint3f): LPoint3f {.importcpp: "((LPoint3f const &)#).normalized()".}

proc project*(this: LPoint3f, onto: LVecBase3f): LPoint3f {.importcpp: "((LPoint3f const &)#).project((LVecBase3f const &)(#))".}

proc `*`*(this: LPoint3f, scalar: float32): LPoint3f {.importcpp: "((LPoint3f const &)#).operator *(#)".}

proc `/`*(this: LPoint3f, scalar: float32): LPoint3f {.importcpp: "((LPoint3f const &)#).operator /(#)".}

proc getXy*(this: LPoint3d): LPoint2d {.importcpp: "((LPoint3d const &)#).get_xy()".}

proc getXz*(this: LPoint3d): LPoint2d {.importcpp: "((LPoint3d const &)#).get_xz()".}

proc getYz*(this: LPoint3d): LPoint2d {.importcpp: "((LPoint3d const &)#).get_yz()".}

proc `-`*(this: LPoint3d): LPoint3d {.importcpp: "((LPoint3d const &)#).operator -()".}

proc `+`*(this: LPoint3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LPoint3d const &)#).operator +((LVecBase3d const &)(#))".}

proc `+`*(this: LPoint3d, other: LVector3d): LPoint3d {.importcpp: "((LPoint3d const &)#).operator +((LVector3d const &)(#))".}

proc `-`*(this: LPoint3d, other: LPoint3d): LVector3d {.importcpp: "((LPoint3d const &)#).operator -((LPoint3d const &)(#))".}

proc `-`*(this: LPoint3d, other: LVecBase3d): LVecBase3d {.importcpp: "((LPoint3d const &)#).operator -((LVecBase3d const &)(#))".}

proc `-`*(this: LPoint3d, other: LVector3d): LPoint3d {.importcpp: "((LPoint3d const &)#).operator -((LVector3d const &)(#))".}

proc cross*(this: LPoint3d, other: LVecBase3d): LPoint3d {.importcpp: "((LPoint3d const &)#).cross((LVecBase3d const &)(#))".}

proc normalized*(this: LPoint3d): LPoint3d {.importcpp: "((LPoint3d const &)#).normalized()".}

proc project*(this: LPoint3d, onto: LVecBase3d): LPoint3d {.importcpp: "((LPoint3d const &)#).project((LVecBase3d const &)(#))".}

proc `*`*(this: LPoint3d, scalar: float64): LPoint3d {.importcpp: "((LPoint3d const &)#).operator *(#)".}

proc `/`*(this: LPoint3d, scalar: float64): LPoint3d {.importcpp: "((LPoint3d const &)#).operator /(#)".}

proc getXy*(this: LPoint3i): LPoint2i {.importcpp: "((LPoint3i const &)#).get_xy()".}

proc getXz*(this: LPoint3i): LPoint2i {.importcpp: "((LPoint3i const &)#).get_xz()".}

proc getYz*(this: LPoint3i): LPoint2i {.importcpp: "((LPoint3i const &)#).get_yz()".}

proc `-`*(this: LPoint3i): LPoint3i {.importcpp: "((LPoint3i const &)#).operator -()".}

proc `+`*(this: LPoint3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LPoint3i const &)#).operator +((LVecBase3i const &)(#))".}

proc `+`*(this: LPoint3i, other: LVector3i): LPoint3i {.importcpp: "((LPoint3i const &)#).operator +((LVector3i const &)(#))".}

proc `-`*(this: LPoint3i, other: LPoint3i): LVector3i {.importcpp: "((LPoint3i const &)#).operator -((LPoint3i const &)(#))".}

proc `-`*(this: LPoint3i, other: LVecBase3i): LVecBase3i {.importcpp: "((LPoint3i const &)#).operator -((LVecBase3i const &)(#))".}

proc `-`*(this: LPoint3i, other: LVector3i): LPoint3i {.importcpp: "((LPoint3i const &)#).operator -((LVector3i const &)(#))".}

proc cross*(this: LPoint3i, other: LVecBase3i): LPoint3i {.importcpp: "((LPoint3i const &)#).cross((LVecBase3i const &)(#))".}

proc `*`*(this: LPoint3i, scalar: int): LPoint3i {.importcpp: "((LPoint3i const &)#).operator *(#)".}

proc `/`*(this: LPoint3i, scalar: int): LPoint3i {.importcpp: "((LPoint3i const &)#).operator /(#)".}

proc `[]=`*(this: var LVecBase4f, i: int, assignVal: float32) {.importcpp: "((LVecBase4f &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase4f, i: int): float32 {.importcpp: "((LVecBase4f const &)#).operator [](#)".}

proc isNan*(this: LVecBase4f): bool {.importcpp: "((LVecBase4f const &)#).is_nan()".}

proc getCell*(this: LVecBase4f, i: int): float32 {.importcpp: "((LVecBase4f const &)#).get_cell(#)".}

proc setCell*(this: var LVecBase4f, i: int, value: float32) {.importcpp: "((LVecBase4f &)#).set_cell(#, #)".}

proc getX*(this: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).get_x()".}

proc getY*(this: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).get_y()".}

proc getZ*(this: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).get_z()".}

proc getW*(this: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).get_w()".}

proc getXyz*(this: LVecBase4f): LVecBase3f {.importcpp: "((LVecBase4f const &)#).get_xyz()".}

proc getXy*(this: LVecBase4f): LVecBase2f {.importcpp: "((LVecBase4f const &)#).get_xy()".}

proc setX*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).set_x(#)".}

proc setY*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).set_y(#)".}

proc setZ*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).set_z(#)".}

proc setW*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).set_w(#)".}

proc addToCell*(this: var LVecBase4f, i: int, value: float32) {.importcpp: "((LVecBase4f &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).add_x(#)".}

proc addY*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).add_y(#)".}

proc addZ*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).add_z(#)".}

proc addW*(this: var LVecBase4f, value: float32) {.importcpp: "((LVecBase4f &)#).add_w(#)".}

proc getData*(this: LVecBase4f) {.importcpp: "((LVecBase4f const &)#).get_data()".}

proc fill*(this: var LVecBase4f, fillValue: float32) {.importcpp: "((LVecBase4f &)#).fill(#)".}

proc set*(this: var LVecBase4f, x: float32, y: float32, z: float32, w: float32) {.importcpp: "((LVecBase4f &)#).set(#, #, #, #)".}

proc dot*(this: LVecBase4f, other: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).dot((LVecBase4f const &)(#))".}

proc lengthSquared*(this: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).length_squared()".}

proc length*(this: LVecBase4f): float32 {.importcpp: "((LVecBase4f const &)#).length()".}

proc normalize*(this: var LVecBase4f): bool {.importcpp: "((LVecBase4f &)#).normalize()".}

proc normalized*(this: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).normalized()".}

proc project*(this: LVecBase4f, onto: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).project((LVecBase4f const &)(#))".}

proc `<`*(this: LVecBase4f, other: LVecBase4f): bool {.importcpp: "((LVecBase4f const &)#).operator <((LVecBase4f const &)(#))".}

proc `==`*(this: LVecBase4f, other: LVecBase4f): bool {.importcpp: "((LVecBase4f const &)#).operator ==((LVecBase4f const &)(#))".}

proc `!=`*(this: LVecBase4f, other: LVecBase4f): bool {.importcpp: "((LVecBase4f const &)#).operator !=((LVecBase4f const &)(#))".}

proc compareTo*(this: LVecBase4f, other: LVecBase4f): int {.importcpp: "((LVecBase4f const &)#).compare_to((LVecBase4f const &)(#))".}

proc compareTo*(this: LVecBase4f, other: LVecBase4f, threshold: float32): int {.importcpp: "((LVecBase4f const &)#).compare_to((LVecBase4f const &)(#), #)".}

proc getHash*(this: LVecBase4f): int {.importcpp: "((LVecBase4f const &)#).get_hash()".}

proc getHash*(this: LVecBase4f, threshold: float32): int {.importcpp: "((LVecBase4f const &)#).get_hash(#)".}

proc addHash*(this: LVecBase4f, hash: int): int {.importcpp: "((LVecBase4f const &)#).add_hash(#)".}

proc addHash*(this: LVecBase4f, hash: int, threshold: float32): int {.importcpp: "((LVecBase4f const &)#).add_hash(#, #)".}

proc `-`*(this: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).operator -()".}

proc `+`*(this: LVecBase4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).operator +((LVecBase4f const &)(#))".}

proc `-`*(this: LVecBase4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).operator -((LVecBase4f const &)(#))".}

proc `*`*(this: LVecBase4f, scalar: float32): LVecBase4f {.importcpp: "((LVecBase4f const &)#).operator *(#)".}

proc `/`*(this: LVecBase4f, scalar: float32): LVecBase4f {.importcpp: "((LVecBase4f const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase4f, other: LVecBase4f) {.importcpp: "((LVecBase4f &)#).operator +=((LVecBase4f const &)(#))".}

proc `-=`*(this: var LVecBase4f, other: LVecBase4f) {.importcpp: "((LVecBase4f &)#).operator -=((LVecBase4f const &)(#))".}

proc `*=`*(this: var LVecBase4f, scalar: float32) {.importcpp: "((LVecBase4f &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase4f, scalar: float32) {.importcpp: "((LVecBase4f &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase4f, other: LVecBase4f) {.importcpp: "((LVecBase4f &)#).componentwise_mult((LVecBase4f const &)(#))".}

proc fmax*(this: LVecBase4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).fmax((LVecBase4f const &)(#))".}

proc fmin*(this: LVecBase4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LVecBase4f const &)#).fmin((LVecBase4f const &)(#))".}

proc almostEqual*(this: LVecBase4f, other: LVecBase4f): bool {.importcpp: "((LVecBase4f const &)#).almost_equal((LVecBase4f const &)(#))".}

proc almostEqual*(this: LVecBase4f, other: LVecBase4f, threshold: float32): bool {.importcpp: "((LVecBase4f const &)#).almost_equal((LVecBase4f const &)(#), #)".}

proc output*(this: LVecBase4f, `out`: iostream | ostream) {.importcpp: "((LVecBase4f const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase4f, destination: Datagram) {.importcpp: "((LVecBase4f const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase4f, source: DatagramIterator) {.importcpp: "((LVecBase4f &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase4f, destination: Datagram) {.importcpp: "((LVecBase4f const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase4f, source: DatagramIterator) {.importcpp: "((LVecBase4f &)#).read_datagram(#)".}

proc fill*(this: var UnalignedLVecBase4f, fillValue: float32) {.importcpp: "((UnalignedLVecBase4f &)#).fill(#)".}

proc set*(this: var UnalignedLVecBase4f, x: float32, y: float32, z: float32, w: float32) {.importcpp: "((UnalignedLVecBase4f &)#).set(#, #, #, #)".}

proc `[]=`*(this: var UnalignedLVecBase4f, i: int, assignVal: float32) {.importcpp: "((UnalignedLVecBase4f &)#).operator [](#) = #".}

proc `[]`*(this: UnalignedLVecBase4f, i: int): float32 {.importcpp: "((UnalignedLVecBase4f const &)#).operator [](#)".}

proc getData*(this: UnalignedLVecBase4f) {.importcpp: "((UnalignedLVecBase4f const &)#).get_data()".}

proc `==`*(this: UnalignedLVecBase4f, other: UnalignedLVecBase4f): bool {.importcpp: "((UnalignedLVecBase4f const &)#).operator ==((UnalignedLVecBase4f const &)(#))".}

proc `!=`*(this: UnalignedLVecBase4f, other: UnalignedLVecBase4f): bool {.importcpp: "((UnalignedLVecBase4f const &)#).operator !=((UnalignedLVecBase4f const &)(#))".}

proc `[]=`*(this: var LVecBase4d, i: int, assignVal: float64) {.importcpp: "((LVecBase4d &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase4d, i: int): float64 {.importcpp: "((LVecBase4d const &)#).operator [](#)".}

proc isNan*(this: LVecBase4d): bool {.importcpp: "((LVecBase4d const &)#).is_nan()".}

proc getCell*(this: LVecBase4d, i: int): float64 {.importcpp: "((LVecBase4d const &)#).get_cell(#)".}

proc setCell*(this: var LVecBase4d, i: int, value: float64) {.importcpp: "((LVecBase4d &)#).set_cell(#, #)".}

proc getX*(this: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).get_x()".}

proc getY*(this: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).get_y()".}

proc getZ*(this: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).get_z()".}

proc getW*(this: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).get_w()".}

proc getXyz*(this: LVecBase4d): LVecBase3d {.importcpp: "((LVecBase4d const &)#).get_xyz()".}

proc getXy*(this: LVecBase4d): LVecBase2d {.importcpp: "((LVecBase4d const &)#).get_xy()".}

proc setX*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).set_x(#)".}

proc setY*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).set_y(#)".}

proc setZ*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).set_z(#)".}

proc setW*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).set_w(#)".}

proc addToCell*(this: var LVecBase4d, i: int, value: float64) {.importcpp: "((LVecBase4d &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).add_x(#)".}

proc addY*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).add_y(#)".}

proc addZ*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).add_z(#)".}

proc addW*(this: var LVecBase4d, value: float64) {.importcpp: "((LVecBase4d &)#).add_w(#)".}

proc getData*(this: LVecBase4d) {.importcpp: "((LVecBase4d const &)#).get_data()".}

proc fill*(this: var LVecBase4d, fillValue: float64) {.importcpp: "((LVecBase4d &)#).fill(#)".}

proc set*(this: var LVecBase4d, x: float64, y: float64, z: float64, w: float64) {.importcpp: "((LVecBase4d &)#).set(#, #, #, #)".}

proc dot*(this: LVecBase4d, other: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).dot((LVecBase4d const &)(#))".}

proc lengthSquared*(this: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).length_squared()".}

proc length*(this: LVecBase4d): float64 {.importcpp: "((LVecBase4d const &)#).length()".}

proc normalize*(this: var LVecBase4d): bool {.importcpp: "((LVecBase4d &)#).normalize()".}

proc normalized*(this: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).normalized()".}

proc project*(this: LVecBase4d, onto: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).project((LVecBase4d const &)(#))".}

proc `<`*(this: LVecBase4d, other: LVecBase4d): bool {.importcpp: "((LVecBase4d const &)#).operator <((LVecBase4d const &)(#))".}

proc `==`*(this: LVecBase4d, other: LVecBase4d): bool {.importcpp: "((LVecBase4d const &)#).operator ==((LVecBase4d const &)(#))".}

proc `!=`*(this: LVecBase4d, other: LVecBase4d): bool {.importcpp: "((LVecBase4d const &)#).operator !=((LVecBase4d const &)(#))".}

proc compareTo*(this: LVecBase4d, other: LVecBase4d): int {.importcpp: "((LVecBase4d const &)#).compare_to((LVecBase4d const &)(#))".}

proc compareTo*(this: LVecBase4d, other: LVecBase4d, threshold: float64): int {.importcpp: "((LVecBase4d const &)#).compare_to((LVecBase4d const &)(#), #)".}

proc getHash*(this: LVecBase4d): int {.importcpp: "((LVecBase4d const &)#).get_hash()".}

proc getHash*(this: LVecBase4d, threshold: float64): int {.importcpp: "((LVecBase4d const &)#).get_hash(#)".}

proc addHash*(this: LVecBase4d, hash: int): int {.importcpp: "((LVecBase4d const &)#).add_hash(#)".}

proc addHash*(this: LVecBase4d, hash: int, threshold: float64): int {.importcpp: "((LVecBase4d const &)#).add_hash(#, #)".}

proc `-`*(this: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).operator -()".}

proc `+`*(this: LVecBase4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).operator +((LVecBase4d const &)(#))".}

proc `-`*(this: LVecBase4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).operator -((LVecBase4d const &)(#))".}

proc `*`*(this: LVecBase4d, scalar: float64): LVecBase4d {.importcpp: "((LVecBase4d const &)#).operator *(#)".}

proc `/`*(this: LVecBase4d, scalar: float64): LVecBase4d {.importcpp: "((LVecBase4d const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase4d, other: LVecBase4d) {.importcpp: "((LVecBase4d &)#).operator +=((LVecBase4d const &)(#))".}

proc `-=`*(this: var LVecBase4d, other: LVecBase4d) {.importcpp: "((LVecBase4d &)#).operator -=((LVecBase4d const &)(#))".}

proc `*=`*(this: var LVecBase4d, scalar: float64) {.importcpp: "((LVecBase4d &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase4d, scalar: float64) {.importcpp: "((LVecBase4d &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase4d, other: LVecBase4d) {.importcpp: "((LVecBase4d &)#).componentwise_mult((LVecBase4d const &)(#))".}

proc fmax*(this: LVecBase4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).fmax((LVecBase4d const &)(#))".}

proc fmin*(this: LVecBase4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LVecBase4d const &)#).fmin((LVecBase4d const &)(#))".}

proc almostEqual*(this: LVecBase4d, other: LVecBase4d): bool {.importcpp: "((LVecBase4d const &)#).almost_equal((LVecBase4d const &)(#))".}

proc almostEqual*(this: LVecBase4d, other: LVecBase4d, threshold: float64): bool {.importcpp: "((LVecBase4d const &)#).almost_equal((LVecBase4d const &)(#), #)".}

proc output*(this: LVecBase4d, `out`: iostream | ostream) {.importcpp: "((LVecBase4d const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase4d, destination: Datagram) {.importcpp: "((LVecBase4d const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase4d, source: DatagramIterator) {.importcpp: "((LVecBase4d &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase4d, destination: Datagram) {.importcpp: "((LVecBase4d const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase4d, source: DatagramIterator) {.importcpp: "((LVecBase4d &)#).read_datagram(#)".}

proc fill*(this: var UnalignedLVecBase4d, fillValue: float64) {.importcpp: "((UnalignedLVecBase4d &)#).fill(#)".}

proc set*(this: var UnalignedLVecBase4d, x: float64, y: float64, z: float64, w: float64) {.importcpp: "((UnalignedLVecBase4d &)#).set(#, #, #, #)".}

proc `[]=`*(this: var UnalignedLVecBase4d, i: int, assignVal: float64) {.importcpp: "((UnalignedLVecBase4d &)#).operator [](#) = #".}

proc `[]`*(this: UnalignedLVecBase4d, i: int): float64 {.importcpp: "((UnalignedLVecBase4d const &)#).operator [](#)".}

proc getData*(this: UnalignedLVecBase4d) {.importcpp: "((UnalignedLVecBase4d const &)#).get_data()".}

proc `==`*(this: UnalignedLVecBase4d, other: UnalignedLVecBase4d): bool {.importcpp: "((UnalignedLVecBase4d const &)#).operator ==((UnalignedLVecBase4d const &)(#))".}

proc `!=`*(this: UnalignedLVecBase4d, other: UnalignedLVecBase4d): bool {.importcpp: "((UnalignedLVecBase4d const &)#).operator !=((UnalignedLVecBase4d const &)(#))".}

proc `[]=`*(this: var LVecBase4i, i: int, assignVal: int) {.importcpp: "((LVecBase4i &)#).operator [](#) = #".}

proc `[]`*(this: LVecBase4i, i: int): int {.importcpp: "((LVecBase4i const &)#).operator [](#)".}

proc isNan*(this: LVecBase4i): bool {.importcpp: "((LVecBase4i const &)#).is_nan()".}

proc getCell*(this: LVecBase4i, i: int): int {.importcpp: "((LVecBase4i const &)#).get_cell(#)".}

proc setCell*(this: var LVecBase4i, i: int, value: int) {.importcpp: "((LVecBase4i &)#).set_cell(#, #)".}

proc getX*(this: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).get_x()".}

proc getY*(this: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).get_y()".}

proc getZ*(this: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).get_z()".}

proc getW*(this: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).get_w()".}

proc getXyz*(this: LVecBase4i): LVecBase3i {.importcpp: "((LVecBase4i const &)#).get_xyz()".}

proc getXy*(this: LVecBase4i): LVecBase2i {.importcpp: "((LVecBase4i const &)#).get_xy()".}

proc setX*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).set_x(#)".}

proc setY*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).set_y(#)".}

proc setZ*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).set_z(#)".}

proc setW*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).set_w(#)".}

proc addToCell*(this: var LVecBase4i, i: int, value: int) {.importcpp: "((LVecBase4i &)#).add_to_cell(#, #)".}

proc addX*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).add_x(#)".}

proc addY*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).add_y(#)".}

proc addZ*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).add_z(#)".}

proc addW*(this: var LVecBase4i, value: int) {.importcpp: "((LVecBase4i &)#).add_w(#)".}

proc getData*(this: LVecBase4i) {.importcpp: "((LVecBase4i const &)#).get_data()".}

proc fill*(this: var LVecBase4i, fillValue: int) {.importcpp: "((LVecBase4i &)#).fill(#)".}

proc set*(this: var LVecBase4i, x: int, y: int, z: int, w: int) {.importcpp: "((LVecBase4i &)#).set(#, #, #, #)".}

proc dot*(this: LVecBase4i, other: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).dot((LVecBase4i const &)(#))".}

proc lengthSquared*(this: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).length_squared()".}

proc `<`*(this: LVecBase4i, other: LVecBase4i): bool {.importcpp: "((LVecBase4i const &)#).operator <((LVecBase4i const &)(#))".}

proc `==`*(this: LVecBase4i, other: LVecBase4i): bool {.importcpp: "((LVecBase4i const &)#).operator ==((LVecBase4i const &)(#))".}

proc `!=`*(this: LVecBase4i, other: LVecBase4i): bool {.importcpp: "((LVecBase4i const &)#).operator !=((LVecBase4i const &)(#))".}

proc compareTo*(this: LVecBase4i, other: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).compare_to((LVecBase4i const &)(#))".}

proc getHash*(this: LVecBase4i): int {.importcpp: "((LVecBase4i const &)#).get_hash()".}

proc addHash*(this: LVecBase4i, hash: int): int {.importcpp: "((LVecBase4i const &)#).add_hash(#)".}

proc `-`*(this: LVecBase4i): LVecBase4i {.importcpp: "((LVecBase4i const &)#).operator -()".}

proc `+`*(this: LVecBase4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LVecBase4i const &)#).operator +((LVecBase4i const &)(#))".}

proc `-`*(this: LVecBase4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LVecBase4i const &)#).operator -((LVecBase4i const &)(#))".}

proc `*`*(this: LVecBase4i, scalar: int): LVecBase4i {.importcpp: "((LVecBase4i const &)#).operator *(#)".}

proc `/`*(this: LVecBase4i, scalar: int): LVecBase4i {.importcpp: "((LVecBase4i const &)#).operator /(#)".}

proc `+=`*(this: var LVecBase4i, other: LVecBase4i) {.importcpp: "((LVecBase4i &)#).operator +=((LVecBase4i const &)(#))".}

proc `-=`*(this: var LVecBase4i, other: LVecBase4i) {.importcpp: "((LVecBase4i &)#).operator -=((LVecBase4i const &)(#))".}

proc `*=`*(this: var LVecBase4i, scalar: int) {.importcpp: "((LVecBase4i &)#).operator *=(#)".}

proc `/=`*(this: var LVecBase4i, scalar: int) {.importcpp: "((LVecBase4i &)#).operator /=(#)".}

proc componentwiseMult*(this: var LVecBase4i, other: LVecBase4i) {.importcpp: "((LVecBase4i &)#).componentwise_mult((LVecBase4i const &)(#))".}

proc fmax*(this: LVecBase4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LVecBase4i const &)#).fmax((LVecBase4i const &)(#))".}

proc fmin*(this: LVecBase4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LVecBase4i const &)#).fmin((LVecBase4i const &)(#))".}

proc almostEqual*(this: LVecBase4i, other: LVecBase4i): bool {.importcpp: "((LVecBase4i const &)#).almost_equal((LVecBase4i const &)(#))".}

proc almostEqual*(this: LVecBase4i, other: LVecBase4i, threshold: int): bool {.importcpp: "((LVecBase4i const &)#).almost_equal((LVecBase4i const &)(#), #)".}

proc output*(this: LVecBase4i, `out`: iostream | ostream) {.importcpp: "((LVecBase4i const &)#).output(#)".}

proc writeDatagramFixed*(this: LVecBase4i, destination: Datagram) {.importcpp: "((LVecBase4i const &)#).write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LVecBase4i, source: DatagramIterator) {.importcpp: "((LVecBase4i &)#).read_datagram_fixed(#)".}

proc writeDatagram*(this: LVecBase4i, destination: Datagram) {.importcpp: "((LVecBase4i const &)#).write_datagram(#)".}

proc readDatagram*(this: var LVecBase4i, source: DatagramIterator) {.importcpp: "((LVecBase4i &)#).read_datagram(#)".}

proc fill*(this: var UnalignedLVecBase4i, fillValue: int) {.importcpp: "((UnalignedLVecBase4i &)#).fill(#)".}

proc set*(this: var UnalignedLVecBase4i, x: int, y: int, z: int, w: int) {.importcpp: "((UnalignedLVecBase4i &)#).set(#, #, #, #)".}

proc `[]=`*(this: var UnalignedLVecBase4i, i: int, assignVal: int) {.importcpp: "((UnalignedLVecBase4i &)#).operator [](#) = #".}

proc `[]`*(this: UnalignedLVecBase4i, i: int): int {.importcpp: "((UnalignedLVecBase4i const &)#).operator [](#)".}

proc getData*(this: UnalignedLVecBase4i) {.importcpp: "((UnalignedLVecBase4i const &)#).get_data()".}

proc `==`*(this: UnalignedLVecBase4i, other: UnalignedLVecBase4i): bool {.importcpp: "((UnalignedLVecBase4i const &)#).operator ==((UnalignedLVecBase4i const &)(#))".}

proc `!=`*(this: UnalignedLVecBase4i, other: UnalignedLVecBase4i): bool {.importcpp: "((UnalignedLVecBase4i const &)#).operator !=((UnalignedLVecBase4i const &)(#))".}

proc getXyz*(this: LVector4f): LVector3f {.importcpp: "((LVector4f const &)#).get_xyz()".}

proc getXy*(this: LVector4f): LVector2f {.importcpp: "((LVector4f const &)#).get_xy()".}

proc `-`*(this: LVector4f): LVector4f {.importcpp: "((LVector4f const &)#).operator -()".}

proc `+`*(this: LVector4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LVector4f const &)#).operator +((LVecBase4f const &)(#))".}

proc `+`*(this: LVector4f, other: LVector4f): LVector4f {.importcpp: "((LVector4f const &)#).operator +((LVector4f const &)(#))".}

proc `-`*(this: LVector4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LVector4f const &)#).operator -((LVecBase4f const &)(#))".}

proc `-`*(this: LVector4f, other: LVector4f): LVector4f {.importcpp: "((LVector4f const &)#).operator -((LVector4f const &)(#))".}

proc `*`*(this: LVector4f, scalar: float32): LVector4f {.importcpp: "((LVector4f const &)#).operator *(#)".}

proc `/`*(this: LVector4f, scalar: float32): LVector4f {.importcpp: "((LVector4f const &)#).operator /(#)".}

proc normalized*(this: LVector4f): LVector4f {.importcpp: "((LVector4f const &)#).normalized()".}

proc project*(this: LVector4f, onto: LVecBase4f): LVector4f {.importcpp: "((LVector4f const &)#).project((LVecBase4f const &)(#))".}

proc getXyz*(this: LVector4d): LVector3d {.importcpp: "((LVector4d const &)#).get_xyz()".}

proc getXy*(this: LVector4d): LVector2d {.importcpp: "((LVector4d const &)#).get_xy()".}

proc `-`*(this: LVector4d): LVector4d {.importcpp: "((LVector4d const &)#).operator -()".}

proc `+`*(this: LVector4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LVector4d const &)#).operator +((LVecBase4d const &)(#))".}

proc `+`*(this: LVector4d, other: LVector4d): LVector4d {.importcpp: "((LVector4d const &)#).operator +((LVector4d const &)(#))".}

proc `-`*(this: LVector4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LVector4d const &)#).operator -((LVecBase4d const &)(#))".}

proc `-`*(this: LVector4d, other: LVector4d): LVector4d {.importcpp: "((LVector4d const &)#).operator -((LVector4d const &)(#))".}

proc `*`*(this: LVector4d, scalar: float64): LVector4d {.importcpp: "((LVector4d const &)#).operator *(#)".}

proc `/`*(this: LVector4d, scalar: float64): LVector4d {.importcpp: "((LVector4d const &)#).operator /(#)".}

proc normalized*(this: LVector4d): LVector4d {.importcpp: "((LVector4d const &)#).normalized()".}

proc project*(this: LVector4d, onto: LVecBase4d): LVector4d {.importcpp: "((LVector4d const &)#).project((LVecBase4d const &)(#))".}

proc getXyz*(this: LVector4i): LVector3i {.importcpp: "((LVector4i const &)#).get_xyz()".}

proc getXy*(this: LVector4i): LVector2i {.importcpp: "((LVector4i const &)#).get_xy()".}

proc `-`*(this: LVector4i): LVector4i {.importcpp: "((LVector4i const &)#).operator -()".}

proc `+`*(this: LVector4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LVector4i const &)#).operator +((LVecBase4i const &)(#))".}

proc `+`*(this: LVector4i, other: LVector4i): LVector4i {.importcpp: "((LVector4i const &)#).operator +((LVector4i const &)(#))".}

proc `-`*(this: LVector4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LVector4i const &)#).operator -((LVecBase4i const &)(#))".}

proc `-`*(this: LVector4i, other: LVector4i): LVector4i {.importcpp: "((LVector4i const &)#).operator -((LVector4i const &)(#))".}

proc `*`*(this: LVector4i, scalar: int): LVector4i {.importcpp: "((LVector4i const &)#).operator *(#)".}

proc `/`*(this: LVector4i, scalar: int): LVector4i {.importcpp: "((LVector4i const &)#).operator /(#)".}

proc getXyz*(this: LPoint4f): LPoint3f {.importcpp: "((LPoint4f const &)#).get_xyz()".}

proc getXy*(this: LPoint4f): LPoint2f {.importcpp: "((LPoint4f const &)#).get_xy()".}

proc `-`*(this: LPoint4f): LPoint4f {.importcpp: "((LPoint4f const &)#).operator -()".}

proc `+`*(this: LPoint4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LPoint4f const &)#).operator +((LVecBase4f const &)(#))".}

proc `+`*(this: LPoint4f, other: LVector4f): LPoint4f {.importcpp: "((LPoint4f const &)#).operator +((LVector4f const &)(#))".}

proc `-`*(this: LPoint4f, other: LPoint4f): LVector4f {.importcpp: "((LPoint4f const &)#).operator -((LPoint4f const &)(#))".}

proc `-`*(this: LPoint4f, other: LVecBase4f): LVecBase4f {.importcpp: "((LPoint4f const &)#).operator -((LVecBase4f const &)(#))".}

proc `-`*(this: LPoint4f, other: LVector4f): LPoint4f {.importcpp: "((LPoint4f const &)#).operator -((LVector4f const &)(#))".}

proc `*`*(this: LPoint4f, scalar: float32): LPoint4f {.importcpp: "((LPoint4f const &)#).operator *(#)".}

proc `/`*(this: LPoint4f, scalar: float32): LPoint4f {.importcpp: "((LPoint4f const &)#).operator /(#)".}

proc normalized*(this: LPoint4f): LPoint4f {.importcpp: "((LPoint4f const &)#).normalized()".}

proc project*(this: LPoint4f, onto: LVecBase4f): LPoint4f {.importcpp: "((LPoint4f const &)#).project((LVecBase4f const &)(#))".}

proc getXyz*(this: LPoint4d): LPoint3d {.importcpp: "((LPoint4d const &)#).get_xyz()".}

proc getXy*(this: LPoint4d): LPoint2d {.importcpp: "((LPoint4d const &)#).get_xy()".}

proc `-`*(this: LPoint4d): LPoint4d {.importcpp: "((LPoint4d const &)#).operator -()".}

proc `+`*(this: LPoint4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LPoint4d const &)#).operator +((LVecBase4d const &)(#))".}

proc `+`*(this: LPoint4d, other: LVector4d): LPoint4d {.importcpp: "((LPoint4d const &)#).operator +((LVector4d const &)(#))".}

proc `-`*(this: LPoint4d, other: LPoint4d): LVector4d {.importcpp: "((LPoint4d const &)#).operator -((LPoint4d const &)(#))".}

proc `-`*(this: LPoint4d, other: LVecBase4d): LVecBase4d {.importcpp: "((LPoint4d const &)#).operator -((LVecBase4d const &)(#))".}

proc `-`*(this: LPoint4d, other: LVector4d): LPoint4d {.importcpp: "((LPoint4d const &)#).operator -((LVector4d const &)(#))".}

proc `*`*(this: LPoint4d, scalar: float64): LPoint4d {.importcpp: "((LPoint4d const &)#).operator *(#)".}

proc `/`*(this: LPoint4d, scalar: float64): LPoint4d {.importcpp: "((LPoint4d const &)#).operator /(#)".}

proc normalized*(this: LPoint4d): LPoint4d {.importcpp: "((LPoint4d const &)#).normalized()".}

proc project*(this: LPoint4d, onto: LVecBase4d): LPoint4d {.importcpp: "((LPoint4d const &)#).project((LVecBase4d const &)(#))".}

proc getXyz*(this: LPoint4i): LPoint3i {.importcpp: "((LPoint4i const &)#).get_xyz()".}

proc getXy*(this: LPoint4i): LPoint2i {.importcpp: "((LPoint4i const &)#).get_xy()".}

proc `-`*(this: LPoint4i): LPoint4i {.importcpp: "((LPoint4i const &)#).operator -()".}

proc `+`*(this: LPoint4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LPoint4i const &)#).operator +((LVecBase4i const &)(#))".}

proc `+`*(this: LPoint4i, other: LVector4i): LPoint4i {.importcpp: "((LPoint4i const &)#).operator +((LVector4i const &)(#))".}

proc `-`*(this: LPoint4i, other: LPoint4i): LVector4i {.importcpp: "((LPoint4i const &)#).operator -((LPoint4i const &)(#))".}

proc `-`*(this: LPoint4i, other: LVecBase4i): LVecBase4i {.importcpp: "((LPoint4i const &)#).operator -((LVecBase4i const &)(#))".}

proc `-`*(this: LPoint4i, other: LVector4i): LPoint4i {.importcpp: "((LPoint4i const &)#).operator -((LVector4i const &)(#))".}

proc `*`*(this: LPoint4i, scalar: int): LPoint4i {.importcpp: "((LPoint4i const &)#).operator *(#)".}

proc `/`*(this: LPoint4i, scalar: int): LPoint4i {.importcpp: "((LPoint4i const &)#).operator /(#)".}

proc fill*(this: var LMatrix3f | var LMatrix4f, fillValue: float32) {.importcpp: "#.fill(#)".}

proc set*(this: var LMatrix3f, e00: float32, e01: float32, e02: float32, e10: float32, e11: float32, e12: float32, e20: float32, e21: float32, e22: float32) {.importcpp: "#.set(#, #, #, #, #, #, #, #, #)".}

proc setRow*(this: var LMatrix3f, row: int, v: LVecBase2f) {.importcpp: "#.set_row(#, (LVecBase2f const &)(#))".}

proc setRow*(this: var LMatrix3f | var LMatrix4f, row: int, v: LVecBase3f) {.importcpp: "#.set_row(#, (LVecBase3f const &)(#))".}

proc setCol*(this: var LMatrix3f, col: int, v: LVecBase2f) {.importcpp: "#.set_col(#, (LVecBase2f const &)(#))".}

proc setCol*(this: var LMatrix3f | var LMatrix4f, col: int, v: LVecBase3f) {.importcpp: "#.set_col(#, (LVecBase3f const &)(#))".}

proc getRow*(this: LMatrix3f, resultVec: LVecBase3f, row: int) {.importcpp: "#.get_row((LVecBase3f &)(#), #)".}

proc getRow*(this: LMatrix3f, row: int): LVecBase3f {.importcpp: "#.get_row(#)".}

proc getCol*(this: LMatrix3f, col: int): LVecBase3f {.importcpp: "#.get_col(#)".}

proc getRow2*(this: LMatrix3f, row: int): LVecBase2f {.importcpp: "#.get_row2(#)".}

proc getCol2*(this: LMatrix3f, col: int): LVecBase2f {.importcpp: "#.get_col2(#)".}

proc isNan*(this: LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f): bool {.importcpp: "#.is_nan()".}

proc isIdentity*(this: LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LQuaterniond | LQuaternionf): bool {.importcpp: "#.is_identity()".}

proc getCell*(this: LMatrix3f | LMatrix4f, row: int, col: int): float32 {.importcpp: "#.get_cell(#, #)".}

proc setCell*(this: var LMatrix3f | var LMatrix4f, row: int, col: int, value: float32) {.importcpp: "#.set_cell(#, #, #)".}

proc getData*(this: LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | UnalignedLMatrix4d | UnalignedLMatrix4f) {.importcpp: "#.get_data()".}

proc `<`*(this: LMatrix3f, other: LMatrix3f): bool {.importcpp: "#.operator <(#)".}

proc `==`*(this: LMatrix3f, other: LMatrix3f): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: LMatrix3f, other: LMatrix3f): bool {.importcpp: "#.operator !=(#)".}

proc compareTo*(this: LMatrix3f, other: LMatrix3f): int {.importcpp: "#.compare_to(#)".}

proc compareTo*(this: LMatrix3f, other: LMatrix3f, threshold: float32): int {.importcpp: "#.compare_to(#, #)".}

proc getHash*(this: LMatrix3f | LMatrix4f, threshold: float32): int {.importcpp: "#.get_hash(#)".}

proc addHash*(this: LMatrix3f | LMatrix4f, hash: int, threshold: float32): int {.importcpp: "#.add_hash(#, #)".}

proc xform*(this: LMatrix3f | LQuaternionf, v: LVecBase3f): LVecBase3f {.importcpp: "#.xform((LVecBase3f const &)(#))".}

proc xformPoint*(this: LMatrix3f, v: LVecBase2f): LVecBase2f {.importcpp: "#.xform_point((LVecBase2f const &)(#))".}

proc xformVec*(this: LMatrix3f, v: LVecBase2f): LVecBase2f {.importcpp: "#.xform_vec((LVecBase2f const &)(#))".}

proc xformVec*(this: LMatrix3f | LMatrix4f, v: LVecBase3f): LVecBase3f {.importcpp: "#.xform_vec((LVecBase3f const &)(#))".}

proc xformVecGeneral*(this: LMatrix3f | LMatrix4f, v: LVecBase3f): LVecBase3f {.importcpp: "#.xform_vec_general((LVecBase3f const &)(#))".}

proc xformInPlace*(this: LMatrix3f, v: LVecBase3f) {.importcpp: "#.xform_in_place((LVecBase3f &)(#))".}

proc xformPointInPlace*(this: LMatrix3f, v: LVecBase2f) {.importcpp: "#.xform_point_in_place((LVecBase2f &)(#))".}

proc xformVecInPlace*(this: LMatrix3f, v: LVecBase2f) {.importcpp: "#.xform_vec_in_place((LVecBase2f &)(#))".}

proc xformVecInPlace*(this: LMatrix3f | LMatrix4f, v: LVecBase3f) {.importcpp: "#.xform_vec_in_place((LVecBase3f &)(#))".}

proc xformVecGeneralInPlace*(this: LMatrix3f | LMatrix4f, v: LVecBase3f) {.importcpp: "#.xform_vec_general_in_place((LVecBase3f &)(#))".}

proc multiply*(this: var LMatrix3f, other1: LMatrix3f, other2: LMatrix3f) {.importcpp: "#.multiply(#, #)".}

proc `*`*(this: LMatrix3f, other: LMatrix3f): LMatrix3f {.importcpp: "#.operator *(#)".}

proc `*`*(this: LMatrix3f, scalar: float32): LMatrix3f {.importcpp: "#.operator *(#)".}

proc `/`*(this: LMatrix3f, scalar: float32): LMatrix3f {.importcpp: "#.operator /(#)".}

proc `+=`*(this: var LMatrix3f, other: LMatrix3f) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var LMatrix3f, other: LMatrix3f) {.importcpp: "#.operator -=(#)".}

proc `*=`*(this: var LMatrix3f, other: LMatrix3f) {.importcpp: "#.operator *=(#)".}

proc `*=`*(this: var LMatrix3f | var LMatrix4f, scalar: float32) {.importcpp: "#.operator *=(#)".}

proc `/=`*(this: var LMatrix3f | var LMatrix4f, scalar: float32) {.importcpp: "#.operator /=(#)".}

proc componentwiseMult*(this: var LMatrix3f, other: LMatrix3f) {.importcpp: "#.componentwise_mult(#)".}

proc determinant*(this: LMatrix3f): float32 {.importcpp: "#.determinant()".}

proc transposeFrom*(this: var LMatrix3f, other: LMatrix3f) {.importcpp: "#.transpose_from(#)".}

proc transposeInPlace*(this: var LMatrix3d | var LMatrix3f | var LMatrix4d | var LMatrix4f) {.importcpp: "#.transpose_in_place()".}

proc invertFrom*(this: var LMatrix3f, other: LMatrix3f): bool {.importcpp: "#.invert_from(#)".}

proc invertInPlace*(this: LQuaterniond | LQuaternionf | var LMatrix3d | var LMatrix3f | var LMatrix4d | var LMatrix4f): bool {.importcpp: "#.invert_in_place()".}

proc invertTransposeFrom*(this: var LMatrix3f, other: LMatrix3f): bool {.importcpp: "#.invert_transpose_from(#)".}

proc invertTransposeFrom*(this: var LMatrix3f, other: LMatrix4f): bool {.importcpp: "#.invert_transpose_from(#)".}

proc setTranslateMat*(this: var LMatrix3f, trans: LVecBase2f) {.importcpp: "#.set_translate_mat((LVecBase2f const &)(#))".}

proc setRotateMat*(this: var LMatrix3f, angle: float32) {.importcpp: "#.set_rotate_mat(#)".}

proc setRotateMat*(this: var LMatrix3f | var LMatrix4f, angle: float32, axis: LVecBase3f, cs: CoordinateSystem) {.importcpp: "#.set_rotate_mat(#, (LVecBase3f const &)(#), #)".}

proc setRotateMat*(this: var LMatrix3f | var LMatrix4f, angle: float32, axis: LVecBase3f) {.importcpp: "#.set_rotate_mat(#, (LVecBase3f const &)(#))".}

proc setScaleMat*(this: var LMatrix3f, scale: LVecBase2f) {.importcpp: "#.set_scale_mat((LVecBase2f const &)(#))".}

proc setScaleMat*(this: var LMatrix3f | var LMatrix4f, scale: LVecBase3f) {.importcpp: "#.set_scale_mat((LVecBase3f const &)(#))".}

proc setRotateMatNormaxis*(this: var LMatrix3f | var LMatrix4f, angle: float32, axis: LVecBase3f, cs: CoordinateSystem) {.importcpp: "#.set_rotate_mat_normaxis(#, (LVecBase3f const &)(#), #)".}

proc setRotateMatNormaxis*(this: var LMatrix3f | var LMatrix4f, angle: float32, axis: LVecBase3f) {.importcpp: "#.set_rotate_mat_normaxis(#, (LVecBase3f const &)(#))".}

proc setShearMat*(this: var LMatrix3f | var LMatrix4f, shear: LVecBase3f, cs: CoordinateSystem) {.importcpp: "#.set_shear_mat((LVecBase3f const &)(#), #)".}

proc setShearMat*(this: var LMatrix3f | var LMatrix4f, shear: LVecBase3f) {.importcpp: "#.set_shear_mat((LVecBase3f const &)(#))".}

proc setScaleShearMat*(this: var LMatrix3f | var LMatrix4f, scale: LVecBase3f, shear: LVecBase3f, cs: CoordinateSystem) {.importcpp: "#.set_scale_shear_mat((LVecBase3f const &)(#), (LVecBase3f const &)(#), #)".}

proc setScaleShearMat*(this: var LMatrix3f | var LMatrix4f, scale: LVecBase3f, shear: LVecBase3f) {.importcpp: "#.set_scale_shear_mat((LVecBase3f const &)(#), (LVecBase3f const &)(#))".}

proc almostEqual*(this: LMatrix3f, other: LMatrix3f): bool {.importcpp: "#.almost_equal(#)".}

proc almostEqual*(this: LMatrix3f, other: LMatrix3f, threshold: float32): bool {.importcpp: "#.almost_equal(#, #)".}

proc writeDatagramFixed*(this: LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LParabolad | LParabolaf, destination: Datagram) {.importcpp: "#.write_datagram_fixed(#)".}

proc readDatagramFixed*(this: var LMatrix3d | var LMatrix3f | var LMatrix4d | var LMatrix4f, scan: DatagramIterator) {.importcpp: "#.read_datagram_fixed(#)".}

proc set*(this: UnalignedLMatrix4f | var LMatrix4f, e00: float32, e01: float32, e02: float32, e03: float32, e10: float32, e11: float32, e12: float32, e13: float32, e20: float32, e21: float32, e22: float32, e23: float32, e30: float32, e31: float32, e32: float32, e33: float32) {.importcpp: "#.set(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc setUpper3*(this: var LMatrix4f, upper3: LMatrix3f) {.importcpp: "#.set_upper_3(#)".}

proc getUpper3*(this: LMatrix4f): LMatrix3f {.importcpp: "#.get_upper_3()".}

proc setRow*(this: var LMatrix4f, row: int, v: LVecBase4f) {.importcpp: "#.set_row(#, (LVecBase4f const &)(#))".}

proc setCol*(this: var LMatrix4f, col: int, v: LVecBase4f) {.importcpp: "#.set_col(#, (LVecBase4f const &)(#))".}

proc getRow*(this: LMatrix4f, resultVec: LVecBase4f, row: int) {.importcpp: "#.get_row((LVecBase4f &)(#), #)".}

proc getRow*(this: LMatrix4f, row: int): LVecBase4f {.importcpp: "#.get_row(#)".}

proc getCol*(this: LMatrix4f, col: int): LVecBase4f {.importcpp: "#.get_col(#)".}

proc getRow3*(this: LMatrix4f, resultVec: LVecBase3f, row: int) {.importcpp: "#.get_row3((LVecBase3f &)(#), #)".}

proc getRow3*(this: LMatrix4f, row: int): LVecBase3f {.importcpp: "#.get_row3(#)".}

proc getCol3*(this: LMatrix4f, col: int): LVecBase3f {.importcpp: "#.get_col3(#)".}

proc `<`*(this: LMatrix4f, other: LMatrix4f): bool {.importcpp: "#.operator <(#)".}

proc `==`*(this: LMatrix4f, other: LMatrix4f): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: LMatrix4f, other: LMatrix4f): bool {.importcpp: "#.operator !=(#)".}

proc compareTo*(this: LMatrix4f, other: LMatrix4f): int {.importcpp: "#.compare_to(#)".}

proc compareTo*(this: LMatrix4f, other: LMatrix4f, threshold: float32): int {.importcpp: "#.compare_to(#, #)".}

proc xform*(this: LMatrix4f | LQuaternionf, v: LVecBase4f): LVecBase4f {.importcpp: "#.xform((LVecBase4f const &)(#))".}

proc xformPoint*(this: LMatrix4f, v: LVecBase3f): LVecBase3f {.importcpp: "#.xform_point((LVecBase3f const &)(#))".}

proc xformPointGeneral*(this: LMatrix4f, v: LVecBase3f): LVecBase3f {.importcpp: "#.xform_point_general((LVecBase3f const &)(#))".}

proc xformInPlace*(this: LMatrix4f, v: LVecBase4f) {.importcpp: "#.xform_in_place((LVecBase4f &)(#))".}

proc xformPointInPlace*(this: LMatrix4f, v: LVecBase3f) {.importcpp: "#.xform_point_in_place((LVecBase3f &)(#))".}

proc xformPointGeneralInPlace*(this: LMatrix4f, v: LVecBase3f) {.importcpp: "#.xform_point_general_in_place((LVecBase3f &)(#))".}

proc multiply*(this: var LMatrix4f, other1: LMatrix4f, other2: LMatrix4f) {.importcpp: "#.multiply(#, #)".}

proc `*`*(this: LMatrix4f, other: LMatrix4f): LMatrix4f {.importcpp: "#.operator *(#)".}

proc `*`*(this: LMatrix4f, scalar: float32): LMatrix4f {.importcpp: "#.operator *(#)".}

proc `/`*(this: LMatrix4f, scalar: float32): LMatrix4f {.importcpp: "#.operator /(#)".}

proc `+=`*(this: var LMatrix4f, other: LMatrix4f) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var LMatrix4f, other: LMatrix4f) {.importcpp: "#.operator -=(#)".}

proc `*=`*(this: var LMatrix4f, other: LMatrix4f) {.importcpp: "#.operator *=(#)".}

proc componentwiseMult*(this: var LMatrix4f, other: LMatrix4f) {.importcpp: "#.componentwise_mult(#)".}

proc transposeFrom*(this: var LMatrix4f, other: LMatrix4f) {.importcpp: "#.transpose_from(#)".}

proc invertFrom*(this: var LMatrix4f, other: LMatrix4f): bool {.importcpp: "#.invert_from(#)".}

proc invertAffineFrom*(this: var LMatrix4f, other: LMatrix4f): bool {.importcpp: "#.invert_affine_from(#)".}

proc accumulate*(this: var LMatrix4f, other: LMatrix4f, weight: float32) {.importcpp: "#.accumulate(#, #)".}

proc setTranslateMat*(this: var LMatrix4f, trans: LVecBase3f) {.importcpp: "#.set_translate_mat((LVecBase3f const &)(#))".}

proc almostEqual*(this: LMatrix4f, other: LMatrix4f): bool {.importcpp: "#.almost_equal(#)".}

proc almostEqual*(this: LMatrix4f, other: LMatrix4f, threshold: float32): bool {.importcpp: "#.almost_equal(#, #)".}

proc `==`*(this: UnalignedLMatrix4f, other: UnalignedLMatrix4f): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: UnalignedLMatrix4f, other: UnalignedLMatrix4f): bool {.importcpp: "#.operator !=(#)".}

proc fill*(this: var LMatrix3d | var LMatrix4d, fillValue: float64) {.importcpp: "#.fill(#)".}

proc set*(this: var LMatrix3d, e00: float64, e01: float64, e02: float64, e10: float64, e11: float64, e12: float64, e20: float64, e21: float64, e22: float64) {.importcpp: "#.set(#, #, #, #, #, #, #, #, #)".}

proc setRow*(this: var LMatrix3d, row: int, v: LVecBase2d) {.importcpp: "#.set_row(#, (LVecBase2d const &)(#))".}

proc setRow*(this: var LMatrix3d | var LMatrix4d, row: int, v: LVecBase3d) {.importcpp: "#.set_row(#, (LVecBase3d const &)(#))".}

proc setCol*(this: var LMatrix3d, col: int, v: LVecBase2d) {.importcpp: "#.set_col(#, (LVecBase2d const &)(#))".}

proc setCol*(this: var LMatrix3d | var LMatrix4d, col: int, v: LVecBase3d) {.importcpp: "#.set_col(#, (LVecBase3d const &)(#))".}

proc getRow*(this: LMatrix3d, resultVec: LVecBase3d, row: int) {.importcpp: "#.get_row((LVecBase3d &)(#), #)".}

proc getRow*(this: LMatrix3d, row: int): LVecBase3d {.importcpp: "#.get_row(#)".}

proc getCol*(this: LMatrix3d, col: int): LVecBase3d {.importcpp: "#.get_col(#)".}

proc getRow2*(this: LMatrix3d, row: int): LVecBase2d {.importcpp: "#.get_row2(#)".}

proc getCol2*(this: LMatrix3d, col: int): LVecBase2d {.importcpp: "#.get_col2(#)".}

proc getCell*(this: LMatrix3d | LMatrix4d, row: int, col: int): float64 {.importcpp: "#.get_cell(#, #)".}

proc setCell*(this: var LMatrix3d | var LMatrix4d, row: int, col: int, value: float64) {.importcpp: "#.set_cell(#, #, #)".}

proc `<`*(this: LMatrix3d, other: LMatrix3d): bool {.importcpp: "#.operator <(#)".}

proc `==`*(this: LMatrix3d, other: LMatrix3d): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: LMatrix3d, other: LMatrix3d): bool {.importcpp: "#.operator !=(#)".}

proc compareTo*(this: LMatrix3d, other: LMatrix3d): int {.importcpp: "#.compare_to(#)".}

proc compareTo*(this: LMatrix3d, other: LMatrix3d, threshold: float64): int {.importcpp: "#.compare_to(#, #)".}

proc getHash*(this: LMatrix3d | LMatrix4d, threshold: float64): int {.importcpp: "#.get_hash(#)".}

proc addHash*(this: LMatrix3d | LMatrix4d, hash: int, threshold: float64): int {.importcpp: "#.add_hash(#, #)".}

proc xform*(this: LMatrix3d | LQuaterniond, v: LVecBase3d): LVecBase3d {.importcpp: "#.xform((LVecBase3d const &)(#))".}

proc xformPoint*(this: LMatrix3d, v: LVecBase2d): LVecBase2d {.importcpp: "#.xform_point((LVecBase2d const &)(#))".}

proc xformVec*(this: LMatrix3d, v: LVecBase2d): LVecBase2d {.importcpp: "#.xform_vec((LVecBase2d const &)(#))".}

proc xformVec*(this: LMatrix3d | LMatrix4d, v: LVecBase3d): LVecBase3d {.importcpp: "#.xform_vec((LVecBase3d const &)(#))".}

proc xformVecGeneral*(this: LMatrix3d | LMatrix4d, v: LVecBase3d): LVecBase3d {.importcpp: "#.xform_vec_general((LVecBase3d const &)(#))".}

proc xformInPlace*(this: LMatrix3d, v: LVecBase3d) {.importcpp: "#.xform_in_place((LVecBase3d &)(#))".}

proc xformPointInPlace*(this: LMatrix3d, v: LVecBase2d) {.importcpp: "#.xform_point_in_place((LVecBase2d &)(#))".}

proc xformVecInPlace*(this: LMatrix3d, v: LVecBase2d) {.importcpp: "#.xform_vec_in_place((LVecBase2d &)(#))".}

proc xformVecInPlace*(this: LMatrix3d | LMatrix4d, v: LVecBase3d) {.importcpp: "#.xform_vec_in_place((LVecBase3d &)(#))".}

proc xformVecGeneralInPlace*(this: LMatrix3d | LMatrix4d, v: LVecBase3d) {.importcpp: "#.xform_vec_general_in_place((LVecBase3d &)(#))".}

proc multiply*(this: var LMatrix3d, other1: LMatrix3d, other2: LMatrix3d) {.importcpp: "#.multiply(#, #)".}

proc `*`*(this: LMatrix3d, other: LMatrix3d): LMatrix3d {.importcpp: "#.operator *(#)".}

proc `*`*(this: LMatrix3d, scalar: float64): LMatrix3d {.importcpp: "#.operator *(#)".}

proc `/`*(this: LMatrix3d, scalar: float64): LMatrix3d {.importcpp: "#.operator /(#)".}

proc `+=`*(this: var LMatrix3d, other: LMatrix3d) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var LMatrix3d, other: LMatrix3d) {.importcpp: "#.operator -=(#)".}

proc `*=`*(this: var LMatrix3d, other: LMatrix3d) {.importcpp: "#.operator *=(#)".}

proc `*=`*(this: var LMatrix3d | var LMatrix4d, scalar: float64) {.importcpp: "#.operator *=(#)".}

proc `/=`*(this: var LMatrix3d | var LMatrix4d, scalar: float64) {.importcpp: "#.operator /=(#)".}

proc componentwiseMult*(this: var LMatrix3d, other: LMatrix3d) {.importcpp: "#.componentwise_mult(#)".}

proc determinant*(this: LMatrix3d): float64 {.importcpp: "#.determinant()".}

proc transposeFrom*(this: var LMatrix3d, other: LMatrix3d) {.importcpp: "#.transpose_from(#)".}

proc invertFrom*(this: var LMatrix3d, other: LMatrix3d): bool {.importcpp: "#.invert_from(#)".}

proc invertTransposeFrom*(this: var LMatrix3d, other: LMatrix3d): bool {.importcpp: "#.invert_transpose_from(#)".}

proc invertTransposeFrom*(this: var LMatrix3d, other: LMatrix4d): bool {.importcpp: "#.invert_transpose_from(#)".}

proc setTranslateMat*(this: var LMatrix3d, trans: LVecBase2d) {.importcpp: "#.set_translate_mat((LVecBase2d const &)(#))".}

proc setRotateMat*(this: var LMatrix3d, angle: float64) {.importcpp: "#.set_rotate_mat(#)".}

proc setRotateMat*(this: var LMatrix3d | var LMatrix4d, angle: float64, axis: LVecBase3d, cs: CoordinateSystem) {.importcpp: "#.set_rotate_mat(#, (LVecBase3d const &)(#), #)".}

proc setRotateMat*(this: var LMatrix3d | var LMatrix4d, angle: float64, axis: LVecBase3d) {.importcpp: "#.set_rotate_mat(#, (LVecBase3d const &)(#))".}

proc setScaleMat*(this: var LMatrix3d, scale: LVecBase2d) {.importcpp: "#.set_scale_mat((LVecBase2d const &)(#))".}

proc setScaleMat*(this: var LMatrix3d | var LMatrix4d, scale: LVecBase3d) {.importcpp: "#.set_scale_mat((LVecBase3d const &)(#))".}

proc setRotateMatNormaxis*(this: var LMatrix3d | var LMatrix4d, angle: float64, axis: LVecBase3d, cs: CoordinateSystem) {.importcpp: "#.set_rotate_mat_normaxis(#, (LVecBase3d const &)(#), #)".}

proc setRotateMatNormaxis*(this: var LMatrix3d | var LMatrix4d, angle: float64, axis: LVecBase3d) {.importcpp: "#.set_rotate_mat_normaxis(#, (LVecBase3d const &)(#))".}

proc setShearMat*(this: var LMatrix3d | var LMatrix4d, shear: LVecBase3d, cs: CoordinateSystem) {.importcpp: "#.set_shear_mat((LVecBase3d const &)(#), #)".}

proc setShearMat*(this: var LMatrix3d | var LMatrix4d, shear: LVecBase3d) {.importcpp: "#.set_shear_mat((LVecBase3d const &)(#))".}

proc setScaleShearMat*(this: var LMatrix3d | var LMatrix4d, scale: LVecBase3d, shear: LVecBase3d, cs: CoordinateSystem) {.importcpp: "#.set_scale_shear_mat((LVecBase3d const &)(#), (LVecBase3d const &)(#), #)".}

proc setScaleShearMat*(this: var LMatrix3d | var LMatrix4d, scale: LVecBase3d, shear: LVecBase3d) {.importcpp: "#.set_scale_shear_mat((LVecBase3d const &)(#), (LVecBase3d const &)(#))".}

proc almostEqual*(this: LMatrix3d, other: LMatrix3d): bool {.importcpp: "#.almost_equal(#)".}

proc almostEqual*(this: LMatrix3d, other: LMatrix3d, threshold: float64): bool {.importcpp: "#.almost_equal(#, #)".}

proc set*(this: UnalignedLMatrix4d | var LMatrix4d, e00: float64, e01: float64, e02: float64, e03: float64, e10: float64, e11: float64, e12: float64, e13: float64, e20: float64, e21: float64, e22: float64, e23: float64, e30: float64, e31: float64, e32: float64, e33: float64) {.importcpp: "#.set(#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc setUpper3*(this: var LMatrix4d, upper3: LMatrix3d) {.importcpp: "#.set_upper_3(#)".}

proc getUpper3*(this: LMatrix4d): LMatrix3d {.importcpp: "#.get_upper_3()".}

proc setRow*(this: var LMatrix4d, row: int, v: LVecBase4d) {.importcpp: "#.set_row(#, (LVecBase4d const &)(#))".}

proc setCol*(this: var LMatrix4d, col: int, v: LVecBase4d) {.importcpp: "#.set_col(#, (LVecBase4d const &)(#))".}

proc getRow*(this: LMatrix4d, resultVec: LVecBase4d, row: int) {.importcpp: "#.get_row((LVecBase4d &)(#), #)".}

proc getRow*(this: LMatrix4d, row: int): LVecBase4d {.importcpp: "#.get_row(#)".}

proc getCol*(this: LMatrix4d, col: int): LVecBase4d {.importcpp: "#.get_col(#)".}

proc getRow3*(this: LMatrix4d, resultVec: LVecBase3d, row: int) {.importcpp: "#.get_row3((LVecBase3d &)(#), #)".}

proc getRow3*(this: LMatrix4d, row: int): LVecBase3d {.importcpp: "#.get_row3(#)".}

proc getCol3*(this: LMatrix4d, col: int): LVecBase3d {.importcpp: "#.get_col3(#)".}

proc `<`*(this: LMatrix4d, other: LMatrix4d): bool {.importcpp: "#.operator <(#)".}

proc `==`*(this: LMatrix4d, other: LMatrix4d): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: LMatrix4d, other: LMatrix4d): bool {.importcpp: "#.operator !=(#)".}

proc compareTo*(this: LMatrix4d, other: LMatrix4d): int {.importcpp: "#.compare_to(#)".}

proc compareTo*(this: LMatrix4d, other: LMatrix4d, threshold: float64): int {.importcpp: "#.compare_to(#, #)".}

proc xform*(this: LMatrix4d | LQuaterniond, v: LVecBase4d): LVecBase4d {.importcpp: "#.xform((LVecBase4d const &)(#))".}

proc xformPoint*(this: LMatrix4d, v: LVecBase3d): LVecBase3d {.importcpp: "#.xform_point((LVecBase3d const &)(#))".}

proc xformPointGeneral*(this: LMatrix4d, v: LVecBase3d): LVecBase3d {.importcpp: "#.xform_point_general((LVecBase3d const &)(#))".}

proc xformInPlace*(this: LMatrix4d, v: LVecBase4d) {.importcpp: "#.xform_in_place((LVecBase4d &)(#))".}

proc xformPointInPlace*(this: LMatrix4d, v: LVecBase3d) {.importcpp: "#.xform_point_in_place((LVecBase3d &)(#))".}

proc xformPointGeneralInPlace*(this: LMatrix4d, v: LVecBase3d) {.importcpp: "#.xform_point_general_in_place((LVecBase3d &)(#))".}

proc multiply*(this: var LMatrix4d, other1: LMatrix4d, other2: LMatrix4d) {.importcpp: "#.multiply(#, #)".}

proc `*`*(this: LMatrix4d, other: LMatrix4d): LMatrix4d {.importcpp: "#.operator *(#)".}

proc `*`*(this: LMatrix4d, scalar: float64): LMatrix4d {.importcpp: "#.operator *(#)".}

proc `/`*(this: LMatrix4d, scalar: float64): LMatrix4d {.importcpp: "#.operator /(#)".}

proc `+=`*(this: var LMatrix4d, other: LMatrix4d) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var LMatrix4d, other: LMatrix4d) {.importcpp: "#.operator -=(#)".}

proc `*=`*(this: var LMatrix4d, other: LMatrix4d) {.importcpp: "#.operator *=(#)".}

proc componentwiseMult*(this: var LMatrix4d, other: LMatrix4d) {.importcpp: "#.componentwise_mult(#)".}

proc transposeFrom*(this: var LMatrix4d, other: LMatrix4d) {.importcpp: "#.transpose_from(#)".}

proc invertFrom*(this: var LMatrix4d, other: LMatrix4d): bool {.importcpp: "#.invert_from(#)".}

proc invertAffineFrom*(this: var LMatrix4d, other: LMatrix4d): bool {.importcpp: "#.invert_affine_from(#)".}

proc accumulate*(this: var LMatrix4d, other: LMatrix4d, weight: float64) {.importcpp: "#.accumulate(#, #)".}

proc setTranslateMat*(this: var LMatrix4d, trans: LVecBase3d) {.importcpp: "#.set_translate_mat((LVecBase3d const &)(#))".}

proc almostEqual*(this: LMatrix4d, other: LMatrix4d): bool {.importcpp: "#.almost_equal(#)".}

proc almostEqual*(this: LMatrix4d, other: LMatrix4d, threshold: float64): bool {.importcpp: "#.almost_equal(#, #)".}

proc `==`*(this: UnalignedLMatrix4d, other: UnalignedLMatrix4d): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: UnalignedLMatrix4d, other: UnalignedLMatrix4d): bool {.importcpp: "#.operator !=(#)".}

proc conjugate*(this: LQuaternionf): LQuaternionf {.importcpp: "#.conjugate()".}

proc multiply*(this: LQuaternionf, rhs: LQuaternionf): LQuaternionf {.importcpp: "#.multiply(#)".}

proc `-`*(this: LQuaternionf): LQuaternionf {.importcpp: "#.operator -()".}

proc `+`*(this: LQuaternionf, other: LQuaternionf): LQuaternionf {.importcpp: "#.operator +(#)".}

proc `-`*(this: LQuaternionf, other: LQuaternionf): LQuaternionf {.importcpp: "#.operator -(#)".}

proc angleRad*(this: LQuaternionf, other: LQuaternionf): float32 {.importcpp: "#.angle_rad(#)".}

proc angleDeg*(this: LQuaternionf, other: LQuaternionf): float32 {.importcpp: "#.angle_deg(#)".}

proc `*`*(this: LQuaternionf, param0: LMatrix3f): LMatrix3f {.importcpp: "#.operator *(#)".}

proc `*`*(this: LQuaternionf, param0: LMatrix4f): LMatrix4f {.importcpp: "#.operator *(#)".}

proc `/`*(this: LQuaternionf, scalar: float32): LQuaternionf {.importcpp: "#.operator /(#)".}

proc `*=`*(this: var LQuaternionf, param0: LQuaternionf) {.importcpp: "#.operator *=(#)".}

proc pow*(this: LQuaternionf, param0: float32): LQuaternionf {.importcpp: "#.__pow__(#)".}

proc almostEqual*(this: LQuaternionf, other: LQuaternionf): bool {.importcpp: "#.almost_equal(#)".}

proc almostEqual*(this: LQuaternionf, other: LQuaternionf, threshold: float32): bool {.importcpp: "#.almost_equal(#, #)".}

proc isSameDirection*(this: LQuaternionf, other: LQuaternionf): bool {.importcpp: "#.is_same_direction(#)".}

proc almostSameDirection*(this: LQuaternionf, other: LQuaternionf, threshold: float32): bool {.importcpp: "#.almost_same_direction(#, #)".}

proc output*(this: LQuaterniond | LQuaternionf, param0: iostream | ostream) {.importcpp: "#.output(#)".}

proc extractToMatrix*(this: LQuaternionf, m: LMatrix3f) {.importcpp: "#.extract_to_matrix(#)".}

proc extractToMatrix*(this: LQuaternionf, m: LMatrix4f) {.importcpp: "#.extract_to_matrix(#)".}

proc setFromMatrix*(this: LQuaternionf, m: LMatrix3f) {.importcpp: "#.set_from_matrix(#)".}

proc setFromMatrix*(this: LQuaternionf, m: LMatrix4f) {.importcpp: "#.set_from_matrix(#)".}

proc setHpr*(this: LQuaternionf, hpr: LVecBase3f, cs: CoordinateSystem) {.importcpp: "#.set_hpr((LVecBase3f const &)(#), #)".}

proc setHpr*(this: LQuaternionf, hpr: LVecBase3f) {.importcpp: "#.set_hpr((LVecBase3f const &)(#))".}

proc getHpr*(this: LQuaternionf, cs: CoordinateSystem): LVecBase3f {.importcpp: "#.get_hpr(#)".}

proc getHpr*(this: LQuaternionf): LVecBase3f {.importcpp: "#.get_hpr()".}

proc getAxis*(this: LQuaternionf): LVector3f {.importcpp: "#.get_axis()".}

proc getAxisNormalized*(this: LQuaternionf): LVector3f {.importcpp: "#.get_axis_normalized()".}

proc getAngleRad*(this: LQuaternionf): float32 {.importcpp: "#.get_angle_rad()".}

proc getAngle*(this: LQuaternionf): float32 {.importcpp: "#.get_angle()".}

proc setFromAxisAngleRad*(this: LQuaternionf, angleRad: float32, axis: LVector3f) {.importcpp: "#.set_from_axis_angle_rad(#, (LVector3f const &)(#))".}

proc setFromAxisAngle*(this: LQuaternionf, angleDeg: float32, axis: LVector3f) {.importcpp: "#.set_from_axis_angle(#, (LVector3f const &)(#))".}

proc getUp*(this: LQuaternionf, cs: CoordinateSystem): LVector3f {.importcpp: "#.get_up(#)".}

proc getUp*(this: LQuaternionf): LVector3f {.importcpp: "#.get_up()".}

proc getRight*(this: LQuaternionf, cs: CoordinateSystem): LVector3f {.importcpp: "#.get_right(#)".}

proc getRight*(this: LQuaternionf): LVector3f {.importcpp: "#.get_right()".}

proc getForward*(this: LQuaternionf, cs: CoordinateSystem): LVector3f {.importcpp: "#.get_forward(#)".}

proc getForward*(this: LQuaternionf): LVector3f {.importcpp: "#.get_forward()".}

proc getR*(this: LQuaternionf): float32 {.importcpp: "#.get_r()".}

proc getI*(this: LQuaternionf): float32 {.importcpp: "#.get_i()".}

proc getJ*(this: LQuaternionf): float32 {.importcpp: "#.get_j()".}

proc getK*(this: LQuaternionf): float32 {.importcpp: "#.get_k()".}

proc setR*(this: LQuaternionf, r: float32) {.importcpp: "#.set_r(#)".}

proc setI*(this: LQuaternionf, i: float32) {.importcpp: "#.set_i(#)".}

proc setJ*(this: LQuaternionf, j: float32) {.importcpp: "#.set_j(#)".}

proc setK*(this: LQuaternionf, k: float32) {.importcpp: "#.set_k(#)".}

proc normalize*(this: LPlaned | LPlanef | LQuaterniond | LQuaternionf): bool {.importcpp: "#.normalize()".}

proc conjugateFrom*(this: LQuaternionf, other: LQuaternionf): bool {.importcpp: "#.conjugate_from(#)".}

proc conjugateInPlace*(this: LQuaterniond | LQuaternionf): bool {.importcpp: "#.conjugate_in_place()".}

proc invertFrom*(this: LQuaternionf, other: LQuaternionf): bool {.importcpp: "#.invert_from(#)".}

proc isAlmostIdentity*(this: LQuaternionf, tolerance: float32): bool {.importcpp: "#.is_almost_identity(#)".}

proc conjugate*(this: LQuaterniond): LQuaterniond {.importcpp: "#.conjugate()".}

proc multiply*(this: LQuaterniond, rhs: LQuaterniond): LQuaterniond {.importcpp: "#.multiply(#)".}

proc `-`*(this: LQuaterniond): LQuaterniond {.importcpp: "#.operator -()".}

proc `+`*(this: LQuaterniond, other: LQuaterniond): LQuaterniond {.importcpp: "#.operator +(#)".}

proc `-`*(this: LQuaterniond, other: LQuaterniond): LQuaterniond {.importcpp: "#.operator -(#)".}

proc angleRad*(this: LQuaterniond, other: LQuaterniond): float64 {.importcpp: "#.angle_rad(#)".}

proc angleDeg*(this: LQuaterniond, other: LQuaterniond): float64 {.importcpp: "#.angle_deg(#)".}

proc `*`*(this: LQuaterniond, param0: LMatrix3d): LMatrix3d {.importcpp: "#.operator *(#)".}

proc `*`*(this: LQuaterniond, param0: LMatrix4d): LMatrix4d {.importcpp: "#.operator *(#)".}

proc `/`*(this: LQuaterniond, scalar: float64): LQuaterniond {.importcpp: "#.operator /(#)".}

proc `*=`*(this: var LQuaterniond, param0: LQuaterniond) {.importcpp: "#.operator *=(#)".}

proc pow*(this: LQuaterniond, param0: float64): LQuaterniond {.importcpp: "#.__pow__(#)".}

proc almostEqual*(this: LQuaterniond, other: LQuaterniond): bool {.importcpp: "#.almost_equal(#)".}

proc almostEqual*(this: LQuaterniond, other: LQuaterniond, threshold: float64): bool {.importcpp: "#.almost_equal(#, #)".}

proc isSameDirection*(this: LQuaterniond, other: LQuaterniond): bool {.importcpp: "#.is_same_direction(#)".}

proc almostSameDirection*(this: LQuaterniond, other: LQuaterniond, threshold: float64): bool {.importcpp: "#.almost_same_direction(#, #)".}

proc extractToMatrix*(this: LQuaterniond, m: LMatrix3d) {.importcpp: "#.extract_to_matrix(#)".}

proc extractToMatrix*(this: LQuaterniond, m: LMatrix4d) {.importcpp: "#.extract_to_matrix(#)".}

proc setFromMatrix*(this: LQuaterniond, m: LMatrix3d) {.importcpp: "#.set_from_matrix(#)".}

proc setFromMatrix*(this: LQuaterniond, m: LMatrix4d) {.importcpp: "#.set_from_matrix(#)".}

proc setHpr*(this: LQuaterniond, hpr: LVecBase3d, cs: CoordinateSystem) {.importcpp: "#.set_hpr((LVecBase3d const &)(#), #)".}

proc setHpr*(this: LQuaterniond, hpr: LVecBase3d) {.importcpp: "#.set_hpr((LVecBase3d const &)(#))".}

proc getHpr*(this: LQuaterniond, cs: CoordinateSystem): LVecBase3d {.importcpp: "#.get_hpr(#)".}

proc getHpr*(this: LQuaterniond): LVecBase3d {.importcpp: "#.get_hpr()".}

proc getAxis*(this: LQuaterniond): LVector3d {.importcpp: "#.get_axis()".}

proc getAxisNormalized*(this: LQuaterniond): LVector3d {.importcpp: "#.get_axis_normalized()".}

proc getAngleRad*(this: LQuaterniond): float64 {.importcpp: "#.get_angle_rad()".}

proc getAngle*(this: LQuaterniond): float64 {.importcpp: "#.get_angle()".}

proc setFromAxisAngleRad*(this: LQuaterniond, angleRad: float64, axis: LVector3d) {.importcpp: "#.set_from_axis_angle_rad(#, (LVector3d const &)(#))".}

proc setFromAxisAngle*(this: LQuaterniond, angleDeg: float64, axis: LVector3d) {.importcpp: "#.set_from_axis_angle(#, (LVector3d const &)(#))".}

proc getUp*(this: LQuaterniond, cs: CoordinateSystem): LVector3d {.importcpp: "#.get_up(#)".}

proc getUp*(this: LQuaterniond): LVector3d {.importcpp: "#.get_up()".}

proc getRight*(this: LQuaterniond, cs: CoordinateSystem): LVector3d {.importcpp: "#.get_right(#)".}

proc getRight*(this: LQuaterniond): LVector3d {.importcpp: "#.get_right()".}

proc getForward*(this: LQuaterniond, cs: CoordinateSystem): LVector3d {.importcpp: "#.get_forward(#)".}

proc getForward*(this: LQuaterniond): LVector3d {.importcpp: "#.get_forward()".}

proc getR*(this: LQuaterniond): float64 {.importcpp: "#.get_r()".}

proc getI*(this: LQuaterniond): float64 {.importcpp: "#.get_i()".}

proc getJ*(this: LQuaterniond): float64 {.importcpp: "#.get_j()".}

proc getK*(this: LQuaterniond): float64 {.importcpp: "#.get_k()".}

proc setR*(this: LQuaterniond, r: float64) {.importcpp: "#.set_r(#)".}

proc setI*(this: LQuaterniond, i: float64) {.importcpp: "#.set_i(#)".}

proc setJ*(this: LQuaterniond, j: float64) {.importcpp: "#.set_j(#)".}

proc setK*(this: LQuaterniond, k: float64) {.importcpp: "#.set_k(#)".}

proc conjugateFrom*(this: LQuaterniond, other: LQuaterniond): bool {.importcpp: "#.conjugate_from(#)".}

proc invertFrom*(this: LQuaterniond, other: LQuaterniond): bool {.importcpp: "#.invert_from(#)".}

proc isAlmostIdentity*(this: LQuaterniond, tolerance: float64): bool {.importcpp: "#.is_almost_identity(#)".}

proc `*`*(this: LRotationf, other: LQuaternionf): LQuaternionf {.importcpp: "#.operator *(#)".}

proc `*`*(this: LRotationf, other: LRotationf): LRotationf {.importcpp: "#.operator *(#)".}

proc `*`*(this: LRotationf, scalar: float32): LRotationf {.importcpp: "#.operator *(#)".}

proc `/`*(this: LRotationf, scalar: float32): LRotationf {.importcpp: "#.operator /(#)".}

proc `*`*(this: LRotationd, other: LQuaterniond): LQuaterniond {.importcpp: "#.operator *(#)".}

proc `*`*(this: LRotationd, other: LRotationd): LRotationd {.importcpp: "#.operator *(#)".}

proc `*`*(this: LRotationd, scalar: float64): LRotationd {.importcpp: "#.operator *(#)".}

proc `/`*(this: LRotationd, scalar: float64): LRotationd {.importcpp: "#.operator /(#)".}

proc `*`*(this: LOrientationf, other: LQuaternionf): LOrientationf {.importcpp: "#.operator *(#)".}

proc `*`*(this: LOrientationf, other: LRotationf): LOrientationf {.importcpp: "#.operator *(#)".}

proc `*`*(this: LOrientationd, other: LQuaterniond): LOrientationd {.importcpp: "#.operator *(#)".}

proc `*`*(this: LOrientationd, other: LRotationd): LOrientationd {.importcpp: "#.operator *(#)".}

proc `typecast`*(this: ConfigVariableColor): LColor {.importcpp: "#.operator typecast()".}

proc `[]`*(this: ConfigVariableColor, n: int): float {.importcpp: "#.operator [](#)".}

proc setValue*(this: ConfigVariableColor, value: LColor) {.importcpp: "#.set_value(#)".}

proc getValue*(this: ConfigVariableColor): LColor {.importcpp: "#.get_value()".}

proc getDefaultValue*(this: ConfigVariableColor): LColor {.importcpp: "#.get_default_value()".}

proc makeCopy*(this: BoundingVolume): BoundingVolume {.importcpp: "#->make_copy()".}

proc isInfinite*(this: BoundingVolume): bool {.importcpp: "#->is_infinite()".}

proc setInfinite*(this: BoundingVolume) {.importcpp: "#->set_infinite()".}

proc extendBy*(this: BoundingVolume, vol: BoundingVolume): bool {.importcpp: "#->extend_by(#)".}

proc contains*(this: BoundingVolume, vol: BoundingVolume): int {.importcpp: "#->contains(#)".}

proc extendBy*(this: GeometricBoundingVolume, vol: GeometricBoundingVolume): bool {.importcpp: "#->extend_by(#)".}

proc extendBy*(this: GeometricBoundingVolume, point: LPoint3): bool {.importcpp: "#->extend_by((LPoint3 const &)(#))".}

proc contains*(this: GeometricBoundingVolume, vol: GeometricBoundingVolume): int {.importcpp: "#->contains(#)".}

proc contains*(this: GeometricBoundingVolume, point: LPoint3): int {.importcpp: "#->contains((LPoint3 const &)(#))".}

proc contains*(this: GeometricBoundingVolume, a: LPoint3, b: LPoint3): int {.importcpp: "#->contains((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc getApproxCenter*(this: GeometricBoundingVolume): LPoint3 {.importcpp: "#->get_approx_center()".}

proc xform*(this: LParabolaf | LPlanef, mat: LMatrix4f) {.importcpp: "#.xform(#)".}

proc getA*(this: LParabolaf): LVecBase3f {.importcpp: "#.get_a()".}

proc getB*(this: LParabolaf): LVecBase3f {.importcpp: "#.get_b()".}

proc getC*(this: LParabolaf): LVecBase3f {.importcpp: "#.get_c()".}

proc calcPoint*(this: LParabolaf, t: float32): LPoint3f {.importcpp: "#.calc_point(#)".}

proc readDatagramFixed*(this: LParabolad | LParabolaf, source: DatagramIterator) {.importcpp: "#.read_datagram_fixed(#)".}

proc xform*(this: LParabolad | LPlaned, mat: LMatrix4d) {.importcpp: "#.xform(#)".}

proc getA*(this: LParabolad): LVecBase3d {.importcpp: "#.get_a()".}

proc getB*(this: LParabolad): LVecBase3d {.importcpp: "#.get_b()".}

proc getC*(this: LParabolad): LVecBase3d {.importcpp: "#.get_c()".}

proc calcPoint*(this: LParabolad, t: float64): LPoint3d {.importcpp: "#.calc_point(#)".}

proc `*`*(this: LPlanef, mat: LMatrix3f): LPlanef {.importcpp: "#.operator *(#)".}

proc `*`*(this: LPlanef, mat: LMatrix4f): LPlanef {.importcpp: "#.operator *(#)".}

proc `*=`*(this: var LPlanef, mat: LMatrix4f) {.importcpp: "#.operator *=(#)".}

proc `-`*(this: LPlanef): LPlanef {.importcpp: "#.operator -()".}

proc getReflectionMat*(this: LPlanef): LMatrix4f {.importcpp: "#.get_reflection_mat()".}

proc getNormal*(this: LPlanef): LVector3f {.importcpp: "#.get_normal()".}

proc getPoint*(this: LPlanef): LPoint3f {.importcpp: "#.get_point()".}

proc distToPlane*(this: LPlanef, point: LPoint3f): float32 {.importcpp: "#.dist_to_plane((LPoint3f const &)(#))".}

proc normalized*(this: LPlanef): LPlanef {.importcpp: "#.normalized()".}

proc project*(this: LPlanef, point: LPoint3f): LPoint3f {.importcpp: "#.project((LPoint3f const &)(#))".}

proc flip*(this: LPlaned | LPlanef) {.importcpp: "#.flip()".}

proc intersectsLine*(this: LPlanef, intersectionPoint: LPoint3f, p1: LPoint3f, p2: LPoint3f): bool {.importcpp: "#.intersects_line((LPoint3f &)(#), (LPoint3f const &)(#), (LPoint3f const &)(#))".}

proc intersectsPlane*(this: LPlanef, `from`: LPoint3f, delta: LVector3f, other: LPlanef): bool {.importcpp: "#.intersects_plane((LPoint3f &)(#), (LVector3f &)(#), #)".}

proc `*`*(this: LPlaned, mat: LMatrix3d): LPlaned {.importcpp: "#.operator *(#)".}

proc `*`*(this: LPlaned, mat: LMatrix4d): LPlaned {.importcpp: "#.operator *(#)".}

proc `*=`*(this: var LPlaned, mat: LMatrix4d) {.importcpp: "#.operator *=(#)".}

proc `-`*(this: LPlaned): LPlaned {.importcpp: "#.operator -()".}

proc getReflectionMat*(this: LPlaned): LMatrix4d {.importcpp: "#.get_reflection_mat()".}

proc getNormal*(this: LPlaned): LVector3d {.importcpp: "#.get_normal()".}

proc getPoint*(this: LPlaned): LPoint3d {.importcpp: "#.get_point()".}

proc distToPlane*(this: LPlaned, point: LPoint3d): float64 {.importcpp: "#.dist_to_plane((LPoint3d const &)(#))".}

proc normalized*(this: LPlaned): LPlaned {.importcpp: "#.normalized()".}

proc project*(this: LPlaned, point: LPoint3d): LPoint3d {.importcpp: "#.project((LPoint3d const &)(#))".}

proc intersectsLine*(this: LPlaned, intersectionPoint: LPoint3d, p1: LPoint3d, p2: LPoint3d): bool {.importcpp: "#.intersects_line((LPoint3d &)(#), (LPoint3d const &)(#), (LPoint3d const &)(#))".}

proc intersectsPlane*(this: LPlaned, `from`: LPoint3d, delta: LVector3d, other: LPlaned): bool {.importcpp: "#.intersects_plane((LPoint3d &)(#), (LVector3d &)(#), #)".}

proc setMinMax*(this: BoundingBox, min: LPoint3, max: LPoint3) {.importcpp: "#->set_min_max((LPoint3 const &)(#), (LPoint3 const &)(#))".}

proc makeOrtho2D*(this: LFrustumd | LFrustumf) {.importcpp: "#.make_ortho_2D()".}

proc makeOrtho2D*(this: LFrustumf, l: float32, r: float32, t: float32, b: float32) {.importcpp: "#.make_ortho_2D(#, #, #, #)".}

proc makeOrtho*(this: LFrustumf, fnear: float32, ffar: float32) {.importcpp: "#.make_ortho(#, #)".}

proc makeOrtho*(this: LFrustumf, fnear: float32, ffar: float32, l: float32, r: float32, t: float32, b: float32) {.importcpp: "#.make_ortho(#, #, #, #, #, #)".}

proc makePerspectiveHfov*(this: LFrustumf, xfov: float32, aspect: float32, fnear: float32, ffar: float32) {.importcpp: "#.make_perspective_hfov(#, #, #, #)".}

proc makePerspectiveVfov*(this: LFrustumf, yfov: float32, aspect: float32, fnear: float32, ffar: float32) {.importcpp: "#.make_perspective_vfov(#, #, #, #)".}

proc makePerspective*(this: LFrustumf, xfov: float32, yfov: float32, fnear: float32, ffar: float32) {.importcpp: "#.make_perspective(#, #, #, #)".}

proc makeOrtho2D*(this: LFrustumd, l: float64, r: float64, t: float64, b: float64) {.importcpp: "#.make_ortho_2D(#, #, #, #)".}

proc makeOrtho*(this: LFrustumd, fnear: float64, ffar: float64) {.importcpp: "#.make_ortho(#, #)".}

proc makeOrtho*(this: LFrustumd, fnear: float64, ffar: float64, l: float64, r: float64, t: float64, b: float64) {.importcpp: "#.make_ortho(#, #, #, #, #, #)".}

proc makePerspectiveHfov*(this: LFrustumd, xfov: float64, aspect: float64, fnear: float64, ffar: float64) {.importcpp: "#.make_perspective_hfov(#, #, #, #)".}

proc makePerspectiveVfov*(this: LFrustumd, yfov: float64, aspect: float64, fnear: float64, ffar: float64) {.importcpp: "#.make_perspective_vfov(#, #, #, #)".}

proc makePerspective*(this: LFrustumd, xfov: float64, yfov: float64, fnear: float64, ffar: float64) {.importcpp: "#.make_perspective(#, #, #, #)".}

proc getComponent*(this: IntersectionBoundingVolume | UnionBoundingVolume, n: int): GeometricBoundingVolume {.importcpp: "deconstify(#->get_component(#))", header: deconstifyCode.}

proc clearComponents*(this: IntersectionBoundingVolume | UnionBoundingVolume) {.importcpp: "#->clear_components()".}

proc addComponent*(this: IntersectionBoundingVolume | UnionBoundingVolume, component: GeometricBoundingVolume) {.importcpp: "#->add_component(#)".}

proc getUint31*(this: Mersenne): int {.importcpp: "#.get_uint31()".}

proc filterIntersection*(this: UnionBoundingVolume, volume: BoundingVolume) {.importcpp: "#->filter_intersection(#)".}

proc randomInt*(this: Randomizer, range: int): int {.importcpp: "#.random_int(#)".}

proc randomReal*(this: Randomizer, range: float64): float64 {.importcpp: "#.random_real(#)".}

proc randomRealUnit*(this: Randomizer): float64 {.importcpp: "#.random_real_unit()".}

proc getSeed*(this: PerlinNoise | Randomizer): int {.importcpp: "#.get_seed()".}

proc setScale*(this: PerlinNoise2, scale: LVecBase2d) {.importcpp: "#.set_scale((LVecBase2d const &)(#))".}

proc setScale*(this: PerlinNoise2, scale: LVecBase2f) {.importcpp: "#.set_scale((LVecBase2f const &)(#))".}

proc setScale*(this: PerlinNoise2 | PerlinNoise3, scale: float64) {.importcpp: "#.set_scale(#)".}

proc setScale*(this: PerlinNoise2, sx: float64, sy: float64) {.importcpp: "#.set_scale(#, #)".}

proc noise*(this: PerlinNoise2 | StackedPerlinNoise2, value: LVecBase2d): float64 {.importcpp: "#.noise((LVecBase2d const &)(#))".}

proc noise*(this: PerlinNoise2 | StackedPerlinNoise2, value: LVecBase2f): float32 {.importcpp: "#.noise((LVecBase2f const &)(#))".}

proc noise*(this: PerlinNoise2 | StackedPerlinNoise2, x: float64, y: float64): float64 {.importcpp: "#.noise(#, #)".}

proc setScale*(this: PerlinNoise3, scale: LVecBase3d) {.importcpp: "#.set_scale((LVecBase3d const &)(#))".}

proc setScale*(this: PerlinNoise3, scale: LVecBase3f) {.importcpp: "#.set_scale((LVecBase3f const &)(#))".}

proc setScale*(this: PerlinNoise3, sx: float64, sy: float64, sz: float64) {.importcpp: "#.set_scale(#, #, #)".}

proc noise*(this: PerlinNoise3 | StackedPerlinNoise3, value: LVecBase3d): float64 {.importcpp: "#.noise((LVecBase3d const &)(#))".}

proc noise*(this: PerlinNoise3 | StackedPerlinNoise3, value: LVecBase3f): float32 {.importcpp: "#.noise((LVecBase3f const &)(#))".}

proc noise*(this: PerlinNoise3 | StackedPerlinNoise3, x: float64, y: float64, z: float64): float64 {.importcpp: "#.noise(#, #, #)".}

proc addLevel*(this: StackedPerlinNoise2, level: PerlinNoise2, amp: float64) {.importcpp: "#.add_level(#, #)".}

proc addLevel*(this: StackedPerlinNoise2, level: PerlinNoise2) {.importcpp: "#.add_level(#)".}

proc addLevel*(this: StackedPerlinNoise3, level: PerlinNoise3, amp: float64) {.importcpp: "#.add_level(#, #)".}

proc addLevel*(this: StackedPerlinNoise3, level: PerlinNoise3) {.importcpp: "#.add_level(#)".}

proc addVertex*(this: Triangulator, point: LPoint2d): int {.importcpp: "#.add_vertex((LPoint2d const &)(#))".}

proc addVertex*(this: Triangulator, x: float64, y: float64): int {.importcpp: "#.add_vertex(#, #)".}

proc getVertex*(this: Triangulator, n: int): LPoint2d {.importcpp: "#.get_vertex(#)".}

proc clearPolygon*(this: Triangulator) {.importcpp: "#.clear_polygon()".}

proc addPolygonVertex*(this: Triangulator, index: int) {.importcpp: "#.add_polygon_vertex(#)".}

proc isLeftWinding*(this: Triangulator): bool {.importcpp: "#.is_left_winding()".}

proc beginHole*(this: Triangulator) {.importcpp: "#.begin_hole()".}

proc addHoleVertex*(this: Triangulator, index: int) {.importcpp: "#.add_hole_vertex(#)".}

proc triangulate*(this: Triangulator | Triangulator3) {.importcpp: "#.triangulate()".}

proc getNumTriangles*(this: Triangulator): int {.importcpp: "#.get_num_triangles()".}

proc getTriangleV0*(this: Triangulator, n: int): int {.importcpp: "#.get_triangle_v0(#)".}

proc getTriangleV1*(this: Triangulator, n: int): int {.importcpp: "#.get_triangle_v1(#)".}

proc getTriangleV2*(this: Triangulator, n: int): int {.importcpp: "#.get_triangle_v2(#)".}

proc addVertex*(this: Triangulator3, point: LPoint3d): int {.importcpp: "#.add_vertex((LPoint3d const &)(#))".}

proc addVertex*(this: Triangulator3, x: float64, y: float64, z: float64): int {.importcpp: "#.add_vertex(#, #, #)".}

proc getVertex*(this: Triangulator3, n: int): LPoint3d {.importcpp: "#.get_vertex(#)".}

proc getPlane*(this: Triangulator3): LPlaned {.importcpp: "#.get_plane()".}

proc getMaxT*(this: ParametricCurve | ParametricCurveCollection): float {.importcpp: "#->get_max_t()".}

proc setCurveType*(this: ParametricCurve, `type`: int) {.importcpp: "#->set_curve_type(#)".}

proc getCurveType*(this: ParametricCurve): int {.importcpp: "#->get_curve_type()".}

proc setNumDimensions*(this: ParametricCurve, num: int) {.importcpp: "#->set_num_dimensions(#)".}

proc getNumDimensions*(this: ParametricCurve): int {.importcpp: "#->get_num_dimensions()".}

proc calcLength*(this: ParametricCurve): float {.importcpp: "#->calc_length()".}

proc calcLength*(this: ParametricCurve, `from`: float, to: float): float {.importcpp: "#->calc_length(#, #)".}

proc findLength*(this: ParametricCurve, startT: float, lengthOffset: float): float {.importcpp: "#->find_length(#, #)".}

proc getPoint*(this: ParametricCurve, t: float, point: LVecBase3): bool {.importcpp: "#->get_point(#, (LVecBase3 &)(#))".}

proc getTangent*(this: ParametricCurve, t: float, tangent: LVecBase3): bool {.importcpp: "#->get_tangent(#, (LVecBase3 &)(#))".}

proc getPt*(this: ParametricCurve, t: float, point: LVecBase3, tangent: LVecBase3): bool {.importcpp: "#->get_pt(#, (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc get2ndtangent*(this: ParametricCurve, t: float, tangent2: LVecBase3): bool {.importcpp: "#->get_2ndtangent(#, (LVecBase3 &)(#))".}

proc adjustPoint*(this: ParametricCurve, t: float, px: float, py: float, pz: float): bool {.importcpp: "#->adjust_point(#, #, #, #)".}

proc adjustTangent*(this: ParametricCurve, t: float, tx: float, ty: float, tz: float): bool {.importcpp: "#->adjust_tangent(#, #, #, #)".}

proc adjustPt*(this: ParametricCurve, t: float, px: float, py: float, pz: float, tx: float, ty: float, tz: float): bool {.importcpp: "#->adjust_pt(#, #, #, #, #, #, #)".}

proc recompute*(this: ParametricCurve | ParametricCurveCollection): bool {.importcpp: "#->recompute()".}

proc stitch*(this: ParametricCurve, a: ParametricCurve, b: ParametricCurve): bool {.importcpp: "#->stitch(#, #)".}

proc writeEgg*(this: ParametricCurve | ParametricCurveCollection, filename: Filename, cs: CoordinateSystem): bool {.importcpp: "#->write_egg(#, #)".}

proc writeEgg*(this: ParametricCurve | ParametricCurveCollection, filename: Filename): bool {.importcpp: "#->write_egg(#)".}

proc writeEgg*(this: ParametricCurve | ParametricCurveCollection, `out`: iostream | ostream, filename: Filename, cs: CoordinateSystem): bool {.importcpp: "#->write_egg(#, #, #)".}

proc addCurve*(this: ParametricCurveCollection, curve: ParametricCurve) {.importcpp: "#->add_curve(#)".}

proc addCurve*(this: ParametricCurveCollection, curve: ParametricCurve, index: int) {.importcpp: "#->add_curve(#, #)".}

proc insertCurve*(this: ParametricCurveCollection, index: int, curve: ParametricCurve) {.importcpp: "#->insert_curve(#, #)".}

proc addCurves*(this: ParametricCurveCollection, node: PandaNode): int {.importcpp: "#->add_curves(#)".}

proc removeCurve*(this: ParametricCurveCollection, curve: ParametricCurve): bool {.importcpp: "#->remove_curve(#)".}

proc removeCurve*(this: ParametricCurveCollection, index: int) {.importcpp: "#->remove_curve(#)".}

proc setCurve*(this: ParametricCurveCollection, index: int, curve: ParametricCurve) {.importcpp: "#->set_curve(#, #)".}

proc hasCurve*(this: ParametricCurveCollection, curve: ParametricCurve): bool {.importcpp: "#->has_curve(#)".}

proc clearTimewarps*(this: ParametricCurveCollection) {.importcpp: "#->clear_timewarps()".}

proc getNumCurves*(this: ParametricCurveCollection): int {.importcpp: "#->get_num_curves()".}

proc getCurve*(this: ParametricCurveCollection, index: int): ParametricCurve {.importcpp: "#->get_curve(#)".}

proc getXyzCurve*(this: ParametricCurveCollection): ParametricCurve {.importcpp: "#->get_xyz_curve()".}

proc getHprCurve*(this: ParametricCurveCollection): ParametricCurve {.importcpp: "#->get_hpr_curve()".}

proc getDefaultCurve*(this: ParametricCurveCollection): ParametricCurve {.importcpp: "#->get_default_curve()".}

proc getNumTimewarps*(this: ParametricCurveCollection): int {.importcpp: "#->get_num_timewarps()".}

proc getTimewarpCurve*(this: ParametricCurveCollection, n: int): ParametricCurve {.importcpp: "#->get_timewarp_curve(#)".}

proc makeEven*(this: ParametricCurveCollection, maxT: float, segmentsPerUnit: float) {.importcpp: "#->make_even(#, #)".}

proc faceForward*(this: ParametricCurveCollection, segmentsPerUnit: float) {.importcpp: "#->face_forward(#)".}

proc resetMaxT*(this: ParametricCurveCollection, maxT: float) {.importcpp: "#->reset_max_t(#)".}

proc evaluate*(this: ParametricCurveCollection, t: float, result: LMatrix4, cs: CoordinateSystem): bool {.importcpp: "#->evaluate(#, #, #)".}

proc evaluate*(this: ParametricCurveCollection, t: float, result: LMatrix4): bool {.importcpp: "#->evaluate(#, #)".}

proc evaluate*(this: ParametricCurveCollection, t: float, xyz: LVecBase3, hpr: LVecBase3): bool {.importcpp: "#->evaluate(#, (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc evaluateT*(this: ParametricCurveCollection, t: float): float {.importcpp: "#->evaluate_t(#)".}

proc evaluateXyz*(this: ParametricCurveCollection, t: float, xyz: LVecBase3): bool {.importcpp: "#->evaluate_xyz(#, (LVecBase3 &)(#))".}

proc evaluateHpr*(this: ParametricCurveCollection, t: float, hpr: LVecBase3): bool {.importcpp: "#->evaluate_hpr(#, (LVecBase3 &)(#))".}

proc adjustXyz*(this: ParametricCurveCollection, t: float, xyz: LVecBase3): bool {.importcpp: "#->adjust_xyz(#, (LVecBase3 const &)(#))".}

proc adjustXyz*(this: ParametricCurveCollection, t: float, x: float, y: float, z: float): bool {.importcpp: "#->adjust_xyz(#, #, #, #)".}

proc adjustHpr*(this: ParametricCurveCollection, t: float, xyz: LVecBase3): bool {.importcpp: "#->adjust_hpr(#, (LVecBase3 const &)(#))".}

proc adjustHpr*(this: ParametricCurveCollection, t: float, h: float, p: float, r: float): bool {.importcpp: "#->adjust_hpr(#, #, #, #)".}

proc stitch*(this: ParametricCurveCollection, a: ParametricCurveCollection, b: ParametricCurveCollection): bool {.importcpp: "#->stitch(#, #)".}

proc addXyz*(this: CurveFitter, t: float, xyz: LVecBase3) {.importcpp: "#.add_xyz(#, (LVecBase3 const &)(#))".}

proc addHpr*(this: CurveFitter, t: float, hpr: LVecBase3) {.importcpp: "#.add_hpr(#, (LVecBase3 const &)(#))".}

proc addXyzHpr*(this: CurveFitter, t: float, xyz: LVecBase3, hpr: LVecBase3) {.importcpp: "#.add_xyz_hpr(#, (LVecBase3 const &)(#), (LVecBase3 const &)(#))".}

proc getNumSamples*(this: CurveFitter): int {.importcpp: "#.get_num_samples()".}

proc getSampleT*(this: CurveFitter, n: int): float {.importcpp: "#.get_sample_t(#)".}

proc getSampleXyz*(this: CurveFitter, n: int): LVecBase3 {.importcpp: "#.get_sample_xyz(#)".}

proc getSampleHpr*(this: CurveFitter, n: int): LVecBase3 {.importcpp: "#.get_sample_hpr(#)".}

proc getSampleTangent*(this: CurveFitter, n: int): LVecBase3 {.importcpp: "#.get_sample_tangent(#)".}

proc removeSamples*(this: CurveFitter, begin: int, `end`: int) {.importcpp: "#.remove_samples(#, #)".}

proc sample*(this: CurveFitter, curves: ParametricCurveCollection, count: int) {.importcpp: "#.sample(#, #)".}

proc wrapHpr*(this: CurveFitter) {.importcpp: "#.wrap_hpr()".}

proc sortPoints*(this: CurveFitter) {.importcpp: "#.sort_points()".}

proc desample*(this: CurveFitter, factor: float) {.importcpp: "#.desample(#)".}

proc computeTangents*(this: CurveFitter, scale: float) {.importcpp: "#.compute_tangents(#)".}

proc makeHermite*(this: CurveFitter): ParametricCurveCollection {.importcpp: "#.make_hermite()".}

proc makeNurbs*(this: CurveFitter): ParametricCurveCollection {.importcpp: "#.make_nurbs()".}

proc getNumCvs*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface): int {.importcpp: "#->get_num_cvs()".}

proc insertCv*(this: HermiteCurve, t: float): int {.importcpp: "#->insert_cv(#)".}

proc appendCv*(this: HermiteCurve, `type`: int, v: LVecBase3): int {.importcpp: "#->append_cv(#, (LVecBase3 const &)(#))".}

proc appendCv*(this: HermiteCurve, `type`: int, x: float, y: float, z: float): int {.importcpp: "#->append_cv(#, #, #, #)".}

proc removeCv*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface, n: int): bool {.importcpp: "#->remove_cv(#)".}

proc removeAllCvs*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface) {.importcpp: "#->remove_all_cvs()".}

proc setCvType*(this: HermiteCurve, n: int, `type`: int): bool {.importcpp: "#->set_cv_type(#, #)".}

proc setCvPoint*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface, n: int, v: LVecBase3): bool {.importcpp: "#->set_cv_point(#, (LVecBase3 const &)(#))".}

proc setCvPoint*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface, n: int, x: float, y: float, z: float): bool {.importcpp: "#->set_cv_point(#, #, #, #)".}

proc setCvIn*(this: HermiteCurve, n: int, v: LVecBase3): bool {.importcpp: "#->set_cv_in(#, (LVecBase3 const &)(#))".}

proc setCvIn*(this: HermiteCurve, n: int, x: float, y: float, z: float): bool {.importcpp: "#->set_cv_in(#, #, #, #)".}

proc setCvOut*(this: HermiteCurve, n: int, v: LVecBase3): bool {.importcpp: "#->set_cv_out(#, (LVecBase3 const &)(#))".}

proc setCvOut*(this: HermiteCurve, n: int, x: float, y: float, z: float): bool {.importcpp: "#->set_cv_out(#, #, #, #)".}

proc setCvTstart*(this: HermiteCurve, n: int, tstart: float): bool {.importcpp: "#->set_cv_tstart(#, #)".}

proc setCvName*(this: HermiteCurve, n: int, name: string): bool {.importcpp: "#->set_cv_name(#, nimStringToStdString(#))", header: stringConversionCode.}

proc getCvType*(this: HermiteCurve, n: int): int {.importcpp: "#->get_cv_type(#)".}

proc getCvPoint*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface, n: int): LVecBase3 {.importcpp: "#->get_cv_point(#)".}

proc getCvPoint*(this: HermiteCurve, n: int, v: LVecBase3) {.importcpp: "#->get_cv_point(#, (LVecBase3 &)(#))".}

proc getCvIn*(this: HermiteCurve, n: int): LVecBase3 {.importcpp: "#->get_cv_in(#)".}

proc getCvIn*(this: HermiteCurve, n: int, v: LVecBase3) {.importcpp: "#->get_cv_in(#, (LVecBase3 &)(#))".}

proc getCvOut*(this: HermiteCurve, n: int): LVecBase3 {.importcpp: "#->get_cv_out(#)".}

proc getCvOut*(this: HermiteCurve, n: int, v: LVecBase3) {.importcpp: "#->get_cv_out(#, (LVecBase3 &)(#))".}

proc getCvTstart*(this: HermiteCurve, n: int): float {.importcpp: "#->get_cv_tstart(#)".}

proc getCvName*(this: HermiteCurve, n: int): string {.importcpp: "nimStringFromStdString(#->get_cv_name(#))", header: stringConversionCode.}

proc writeCv*(this: HermiteCurve | NurbsCurve | NurbsCurveInterface, `out`: iostream | ostream, n: int) {.importcpp: "#->write_cv(#, #)".}

proc setOrder*(this: NurbsCurve | NurbsCurveEvaluator | NurbsCurveInterface, order: int) {.importcpp: "#->set_order(#)".}

proc getOrder*(this: NurbsCurve | NurbsCurveEvaluator | NurbsCurveInterface): int {.importcpp: "#->get_order()".}

proc getNumKnots*(this: NurbsCurve | NurbsCurveEvaluator | NurbsCurveInterface): int {.importcpp: "#->get_num_knots()".}

proc insertCv*(this: NurbsCurve | NurbsCurveInterface, t: float): bool {.importcpp: "#->insert_cv(#)".}

proc appendCv*(this: NurbsCurve | NurbsCurveInterface, v: LVecBase3): int {.importcpp: "#->append_cv((LVecBase3 const &)(#))".}

proc appendCv*(this: NurbsCurve | NurbsCurveInterface, v: LVecBase4): int {.importcpp: "#->append_cv((LVecBase4 const &)(#))".}

proc appendCv*(this: NurbsCurve | NurbsCurveInterface, x: float, y: float, z: float): int {.importcpp: "#->append_cv(#, #, #)".}

proc setCvWeight*(this: NurbsCurve | NurbsCurveInterface, n: int, w: float): bool {.importcpp: "#->set_cv_weight(#, #)".}

proc getCvWeight*(this: NurbsCurve | NurbsCurveInterface, n: int): float {.importcpp: "#->get_cv_weight(#)".}

proc setCv*(this: NurbsCurve | NurbsCurveInterface, n: int, v: LVecBase4): bool {.importcpp: "#->set_cv(#, (LVecBase4 const &)(#))".}

proc getCv*(this: NurbsCurve | NurbsCurveInterface, n: int): LVecBase4 {.importcpp: "#->get_cv(#)".}

proc setKnot*(this: NurbsCurve | NurbsCurveInterface, n: int, t: float): bool {.importcpp: "#->set_knot(#, #)".}

proc getKnot*(this: NurbsCurve | NurbsCurveInterface, n: int): float {.importcpp: "#->get_knot(#)".}

proc upcastToPiecewiseCurve*(this: NurbsCurve): PiecewiseCurve {.importcpp: "(PT(PiecewiseCurve)(#))".}

proc upcastToNurbsCurveInterface*(this: NurbsCurve): NurbsCurveInterface {.importcpp: "((NurbsCurveInterface *)(NurbsCurve *)(#))".}

proc getStartT*(this: NurbsCurveResult): float {.importcpp: "#->get_start_t()".}

proc getEndT*(this: NurbsCurveResult): float {.importcpp: "#->get_end_t()".}

proc evalPoint*(this: NurbsCurveResult, t: float, point: LVecBase3): bool {.importcpp: "#->eval_point(#, (LVecBase3 &)(#))".}

proc evalTangent*(this: NurbsCurveResult, t: float, tangent: LVecBase3): bool {.importcpp: "#->eval_tangent(#, (LVecBase3 &)(#))".}

proc evalExtendedPoint*(this: NurbsCurveResult, t: float, d: int): float {.importcpp: "#->eval_extended_point(#, #)".}

proc getNumSegments*(this: NurbsCurveEvaluator | NurbsCurveResult): int {.importcpp: "#->get_num_segments()".}

proc evalSegmentPoint*(this: NurbsCurveResult, segment: int, t: float, point: LVecBase3) {.importcpp: "#->eval_segment_point(#, #, (LVecBase3 &)(#))".}

proc evalSegmentTangent*(this: NurbsCurveResult, segment: int, t: float, tangent: LVecBase3) {.importcpp: "#->eval_segment_tangent(#, #, (LVecBase3 &)(#))".}

proc evalSegmentExtendedPoint*(this: NurbsCurveResult, segment: int, t: float, d: int): float {.importcpp: "#->eval_segment_extended_point(#, #, #)".}

proc getSegmentT*(this: NurbsCurveResult, segment: int, t: float): float {.importcpp: "#->get_segment_t(#, #)".}

proc adaptiveSample*(this: NurbsCurveResult, tolerance: float) {.importcpp: "#->adaptive_sample(#)".}

proc getNumSamples*(this: NurbsCurveResult): int {.importcpp: "#->get_num_samples()".}

proc getSampleT*(this: NurbsCurveResult, n: int): float {.importcpp: "#->get_sample_t(#)".}

proc getSamplePoint*(this: NurbsCurveResult, n: int): LPoint3 {.importcpp: "#->get_sample_point(#)".}

proc reset*(this: NurbsCurveEvaluator, numVertices: int) {.importcpp: "#->reset(#)".}

proc setVertex*(this: NurbsCurveEvaluator, i: int, vertex: LVecBase3, weight: float) {.importcpp: "#->set_vertex(#, (LVecBase3 const &)(#), #)".}

proc setVertex*(this: NurbsCurveEvaluator, i: int, vertex: LVecBase3) {.importcpp: "#->set_vertex(#, (LVecBase3 const &)(#))".}

proc setVertex*(this: NurbsCurveEvaluator, i: int, vertex: LVecBase4) {.importcpp: "#->set_vertex(#, (LVecBase4 const &)(#))".}

proc getVertex*(this: NurbsCurveEvaluator, i: int): LVecBase4 {.importcpp: "#->get_vertex(#)".}

proc getVertex*(this: NurbsCurveEvaluator, i: int, relTo: NodePath): LVecBase4 {.importcpp: "#->get_vertex(#, #)".}

proc setVertexSpace*(this: NurbsCurveEvaluator, i: int, space: NodePath) {.importcpp: "#->set_vertex_space(#, #)".}

proc setVertexSpace*(this: NurbsCurveEvaluator, i: int, space: string) {.importcpp: "#->set_vertex_space(#, nimStringToStdString(#))", header: stringConversionCode.}

proc getVertexSpace*(this: NurbsCurveEvaluator, i: int, relTo: NodePath): NodePath {.importcpp: "#->get_vertex_space(#, #)".}

proc setExtendedVertex*(this: NurbsCurveEvaluator, i: int, d: int, value: float) {.importcpp: "#->set_extended_vertex(#, #, #)".}

proc getExtendedVertex*(this: NurbsCurveEvaluator, i: int, d: int): float {.importcpp: "#->get_extended_vertex(#, #)".}

proc setKnot*(this: NurbsCurveEvaluator, i: int, knot: float) {.importcpp: "#->set_knot(#, #)".}

proc getKnot*(this: NurbsCurveEvaluator, i: int): float {.importcpp: "#->get_knot(#)".}

proc normalizeKnots*(this: NurbsCurveEvaluator) {.importcpp: "#->normalize_knots()".}

proc evaluate*(this: NurbsCurveEvaluator, relTo: NodePath): NurbsCurveResult {.importcpp: "#->evaluate(#)".}

proc evaluate*(this: NurbsCurveEvaluator): NurbsCurveResult {.importcpp: "#->evaluate()".}

proc evaluate*(this: NurbsCurveEvaluator, relTo: NodePath, mat: LMatrix4): NurbsCurveResult {.importcpp: "#->evaluate(#, #)".}

proc getStartU*(this: NurbsSurfaceResult): float {.importcpp: "#->get_start_u()".}

proc getEndU*(this: NurbsSurfaceResult): float {.importcpp: "#->get_end_u()".}

proc getStartV*(this: NurbsSurfaceResult): float {.importcpp: "#->get_start_v()".}

proc getEndV*(this: NurbsSurfaceResult): float {.importcpp: "#->get_end_v()".}

proc evalPoint*(this: NurbsSurfaceResult, u: float, v: float, point: LVecBase3): bool {.importcpp: "#->eval_point(#, #, (LVecBase3 &)(#))".}

proc evalNormal*(this: NurbsSurfaceResult, u: float, v: float, normal: LVecBase3): bool {.importcpp: "#->eval_normal(#, #, (LVecBase3 &)(#))".}

proc evalExtendedPoint*(this: NurbsSurfaceResult, u: float, v: float, d: int): float {.importcpp: "#->eval_extended_point(#, #, #)".}

proc getNumUSegments*(this: NurbsSurfaceEvaluator | NurbsSurfaceResult): int {.importcpp: "#->get_num_u_segments()".}

proc getNumVSegments*(this: NurbsSurfaceEvaluator | NurbsSurfaceResult): int {.importcpp: "#->get_num_v_segments()".}

proc evalSegmentPoint*(this: NurbsSurfaceResult, ui: int, vi: int, u: float, v: float, point: LVecBase3) {.importcpp: "#->eval_segment_point(#, #, #, #, (LVecBase3 &)(#))".}

proc evalSegmentNormal*(this: NurbsSurfaceResult, ui: int, vi: int, u: float, v: float, normal: LVecBase3) {.importcpp: "#->eval_segment_normal(#, #, #, #, (LVecBase3 &)(#))".}

proc evalSegmentExtendedPoint*(this: NurbsSurfaceResult, ui: int, vi: int, u: float, v: float, d: int): float {.importcpp: "#->eval_segment_extended_point(#, #, #, #, #)".}

proc getSegmentU*(this: NurbsSurfaceResult, ui: int, u: float): float {.importcpp: "#->get_segment_u(#, #)".}

proc getSegmentV*(this: NurbsSurfaceResult, vi: int, v: float): float {.importcpp: "#->get_segment_v(#, #)".}

proc setUOrder*(this: NurbsSurfaceEvaluator, uOrder: int) {.importcpp: "#->set_u_order(#)".}

proc getUOrder*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_u_order()".}

proc setVOrder*(this: NurbsSurfaceEvaluator, vOrder: int) {.importcpp: "#->set_v_order(#)".}

proc getVOrder*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_v_order()".}

proc reset*(this: NurbsSurfaceEvaluator, numUVertices: int, numVVertices: int) {.importcpp: "#->reset(#, #)".}

proc getNumUVertices*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_num_u_vertices()".}

proc getNumVVertices*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_num_v_vertices()".}

proc setVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int, vertex: LVecBase3, weight: float) {.importcpp: "#->set_vertex(#, #, (LVecBase3 const &)(#), #)".}

proc setVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int, vertex: LVecBase3) {.importcpp: "#->set_vertex(#, #, (LVecBase3 const &)(#))".}

proc setVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int, vertex: LVecBase4) {.importcpp: "#->set_vertex(#, #, (LVecBase4 const &)(#))".}

proc getVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int): LVecBase4 {.importcpp: "#->get_vertex(#, #)".}

proc getVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int, relTo: NodePath): LVecBase4 {.importcpp: "#->get_vertex(#, #, #)".}

proc setVertexSpace*(this: NurbsSurfaceEvaluator, ui: int, vi: int, space: NodePath) {.importcpp: "#->set_vertex_space(#, #, #)".}

proc setVertexSpace*(this: NurbsSurfaceEvaluator, ui: int, vi: int, space: string) {.importcpp: "#->set_vertex_space(#, #, nimStringToStdString(#))", header: stringConversionCode.}

proc getVertexSpace*(this: NurbsSurfaceEvaluator, ui: int, vi: int, relTo: NodePath): NodePath {.importcpp: "#->get_vertex_space(#, #, #)".}

proc setExtendedVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int, d: int, value: float) {.importcpp: "#->set_extended_vertex(#, #, #, #)".}

proc getExtendedVertex*(this: NurbsSurfaceEvaluator, ui: int, vi: int, d: int): float {.importcpp: "#->get_extended_vertex(#, #, #)".}

proc getNumUKnots*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_num_u_knots()".}

proc setUKnot*(this: NurbsSurfaceEvaluator, i: int, knot: float) {.importcpp: "#->set_u_knot(#, #)".}

proc getUKnot*(this: NurbsSurfaceEvaluator, i: int): float {.importcpp: "#->get_u_knot(#)".}

proc normalizeUKnots*(this: NurbsSurfaceEvaluator) {.importcpp: "#->normalize_u_knots()".}

proc getNumVKnots*(this: NurbsSurfaceEvaluator): int {.importcpp: "#->get_num_v_knots()".}

proc setVKnot*(this: NurbsSurfaceEvaluator, i: int, knot: float) {.importcpp: "#->set_v_knot(#, #)".}

proc getVKnot*(this: NurbsSurfaceEvaluator, i: int): float {.importcpp: "#->get_v_knot(#)".}

proc normalizeVKnots*(this: NurbsSurfaceEvaluator) {.importcpp: "#->normalize_v_knots()".}

proc evaluate*(this: NurbsSurfaceEvaluator, relTo: NodePath): NurbsSurfaceResult {.importcpp: "#->evaluate(#)".}

proc evaluate*(this: NurbsSurfaceEvaluator): NurbsSurfaceResult {.importcpp: "#->evaluate()".}

proc setCurve*(this: RopeNode, curve: NurbsCurveEvaluator) {.importcpp: "#->set_curve(#)".}

proc getCurve*(this: RopeNode): NurbsCurveEvaluator {.importcpp: "#->get_curve()".}

proc setRenderMode*(this: RopeNode, renderMode: RopeNode_RenderMode) {.importcpp: "#->set_render_mode(#)".}

proc getRenderMode*(this: RopeNode): RopeNode_RenderMode {.importcpp: "#->get_render_mode()".}

proc setUvMode*(this: RopeNode, uvMode: RopeNode_UVMode) {.importcpp: "#->set_uv_mode(#)".}

proc getUvMode*(this: RopeNode): RopeNode_UVMode {.importcpp: "#->get_uv_mode()".}

proc setUvDirection*(this: RopeNode, uDominant: bool) {.importcpp: "#->set_uv_direction(#)".}

proc getUvDirection*(this: RopeNode): bool {.importcpp: "#->get_uv_direction()".}

proc setUvScale*(this: RopeNode, scale: float) {.importcpp: "#->set_uv_scale(#)".}

proc getUvScale*(this: RopeNode): float {.importcpp: "#->get_uv_scale()".}

proc setNormalMode*(this: RopeNode, normalMode: RopeNode_NormalMode) {.importcpp: "#->set_normal_mode(#)".}

proc getNormalMode*(this: RopeNode): RopeNode_NormalMode {.importcpp: "#->get_normal_mode()".}

proc setTubeUp*(this: RopeNode, tubeUp: LVector3) {.importcpp: "#->set_tube_up((LVector3 const &)(#))".}

proc getTubeUp*(this: RopeNode): LVector3 {.importcpp: "#->get_tube_up()".}

proc setUseVertexColor*(this: RopeNode | SheetNode, flag: bool) {.importcpp: "#->set_use_vertex_color(#)".}

proc getUseVertexColor*(this: RopeNode | SheetNode): bool {.importcpp: "#->get_use_vertex_color()".}

proc setNumSubdiv*(this: RopeNode, numSubdiv: int) {.importcpp: "#->set_num_subdiv(#)".}

proc getNumSubdiv*(this: RopeNode): int {.importcpp: "#->get_num_subdiv()".}

proc setNumSlices*(this: RopeNode, numSlices: int) {.importcpp: "#->set_num_slices(#)".}

proc getNumSlices*(this: RopeNode): int {.importcpp: "#->get_num_slices()".}

proc setUseVertexThickness*(this: RopeNode, flag: bool) {.importcpp: "#->set_use_vertex_thickness(#)".}

proc getUseVertexThickness*(this: RopeNode): bool {.importcpp: "#->get_use_vertex_thickness()".}

proc setThickness*(this: RopeNode, thickness: float) {.importcpp: "#->set_thickness(#)".}

proc clearMatrix*(this: RopeNode) {.importcpp: "#->clear_matrix()".}

proc hasMatrix*(this: RopeNode): bool {.importcpp: "#->has_matrix()".}

proc getMatrix*(this: RopeNode): LMatrix4 {.importcpp: "#->get_matrix()".}

proc resetBound*(this: RopeNode | SheetNode, relTo: NodePath) {.importcpp: "#->reset_bound(#)".}

proc setSurface*(this: SheetNode, surface: NurbsSurfaceEvaluator) {.importcpp: "#->set_surface(#)".}

proc getSurface*(this: SheetNode): NurbsSurfaceEvaluator {.importcpp: "#->get_surface()".}

proc setNumUSubdiv*(this: SheetNode, numUSubdiv: int) {.importcpp: "#->set_num_u_subdiv(#)".}

proc getNumUSubdiv*(this: SheetNode): int {.importcpp: "#->get_num_u_subdiv()".}

proc setNumVSubdiv*(this: SheetNode, numVSubdiv: int) {.importcpp: "#->set_num_v_subdiv(#)".}

proc getNumVSubdiv*(this: SheetNode): int {.importcpp: "#->get_num_v_subdiv()".}

proc `[]=`*(this: pixel, i: int, assignVal: int) {.importcpp: "#.operator [](#) = #".}

proc `[]`*(this: pixel, i: int): int {.importcpp: "#.operator [](#)".}

proc `+`*(this: pixel, other: pixel): pixel {.importcpp: "#.operator +(#)".}

proc `-`*(this: pixel, other: pixel): pixel {.importcpp: "#.operator -(#)".}

proc `*`*(this: pixel, mult: float64): pixel {.importcpp: "#.operator *(#)".}

proc `+=`*(this: var pixel, other: pixel) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var pixel, other: pixel) {.importcpp: "#.operator -=(#)".}

proc `*=`*(this: var pixel, mult: float64) {.importcpp: "#.operator *=(#)".}

proc `==`*(this: pixel, other: pixel): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: pixel, other: pixel): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: pixel, other: pixel): bool {.importcpp: "#.operator <(#)".}

proc getNumExtensions*(this: PNMFileType): int {.importcpp: "#.get_num_extensions()".}

proc getExtension*(this: PNMFileType, n: int): string {.importcpp: "nimStringFromStdString(#.get_extension(#))", header: stringConversionCode.}

proc getSuggestedExtension*(this: PNMFileType): string {.importcpp: "nimStringFromStdString(#.get_suggested_extension())", header: stringConversionCode.}

proc getType*(this: PNMFileTypeRegistry, n: int): PNMFileType {.importcpp: "#.get_type(#)".}

proc getTypeFromExtension*(this: PNMFileTypeRegistry, filename: string): PNMFileType {.importcpp: "#.get_type_from_extension(nimStringToStdString(#))", header: stringConversionCode.}

proc getTypeFromMagicNumber*(this: PNMFileTypeRegistry, magicNumber: string): PNMFileType {.importcpp: "#.get_type_from_magic_number(nimStringToStdString(#))", header: stringConversionCode.}

proc getTypeByHandle*(this: PNMFileTypeRegistry, handle: TypeHandle): PNMFileType {.importcpp: "#.get_type_by_handle(#)".}

proc getColorType*(this: PNMImageHeader): PNMImageHeader_ColorType {.importcpp: "#.get_color_type()".}

proc getNumChannels*(this: PNMImageHeader): int {.importcpp: "#.get_num_channels()".}

proc isGrayscale*(this: PNMImageHeader): bool {.importcpp: "#.is_grayscale()".}

proc hasAlpha*(this: PNMImageHeader): bool {.importcpp: "#.has_alpha()".}

proc getMaxval*(this: PNMImageHeader): int {.importcpp: "#.get_maxval()".}

proc getColorSpace*(this: PNMImage | PNMImageHeader): ColorSpace {.importcpp: "#.get_color_space()".}

proc getSize*(this: PNMImageHeader): LVecBase2i {.importcpp: "#.get_size()".}

proc getComment*(this: PNMImageHeader): string {.importcpp: "nimStringFromStdString(#.get_comment())", header: stringConversionCode.}

proc setComment*(this: PNMImageHeader, comment: string) {.importcpp: "#.set_comment(nimStringToStdString(#))", header: stringConversionCode.}

proc hasType*(this: PNMImageHeader): bool {.importcpp: "#.has_type()".}

proc getType*(this: PNMImageHeader): PNMFileType {.importcpp: "#.get_type()".}

proc setType*(this: PNMImageHeader, `type`: PNMFileType) {.importcpp: "#.set_type(#)".}

proc readHeader*(this: PNMImageHeader, filename: Filename, `type`: PNMFileType, reportUnknownType: bool): bool {.importcpp: "#.read_header(#, #, #)".}

proc readHeader*(this: PNMImageHeader, filename: Filename, `type`: PNMFileType): bool {.importcpp: "#.read_header(#, #)".}

proc readHeader*(this: PNMImageHeader, filename: Filename): bool {.importcpp: "#.read_header(#)".}

proc readHeader*(this: PNMImageHeader, data: istream, filename: string, `type`: PNMFileType, reportUnknownType: bool): bool {.importcpp: "#.read_header(#, nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc readHeader*(this: PNMImageHeader, data: istream, filename: string, `type`: PNMFileType): bool {.importcpp: "#.read_header(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc readHeader*(this: PNMImageHeader, data: istream, filename: string): bool {.importcpp: "#.read_header(#, nimStringToStdString(#))", header: stringConversionCode.}

proc readHeader*(this: PNMImageHeader, data: istream): bool {.importcpp: "#.read_header(#)".}

proc clear*(this: PNMImage | PfmFile, xSize: int, ySize: int, numChannels: int) {.importcpp: "#.clear(#, #, #)".}

proc read*(this: PfmFile, fullpath: Filename): bool {.importcpp: "#.read(#)".}

proc read*(this: PfmFile, `in`: istream, fullpath: Filename): bool {.importcpp: "#.read(#, #)".}

proc read*(this: PfmFile, `in`: istream): bool {.importcpp: "#.read(#)".}

proc write*(this: PfmFile, fullpath: Filename): bool {.importcpp: "#.write(#)".}

proc write*(this: PfmFile, `out`: iostream | ostream, fullpath: Filename): bool {.importcpp: "#.write(#, #)".}

proc write*(this: PfmFile, `out`: iostream | ostream): bool {.importcpp: "#.write(#)".}

proc load*(this: PfmFile, pnmimage: PNMImage): bool {.importcpp: "#.load(#)".}

proc store*(this: PfmFile, pnmimage: PNMImage): bool {.importcpp: "#.store(#)".}

proc storeMask*(this: PfmFile, pnmimage: PNMImage): bool {.importcpp: "#.store_mask(#)".}

proc storeMask*(this: PfmFile, pnmimage: PNMImage, minPoint: LVecBase4f, maxPoint: LVecBase4f): bool {.importcpp: "#.store_mask(#, (LVecBase4f const &)(#), (LVecBase4f const &)(#))".}

proc getScale*(this: PfmFile): float32 {.importcpp: "#.get_scale()".}

proc setScale*(this: PfmFile, scale: float32) {.importcpp: "#.set_scale(#)".}

proc hasPoint*(this: PfmFile, x: int, y: int): bool {.importcpp: "#.has_point(#, #)".}

proc getChannel*(this: PfmFile, x: int, y: int, c: int): float32 {.importcpp: "#.get_channel(#, #, #)".}

proc setChannel*(this: PfmFile, x: int, y: int, c: int, value: float32) {.importcpp: "#.set_channel(#, #, #, #)".}

proc getPoint1*(this: PfmFile, x: int, y: int): float32 {.importcpp: "#.get_point1(#, #)".}

proc setPoint1*(this: PfmFile, x: int, y: int, point: float32) {.importcpp: "#.set_point1(#, #, #)".}

proc getPoint2*(this: PfmFile, x: int, y: int): LPoint2f {.importcpp: "#.get_point2(#, #)".}

proc setPoint2*(this: PfmFile, x: int, y: int, point: LVecBase2d) {.importcpp: "#.set_point2(#, #, (LVecBase2d const &)(#))".}

proc setPoint2*(this: PfmFile, x: int, y: int, point: LVecBase2f) {.importcpp: "#.set_point2(#, #, (LVecBase2f const &)(#))".}

proc modifyPoint2*(this: PfmFile, x: int, y: int): LPoint2f {.importcpp: "#.modify_point2(#, #)".}

proc getPoint*(this: PfmFile, x: int, y: int): LPoint3f {.importcpp: "#.get_point(#, #)".}

proc setPoint*(this: PfmFile, x: int, y: int, point: LVecBase3d) {.importcpp: "#.set_point(#, #, (LVecBase3d const &)(#))".}

proc setPoint*(this: PfmFile, x: int, y: int, point: LVecBase3f) {.importcpp: "#.set_point(#, #, (LVecBase3f const &)(#))".}

proc modifyPoint*(this: PfmFile, x: int, y: int): LPoint3f {.importcpp: "#.modify_point(#, #)".}

proc getPoint3*(this: PfmFile, x: int, y: int): LPoint3f {.importcpp: "#.get_point3(#, #)".}

proc setPoint3*(this: PfmFile, x: int, y: int, point: LVecBase3d) {.importcpp: "#.set_point3(#, #, (LVecBase3d const &)(#))".}

proc setPoint3*(this: PfmFile, x: int, y: int, point: LVecBase3f) {.importcpp: "#.set_point3(#, #, (LVecBase3f const &)(#))".}

proc modifyPoint3*(this: PfmFile, x: int, y: int): LPoint3f {.importcpp: "#.modify_point3(#, #)".}

proc getPoint4*(this: PfmFile, x: int, y: int): LPoint4f {.importcpp: "#.get_point4(#, #)".}

proc setPoint4*(this: PfmFile, x: int, y: int, point: LVecBase4d) {.importcpp: "#.set_point4(#, #, (LVecBase4d const &)(#))".}

proc setPoint4*(this: PfmFile, x: int, y: int, point: LVecBase4f) {.importcpp: "#.set_point4(#, #, (LVecBase4f const &)(#))".}

proc modifyPoint4*(this: PfmFile, x: int, y: int): LPoint4f {.importcpp: "#.modify_point4(#, #)".}

proc fill*(this: PfmFile, value: LPoint2f) {.importcpp: "#.fill((LPoint2f const &)(#))".}

proc fill*(this: PfmFile, value: LPoint3f) {.importcpp: "#.fill((LPoint3f const &)(#))".}

proc fill*(this: PfmFile, value: LPoint4f) {.importcpp: "#.fill((LPoint4f const &)(#))".}

proc fill*(this: PfmFile, value: float32) {.importcpp: "#.fill(#)".}

proc fillNan*(this: PfmFile) {.importcpp: "#.fill_nan()".}

proc fillNoDataValue*(this: PfmFile) {.importcpp: "#.fill_no_data_value()".}

proc fillChannel*(this: PfmFile, channel: int, value: float32) {.importcpp: "#.fill_channel(#, #)".}

proc fillChannelNan*(this: PfmFile, channel: int) {.importcpp: "#.fill_channel_nan(#)".}

proc fillChannelMasked*(this: PfmFile, channel: int, value: float32) {.importcpp: "#.fill_channel_masked(#, #)".}

proc fillChannelMaskedNan*(this: PfmFile, channel: int) {.importcpp: "#.fill_channel_masked_nan(#)".}

proc calcAveragePoint*(this: PfmFile, result: LPoint3f, x: float32, y: float32, radius: float32): bool {.importcpp: "#.calc_average_point((LPoint3f &)(#), #, #, #)".}

proc calcBilinearPoint*(this: PfmFile, result: LPoint3f, x: float32, y: float32): bool {.importcpp: "#.calc_bilinear_point((LPoint3f &)(#), #, #)".}

proc calcMinMax*(this: PfmFile, minPoints: LVecBase3f, maxPoints: LVecBase3f): bool {.importcpp: "#.calc_min_max((LVecBase3f &)(#), (LVecBase3f &)(#))".}

proc calcAutocrop*(this: PfmFile, range: LVecBase4d): bool {.importcpp: "#.calc_autocrop((LVecBase4d &)(#))".}

proc calcAutocrop*(this: PfmFile, range: LVecBase4f): bool {.importcpp: "#.calc_autocrop((LVecBase4f &)(#))".}

proc isRowEmpty*(this: PfmFile, y: int, xBegin: int, xEnd: int): bool {.importcpp: "#.is_row_empty(#, #, #)".}

proc isColumnEmpty*(this: PfmFile, x: int, yBegin: int, yEnd: int): bool {.importcpp: "#.is_column_empty(#, #, #)".}

proc setZeroSpecial*(this: PfmFile, zeroSpecial: bool) {.importcpp: "#.set_zero_special(#)".}

proc setNoDataChan4*(this: PfmFile, chan4: bool) {.importcpp: "#.set_no_data_chan4(#)".}

proc setNoDataNan*(this: PfmFile, numChannels: int) {.importcpp: "#.set_no_data_nan(#)".}

proc setNoDataValue*(this: PfmFile, noDataValue: LPoint4d) {.importcpp: "#.set_no_data_value((LPoint4d const &)(#))".}

proc setNoDataValue*(this: PfmFile, noDataValue: LPoint4f) {.importcpp: "#.set_no_data_value((LPoint4f const &)(#))".}

proc setNoDataThreshold*(this: PfmFile, noDataValue: LPoint4d) {.importcpp: "#.set_no_data_threshold((LPoint4d const &)(#))".}

proc setNoDataThreshold*(this: PfmFile, noDataValue: LPoint4f) {.importcpp: "#.set_no_data_threshold((LPoint4f const &)(#))".}

proc clearNoDataValue*(this: PfmFile) {.importcpp: "#.clear_no_data_value()".}

proc hasNoDataValue*(this: PfmFile): bool {.importcpp: "#.has_no_data_value()".}

proc hasNoDataThreshold*(this: PfmFile): bool {.importcpp: "#.has_no_data_threshold()".}

proc getNoDataValue*(this: PfmFile): LPoint4f {.importcpp: "#.get_no_data_value()".}

proc resize*(this: PfmFile, newXSize: int, newYSize: int) {.importcpp: "#.resize(#, #)".}

proc boxFilterFrom*(this: PfmFile, radius: float32, copy: PfmFile) {.importcpp: "#.box_filter_from(#, #)".}

proc gaussianFilterFrom*(this: PfmFile, radius: float32, copy: PfmFile) {.importcpp: "#.gaussian_filter_from(#, #)".}

proc quickFilterFrom*(this: PfmFile, copy: PfmFile) {.importcpp: "#.quick_filter_from(#)".}

proc reverseRows*(this: PNMImage | PfmFile) {.importcpp: "#.reverse_rows()".}

proc flip*(this: PNMImage | PfmFile, flipX: bool, flipY: bool, transpose: bool) {.importcpp: "#.flip(#, #, #)".}

proc xform*(this: PfmFile, transform: LMatrix4d) {.importcpp: "#.xform(#)".}

proc xform*(this: PfmFile, transform: LMatrix4f) {.importcpp: "#.xform(#)".}

proc forwardDistort*(this: PfmFile, dist: PfmFile, scaleFactor: float32) {.importcpp: "#.forward_distort(#, #)".}

proc forwardDistort*(this: PfmFile, dist: PfmFile) {.importcpp: "#.forward_distort(#)".}

proc reverseDistort*(this: PfmFile, dist: PfmFile, scaleFactor: float32) {.importcpp: "#.reverse_distort(#, #)".}

proc reverseDistort*(this: PfmFile, dist: PfmFile) {.importcpp: "#.reverse_distort(#)".}

proc apply1dLut*(this: PfmFile, channel: int, lut: PfmFile, xScale: float32) {.importcpp: "#.apply_1d_lut(#, #, #)".}

proc apply1dLut*(this: PfmFile, channel: int, lut: PfmFile) {.importcpp: "#.apply_1d_lut(#, #)".}

proc merge*(this: PfmFile, other: PfmFile) {.importcpp: "#.merge(#)".}

proc applyMask*(this: PfmFile, other: PfmFile) {.importcpp: "#.apply_mask(#)".}

proc copyChannel*(this: PfmFile, toChannel: int, other: PfmFile, fromChannel: int) {.importcpp: "#.copy_channel(#, #, #)".}

proc copyChannelMasked*(this: PfmFile, toChannel: int, other: PfmFile, fromChannel: int) {.importcpp: "#.copy_channel_masked(#, #, #)".}

proc applyCrop*(this: PfmFile, xBegin: int, xEnd: int, yBegin: int, yEnd: int) {.importcpp: "#.apply_crop(#, #, #, #)".}

proc clearToTexcoords*(this: PfmFile, xSize: int, ySize: int) {.importcpp: "#.clear_to_texcoords(#, #)".}

proc pullSpot*(this: PfmFile, delta: LPoint4f, xc: float32, yc: float32, xr: float32, yr: float32, exponent: float32): int {.importcpp: "#.pull_spot((LPoint4f const &)(#), #, #, #, #, #)".}

proc calcTightBounds*(this: PfmFile, minPoint: LPoint3f, maxPoint: LPoint3f): bool {.importcpp: "#.calc_tight_bounds((LPoint3f &)(#), (LPoint3f &)(#))".}

proc computePlanarBounds*(this: PfmFile, center: LPoint2d, pointDist: float32, sampleRadius: float32, pointsOnly: bool): BoundingHexahedron {.importcpp: "#.compute_planar_bounds((LPoint2d const &)(#), #, #, #)".}

proc computePlanarBounds*(this: PfmFile, center: LPoint2f, pointDist: float32, sampleRadius: float32, pointsOnly: bool): BoundingHexahedron {.importcpp: "#.compute_planar_bounds((LPoint2f const &)(#), #, #, #)".}

proc computeSamplePoint*(this: PfmFile, result: LPoint3f, x: float32, y: float32, sampleRadius: float32) {.importcpp: "#.compute_sample_point((LPoint3f &)(#), #, #, #)".}

proc copySubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.copy_sub_image(#, #, #, #, #, #, #)".}

proc copySubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.copy_sub_image(#, #, #, #, #, #)".}

proc copySubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.copy_sub_image(#, #, #, #, #)".}

proc copySubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int) {.importcpp: "#.copy_sub_image(#, #, #, #)".}

proc copySubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int) {.importcpp: "#.copy_sub_image(#, #, #)".}

proc addSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.add_sub_image(#, #, #, #, #, #, #, #)".}

proc addSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.add_sub_image(#, #, #, #, #, #, #)".}

proc addSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.add_sub_image(#, #, #, #, #, #)".}

proc addSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.add_sub_image(#, #, #, #, #)".}

proc addSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int) {.importcpp: "#.add_sub_image(#, #, #, #)".}

proc addSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int) {.importcpp: "#.add_sub_image(#, #, #)".}

proc multSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.mult_sub_image(#, #, #, #, #, #, #, #)".}

proc multSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.mult_sub_image(#, #, #, #, #, #, #)".}

proc multSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.mult_sub_image(#, #, #, #, #, #)".}

proc multSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.mult_sub_image(#, #, #, #, #)".}

proc multSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int) {.importcpp: "#.mult_sub_image(#, #, #, #)".}

proc multSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int) {.importcpp: "#.mult_sub_image(#, #, #)".}

proc divideSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.divide_sub_image(#, #, #, #, #, #, #, #)".}

proc divideSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.divide_sub_image(#, #, #, #, #, #, #)".}

proc divideSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.divide_sub_image(#, #, #, #, #, #)".}

proc divideSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.divide_sub_image(#, #, #, #, #)".}

proc divideSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int, xfrom: int) {.importcpp: "#.divide_sub_image(#, #, #, #)".}

proc divideSubImage*(this: PfmFile, copy: PfmFile, xto: int, yto: int) {.importcpp: "#.divide_sub_image(#, #, #)".}

proc `*=`*(this: var PNMImage | var PfmFile, multiplier: float32) {.importcpp: "#.operator *=(#)".}

proc indirect1dLookup*(this: PfmFile, indexImage: PfmFile, channel: int, pixelValues: PfmFile) {.importcpp: "#.indirect_1d_lookup(#, #, #)".}

proc gammaCorrect*(this: PNMImage | PfmFile, fromGamma: float32, toGamma: float32) {.importcpp: "#.gamma_correct(#, #)".}

proc gammaCorrectAlpha*(this: PNMImage | PfmFile, fromGamma: float32, toGamma: float32) {.importcpp: "#.gamma_correct_alpha(#, #)".}

proc applyExponent*(this: PNMImage | PfmFile, grayExponent: float32) {.importcpp: "#.apply_exponent(#)".}

proc applyExponent*(this: PNMImage | PfmFile, grayExponent: float32, alphaExponent: float32) {.importcpp: "#.apply_exponent(#, #)".}

proc applyExponent*(this: PfmFile, c0Exponent: float32, c1Exponent: float32, c2Exponent: float32) {.importcpp: "#.apply_exponent(#, #, #)".}

proc applyExponent*(this: PfmFile, c0Exponent: float32, c1Exponent: float32, c2Exponent: float32, c3Exponent: float32) {.importcpp: "#.apply_exponent(#, #, #, #)".}

proc clampVal*(this: PNMImage, inputValue: int): int {.importcpp: "#.clamp_val(#)".}

proc toVal*(this: PNMImage, inputValue: LRGBColorf): xel {.importcpp: "#.to_val(#)".}

proc toVal*(this: PNMImage, inputValue: float32): int {.importcpp: "#.to_val(#)".}

proc toAlphaVal*(this: PNMImage, inputValue: float32): int {.importcpp: "#.to_alpha_val(#)".}

proc fromVal*(this: PNMImage, inputValue: xel): LRGBColorf {.importcpp: "#.from_val(#)".}

proc fromVal*(this: PNMImage, inputValue: int): float32 {.importcpp: "#.from_val(#)".}

proc fromAlphaVal*(this: PNMImage, inputValue: int): float32 {.importcpp: "#.from_alpha_val(#)".}

proc clear*(this: PNMImage, xSize: int, ySize: int, numChannels: int, maxval: int, `type`: PNMFileType, colorSpace: ColorSpace) {.importcpp: "#.clear(#, #, #, #, #, #)".}

proc clear*(this: PNMImage, xSize: int, ySize: int, numChannels: int, maxval: int, `type`: PNMFileType) {.importcpp: "#.clear(#, #, #, #, #)".}

proc clear*(this: PNMImage, xSize: int, ySize: int, numChannels: int, maxval: int) {.importcpp: "#.clear(#, #, #, #)".}

proc clear*(this: PNMImage, xSize: int, ySize: int) {.importcpp: "#.clear(#, #)".}

proc copyFrom*(this: PNMImage, copy: PNMImage) {.importcpp: "#.copy_from(#)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, srcChannel: int, destChannel: int) {.importcpp: "#.copy_channel(#, #, #)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, xto: int, yto: int, cto: int, xfrom: int, yfrom: int, cfrom: int, xSize: int, ySize: int) {.importcpp: "#.copy_channel(#, #, #, #, #, #, #, #, #)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, xto: int, yto: int, cto: int, xfrom: int, yfrom: int, cfrom: int, xSize: int) {.importcpp: "#.copy_channel(#, #, #, #, #, #, #, #)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, xto: int, yto: int, cto: int, xfrom: int, yfrom: int, cfrom: int) {.importcpp: "#.copy_channel(#, #, #, #, #, #, #)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, xto: int, yto: int, cto: int, xfrom: int, yfrom: int) {.importcpp: "#.copy_channel(#, #, #, #, #, #)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, xto: int, yto: int, cto: int, xfrom: int) {.importcpp: "#.copy_channel(#, #, #, #, #)".}

proc copyChannel*(this: PNMImage, copy: PNMImage, xto: int, yto: int, cto: int) {.importcpp: "#.copy_channel(#, #, #, #)".}

proc copyChannelBits*(this: PNMImage, copy: PNMImage, srcChannel: int, destChannel: int, srcMask: int, rightShift: int) {.importcpp: "#.copy_channel_bits(#, #, #, #, #)".}

proc copyHeaderFrom*(this: PNMImage, header: PNMImageHeader) {.importcpp: "#.copy_header_from(#)".}

proc takeFrom*(this: PNMImage, orig: PNMImage) {.importcpp: "#.take_from(#)".}

proc fill*(this: PNMImage, gray: float32) {.importcpp: "#.fill(#)".}

proc fill*(this: PNMImage) {.importcpp: "#.fill()".}

proc fill*(this: PNMImage, red: float32, green: float32, blue: float32) {.importcpp: "#.fill(#, #, #)".}

proc fillVal*(this: PNMImage, gray: int) {.importcpp: "#.fill_val(#)".}

proc fillVal*(this: PNMImage) {.importcpp: "#.fill_val()".}

proc fillVal*(this: PNMImage, red: int, green: int, blue: int) {.importcpp: "#.fill_val(#, #, #)".}

proc alphaFill*(this: PNMImage, alpha: float32) {.importcpp: "#.alpha_fill(#)".}

proc alphaFill*(this: PNMImage) {.importcpp: "#.alpha_fill()".}

proc alphaFillVal*(this: PNMImage, alpha: int) {.importcpp: "#.alpha_fill_val(#)".}

proc alphaFillVal*(this: PNMImage) {.importcpp: "#.alpha_fill_val()".}

proc setReadSize*(this: PNMImage, xSize: int, ySize: int) {.importcpp: "#.set_read_size(#, #)".}

proc clearReadSize*(this: PNMImage) {.importcpp: "#.clear_read_size()".}

proc hasReadSize*(this: PNMImage): bool {.importcpp: "#.has_read_size()".}

proc getReadXSize*(this: PNMImage): int {.importcpp: "#.get_read_x_size()".}

proc getReadYSize*(this: PNMImage): int {.importcpp: "#.get_read_y_size()".}

proc read*(this: PNMImage, filename: Filename, `type`: PNMFileType, reportUnknownType: bool): bool {.importcpp: "#.read(#, #, #)".}

proc read*(this: PNMImage, filename: Filename, `type`: PNMFileType): bool {.importcpp: "#.read(#, #)".}

proc read*(this: PNMImage, filename: Filename): bool {.importcpp: "#.read(#)".}

proc read*(this: PNMImage, data: istream, filename: string, `type`: PNMFileType, reportUnknownType: bool): bool {.importcpp: "#.read(#, nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc read*(this: PNMImage, data: istream, filename: string, `type`: PNMFileType): bool {.importcpp: "#.read(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc read*(this: PNMImage, data: istream, filename: string): bool {.importcpp: "#.read(#, nimStringToStdString(#))", header: stringConversionCode.}

proc read*(this: PNMImage, data: istream): bool {.importcpp: "#.read(#)".}

proc write*(this: PNMImage, filename: Filename, `type`: PNMFileType): bool {.importcpp: "#.write(#, #)".}

proc write*(this: PNMImage, filename: Filename): bool {.importcpp: "#.write(#)".}

proc write*(this: PNMImage, data: iostream | ostream, filename: string, `type`: PNMFileType): bool {.importcpp: "#.write(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc write*(this: PNMImage, data: iostream | ostream, filename: string): bool {.importcpp: "#.write(#, nimStringToStdString(#))", header: stringConversionCode.}

proc write*(this: PNMImage, data: iostream | ostream): bool {.importcpp: "#.write(#)".}

proc setNumChannels*(this: PNMImage, numChannels: int) {.importcpp: "#.set_num_channels(#)".}

proc setColorType*(this: PNMImage, colorType: PNMImageHeader_ColorType) {.importcpp: "#.set_color_type(#)".}

proc setColorSpace*(this: PNMImage, colorSpace: ColorSpace) {.importcpp: "#.set_color_space(#)".}

proc addAlpha*(this: PNMImage) {.importcpp: "#.add_alpha()".}

proc removeAlpha*(this: PNMImage) {.importcpp: "#.remove_alpha()".}

proc makeGrayscale*(this: PNMImage) {.importcpp: "#.make_grayscale()".}

proc makeGrayscale*(this: PNMImage, rc: float32, gc: float32, bc: float32) {.importcpp: "#.make_grayscale(#, #, #)".}

proc makeRgb*(this: PNMImage) {.importcpp: "#.make_rgb()".}

proc premultiplyAlpha*(this: PNMImage) {.importcpp: "#.premultiply_alpha()".}

proc unpremultiplyAlpha*(this: PNMImage) {.importcpp: "#.unpremultiply_alpha()".}

proc setMaxval*(this: PNMImage, maxval: int) {.importcpp: "#.set_maxval(#)".}

proc getXelVal*(this: PNMImage, x: int, y: int): xel {.importcpp: "#.get_xel_val(#, #)".}

proc setXelVal*(this: PNMImage, x: int, y: int, value: xel) {.importcpp: "#.set_xel_val(#, #, #)".}

proc setXelVal*(this: PNMImage, x: int, y: int, gray: int) {.importcpp: "#.set_xel_val(#, #, #)".}

proc setXelVal*(this: PNMImage, x: int, y: int, r: int, g: int, b: int) {.importcpp: "#.set_xel_val(#, #, #, #, #)".}

proc getRedVal*(this: PNMImage, x: int, y: int): int {.importcpp: "#.get_red_val(#, #)".}

proc getGreenVal*(this: PNMImage, x: int, y: int): int {.importcpp: "#.get_green_val(#, #)".}

proc getBlueVal*(this: PNMImage, x: int, y: int): int {.importcpp: "#.get_blue_val(#, #)".}

proc getGrayVal*(this: PNMImage, x: int, y: int): int {.importcpp: "#.get_gray_val(#, #)".}

proc getAlphaVal*(this: PNMImage, x: int, y: int): int {.importcpp: "#.get_alpha_val(#, #)".}

proc setRedVal*(this: PNMImage, x: int, y: int, r: int) {.importcpp: "#.set_red_val(#, #, #)".}

proc setGreenVal*(this: PNMImage, x: int, y: int, g: int) {.importcpp: "#.set_green_val(#, #, #)".}

proc setBlueVal*(this: PNMImage, x: int, y: int, b: int) {.importcpp: "#.set_blue_val(#, #, #)".}

proc setGrayVal*(this: PNMImage, x: int, y: int, gray: int) {.importcpp: "#.set_gray_val(#, #, #)".}

proc setAlphaVal*(this: PNMImage, x: int, y: int, a: int) {.importcpp: "#.set_alpha_val(#, #, #)".}

proc getChannelVal*(this: PNMImage, x: int, y: int, channel: int): int {.importcpp: "#.get_channel_val(#, #, #)".}

proc setChannelVal*(this: PNMImage, x: int, y: int, channel: int, value: int) {.importcpp: "#.set_channel_val(#, #, #, #)".}

proc getChannel*(this: PNMImage, x: int, y: int, channel: int): float32 {.importcpp: "#.get_channel(#, #, #)".}

proc setChannel*(this: PNMImage, x: int, y: int, channel: int, value: float32) {.importcpp: "#.set_channel(#, #, #, #)".}

proc getXel*(this: PNMImage, x: int, y: int): LRGBColorf {.importcpp: "#.get_xel(#, #)".}

proc setXel*(this: PNMImage, x: int, y: int, value: LRGBColorf) {.importcpp: "#.set_xel(#, #, #)".}

proc setXel*(this: PNMImage, x: int, y: int, gray: float32) {.importcpp: "#.set_xel(#, #, #)".}

proc setXel*(this: PNMImage, x: int, y: int, r: float32, g: float32, b: float32) {.importcpp: "#.set_xel(#, #, #, #, #)".}

proc getXelA*(this: PNMImage, x: int, y: int): LColorf {.importcpp: "#.get_xel_a(#, #)".}

proc setXelA*(this: PNMImage, x: int, y: int, value: LColorf) {.importcpp: "#.set_xel_a(#, #, #)".}

proc setXelA*(this: PNMImage, x: int, y: int, r: float32, g: float32, b: float32, a: float32) {.importcpp: "#.set_xel_a(#, #, #, #, #, #)".}

proc getRed*(this: PNMImage, x: int, y: int): float32 {.importcpp: "#.get_red(#, #)".}

proc getGreen*(this: PNMImage, x: int, y: int): float32 {.importcpp: "#.get_green(#, #)".}

proc getBlue*(this: PNMImage, x: int, y: int): float32 {.importcpp: "#.get_blue(#, #)".}

proc getGray*(this: PNMImage, x: int, y: int): float32 {.importcpp: "#.get_gray(#, #)".}

proc getAlpha*(this: PNMImage, x: int, y: int): float32 {.importcpp: "#.get_alpha(#, #)".}

proc setRed*(this: PNMImage, x: int, y: int, r: float32) {.importcpp: "#.set_red(#, #, #)".}

proc setGreen*(this: PNMImage, x: int, y: int, g: float32) {.importcpp: "#.set_green(#, #, #)".}

proc setBlue*(this: PNMImage, x: int, y: int, b: float32) {.importcpp: "#.set_blue(#, #, #)".}

proc setGray*(this: PNMImage, x: int, y: int, gray: float32) {.importcpp: "#.set_gray(#, #, #)".}

proc setAlpha*(this: PNMImage, x: int, y: int, a: float32) {.importcpp: "#.set_alpha(#, #, #)".}

proc getBright*(this: PNMImage, x: int, y: int): float32 {.importcpp: "#.get_bright(#, #)".}

proc getBright*(this: PNMImage, x: int, y: int, rc: float32, gc: float32, bc: float32): float32 {.importcpp: "#.get_bright(#, #, #, #, #)".}

proc getBright*(this: PNMImage, x: int, y: int, rc: float32, gc: float32, bc: float32, ac: float32): float32 {.importcpp: "#.get_bright(#, #, #, #, #, #)".}

proc blend*(this: PNMImage, x: int, y: int, val: LRGBColorf, alpha: float32) {.importcpp: "#.blend(#, #, #, #)".}

proc blend*(this: PNMImage, x: int, y: int, r: float32, g: float32, b: float32, alpha: float32) {.importcpp: "#.blend(#, #, #, #, #, #)".}

proc copySubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.copy_sub_image(#, #, #, #, #, #, #)".}

proc copySubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.copy_sub_image(#, #, #, #, #, #)".}

proc copySubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.copy_sub_image(#, #, #, #, #)".}

proc copySubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int) {.importcpp: "#.copy_sub_image(#, #, #, #)".}

proc copySubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int) {.importcpp: "#.copy_sub_image(#, #, #)".}

proc blendSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.blend_sub_image(#, #, #, #, #, #, #, #)".}

proc blendSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.blend_sub_image(#, #, #, #, #, #, #)".}

proc blendSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.blend_sub_image(#, #, #, #, #, #)".}

proc blendSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.blend_sub_image(#, #, #, #, #)".}

proc blendSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int) {.importcpp: "#.blend_sub_image(#, #, #, #)".}

proc blendSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int) {.importcpp: "#.blend_sub_image(#, #, #)".}

proc addSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.add_sub_image(#, #, #, #, #, #, #, #)".}

proc addSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.add_sub_image(#, #, #, #, #, #, #)".}

proc addSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.add_sub_image(#, #, #, #, #, #)".}

proc addSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.add_sub_image(#, #, #, #, #)".}

proc addSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int) {.importcpp: "#.add_sub_image(#, #, #, #)".}

proc addSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int) {.importcpp: "#.add_sub_image(#, #, #)".}

proc multSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.mult_sub_image(#, #, #, #, #, #, #, #)".}

proc multSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.mult_sub_image(#, #, #, #, #, #, #)".}

proc multSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.mult_sub_image(#, #, #, #, #, #)".}

proc multSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.mult_sub_image(#, #, #, #, #)".}

proc multSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int) {.importcpp: "#.mult_sub_image(#, #, #, #)".}

proc multSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int) {.importcpp: "#.mult_sub_image(#, #, #)".}

proc darkenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.darken_sub_image(#, #, #, #, #, #, #, #)".}

proc darkenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.darken_sub_image(#, #, #, #, #, #, #)".}

proc darkenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.darken_sub_image(#, #, #, #, #, #)".}

proc darkenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.darken_sub_image(#, #, #, #, #)".}

proc darkenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int) {.importcpp: "#.darken_sub_image(#, #, #, #)".}

proc darkenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int) {.importcpp: "#.darken_sub_image(#, #, #)".}

proc lightenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int, pixelScale: float32) {.importcpp: "#.lighten_sub_image(#, #, #, #, #, #, #, #)".}

proc lightenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int, ySize: int) {.importcpp: "#.lighten_sub_image(#, #, #, #, #, #, #)".}

proc lightenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int, xSize: int) {.importcpp: "#.lighten_sub_image(#, #, #, #, #, #)".}

proc lightenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int, yfrom: int) {.importcpp: "#.lighten_sub_image(#, #, #, #, #)".}

proc lightenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int, xfrom: int) {.importcpp: "#.lighten_sub_image(#, #, #, #)".}

proc lightenSubImage*(this: PNMImage, copy: PNMImage, xto: int, yto: int) {.importcpp: "#.lighten_sub_image(#, #, #)".}

proc threshold*(this: PNMImage, selectImage: PNMImage, channel: int, threshold: float32, lt: PNMImage, ge: PNMImage) {.importcpp: "#.threshold(#, #, #, #, #)".}

proc fillDistanceInside*(this: PNMImage, mask: PNMImage, threshold: float32, radius: int, shrinkFromBorder: bool) {.importcpp: "#.fill_distance_inside(#, #, #, #)".}

proc fillDistanceOutside*(this: PNMImage, mask: PNMImage, threshold: float32, radius: int) {.importcpp: "#.fill_distance_outside(#, #, #)".}

proc indirect1dLookup*(this: PNMImage, indexImage: PNMImage, channel: int, pixelValues: PNMImage) {.importcpp: "#.indirect_1d_lookup(#, #, #)".}

proc rescale*(this: PNMImage, minVal: float32, maxVal: float32) {.importcpp: "#.rescale(#, #)".}

proc renderSpot*(this: PNMImage, fg: LColorf, bg: LColorf, minRadius: float32, maxRadius: float32) {.importcpp: "#.render_spot(#, #, #, #)".}

proc expandBorder*(this: PNMImage, left: int, right: int, bottom: int, top: int, color: LColorf) {.importcpp: "#.expand_border(#, #, #, #, #)".}

proc boxFilter*(this: PNMImage, radius: float32) {.importcpp: "#.box_filter(#)".}

proc boxFilter*(this: PNMImage) {.importcpp: "#.box_filter()".}

proc gaussianFilter*(this: PNMImage, radius: float32) {.importcpp: "#.gaussian_filter(#)".}

proc gaussianFilter*(this: PNMImage) {.importcpp: "#.gaussian_filter()".}

proc unfilteredStretchFrom*(this: PNMImage, copy: PNMImage) {.importcpp: "#.unfiltered_stretch_from(#)".}

proc boxFilterFrom*(this: PNMImage, radius: float32, copy: PNMImage) {.importcpp: "#.box_filter_from(#, #)".}

proc gaussianFilterFrom*(this: PNMImage, radius: float32, copy: PNMImage) {.importcpp: "#.gaussian_filter_from(#, #)".}

proc quickFilterFrom*(this: PNMImage, copy: PNMImage, xborder: int, yborder: int) {.importcpp: "#.quick_filter_from(#, #, #)".}

proc quickFilterFrom*(this: PNMImage, copy: PNMImage, xborder: int) {.importcpp: "#.quick_filter_from(#, #)".}

proc quickFilterFrom*(this: PNMImage, copy: PNMImage) {.importcpp: "#.quick_filter_from(#)".}

proc quantize*(this: PNMImage, maxColors: int) {.importcpp: "#.quantize(#)".}

proc perlinNoiseFill*(this: PNMImage, perlin: StackedPerlinNoise2) {.importcpp: "#.perlin_noise_fill(#)".}

proc perlinNoiseFill*(this: PNMImage, sx: float32, sy: float32, tableSize: int, seed: int) {.importcpp: "#.perlin_noise_fill(#, #, #, #)".}

proc perlinNoiseFill*(this: PNMImage, sx: float32, sy: float32, tableSize: int) {.importcpp: "#.perlin_noise_fill(#, #, #)".}

proc perlinNoiseFill*(this: PNMImage, sx: float32, sy: float32) {.importcpp: "#.perlin_noise_fill(#, #)".}

proc remixChannels*(this: PNMImage, conv: LMatrix4) {.importcpp: "#.remix_channels(#)".}

proc applyExponent*(this: PNMImage, redExponent: float32, greenExponent: float32, blueExponent: float32) {.importcpp: "#.apply_exponent(#, #, #)".}

proc applyExponent*(this: PNMImage, redExponent: float32, greenExponent: float32, blueExponent: float32, alphaExponent: float32) {.importcpp: "#.apply_exponent(#, #, #, #)".}

proc getAverageXel*(this: PNMImage): LRGBColorf {.importcpp: "#.get_average_xel()".}

proc getAverageXelA*(this: PNMImage): LColorf {.importcpp: "#.get_average_xel_a()".}

proc getAverageGray*(this: PNMImage): float32 {.importcpp: "#.get_average_gray()".}

proc doFillDistance*(this: PNMImage, xi: int, yi: int, d: int) {.importcpp: "#.do_fill_distance(#, #, #)".}

proc `not`*(this: PNMImage): PNMImage {.importcpp: "#.operator ~()".}

proc `+`*(this: PNMImage, other: LColorf): PNMImage {.importcpp: "#.operator +(#)".}

proc `+`*(this: PNMImage, other: PNMImage): PNMImage {.importcpp: "#.operator +(#)".}

proc `-`*(this: PNMImage, other: LColorf): PNMImage {.importcpp: "#.operator -(#)".}

proc `-`*(this: PNMImage, other: PNMImage): PNMImage {.importcpp: "#.operator -(#)".}

proc `*`*(this: PNMImage, other: LColorf): PNMImage {.importcpp: "#.operator *(#)".}

proc `*`*(this: PNMImage, other: PNMImage): PNMImage {.importcpp: "#.operator *(#)".}

proc `*`*(this: PNMImage, multiplier: float32): PNMImage {.importcpp: "#.operator *(#)".}

proc `+=`*(this: var PNMImage, other: LColorf) {.importcpp: "#.operator +=(#)".}

proc `+=`*(this: var PNMImage, other: PNMImage) {.importcpp: "#.operator +=(#)".}

proc `-=`*(this: var PNMImage, other: LColorf) {.importcpp: "#.operator -=(#)".}

proc `-=`*(this: var PNMImage, other: PNMImage) {.importcpp: "#.operator -=(#)".}

proc `*=`*(this: var PNMImage, other: LColorf) {.importcpp: "#.operator *=(#)".}

proc `*=`*(this: var PNMImage, other: PNMImage) {.importcpp: "#.operator *=(#)".}

proc setPen*(this: PNMPainter, pen: PNMBrush) {.importcpp: "#.set_pen(#)".}

proc getPen*(this: PNMPainter): PNMBrush {.importcpp: "#.get_pen()".}

proc setFill*(this: PNMPainter, fill: PNMBrush) {.importcpp: "#.set_fill(#)".}

proc getFill*(this: PNMPainter): PNMBrush {.importcpp: "#.get_fill()".}

proc drawPoint*(this: PNMPainter, x: float32, y: float32) {.importcpp: "#.draw_point(#, #)".}

proc drawLine*(this: PNMPainter, xa: float32, ya: float32, xb: float32, yb: float32) {.importcpp: "#.draw_line(#, #, #, #)".}

proc drawRectangle*(this: PNMPainter, xa: float32, ya: float32, xb: float32, yb: float32) {.importcpp: "#.draw_rectangle(#, #, #, #)".}

proc getCharacter*(this: TextGlyph): int {.importcpp: "#->get_character()".}

proc hasQuad*(this: TextGlyph): bool {.importcpp: "#->has_quad()".}

proc getQuad*(this: TextGlyph, dimensions: LVecBase4, texcoords: LVecBase4): bool {.importcpp: "#->get_quad((LVecBase4 &)(#), (LVecBase4 &)(#))".}

proc getAdvance*(this: TextGlyph): float {.importcpp: "#->get_advance()".}

proc isWhitespace*(this: TextGlyph): bool {.importcpp: "#->is_whitespace()".}

proc getGeom*(this: TextGlyph, usageHint: GeomEnums_UsageHint): Geom {.importcpp: "#->get_geom(#)".}

proc upcastToNamable*(this: TextFont): Namable {.importcpp: "((Namable *)(TextFont *)(#))".}

proc makeCopy*(this: DynamicTextFont | TextFont): TextFont {.importcpp: "#->make_copy()".}

proc `typecast bool`*(this: TextFont): bool {.importcpp: "(bool)*(#)".}

proc getLineHeight*(this: DynamicTextFont | TextFont | TextNode): float {.importcpp: "#->get_line_height()".}

proc setLineHeight*(this: TextFont, lineHeight: float) {.importcpp: "#->set_line_height(#)".}

proc getSpaceAdvance*(this: DynamicTextFont | TextFont): float {.importcpp: "#->get_space_advance()".}

proc setSpaceAdvance*(this: TextFont, spaceAdvance: float) {.importcpp: "#->set_space_advance(#)".}

proc getGlyph*(this: TextFont, character: int): TextGlyph {.importcpp: "deconstify(#->get_glyph(#))", header: deconstifyCode.}

proc getKerning*(this: TextFont, first: int, second: int): float {.importcpp: "#->get_kerning(#, #)".}

proc getPage*(this: DynamicTextGlyph): DynamicTextPage {.importcpp: "#->get_page()".}

proc intersects*(this: DynamicTextGlyph, x: int, y: int, xSize: int, ySize: int): bool {.importcpp: "#->intersects(#, #, #, #)".}

proc getUvLeft*(this: DynamicTextGlyph): float {.importcpp: "#->get_uv_left()".}

proc getUvBottom*(this: DynamicTextGlyph): float {.importcpp: "#->get_uv_bottom()".}

proc getUvRight*(this: DynamicTextGlyph): float {.importcpp: "#->get_uv_right()".}

proc getUvTop*(this: DynamicTextGlyph): float {.importcpp: "#->get_uv_top()".}

proc upcastToTextFont*(this: DynamicTextFont): TextFont {.importcpp: "(PT(TextFont)(#))".}

proc upcastToFreetypeFont*(this: DynamicTextFont): FreetypeFont {.importcpp: "((FreetypeFont *)(DynamicTextFont *)(#))".}

proc setPointSize*(this: DynamicTextFont, pointSize: float): bool {.importcpp: "#->set_point_size(#)".}

proc getPointSize*(this: DynamicTextFont): float {.importcpp: "#->get_point_size()".}

proc setPixelsPerUnit*(this: DynamicTextFont, pixelsPerUnit: float): bool {.importcpp: "#->set_pixels_per_unit(#)".}

proc getPixelsPerUnit*(this: DynamicTextFont): float {.importcpp: "#->get_pixels_per_unit()".}

proc setScaleFactor*(this: DynamicTextFont, scaleFactor: float): bool {.importcpp: "#->set_scale_factor(#)".}

proc getScaleFactor*(this: DynamicTextFont): float {.importcpp: "#->get_scale_factor()".}

proc setNativeAntialias*(this: DynamicTextFont, nativeAntialias: bool) {.importcpp: "#->set_native_antialias(#)".}

proc getNativeAntialias*(this: DynamicTextFont): bool {.importcpp: "#->get_native_antialias()".}

proc getFontPixelSize*(this: DynamicTextFont): int {.importcpp: "#->get_font_pixel_size()".}

proc setTextureMargin*(this: DynamicTextFont, textureMargin: int) {.importcpp: "#->set_texture_margin(#)".}

proc getTextureMargin*(this: DynamicTextFont): int {.importcpp: "#->get_texture_margin()".}

proc setPolyMargin*(this: DynamicTextFont, polyMargin: float) {.importcpp: "#->set_poly_margin(#)".}

proc getPolyMargin*(this: DynamicTextFont): float {.importcpp: "#->get_poly_margin()".}

proc setPageSize*(this: DynamicTextFont, pageSize: LVecBase2i) {.importcpp: "#->set_page_size((LVecBase2i const &)(#))".}

proc setPageSize*(this: DynamicTextFont, xSize: int, ySize: int) {.importcpp: "#->set_page_size(#, #)".}

proc getPageSize*(this: DynamicTextFont): LVecBase2i {.importcpp: "#->get_page_size()".}

proc getPageXSize*(this: DynamicTextFont): int {.importcpp: "#->get_page_x_size()".}

proc getPageYSize*(this: DynamicTextFont): int {.importcpp: "#->get_page_y_size()".}

proc setRenderMode*(this: DynamicTextFont, renderMode: TextFont_RenderMode) {.importcpp: "#->set_render_mode(#)".}

proc getRenderMode*(this: DynamicTextFont): TextFont_RenderMode {.importcpp: "#->get_render_mode()".}

proc setFg*(this: DynamicTextFont, fg: LColor) {.importcpp: "#->set_fg(#)".}

proc getFg*(this: DynamicTextFont): LColor {.importcpp: "#->get_fg()".}

proc setBg*(this: DynamicTextFont, bg: LColor) {.importcpp: "#->set_bg(#)".}

proc getBg*(this: DynamicTextFont): LColor {.importcpp: "#->get_bg()".}

proc setOutline*(this: DynamicTextFont, outlineColor: LColor, outlineWidth: float, outlineFeather: float) {.importcpp: "#->set_outline(#, #, #)".}

proc getOutlineColor*(this: DynamicTextFont): LColor {.importcpp: "#->get_outline_color()".}

proc getOutlineWidth*(this: DynamicTextFont): float {.importcpp: "#->get_outline_width()".}

proc getOutlineFeather*(this: DynamicTextFont): float {.importcpp: "#->get_outline_feather()".}

proc getTexFormat*(this: DynamicTextFont): Texture_Format {.importcpp: "#->get_tex_format()".}

proc getPage*(this: DynamicTextFont, n: int): DynamicTextPage {.importcpp: "#->get_page(#)".}

proc garbageCollect*(this: DynamicTextFont): int {.importcpp: "#->garbage_collect()".}

proc `==`*(this: TextNode | TextProperties, other: TextNode | TextProperties): bool {.importcpp: "#->operator ==(#)".}

proc `!=`*(this: TextNode | TextProperties, other: TextNode | TextProperties): bool {.importcpp: "#->operator !=(#)".}

proc isAnySpecified*(this: TextNode | TextProperties): bool {.importcpp: "#->is_any_specified()".}

proc setFont*(this: TextNode | TextProperties, font: TextFont) {.importcpp: "#->set_font(#)".}

proc clearFont*(this: TextNode | TextProperties) {.importcpp: "#->clear_font()".}

proc hasFont*(this: TextNode | TextProperties): bool {.importcpp: "#->has_font()".}

proc getFont*(this: TextNode | TextProperties): TextFont {.importcpp: "#->get_font()".}

proc setSmallCaps*(this: TextNode | TextProperties, smallCaps: bool) {.importcpp: "#->set_small_caps(#)".}

proc clearSmallCaps*(this: TextNode | TextProperties) {.importcpp: "#->clear_small_caps()".}

proc hasSmallCaps*(this: TextNode | TextProperties): bool {.importcpp: "#->has_small_caps()".}

proc getSmallCaps*(this: TextNode | TextProperties): bool {.importcpp: "#->get_small_caps()".}

proc setSmallCapsScale*(this: TextNode | TextProperties, smallCapsScale: float) {.importcpp: "#->set_small_caps_scale(#)".}

proc clearSmallCapsScale*(this: TextNode | TextProperties) {.importcpp: "#->clear_small_caps_scale()".}

proc hasSmallCapsScale*(this: TextNode | TextProperties): bool {.importcpp: "#->has_small_caps_scale()".}

proc getSmallCapsScale*(this: TextNode | TextProperties): float {.importcpp: "#->get_small_caps_scale()".}

proc setSlant*(this: TextNode | TextProperties, slant: float) {.importcpp: "#->set_slant(#)".}

proc clearSlant*(this: TextNode | TextProperties) {.importcpp: "#->clear_slant()".}

proc hasSlant*(this: TextNode | TextProperties): bool {.importcpp: "#->has_slant()".}

proc getSlant*(this: TextNode | TextProperties): float {.importcpp: "#->get_slant()".}

proc setUnderscore*(this: TextNode | TextProperties, underscore: bool) {.importcpp: "#->set_underscore(#)".}

proc clearUnderscore*(this: TextNode | TextProperties) {.importcpp: "#->clear_underscore()".}

proc hasUnderscore*(this: TextNode | TextProperties): bool {.importcpp: "#->has_underscore()".}

proc getUnderscore*(this: TextNode | TextProperties): bool {.importcpp: "#->get_underscore()".}

proc setUnderscoreHeight*(this: TextNode | TextProperties, underscoreHeight: float) {.importcpp: "#->set_underscore_height(#)".}

proc clearUnderscoreHeight*(this: TextNode | TextProperties) {.importcpp: "#->clear_underscore_height()".}

proc hasUnderscoreHeight*(this: TextNode | TextProperties): bool {.importcpp: "#->has_underscore_height()".}

proc getUnderscoreHeight*(this: TextNode | TextProperties): float {.importcpp: "#->get_underscore_height()".}

proc setAlign*(this: TextNode | TextProperties, alignType: TextProperties_Alignment) {.importcpp: "#->set_align(#)".}

proc clearAlign*(this: TextNode | TextProperties) {.importcpp: "#->clear_align()".}

proc hasAlign*(this: TextNode | TextProperties): bool {.importcpp: "#->has_align()".}

proc getAlign*(this: TextNode | TextProperties): TextProperties_Alignment {.importcpp: "#->get_align()".}

proc setIndent*(this: TextNode | TextProperties, indent: float) {.importcpp: "#->set_indent(#)".}

proc clearIndent*(this: TextNode | TextProperties) {.importcpp: "#->clear_indent()".}

proc hasIndent*(this: TextNode | TextProperties): bool {.importcpp: "#->has_indent()".}

proc getIndent*(this: TextNode | TextProperties): float {.importcpp: "#->get_indent()".}

proc setWordwrap*(this: TextNode | TextProperties, wordwrap: float) {.importcpp: "#->set_wordwrap(#)".}

proc clearWordwrap*(this: TextNode | TextProperties) {.importcpp: "#->clear_wordwrap()".}

proc hasWordwrap*(this: TextNode | TextProperties): bool {.importcpp: "#->has_wordwrap()".}

proc getWordwrap*(this: TextNode | TextProperties): float {.importcpp: "#->get_wordwrap()".}

proc setPreserveTrailingWhitespace*(this: TextNode | TextProperties, preserveTrailingWhitespace: bool) {.importcpp: "#->set_preserve_trailing_whitespace(#)".}

proc clearPreserveTrailingWhitespace*(this: TextNode | TextProperties) {.importcpp: "#->clear_preserve_trailing_whitespace()".}

proc hasPreserveTrailingWhitespace*(this: TextNode | TextProperties): bool {.importcpp: "#->has_preserve_trailing_whitespace()".}

proc getPreserveTrailingWhitespace*(this: TextNode | TextProperties): bool {.importcpp: "#->get_preserve_trailing_whitespace()".}

proc setTextColor*(this: TextNode | TextProperties, textColor: LColor) {.importcpp: "#->set_text_color(#)".}

proc setTextColor*(this: TextNode | TextProperties, r: float, g: float, b: float, a: float) {.importcpp: "#->set_text_color(#, #, #, #)".}

proc clearTextColor*(this: TextNode | TextProperties) {.importcpp: "#->clear_text_color()".}

proc hasTextColor*(this: TextNode | TextProperties): bool {.importcpp: "#->has_text_color()".}

proc getTextColor*(this: TextNode | TextProperties): LColor {.importcpp: "#->get_text_color()".}

proc setShadowColor*(this: TextNode | TextProperties, shadowColor: LColor) {.importcpp: "#->set_shadow_color(#)".}

proc setShadowColor*(this: TextNode | TextProperties, r: float, g: float, b: float, a: float) {.importcpp: "#->set_shadow_color(#, #, #, #)".}

proc clearShadowColor*(this: TextNode | TextProperties) {.importcpp: "#->clear_shadow_color()".}

proc hasShadowColor*(this: TextNode | TextProperties): bool {.importcpp: "#->has_shadow_color()".}

proc getShadowColor*(this: TextNode | TextProperties): LColor {.importcpp: "#->get_shadow_color()".}

proc setShadow*(this: TextNode | TextProperties, shadowOffset: LVecBase2) {.importcpp: "#->set_shadow((LVecBase2 const &)(#))".}

proc setShadow*(this: TextNode | TextProperties, xoffset: float, yoffset: float) {.importcpp: "#->set_shadow(#, #)".}

proc clearShadow*(this: TextNode | TextProperties) {.importcpp: "#->clear_shadow()".}

proc hasShadow*(this: TextNode | TextProperties): bool {.importcpp: "#->has_shadow()".}

proc getShadow*(this: TextNode | TextProperties): LVector2 {.importcpp: "#->get_shadow()".}

proc setBin*(this: TextNode | TextProperties, bin: string) {.importcpp: "#->set_bin(nimStringToStdString(#))", header: stringConversionCode.}

proc clearBin*(this: TextNode | TextProperties) {.importcpp: "#->clear_bin()".}

proc hasBin*(this: TextNode | TextProperties): bool {.importcpp: "#->has_bin()".}

proc getBin*(this: TextNode | TextProperties): string {.importcpp: "nimStringFromStdString(#->get_bin())", header: stringConversionCode.}

proc setDrawOrder*(this: TextNode | TextProperties, drawOrder: int): int {.importcpp: "#->set_draw_order(#)".}

proc clearDrawOrder*(this: TextNode | TextProperties) {.importcpp: "#->clear_draw_order()".}

proc hasDrawOrder*(this: TextNode | TextProperties): bool {.importcpp: "#->has_draw_order()".}

proc setTabWidth*(this: TextNode | TextProperties, tabWidth: float) {.importcpp: "#->set_tab_width(#)".}

proc clearTabWidth*(this: TextNode | TextProperties) {.importcpp: "#->clear_tab_width()".}

proc hasTabWidth*(this: TextNode | TextProperties): bool {.importcpp: "#->has_tab_width()".}

proc getTabWidth*(this: TextNode | TextProperties): float {.importcpp: "#->get_tab_width()".}

proc setGlyphScale*(this: TextNode | TextProperties, glyphScale: float) {.importcpp: "#->set_glyph_scale(#)".}

proc clearGlyphScale*(this: TextNode | TextProperties) {.importcpp: "#->clear_glyph_scale()".}

proc hasGlyphScale*(this: TextNode | TextProperties): bool {.importcpp: "#->has_glyph_scale()".}

proc getGlyphScale*(this: TextNode | TextProperties): float {.importcpp: "#->get_glyph_scale()".}

proc setGlyphShift*(this: TextNode | TextProperties, glyphShift: float) {.importcpp: "#->set_glyph_shift(#)".}

proc clearGlyphShift*(this: TextNode | TextProperties) {.importcpp: "#->clear_glyph_shift()".}

proc hasGlyphShift*(this: TextNode | TextProperties): bool {.importcpp: "#->has_glyph_shift()".}

proc getGlyphShift*(this: TextNode | TextProperties): float {.importcpp: "#->get_glyph_shift()".}

proc setTextScale*(this: TextNode | TextProperties, textScale: float) {.importcpp: "#->set_text_scale(#)".}

proc clearTextScale*(this: TextNode | TextProperties) {.importcpp: "#->clear_text_scale()".}

proc hasTextScale*(this: TextNode | TextProperties): bool {.importcpp: "#->has_text_scale()".}

proc getTextScale*(this: TextNode | TextProperties): float {.importcpp: "#->get_text_scale()".}

proc setDirection*(this: TextNode | TextProperties, direction: TextProperties_Direction) {.importcpp: "#->set_direction(#)".}

proc clearDirection*(this: TextNode | TextProperties) {.importcpp: "#->clear_direction()".}

proc hasDirection*(this: TextNode | TextProperties): bool {.importcpp: "#->has_direction()".}

proc getDirection*(this: TextNode | TextProperties): TextProperties_Direction {.importcpp: "#->get_direction()".}

proc addProperties*(this: TextNode | TextProperties, other: TextNode | TextProperties) {.importcpp: "#->add_properties(#)".}

proc getModel*(this: TextGraphic): NodePath {.importcpp: "#.get_model()".}

proc setModel*(this: TextGraphic, model: NodePath) {.importcpp: "#.set_model(#)".}

proc getFrame*(this: TextGraphic): LVecBase4 {.importcpp: "#.get_frame()".}

proc setFrame*(this: TextGraphic, frame: LVecBase4) {.importcpp: "#.set_frame((LVecBase4 const &)(#))".}

proc setFrame*(this: TextGraphic, left: float, right: float, bottom: float, top: float) {.importcpp: "#.set_frame(#, #, #, #)".}

proc getInstanceFlag*(this: TextGraphic): bool {.importcpp: "#.get_instance_flag()".}

proc setInstanceFlag*(this: TextGraphic, instanceFlag: bool) {.importcpp: "#.set_instance_flag(#)".}

proc setProperties*(this: TextPropertiesManager, name: string, properties: TextNode | TextProperties) {.importcpp: "#.set_properties(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getProperties*(this: TextPropertiesManager, name: string): TextProperties {.importcpp: "#.get_properties(nimStringToStdString(#))", header: stringConversionCode.}

proc hasProperties*(this: TextPropertiesManager, name: string): bool {.importcpp: "#.has_properties(nimStringToStdString(#))", header: stringConversionCode.}

proc clearProperties*(this: TextPropertiesManager, name: string) {.importcpp: "#.clear_properties(nimStringToStdString(#))", header: stringConversionCode.}

proc setGraphic*(this: TextPropertiesManager, name: string, model: NodePath) {.importcpp: "#.set_graphic(nimStringToStdString(#), #)", header: stringConversionCode.}

proc setGraphic*(this: TextPropertiesManager, name: string, graphic: TextGraphic) {.importcpp: "#.set_graphic(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getGraphic*(this: TextPropertiesManager, name: string): TextGraphic {.importcpp: "#.get_graphic(nimStringToStdString(#))", header: stringConversionCode.}

proc hasGraphic*(this: TextPropertiesManager, name: string): bool {.importcpp: "#.has_graphic(nimStringToStdString(#))", header: stringConversionCode.}

proc clearGraphic*(this: TextPropertiesManager, name: string) {.importcpp: "#.clear_graphic(nimStringToStdString(#))", header: stringConversionCode.}

proc setUsageHint*(this: TextAssembler, usageHint: GeomEnums_UsageHint) {.importcpp: "#.set_usage_hint(#)".}

proc getUsageHint*(this: TextAssembler): GeomEnums_UsageHint {.importcpp: "#.get_usage_hint()".}

proc setMaxRows*(this: TextAssembler, maxRows: int) {.importcpp: "#.set_max_rows(#)".}

proc getMaxRows*(this: TextAssembler): int {.importcpp: "#.get_max_rows()".}

proc setDynamicMerge*(this: TextAssembler, dynamicMerge: bool) {.importcpp: "#.set_dynamic_merge(#)".}

proc getDynamicMerge*(this: TextAssembler): bool {.importcpp: "#.get_dynamic_merge()".}

proc setMultilineMode*(this: TextAssembler, flag: bool) {.importcpp: "#.set_multiline_mode(#)".}

proc getMultilineMode*(this: TextAssembler): bool {.importcpp: "#.get_multiline_mode()".}

proc setProperties*(this: TextAssembler, properties: TextNode | TextProperties) {.importcpp: "#.set_properties(#)".}

proc getProperties*(this: TextAssembler): TextProperties {.importcpp: "#.get_properties()".}

proc getProperties*(this: TextAssembler, n: int): TextProperties {.importcpp: "#.get_properties(#)".}

proc getProperties*(this: TextAssembler, r: int, c: int): TextProperties {.importcpp: "#.get_properties(#, #)".}

proc setWtext*(this: TextAssembler, wtext: string): bool {.importcpp: "#.set_wtext(nimStringToStdString(#))", header: stringConversionCode.}

proc setWsubstr*(this: TextAssembler, wtext: string, start: int, count: int): bool {.importcpp: "#.set_wsubstr(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc getPlainWtext*(this: TextAssembler): string {.importcpp: "nimStringFromStdString(#.get_plain_wtext())", header: stringConversionCode.}

proc getWordwrappedPlainWtext*(this: TextAssembler): string {.importcpp: "nimStringFromStdString(#.get_wordwrapped_plain_wtext())", header: stringConversionCode.}

proc getWtext*(this: TextAssembler): string {.importcpp: "nimStringFromStdString(#.get_wtext())", header: stringConversionCode.}

proc getWordwrappedWtext*(this: TextAssembler): string {.importcpp: "nimStringFromStdString(#.get_wordwrapped_wtext())", header: stringConversionCode.}

proc calcR*(this: TextAssembler, n: int): int {.importcpp: "#.calc_r(#)".}

proc calcC*(this: TextAssembler, n: int): int {.importcpp: "#.calc_c(#)".}

proc calcIndex*(this: TextAssembler, r: int, c: int): int {.importcpp: "#.calc_index(#, #)".}

proc getNumCharacters*(this: TextAssembler): int {.importcpp: "#.get_num_characters()".}

proc getCharacter*(this: TextAssembler, n: int): int {.importcpp: "#.get_character(#)".}

proc getCharacter*(this: TextAssembler, r: int, c: int): int {.importcpp: "#.get_character(#, #)".}

proc getGraphic*(this: TextAssembler, n: int): TextGraphic {.importcpp: "#.get_graphic(#)".}

proc getGraphic*(this: TextAssembler, r: int, c: int): TextGraphic {.importcpp: "#.get_graphic(#, #)".}

proc getWidth*(this: TextAssembler, n: int): float {.importcpp: "#.get_width(#)".}

proc getWidth*(this: TextAssembler, r: int, c: int): float {.importcpp: "#.get_width(#, #)".}

proc getNumRows*(this: TextAssembler): int {.importcpp: "#.get_num_rows()".}

proc getNumCols*(this: TextAssembler, r: int): int {.importcpp: "#.get_num_cols(#)".}

proc getXpos*(this: TextAssembler, r: int, c: int): float {.importcpp: "#.get_xpos(#, #)".}

proc getYpos*(this: TextAssembler, r: int, c: int): float {.importcpp: "#.get_ypos(#, #)".}

proc assembleText*(this: TextAssembler): PandaNode {.importcpp: "#.assemble_text()".}

proc getUl*(this: TextAssembler): LVector2 {.importcpp: "#.get_ul()".}

proc getLr*(this: TextAssembler): LVector2 {.importcpp: "#.get_lr()".}

proc upcastToTextEncoder*(this: TextNode): TextEncoder {.importcpp: "((TextEncoder *)(TextNode *)(#))".}

proc upcastToTextProperties*(this: TextNode): TextProperties {.importcpp: "((TextProperties *)(TextNode *)(#))".}

proc setMaxRows*(this: TextNode, maxRows: int) {.importcpp: "#->set_max_rows(#)".}

proc clearMaxRows*(this: TextNode) {.importcpp: "#->clear_max_rows()".}

proc hasMaxRows*(this: TextNode): bool {.importcpp: "#->has_max_rows()".}

proc getMaxRows*(this: TextNode): int {.importcpp: "#->get_max_rows()".}

proc hasOverflow*(this: TextNode): bool {.importcpp: "#->has_overflow()".}

proc setFrameColor*(this: TextNode, frameColor: LColor) {.importcpp: "#->set_frame_color(#)".}

proc setFrameColor*(this: TextNode, r: float, g: float, b: float, a: float) {.importcpp: "#->set_frame_color(#, #, #, #)".}

proc getFrameColor*(this: TextNode): LColor {.importcpp: "#->get_frame_color()".}

proc setCardBorder*(this: TextNode, size: float, uvPortion: float) {.importcpp: "#->set_card_border(#, #)".}

proc clearCardBorder*(this: TextNode) {.importcpp: "#->clear_card_border()".}

proc getCardBorderSize*(this: TextNode): float {.importcpp: "#->get_card_border_size()".}

proc getCardBorderUvPortion*(this: TextNode): float {.importcpp: "#->get_card_border_uv_portion()".}

proc hasCardBorder*(this: TextNode): bool {.importcpp: "#->has_card_border()".}

proc setCardColor*(this: TextNode, cardColor: LColor) {.importcpp: "#->set_card_color(#)".}

proc setCardColor*(this: TextNode, r: float, g: float, b: float, a: float) {.importcpp: "#->set_card_color(#, #, #, #)".}

proc getCardColor*(this: TextNode): LColor {.importcpp: "#->get_card_color()".}

proc setCardTexture*(this: TextNode, cardTexture: Texture) {.importcpp: "#->set_card_texture(#)".}

proc clearCardTexture*(this: TextNode) {.importcpp: "#->clear_card_texture()".}

proc hasCardTexture*(this: TextNode): bool {.importcpp: "#->has_card_texture()".}

proc getCardTexture*(this: TextNode): Texture {.importcpp: "#->get_card_texture()".}

proc setFrameAsMargin*(this: TextNode, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_frame_as_margin(#, #, #, #)".}

proc setFrameActual*(this: TextNode, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_frame_actual(#, #, #, #)".}

proc clearFrame*(this: PGItem | TextNode) {.importcpp: "#->clear_frame()".}

proc hasFrame*(this: PGItem | TextNode): bool {.importcpp: "#->has_frame()".}

proc isFrameAsMargin*(this: TextNode): bool {.importcpp: "#->is_frame_as_margin()".}

proc getFrameAsSet*(this: TextNode): LVecBase4 {.importcpp: "#->get_frame_as_set()".}

proc getFrameActual*(this: TextNode): LVecBase4 {.importcpp: "#->get_frame_actual()".}

proc setFrameLineWidth*(this: TextNode, lineWidth: float) {.importcpp: "#->set_frame_line_width(#)".}

proc getFrameLineWidth*(this: TextNode): float {.importcpp: "#->get_frame_line_width()".}

proc setFrameCorners*(this: TextNode, corners: bool) {.importcpp: "#->set_frame_corners(#)".}

proc getFrameCorners*(this: TextNode): bool {.importcpp: "#->get_frame_corners()".}

proc setCardAsMargin*(this: TextNode, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_card_as_margin(#, #, #, #)".}

proc setCardActual*(this: TextNode, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_card_actual(#, #, #, #)".}

proc setCardDecal*(this: TextNode, cardDecal: bool) {.importcpp: "#->set_card_decal(#)".}

proc clearCard*(this: TextNode) {.importcpp: "#->clear_card()".}

proc hasCard*(this: TextNode): bool {.importcpp: "#->has_card()".}

proc getCardDecal*(this: TextNode): bool {.importcpp: "#->get_card_decal()".}

proc isCardAsMargin*(this: TextNode): bool {.importcpp: "#->is_card_as_margin()".}

proc getCardAsSet*(this: TextNode): LVecBase4 {.importcpp: "#->get_card_as_set()".}

proc getCardActual*(this: TextNode): LVecBase4 {.importcpp: "#->get_card_actual()".}

proc getCardTransformed*(this: TextNode): LVecBase4 {.importcpp: "#->get_card_transformed()".}

proc setTransform*(this: TextNode, transform: LMatrix4) {.importcpp: "#->set_transform(#)".}

proc setFlattenFlags*(this: TextNode, flattenFlags: int) {.importcpp: "#->set_flatten_flags(#)".}

proc getFlattenFlags*(this: TextNode): int {.importcpp: "#->get_flatten_flags()".}

proc getWordwrappedText*(this: TextNode): string {.importcpp: "nimStringFromStdString(#->get_wordwrapped_text())", header: stringConversionCode.}

proc calcWidth*(this: TextNode, line: string): float {.importcpp: "#->calc_width(nimStringToStdString(#))", header: stringConversionCode.}

proc calcWidth*(this: TextNode, character: int): float {.importcpp: "#->calc_width(#)".}

proc hasExactCharacter*(this: TextNode, character: int): bool {.importcpp: "#->has_exact_character(#)".}

proc hasCharacter*(this: TextNode, character: int): bool {.importcpp: "#->has_character(#)".}

proc isWhitespace*(this: TextNode, character: int): bool {.importcpp: "#->is_whitespace(#)".}

proc getWordwrappedWtext*(this: TextNode): string {.importcpp: "nimStringFromStdString(#->get_wordwrapped_wtext())", header: stringConversionCode.}

proc getHeight*(this: TextNode): float {.importcpp: "#->get_height()".}

proc getWidth*(this: TextNode): float {.importcpp: "#->get_width()".}

proc getUpperLeft3d*(this: TextNode): LPoint3 {.importcpp: "#->get_upper_left_3d()".}

proc getLowerRight3d*(this: TextNode): LPoint3 {.importcpp: "#->get_lower_right_3d()".}

proc getInternalGeom*(this: TextNode): PandaNode {.importcpp: "#->get_internal_geom()".}

proc setButtonDownEvent*(this: ButtonThrower, buttonDownEvent: string) {.importcpp: "#->set_button_down_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getButtonDownEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_button_down_event())", header: stringConversionCode.}

proc setButtonUpEvent*(this: ButtonThrower, buttonUpEvent: string) {.importcpp: "#->set_button_up_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getButtonUpEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_button_up_event())", header: stringConversionCode.}

proc setButtonRepeatEvent*(this: ButtonThrower, buttonRepeatEvent: string) {.importcpp: "#->set_button_repeat_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getButtonRepeatEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_button_repeat_event())", header: stringConversionCode.}

proc setKeystrokeEvent*(this: ButtonThrower, keystrokeEvent: string) {.importcpp: "#->set_keystroke_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getKeystrokeEvent*(this: ButtonThrower | PGItem): string {.importcpp: "nimStringFromStdString(#->get_keystroke_event())", header: stringConversionCode.}

proc setCandidateEvent*(this: ButtonThrower, candidateEvent: string) {.importcpp: "#->set_candidate_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getCandidateEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_candidate_event())", header: stringConversionCode.}

proc setMoveEvent*(this: ButtonThrower, moveEvent: string) {.importcpp: "#->set_move_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getMoveEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_move_event())", header: stringConversionCode.}

proc setRawButtonDownEvent*(this: ButtonThrower, rawButtonDownEvent: string) {.importcpp: "#->set_raw_button_down_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getRawButtonDownEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_raw_button_down_event())", header: stringConversionCode.}

proc setRawButtonUpEvent*(this: ButtonThrower, rawButtonUpEvent: string) {.importcpp: "#->set_raw_button_up_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getRawButtonUpEvent*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_raw_button_up_event())", header: stringConversionCode.}

proc setPrefix*(this: ButtonThrower, prefix: string) {.importcpp: "#->set_prefix(nimStringToStdString(#))", header: stringConversionCode.}

proc getPrefix*(this: ButtonThrower): string {.importcpp: "nimStringFromStdString(#->get_prefix())", header: stringConversionCode.}

proc setSpecificFlag*(this: ButtonThrower, specificFlag: bool) {.importcpp: "#->set_specific_flag(#)".}

proc getSpecificFlag*(this: ButtonThrower): bool {.importcpp: "#->get_specific_flag()".}

proc setTimeFlag*(this: ButtonThrower, timeFlag: bool) {.importcpp: "#->set_time_flag(#)".}

proc getTimeFlag*(this: ButtonThrower): bool {.importcpp: "#->get_time_flag()".}

proc getModifierButtons*(this: ButtonThrower | MouseWatcher): ModifierButtons {.importcpp: "#->get_modifier_buttons()".}

proc setModifierButtons*(this: ButtonThrower | MouseWatcher, mods: ModifierButtons) {.importcpp: "#->set_modifier_buttons(#)".}

proc setThrowButtonsActive*(this: ButtonThrower, flag: bool) {.importcpp: "#->set_throw_buttons_active(#)".}

proc getThrowButtonsActive*(this: ButtonThrower): bool {.importcpp: "#->get_throw_buttons_active()".}

proc addThrowButton*(this: ButtonThrower, mods: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#->add_throw_button(#, #)".}

proc removeThrowButton*(this: ButtonThrower, mods: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#->remove_throw_button(#, #)".}

proc hasThrowButton*(this: ButtonThrower, button: ButtonHandle): bool {.importcpp: "#->has_throw_button(#)".}

proc hasThrowButton*(this: ButtonThrower, mods: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#->has_throw_button(#, #)".}

proc clearThrowButtons*(this: ButtonThrower) {.importcpp: "#->clear_throw_buttons()".}

proc requireButton*(this: MouseInterfaceNode, button: ButtonHandle, isDown: bool) {.importcpp: "#->require_button(#, #)".}

proc clearButton*(this: MouseInterfaceNode, button: ButtonHandle) {.importcpp: "#->clear_button(#)".}

proc clearAllButtons*(this: MouseInterfaceNode) {.importcpp: "#->clear_all_buttons()".}

proc setForwardSpeed*(this: DriveInterface, speed: float) {.importcpp: "#->set_forward_speed(#)".}

proc getForwardSpeed*(this: DriveInterface): float {.importcpp: "#->get_forward_speed()".}

proc setReverseSpeed*(this: DriveInterface, speed: float) {.importcpp: "#->set_reverse_speed(#)".}

proc getReverseSpeed*(this: DriveInterface): float {.importcpp: "#->get_reverse_speed()".}

proc setRotateSpeed*(this: DriveInterface, speed: float) {.importcpp: "#->set_rotate_speed(#)".}

proc getRotateSpeed*(this: DriveInterface): float {.importcpp: "#->get_rotate_speed()".}

proc setVerticalDeadZone*(this: DriveInterface, zone: float) {.importcpp: "#->set_vertical_dead_zone(#)".}

proc getVerticalDeadZone*(this: DriveInterface): float {.importcpp: "#->get_vertical_dead_zone()".}

proc setHorizontalDeadZone*(this: DriveInterface, zone: float) {.importcpp: "#->set_horizontal_dead_zone(#)".}

proc getHorizontalDeadZone*(this: DriveInterface): float {.importcpp: "#->get_horizontal_dead_zone()".}

proc setVerticalRampUpTime*(this: DriveInterface, rampUpTime: float) {.importcpp: "#->set_vertical_ramp_up_time(#)".}

proc getVerticalRampUpTime*(this: DriveInterface): float {.importcpp: "#->get_vertical_ramp_up_time()".}

proc setVerticalRampDownTime*(this: DriveInterface, rampDownTime: float) {.importcpp: "#->set_vertical_ramp_down_time(#)".}

proc getVerticalRampDownTime*(this: DriveInterface): float {.importcpp: "#->get_vertical_ramp_down_time()".}

proc setHorizontalRampUpTime*(this: DriveInterface, rampUpTime: float) {.importcpp: "#->set_horizontal_ramp_up_time(#)".}

proc getHorizontalRampUpTime*(this: DriveInterface): float {.importcpp: "#->get_horizontal_ramp_up_time()".}

proc setHorizontalRampDownTime*(this: DriveInterface, rampDownTime: float) {.importcpp: "#->set_horizontal_ramp_down_time(#)".}

proc getHorizontalRampDownTime*(this: DriveInterface): float {.importcpp: "#->get_horizontal_ramp_down_time()".}

proc getSpeed*(this: DriveInterface): float {.importcpp: "#->get_speed()".}

proc getRotSpeed*(this: DriveInterface): float {.importcpp: "#->get_rot_speed()".}

proc getX*(this: DriveInterface | Trackball): float {.importcpp: "#->get_x()".}

proc getY*(this: DriveInterface | Trackball): float {.importcpp: "#->get_y()".}

proc getZ*(this: DriveInterface | Trackball): float {.importcpp: "#->get_z()".}

proc setPos*(this: DriveInterface | Trackball, vec: LVecBase3) {.importcpp: "#->set_pos((LVecBase3 const &)(#))".}

proc setX*(this: DriveInterface | Trackball, x: float) {.importcpp: "#->set_x(#)".}

proc setY*(this: DriveInterface | Trackball, y: float) {.importcpp: "#->set_y(#)".}

proc setZ*(this: DriveInterface | Trackball, z: float) {.importcpp: "#->set_z(#)".}

proc getH*(this: DriveInterface | Trackball): float {.importcpp: "#->get_h()".}

proc getP*(this: DriveInterface | Trackball): float {.importcpp: "#->get_p()".}

proc getR*(this: DriveInterface | Trackball): float {.importcpp: "#->get_r()".}

proc setHpr*(this: DriveInterface | Trackball, hpr: LVecBase3) {.importcpp: "#->set_hpr((LVecBase3 const &)(#))".}

proc setHpr*(this: DriveInterface | Trackball, h: float, p: float, r: float) {.importcpp: "#->set_hpr(#, #, #)".}

proc setH*(this: DriveInterface | Trackball, h: float) {.importcpp: "#->set_h(#)".}

proc setP*(this: DriveInterface | Trackball, p: float) {.importcpp: "#->set_p(#)".}

proc setR*(this: DriveInterface | Trackball, r: float) {.importcpp: "#->set_r(#)".}

proc setForceRoll*(this: DriveInterface, forceRoll: float) {.importcpp: "#->set_force_roll(#)".}

proc setIgnoreMouse*(this: DriveInterface, ignoreMouse: bool) {.importcpp: "#->set_ignore_mouse(#)".}

proc getIgnoreMouse*(this: DriveInterface): bool {.importcpp: "#->get_ignore_mouse()".}

proc setForceMouse*(this: DriveInterface, forceMouse: bool) {.importcpp: "#->set_force_mouse(#)".}

proc getForceMouse*(this: DriveInterface): bool {.importcpp: "#->get_force_mouse()".}

proc setStopThisFrame*(this: DriveInterface, stopThisFrame: bool) {.importcpp: "#->set_stop_this_frame(#)".}

proc getStopThisFrame*(this: DriveInterface): bool {.importcpp: "#->get_stop_this_frame()".}

proc setMat*(this: DriveInterface | Trackball, mat: LMatrix4) {.importcpp: "#->set_mat(#)".}

proc forceDgraph*(this: DriveInterface) {.importcpp: "#->force_dgraph()".}

proc upcastToNamable*(this: MouseWatcherRegion): Namable {.importcpp: "((Namable *)(MouseWatcherRegion *)(#))".}

proc getArea*(this: MouseWatcherRegion): float {.importcpp: "#->get_area()".}

proc setKeyboard*(this: MouseWatcherRegion, keyboard: bool) {.importcpp: "#->set_keyboard(#)".}

proc getKeyboard*(this: MouseWatcherRegion): bool {.importcpp: "#->get_keyboard()".}

proc setSuppressFlags*(this: MouseWatcherRegion | PGItem, suppressFlags: int) {.importcpp: "#->set_suppress_flags(#)".}

proc getSuppressFlags*(this: MouseWatcherRegion | PGItem): int {.importcpp: "#->get_suppress_flags()".}

proc addRegion*(this: MouseWatcher | MouseWatcherBase, region: MouseWatcherRegion) {.importcpp: "#->add_region(#)".}

proc hasRegion*(this: MouseWatcher | MouseWatcherBase, region: MouseWatcherRegion): bool {.importcpp: "#->has_region(#)".}

proc removeRegion*(this: MouseWatcher | MouseWatcherBase, region: MouseWatcherRegion): bool {.importcpp: "#->remove_region(#)".}

proc findRegion*(this: MouseWatcher | MouseWatcherBase, name: string): MouseWatcherRegion {.importcpp: "#->find_region(nimStringToStdString(#))", header: stringConversionCode.}

proc clearRegions*(this: MouseWatcher | MouseWatcherBase) {.importcpp: "#->clear_regions()".}

proc sortRegions*(this: MouseWatcher | MouseWatcherBase) {.importcpp: "#->sort_regions()".}

proc isSorted*(this: MouseWatcher | MouseWatcherBase): bool {.importcpp: "#->is_sorted()".}

proc getRegion*(this: MouseWatcher | MouseWatcherBase, n: int): MouseWatcherRegion {.importcpp: "#->get_region(#)".}

proc showRegions*(this: MouseWatcher | MouseWatcherBase, render2d: NodePath, binName: string, drawOrder: int) {.importcpp: "#->show_regions(#, nimStringToStdString(#), #)", header: stringConversionCode.}

proc hideRegions*(this: MouseWatcher | MouseWatcherBase) {.importcpp: "#->hide_regions()".}

proc updateRegions*(this: MouseWatcher | MouseWatcherBase) {.importcpp: "#->update_regions()".}

proc upcastToMouseWatcherBase*(this: MouseWatcherGroup): MouseWatcherBase {.importcpp: "((MouseWatcherBase *)(MouseWatcherGroup *)(#))".}

proc upcastToMouseWatcherBase*(this: MouseWatcher): MouseWatcherBase {.importcpp: "((MouseWatcherBase *)(MouseWatcher *)(#))".}

proc hasMouse*(this: MouseWatcher): bool {.importcpp: "#->has_mouse()".}

proc isMouseOpen*(this: MouseWatcher): bool {.importcpp: "#->is_mouse_open()".}

proc getMouse*(this: MouseWatcher): LPoint2 {.importcpp: "#->get_mouse()".}

proc getMouseX*(this: MouseWatcher): float {.importcpp: "#->get_mouse_x()".}

proc getMouseY*(this: MouseWatcher): float {.importcpp: "#->get_mouse_y()".}

proc isOverRegion*(this: MouseWatcher): bool {.importcpp: "#->is_over_region()".}

proc isOverRegion*(this: MouseWatcher, pos: LPoint2): bool {.importcpp: "#->is_over_region((LPoint2 const &)(#))".}

proc isOverRegion*(this: MouseWatcher, x: float, y: float): bool {.importcpp: "#->is_over_region(#, #)".}

proc getOverRegion*(this: MouseWatcher): MouseWatcherRegion {.importcpp: "#->get_over_region()".}

proc getOverRegion*(this: MouseWatcher, pos: LPoint2): MouseWatcherRegion {.importcpp: "#->get_over_region((LPoint2 const &)(#))".}

proc getOverRegion*(this: MouseWatcher, x: float, y: float): MouseWatcherRegion {.importcpp: "#->get_over_region(#, #)".}

proc isButtonDown*(this: MouseWatcher, button: ButtonHandle): bool {.importcpp: "#->is_button_down(#)".}

proc setButtonDownPattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_button_down_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getButtonDownPattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_button_down_pattern())", header: stringConversionCode.}

proc setButtonUpPattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_button_up_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getButtonUpPattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_button_up_pattern())", header: stringConversionCode.}

proc setButtonRepeatPattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_button_repeat_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getButtonRepeatPattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_button_repeat_pattern())", header: stringConversionCode.}

proc setEnterPattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_enter_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getEnterPattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_enter_pattern())", header: stringConversionCode.}

proc setLeavePattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_leave_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getLeavePattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_leave_pattern())", header: stringConversionCode.}

proc setWithinPattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_within_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getWithinPattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_within_pattern())", header: stringConversionCode.}

proc setWithoutPattern*(this: MouseWatcher, pattern: string) {.importcpp: "#->set_without_pattern(nimStringToStdString(#))", header: stringConversionCode.}

proc getWithoutPattern*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_without_pattern())", header: stringConversionCode.}

proc setGeometry*(this: MouseWatcher, node: PandaNode) {.importcpp: "#->set_geometry(#)".}

proc hasGeometry*(this: MouseWatcher): bool {.importcpp: "#->has_geometry()".}

proc getGeometry*(this: MouseWatcher): PandaNode {.importcpp: "#->get_geometry()".}

proc clearGeometry*(this: MouseWatcher) {.importcpp: "#->clear_geometry()".}

proc setExtraHandler*(this: MouseWatcher, eh: EventHandler) {.importcpp: "#->set_extra_handler(#)".}

proc getExtraHandler*(this: MouseWatcher): EventHandler {.importcpp: "#->get_extra_handler()".}

proc setDisplayRegion*(this: MouseWatcher, dr: DisplayRegion) {.importcpp: "#->set_display_region(#)".}

proc clearDisplayRegion*(this: MouseWatcher) {.importcpp: "#->clear_display_region()".}

proc hasDisplayRegion*(this: MouseWatcher): bool {.importcpp: "#->has_display_region()".}

proc addGroup*(this: MouseWatcher, group: MouseWatcherGroup): bool {.importcpp: "#->add_group(#)".}

proc removeGroup*(this: MouseWatcher, group: MouseWatcherGroup): bool {.importcpp: "#->remove_group(#)".}

proc replaceGroup*(this: MouseWatcher, oldGroup: MouseWatcherGroup, newGroup: MouseWatcherGroup): bool {.importcpp: "#->replace_group(#, #)".}

proc getNumGroups*(this: MouseWatcher): int {.importcpp: "#->get_num_groups()".}

proc getGroup*(this: MouseWatcher, n: int): MouseWatcherGroup {.importcpp: "#->get_group(#)".}

proc setInactivityTimeout*(this: MouseWatcher, timeout: float64) {.importcpp: "#->set_inactivity_timeout(#)".}

proc hasInactivityTimeout*(this: MouseWatcher): bool {.importcpp: "#->has_inactivity_timeout()".}

proc getInactivityTimeout*(this: MouseWatcher): float64 {.importcpp: "#->get_inactivity_timeout()".}

proc clearInactivityTimeout*(this: MouseWatcher) {.importcpp: "#->clear_inactivity_timeout()".}

proc setInactivityTimeoutEvent*(this: MouseWatcher, event: string) {.importcpp: "#->set_inactivity_timeout_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getInactivityTimeoutEvent*(this: MouseWatcher): string {.importcpp: "nimStringFromStdString(#->get_inactivity_timeout_event())", header: stringConversionCode.}

proc getTrailLog*(this: MouseWatcher): PointerEventList {.importcpp: "deconstify(#->get_trail_log())", header: deconstifyCode.}

proc numTrailRecent*(this: MouseWatcher): int {.importcpp: "#->num_trail_recent()".}

proc setTrailLogDuration*(this: MouseWatcher, duration: float64) {.importcpp: "#->set_trail_log_duration(#)".}

proc getTrailNode*(this: MouseWatcher): GeomNode {.importcpp: "#->get_trail_node()".}

proc clearTrailNode*(this: MouseWatcher) {.importcpp: "#->clear_trail_node()".}

proc clearTrailLog*(this: MouseWatcher) {.importcpp: "#->clear_trail_log()".}

proc noteActivity*(this: MouseWatcher) {.importcpp: "#->note_activity()".}

proc hasButton*(this: MouseWatcherParameter | PGMouseWatcherParameter): bool {.importcpp: "#.has_button()".}

proc getButton*(this: MouseWatcherParameter | PGMouseWatcherParameter): ButtonHandle {.importcpp: "#.get_button()".}

proc isKeyrepeat*(this: MouseWatcherParameter | PGMouseWatcherParameter): bool {.importcpp: "#.is_keyrepeat()".}

proc hasKeycode*(this: MouseWatcherParameter | PGMouseWatcherParameter): bool {.importcpp: "#.has_keycode()".}

proc getKeycode*(this: MouseWatcherParameter | PGMouseWatcherParameter): int {.importcpp: "#.get_keycode()".}

proc hasCandidate*(this: MouseWatcherParameter | PGMouseWatcherParameter): bool {.importcpp: "#.has_candidate()".}

proc getCandidateStringEncoded*(this: MouseWatcherParameter | PGMouseWatcherParameter): string {.importcpp: "nimStringFromStdString(#.get_candidate_string_encoded())", header: stringConversionCode.}

proc getCandidateStringEncoded*(this: MouseWatcherParameter | PGMouseWatcherParameter, encoding: TextEncoder_Encoding): string {.importcpp: "nimStringFromStdString(#.get_candidate_string_encoded(#))", header: stringConversionCode.}

proc getHighlightStart*(this: MouseWatcherParameter | PGMouseWatcherParameter): int {.importcpp: "#.get_highlight_start()".}

proc getHighlightEnd*(this: MouseWatcherParameter | PGMouseWatcherParameter): int {.importcpp: "#.get_highlight_end()".}

proc getCursorPos*(this: MouseWatcherParameter | PGMouseWatcherParameter): int {.importcpp: "#.get_cursor_pos()".}

proc getModifierButtons*(this: MouseWatcherParameter | PGMouseWatcherParameter): ModifierButtons {.importcpp: "#.get_modifier_buttons()".}

proc hasMouse*(this: MouseWatcherParameter | PGMouseWatcherParameter): bool {.importcpp: "#.has_mouse()".}

proc getMouse*(this: MouseWatcherParameter | PGMouseWatcherParameter): LPoint2 {.importcpp: "#.get_mouse()".}

proc isOutside*(this: MouseWatcherParameter | PGMouseWatcherParameter): bool {.importcpp: "#.is_outside()".}

proc getForwardScale*(this: Trackball): float {.importcpp: "#->get_forward_scale()".}

proc setForwardScale*(this: Trackball, fwdscale: float) {.importcpp: "#->set_forward_scale(#)".}

proc resetOriginHere*(this: Trackball) {.importcpp: "#->reset_origin_here()".}

proc moveOrigin*(this: Trackball, x: float, y: float, z: float) {.importcpp: "#->move_origin(#, #, #)".}

proc setOrigin*(this: Trackball, origin: LVecBase3) {.importcpp: "#->set_origin((LVecBase3 const &)(#))".}

proc setControlMode*(this: Trackball, controlMode: Trackball_ControlMode) {.importcpp: "#->set_control_mode(#)".}

proc getControlMode*(this: Trackball): Trackball_ControlMode {.importcpp: "#->get_control_mode()".}

proc setInvert*(this: Trackball, flag: bool) {.importcpp: "#->set_invert(#)".}

proc getInvert*(this: Trackball): bool {.importcpp: "#->get_invert()".}

proc setRelTo*(this: Trackball, relTo: NodePath) {.importcpp: "#->set_rel_to(#)".}

proc getRelTo*(this: Trackball): NodePath {.importcpp: "#->get_rel_to()".}

proc getTransMat*(this: Trackball): LMatrix4 {.importcpp: "#->get_trans_mat()".}

proc play*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture, `from`: float64, to: float64) {.importcpp: "#->play(#, #)".}

proc loop*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture, restart: bool) {.importcpp: "#->loop(#)".}

proc loop*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture, restart: bool, `from`: float64, to: float64) {.importcpp: "#->loop(#, #, #)".}

proc pingpong*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture, restart: bool) {.importcpp: "#->pingpong(#)".}

proc pingpong*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture, restart: bool, `from`: float64, to: float64) {.importcpp: "#->pingpong(#, #, #)".}

proc pose*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture, frame: float64) {.importcpp: "#->pose(#)".}

proc getFrameRate*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_frame_rate()".}

proc getFrame*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_frame()".}

proc getNextFrame*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_next_frame()".}

proc getFrac*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_frac()".}

proc getFullFrame*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): int {.importcpp: "#->get_full_frame()".}

proc getFullFframe*(this: AnimControl | AnimInterface | SequenceNode | VideoTexture): float64 {.importcpp: "#->get_full_fframe()".}

proc isInitial*(this: UpdateSeq): bool {.importcpp: "#.is_initial()".}

proc isOld*(this: UpdateSeq): bool {.importcpp: "#.is_old()".}

proc isFresh*(this: UpdateSeq): bool {.importcpp: "#.is_fresh()".}

proc `==`*(this: UpdateSeq, other: UpdateSeq): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: UpdateSeq, other: UpdateSeq): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: UpdateSeq, other: UpdateSeq): bool {.importcpp: "#.operator <(#)".}

proc `<=`*(this: UpdateSeq, other: UpdateSeq): bool {.importcpp: "#.operator <=(#)".}

proc `>`*(this: UpdateSeq, other: UpdateSeq): bool {.importcpp: "#.operator >(#)".}

proc `>=`*(this: UpdateSeq, other: UpdateSeq): bool {.importcpp: "#.operator >=(#)".}

proc inc*(this: var UpdateSeq) {.importcpp: "#.operator ++()".}

proc getSeq*(this: UpdateSeq): int {.importcpp: "#.get_seq()".}

proc fillin*(this: TypedWritable, scan: DatagramIterator, manager: BamReader) {.importcpp: "#->fillin(#, #)".}

proc markBamModified*(this: TypedWritable) {.importcpp: "#->mark_bam_modified()".}

proc getBamModified*(this: TypedWritable): UpdateSeq {.importcpp: "#->get_bam_modified()".}

proc upcastToTypedWritable*(this: TypedWritableReferenceCount): TypedWritable {.importcpp: "((TypedWritable *)(TypedWritableReferenceCount *)(#))".}

proc makeCopy*(this: BamCacheRecord): BamCacheRecord {.importcpp: "#->make_copy()".}

proc `==`*(this: BamCacheRecord, other: BamCacheRecord): bool {.importcpp: "#->operator ==(#)".}

proc getSourcePathname*(this: BamCacheRecord): Filename {.importcpp: "#->get_source_pathname()".}

proc getCacheFilename*(this: BamCacheRecord): Filename {.importcpp: "#->get_cache_filename()".}

proc getSourceTimestamp*(this: BamCacheRecord): Time {.importcpp: "#->get_source_timestamp()".}

proc getRecordedTime*(this: BamCacheRecord): Time {.importcpp: "#->get_recorded_time()".}

proc getNumDependentFiles*(this: BamCacheRecord): int {.importcpp: "#->get_num_dependent_files()".}

proc getDependentPathname*(this: BamCacheRecord, n: int): Filename {.importcpp: "#->get_dependent_pathname(#)".}

proc dependentsUnchanged*(this: BamCacheRecord): bool {.importcpp: "#->dependents_unchanged()".}

proc clearDependentFiles*(this: BamCacheRecord) {.importcpp: "#->clear_dependent_files()".}

proc addDependentFile*(this: BamCacheRecord, pathname: Filename) {.importcpp: "#->add_dependent_file(#)".}

proc addDependentFile*(this: BamCacheRecord, file: VirtualFile) {.importcpp: "#->add_dependent_file(#)".}

proc hasData*(this: BamCacheRecord): bool {.importcpp: "#->has_data()".}

proc clearData*(this: BamCacheRecord) {.importcpp: "#->clear_data()".}

proc getData*(this: BamCacheRecord): TypedWritable {.importcpp: "#->get_data()".}

proc setData*(this: BamCacheRecord, `ptr`: TypedWritable) {.importcpp: "#->set_data(#)".}

proc setData*(this: BamCacheRecord, `ptr`: TypedWritable, refPtr: TypedReferenceCount | SocketStreamRecorder | VertexDataBlock | MouseWatcherGroup | TypedWritableReferenceCount | ReferenceCount) {.importcpp: "#->set_data(#, #)".}

proc setData*(this: BamCacheRecord, `ptr`: TypedWritable, dummy: int) {.importcpp: "#->set_data(#, #)".}

proc setData*(this: BamCacheRecord, `ptr`: TypedWritableReferenceCount) {.importcpp: "#->set_data(#)".}

proc setActive*(this: BamCache, flag: bool) {.importcpp: "#.set_active(#)".}

proc getActive*(this: BamCache): bool {.importcpp: "#.get_active()".}

proc setCacheModels*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_models(#)".}

proc getCacheModels*(this: BamCache): bool {.importcpp: "#.get_cache_models()".}

proc setCacheTextures*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_textures(#)".}

proc getCacheTextures*(this: BamCache): bool {.importcpp: "#.get_cache_textures()".}

proc setCacheCompressedTextures*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_compressed_textures(#)".}

proc getCacheCompressedTextures*(this: BamCache): bool {.importcpp: "#.get_cache_compressed_textures()".}

proc setCacheCompiledShaders*(this: BamCache, flag: bool) {.importcpp: "#.set_cache_compiled_shaders(#)".}

proc getCacheCompiledShaders*(this: BamCache): bool {.importcpp: "#.get_cache_compiled_shaders()".}

proc setRoot*(this: BamCache, root: Filename) {.importcpp: "#.set_root(#)".}

proc getRoot*(this: BamCache): Filename {.importcpp: "#.get_root()".}

proc setFlushTime*(this: BamCache, flushTime: int) {.importcpp: "#.set_flush_time(#)".}

proc getFlushTime*(this: BamCache): int {.importcpp: "#.get_flush_time()".}

proc setCacheMaxKbytes*(this: BamCache, maxKbytes: int) {.importcpp: "#.set_cache_max_kbytes(#)".}

proc getCacheMaxKbytes*(this: BamCache): int {.importcpp: "#.get_cache_max_kbytes()".}

proc setReadOnly*(this: BamCache, ro: bool) {.importcpp: "#.set_read_only(#)".}

proc getReadOnly*(this: BamCache): bool {.importcpp: "#.get_read_only()".}

proc lookup*(this: BamCache, sourceFilename: Filename, cacheExtension: string): BamCacheRecord {.importcpp: "#.lookup(#, nimStringToStdString(#))", header: stringConversionCode.}

proc store*(this: BamCache, record: BamCacheRecord): bool {.importcpp: "#.store(#)".}

proc considerFlushIndex*(this: BamCache) {.importcpp: "#.consider_flush_index()".}

proc flushIndex*(this: BamCache) {.importcpp: "#.flush_index()".}

proc listIndex*(this: BamCache, `out`: iostream | ostream, indentLevel: int) {.importcpp: "#.list_index(#, #)".}

proc listIndex*(this: BamCache, `out`: iostream | ostream) {.importcpp: "#.list_index(#)".}

proc setTextureFlags*(this: var LoaderOptions, flags: int) {.importcpp: "#.set_texture_flags(#)".}

proc getTextureFlags*(this: LoaderOptions): int {.importcpp: "#.get_texture_flags()".}

proc setTextureNumViews*(this: var LoaderOptions, numViews: int) {.importcpp: "#.set_texture_num_views(#)".}

proc getTextureNumViews*(this: LoaderOptions): int {.importcpp: "#.get_texture_num_views()".}

proc setAutoTextureScale*(this: var LoaderOptions, scale: AutoTextureScale) {.importcpp: "#.set_auto_texture_scale(#)".}

proc getAutoTextureScale*(this: LoaderOptions): AutoTextureScale {.importcpp: "#.get_auto_texture_scale()".}

proc setSource*(this: BamReader, source: DatagramBuffer | DatagramGenerator) {.importcpp: "#.set_source(#)".}

proc getSource*(this: BamReader): DatagramGenerator {.importcpp: "#.get_source()".}

proc init*(this: BamReader | BamWriter): bool {.importcpp: "#.init()".}

proc getLoaderOptions*(this: BamReader): LoaderOptions {.importcpp: "#.get_loader_options()".}

proc setLoaderOptions*(this: BamReader, options: LoaderOptions) {.importcpp: "#.set_loader_options(#)".}

proc changePointer*(this: BamReader, origPointer: TypedWritable, newPointer: TypedWritable): bool {.importcpp: "#.change_pointer(#, #)".}

proc setTarget*(this: BamWriter, target: DatagramSink) {.importcpp: "#.set_target(#)".}

proc getTarget*(this: BamWriter): DatagramSink {.importcpp: "#.get_target()".}

proc writeObject*(this: BamWriter, obj: TypedWritable): bool {.importcpp: "#.write_object(#)".}

proc hasObject*(this: BamWriter, obj: TypedWritable): bool {.importcpp: "#.has_object(#)".}

proc setFileMinorVer*(this: BamWriter, minorVer: int) {.importcpp: "#.set_file_minor_ver(#)".}

proc getFileTextureMode*(this: BamWriter): BamEnums_BamTextureMode {.importcpp: "#.get_file_texture_mode()".}

proc setFileTextureMode*(this: BamWriter, fileTextureMode: BamEnums_BamTextureMode) {.importcpp: "#.set_file_texture_mode(#)".}

proc getRootNode*(this: BamWriter): TypedWritable {.importcpp: "#.get_root_node()".}

proc setRootNode*(this: BamWriter, rootNode: TypedWritable) {.importcpp: "#.set_root_node(#)".}

proc getNumBits*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_num_bits()".}

proc getBit*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray, index: int): bool {.importcpp: "#.get_bit(#)".}

proc setBit*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray, index: int) {.importcpp: "#.set_bit(#)".}

proc clearBit*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray, index: int) {.importcpp: "#.clear_bit(#)".}

proc setBitTo*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray, index: int, value: bool) {.importcpp: "#.set_bit_to(#, #)".}

proc isZero*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): bool {.importcpp: "#.is_zero()".}

proc isAllOn*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): bool {.importcpp: "#.is_all_on()".}

proc extract*(this: BitMask[uint16, 16] | BitMask[uint32, 32], lowBit: int, size: int): int {.importcpp: "#.extract(#, #)".}

proc store*(this: var BitMask[uint16, 16] | var BitMask[uint32, 32], value: int, lowBit: int, size: int) {.importcpp: "#.store(#, #, #)".}

proc hasAnyOf*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray, lowBit: int, size: int): bool {.importcpp: "#.has_any_of(#, #)".}

proc hasAllOf*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray, lowBit: int, size: int): bool {.importcpp: "#.has_all_of(#, #)".}

proc setRange*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray, lowBit: int, size: int) {.importcpp: "#.set_range(#, #)".}

proc clearRange*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray, lowBit: int, size: int) {.importcpp: "#.clear_range(#, #)".}

proc setRangeTo*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray, value: bool, lowBit: int, size: int) {.importcpp: "#.set_range_to(#, #, #)".}

proc getWord*(this: BitMask[uint16, 16] | BitMask[uint32, 32]): int {.importcpp: "#.get_word()".}

proc setWord*(this: var BitMask[uint16, 16] | var BitMask[uint32, 32], value: int) {.importcpp: "#.set_word(#)".}

proc getNumOnBits*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_num_on_bits()".}

proc getNumOffBits*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_num_off_bits()".}

proc getLowestOnBit*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_lowest_on_bit()".}

proc getLowestOffBit*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_lowest_off_bit()".}

proc getHighestOnBit*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_highest_on_bit()".}

proc getHighestOffBit*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray): int {.importcpp: "#.get_highest_off_bit()".}

proc getNextHigherDifferentBit*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | SparseArray, lowBit: int): int {.importcpp: "#.get_next_higher_different_bit(#)".}

proc invertInPlace*(this: var BitArray | var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64] | var SparseArray) {.importcpp: "#.invert_in_place()".}

proc hasBitsInCommon*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): bool {.importcpp: "#.has_bits_in_common(#)".}

proc outputBinary*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64], `out`: iostream | ostream, spacesEvery: int) {.importcpp: "#.output_binary(#, #)".}

proc outputHex*(this: BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64], `out`: iostream | ostream, spacesEvery: int) {.importcpp: "#.output_hex(#, #)".}

proc `==`*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): int {.importcpp: "#.compare_to(#)".}

proc `and`*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.operator &(#)".}

proc `or`*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.operator |(#)".}

proc `xor`*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.operator ^(#)".}

proc `not`*(this: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.operator ~()".}

proc `shl`*(this: BitMask[uint16, 16], shift: int): BitMask16 {.importcpp: "#.operator <<(#)".}

proc `shr`*(this: BitMask[uint16, 16], shift: int): BitMask16 {.importcpp: "#.operator >>(#)".}

proc floodDownInPlace*(this: var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64]) {.importcpp: "#.flood_down_in_place()".}

proc floodUpInPlace*(this: var BitMask[uint16, 16] | var BitMask[uint32, 32] | var BitMask[uint64, 64]) {.importcpp: "#.flood_up_in_place()".}

proc floodBitsDown*(this: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.flood_bits_down()".}

proc floodBitsUp*(this: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.flood_bits_up()".}

proc keepNextHighestBit*(this: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.keep_next_highest_bit()".}

proc keepNextHighestBit*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.keep_next_highest_bit(#)".}

proc keepNextHighestBit*(this: BitMask[uint16, 16], index: int): BitMask16 {.importcpp: "#.keep_next_highest_bit(#)".}

proc keepNextLowestBit*(this: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.keep_next_lowest_bit()".}

proc keepNextLowestBit*(this: BitMask[uint16, 16], other: BitMask[uint16, 16]): BitMask16 {.importcpp: "#.keep_next_lowest_bit(#)".}

proc keepNextLowestBit*(this: BitMask[uint16, 16], index: int): BitMask16 {.importcpp: "#.keep_next_lowest_bit(#)".}

proc hasBitsInCommon*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): bool {.importcpp: "#.has_bits_in_common(#)".}

proc `==`*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): int {.importcpp: "#.compare_to(#)".}

proc `and`*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.operator &(#)".}

proc `or`*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.operator |(#)".}

proc `xor`*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.operator ^(#)".}

proc `not`*(this: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.operator ~()".}

proc `shl`*(this: BitMask[uint32, 32], shift: int): BitMask32 {.importcpp: "#.operator <<(#)".}

proc `shr`*(this: BitMask[uint32, 32], shift: int): BitMask32 {.importcpp: "#.operator >>(#)".}

proc floodBitsDown*(this: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.flood_bits_down()".}

proc floodBitsUp*(this: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.flood_bits_up()".}

proc keepNextHighestBit*(this: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.keep_next_highest_bit()".}

proc keepNextHighestBit*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.keep_next_highest_bit(#)".}

proc keepNextHighestBit*(this: BitMask[uint32, 32], index: int): BitMask32 {.importcpp: "#.keep_next_highest_bit(#)".}

proc keepNextLowestBit*(this: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.keep_next_lowest_bit()".}

proc keepNextLowestBit*(this: BitMask[uint32, 32], other: BitMask[uint32, 32]): BitMask32 {.importcpp: "#.keep_next_lowest_bit(#)".}

proc keepNextLowestBit*(this: BitMask[uint32, 32], index: int): BitMask32 {.importcpp: "#.keep_next_lowest_bit(#)".}

proc extract*(this: BitArray | BitMask[uint64, 64], lowBit: int, size: int): clonglong {.importcpp: "#.extract(#, #)".}

proc store*(this: var BitArray | var BitMask[uint64, 64], value: clonglong, lowBit: int, size: int) {.importcpp: "#.store(#, #, #)".}

proc getWord*(this: BitMask[uint64, 64]): clonglong {.importcpp: "#.get_word()".}

proc setWord*(this: var BitMask[uint64, 64], value: clonglong) {.importcpp: "#.set_word(#)".}

proc hasBitsInCommon*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): bool {.importcpp: "#.has_bits_in_common(#)".}

proc `==`*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): int {.importcpp: "#.compare_to(#)".}

proc `and`*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.operator &(#)".}

proc `or`*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.operator |(#)".}

proc `xor`*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.operator ^(#)".}

proc `not`*(this: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.operator ~()".}

proc `shl`*(this: BitMask[uint64, 64], shift: int): BitMask64 {.importcpp: "#.operator <<(#)".}

proc `shr`*(this: BitMask[uint64, 64], shift: int): BitMask64 {.importcpp: "#.operator >>(#)".}

proc floodBitsDown*(this: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.flood_bits_down()".}

proc floodBitsUp*(this: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.flood_bits_up()".}

proc keepNextHighestBit*(this: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.keep_next_highest_bit()".}

proc keepNextHighestBit*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.keep_next_highest_bit(#)".}

proc keepNextHighestBit*(this: BitMask[uint64, 64], index: int): BitMask64 {.importcpp: "#.keep_next_highest_bit(#)".}

proc keepNextLowestBit*(this: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.keep_next_lowest_bit()".}

proc keepNextLowestBit*(this: BitMask[uint64, 64], other: BitMask[uint64, 64]): BitMask64 {.importcpp: "#.keep_next_lowest_bit(#)".}

proc keepNextLowestBit*(this: BitMask[uint64, 64], index: int): BitMask64 {.importcpp: "#.keep_next_lowest_bit(#)".}

proc getHighestBits*(this: BitArray | SparseArray): bool {.importcpp: "#.get_highest_bits()".}

proc getWord*(this: BitArray, n: int): BitMaskNative {.importcpp: "#.get_word(#)".}

proc hasBitsInCommon*(this: BitArray, other: BitArray): bool {.importcpp: "#.has_bits_in_common(#)".}

proc `==`*(this: BitArray, other: BitArray): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: BitArray, other: BitArray): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: BitArray, other: BitArray): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: BitArray, other: BitArray): int {.importcpp: "#.compare_to(#)".}

proc `and`*(this: BitArray, other: BitArray): BitArray {.importcpp: "#.operator &(#)".}

proc `or`*(this: BitArray, other: BitArray): BitArray {.importcpp: "#.operator |(#)".}

proc `xor`*(this: BitArray, other: BitArray): BitArray {.importcpp: "#.operator ^(#)".}

proc `not`*(this: BitArray): BitArray {.importcpp: "#.operator ~()".}

proc `shl`*(this: BitArray, shift: int): BitArray {.importcpp: "#.operator <<(#)".}

proc `shr`*(this: BitArray, shift: int): BitArray {.importcpp: "#.operator >>(#)".}

proc `==`*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.operator <(#)".}

proc `<=`*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.operator <=(#)".}

proc `>`*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.operator >(#)".}

proc `>=`*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.operator >=(#)".}

proc compareTo*(this: ButtonHandle, other: ButtonHandle): int {.importcpp: "#.compare_to(#)".}

proc hasAsciiEquivalent*(this: ButtonHandle): bool {.importcpp: "#.has_ascii_equivalent()".}

proc getAsciiEquivalent*(this: ButtonHandle): char {.importcpp: "#.get_ascii_equivalent()".}

proc getAlias*(this: ButtonHandle): ButtonHandle {.importcpp: "#.get_alias()".}

proc matches*(this: ButtonHandle, other: ButtonHandle): bool {.importcpp: "#.matches(#)".}

proc getButton*(this: ButtonRegistry, name: string): ButtonHandle {.importcpp: "#.get_button(nimStringToStdString(#))", header: stringConversionCode.}

proc findButton*(this: ButtonRegistry, name: string): ButtonHandle {.importcpp: "#.find_button(nimStringToStdString(#))", header: stringConversionCode.}

proc findAsciiButton*(this: ButtonRegistry, asciiEquivalent: char): ButtonHandle {.importcpp: "#.find_ascii_button(#)".}

proc getRawButton*(this: ButtonMap, i: int): ButtonHandle {.importcpp: "#->get_raw_button(#)".}

proc getMappedButton*(this: ButtonMap, raw: ButtonHandle): ButtonHandle {.importcpp: "#->get_mapped_button(#)".}

proc getMappedButton*(this: ButtonMap, i: int): ButtonHandle {.importcpp: "#->get_mapped_button(#)".}

proc getMappedButton*(this: ButtonMap, rawName: string): ButtonHandle {.importcpp: "#->get_mapped_button(nimStringToStdString(#))", header: stringConversionCode.}

proc getMappedButtonLabel*(this: ButtonMap, raw: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_mapped_button_label(#))", header: stringConversionCode.}

proc getMappedButtonLabel*(this: ButtonMap, i: int): string {.importcpp: "nimStringFromStdString(#->get_mapped_button_label(#))", header: stringConversionCode.}

proc getMappedButtonLabel*(this: ButtonMap, rawName: string): string {.importcpp: "nimStringFromStdString(#->get_mapped_button_label(nimStringToStdString(#)))", header: stringConversionCode.}

proc getCacheRefCount*(this: CachedTypedWritableReferenceCount): int {.importcpp: "#->get_cache_ref_count()".}

proc upcall*(this: CallbackData) {.importcpp: "#->upcall()".}

proc getSec*(this: TimeVal): int {.importcpp: "#.get_sec()".}

proc getUsec*(this: TimeVal): int {.importcpp: "#.get_usec()".}

proc setMode*(this: ClockObject, mode: ClockObject_Mode) {.importcpp: "#->set_mode(#)".}

proc getMode*(this: ClockObject): ClockObject_Mode {.importcpp: "#->get_mode()".}

proc getRealTime*(this: ClockObject): float64 {.importcpp: "#->get_real_time()".}

proc getLongTime*(this: ClockObject): float64 {.importcpp: "#->get_long_time()".}

proc setRealTime*(this: ClockObject, time: float64) {.importcpp: "#->set_real_time(#)".}

proc setDt*(this: ClockObject, dt: float64) {.importcpp: "#->set_dt(#)".}

proc setMaxDt*(this: ClockObject, maxDt: float64) {.importcpp: "#->set_max_dt(#)".}

proc getDegradeFactor*(this: ClockObject): float64 {.importcpp: "#->get_degrade_factor()".}

proc setDegradeFactor*(this: ClockObject, degradeFactor: float64) {.importcpp: "#->set_degrade_factor(#)".}

proc setAverageFrameRateInterval*(this: ClockObject, time: float64) {.importcpp: "#->set_average_frame_rate_interval(#)".}

proc getAverageFrameRateInterval*(this: ClockObject): float64 {.importcpp: "#->get_average_frame_rate_interval()".}

proc checkErrors*(this: ClockObject, currentThread: Thread): bool {.importcpp: "#->check_errors(#)".}

proc upcastToDatagramSink*(this: DatagramBuffer | DatagramSinkNet): var DatagramSink {.importcpp: "((DatagramSink *)&(#))".}

proc upcastToDatagramGenerator*(this: DatagramBuffer): var DatagramGenerator {.importcpp: "((DatagramGenerator *)&(#))".}

proc open*(this: DatagramInputFile | DatagramOutputFile, file: FileReference): bool {.importcpp: "#.open(#)".}

proc open*(this: DatagramInputFile | DatagramOutputFile, filename: Filename): bool {.importcpp: "#.open(#)".}

proc open*(this: DatagramInputFile, `in`: istream, filename: Filename): bool {.importcpp: "#.open(#, #)".}

proc open*(this: DatagramInputFile, `in`: istream): bool {.importcpp: "#.open(#)".}

proc getStream*(this: DatagramInputFile): istream {.importcpp: "#.get_stream()".}

proc open*(this: DatagramOutputFile, `out`: iostream | ostream, filename: Filename): bool {.importcpp: "#.open(#, #)".}

proc open*(this: DatagramOutputFile, `out`: iostream | ostream): bool {.importcpp: "#.open(#)".}

proc writeHeader*(this: DatagramOutputFile, header: string): bool {.importcpp: "#.write_header(nimStringToStdString(#))", header: stringConversionCode.}

proc `==`*(this: ModifierButtons, other: ModifierButtons): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: ModifierButtons, other: ModifierButtons): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: ModifierButtons, other: ModifierButtons): bool {.importcpp: "#.operator <(#)".}

proc `and`*(this: ModifierButtons, other: ModifierButtons): ModifierButtons {.importcpp: "#.operator &(#)".}

proc `or`*(this: ModifierButtons, other: ModifierButtons): ModifierButtons {.importcpp: "#.operator |(#)".}

proc setButtonList*(this: ModifierButtons, other: ModifierButtons) {.importcpp: "#.set_button_list(#)".}

proc matches*(this: ModifierButtons, other: ModifierButtons): bool {.importcpp: "#.matches(#)".}

proc addButton*(this: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#.add_button(#)".}

proc hasButton*(this: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#.has_button(#)".}

proc removeButton*(this: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#.remove_button(#)".}

proc getNumButtons*(this: ModifierButtons): int {.importcpp: "#.get_num_buttons()".}

proc getButton*(this: ModifierButtons, index: int): ButtonHandle {.importcpp: "#.get_button(#)".}

proc buttonDown*(this: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#.button_down(#)".}

proc buttonUp*(this: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#.button_up(#)".}

proc allButtonsUp*(this: ModifierButtons) {.importcpp: "#.all_buttons_up()".}

proc isDown*(this: ModifierButtons, button: ButtonHandle): bool {.importcpp: "#.is_down(#)".}

proc isDown*(this: ModifierButtons, index: int): bool {.importcpp: "#.is_down(#)".}

proc isAnyDown*(this: ModifierButtons): bool {.importcpp: "#.is_any_down()".}

proc getPrefix*(this: ModifierButtons): string {.importcpp: "nimStringFromStdString(#.get_prefix())", header: stringConversionCode.}

proc getX*(this: PointerData): float64 {.importcpp: "#.get_x()".}

proc getY*(this: PointerData): float64 {.importcpp: "#.get_y()".}

proc getInWindow*(this: PointerData): bool {.importcpp: "#.get_in_window()".}

proc getReferencedBits*(this: NodeCachedReferenceCount): int {.importcpp: "#->get_referenced_bits()".}

proc hasBitsInCommon*(this: SparseArray, other: SparseArray): bool {.importcpp: "#.has_bits_in_common(#)".}

proc `==`*(this: SparseArray, other: SparseArray): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: SparseArray, other: SparseArray): bool {.importcpp: "#.operator !=(#)".}

proc `<`*(this: SparseArray, other: SparseArray): bool {.importcpp: "#.operator <(#)".}

proc compareTo*(this: SparseArray, other: SparseArray): int {.importcpp: "#.compare_to(#)".}

proc `and`*(this: SparseArray, other: SparseArray): SparseArray {.importcpp: "#.operator &(#)".}

proc `or`*(this: SparseArray, other: SparseArray): SparseArray {.importcpp: "#.operator |(#)".}

proc `xor`*(this: SparseArray, other: SparseArray): SparseArray {.importcpp: "#.operator ^(#)".}

proc `not`*(this: SparseArray): SparseArray {.importcpp: "#.operator ~()".}

proc `shl`*(this: SparseArray, shift: int): SparseArray {.importcpp: "#.operator <<(#)".}

proc `shr`*(this: SparseArray, shift: int): SparseArray {.importcpp: "#.operator >>(#)".}

proc isInverse*(this: SparseArray): bool {.importcpp: "#.is_inverse()".}

proc getNumSubranges*(this: SparseArray): int {.importcpp: "#.get_num_subranges()".}

proc getSubrangeBegin*(this: SparseArray, n: int): int {.importcpp: "#.get_subrange_begin(#)".}

proc getSubrangeEnd*(this: SparseArray, n: int): int {.importcpp: "#.get_subrange_end(#)".}

proc getValueType*(this: ParamValueBase): TypeHandle {.importcpp: "#->get_value_type()".}

proc getValue*(this: ParamTypedRefCount): TypedReferenceCount {.importcpp: "#->get_value()".}

proc allocate*(this: UniqueIdAllocator): int {.importcpp: "#.allocate()".}

proc initialReserveId*(this: UniqueIdAllocator, id: int) {.importcpp: "#.initial_reserve_id(#)".}

proc free*(this: UniqueIdAllocator, index: int) {.importcpp: "#.free(#)".}

proc fractionUsed*(this: UniqueIdAllocator): float {.importcpp: "#.fraction_used()".}

proc addLowpass*(this: FilterProperties, cutoffFreq: float, resonanceQ: float) {.importcpp: "#->add_lowpass(#, #)".}

proc addHighpass*(this: FilterProperties, cutoffFreq: float, resonanceQ: float) {.importcpp: "#->add_highpass(#, #)".}

proc addEcho*(this: FilterProperties, drymix: float, wetmix: float, delay: float, decayratio: float) {.importcpp: "#->add_echo(#, #, #, #)".}

proc addFlange*(this: FilterProperties, drymix: float, wetmix: float, depth: float, rate: float) {.importcpp: "#->add_flange(#, #, #, #)".}

proc addDistort*(this: FilterProperties, level: float) {.importcpp: "#->add_distort(#)".}

proc addNormalize*(this: FilterProperties, fadetime: float, threshold: float, maxamp: float) {.importcpp: "#->add_normalize(#, #, #)".}

proc addParameq*(this: FilterProperties, centerFreq: float, bandwidth: float, gain: float) {.importcpp: "#->add_parameq(#, #, #)".}

proc addPitchshift*(this: FilterProperties, pitch: float, fftsize: float, overlap: float) {.importcpp: "#->add_pitchshift(#, #, #)".}

proc addChorus*(this: FilterProperties, drymix: float, wet1: float, wet2: float, wet3: float, delay: float, rate: float, depth: float) {.importcpp: "#->add_chorus(#, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float, reverbdelay: float, diffusion: float, density: float, hfreference: float, roomlf: float, lfreference: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float, reverbdelay: float, diffusion: float, density: float, hfreference: float, roomlf: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float, reverbdelay: float, diffusion: float, density: float, hfreference: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float, reverbdelay: float, diffusion: float, density: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float, reverbdelay: float, diffusion: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float, reverbdelay: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float, reverblevel: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float, reflectionsdelay: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float, reflectionslevel: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float, decayhfratio: float) {.importcpp: "#->add_sfxreverb(#, #, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float, decaytime: float) {.importcpp: "#->add_sfxreverb(#, #, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float, roomhf: float) {.importcpp: "#->add_sfxreverb(#, #, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float, room: float) {.importcpp: "#->add_sfxreverb(#, #)".}

proc addSfxreverb*(this: FilterProperties, drylevel: float) {.importcpp: "#->add_sfxreverb(#)".}

proc addSfxreverb*(this: FilterProperties) {.importcpp: "#->add_sfxreverb()".}

proc addCompress*(this: FilterProperties, threshold: float, attack: float, release: float, gainmakeup: float) {.importcpp: "#->add_compress(#, #, #, #)".}

proc setLoop*(this: AudioSound, loop: bool) {.importcpp: "#->set_loop(#)".}

proc setLoop*(this: AudioSound) {.importcpp: "#->set_loop()".}

proc setLoopCount*(this: AudioSound, loopCount: int) {.importcpp: "#->set_loop_count(#)".}

proc setLoopCount*(this: AudioSound) {.importcpp: "#->set_loop_count()".}

proc setTime*(this: AudioSound, startTime: float) {.importcpp: "#->set_time(#)".}

proc setTime*(this: AudioSound) {.importcpp: "#->set_time()".}

proc getTime*(this: AudioSound): float {.importcpp: "#->get_time()".}

proc setVolume*(this: AudioManager | AudioSound, volume: float) {.importcpp: "#->set_volume(#)".}

proc setVolume*(this: AudioSound) {.importcpp: "#->set_volume()".}

proc setBalance*(this: AudioSound, balanceRight: float) {.importcpp: "#->set_balance(#)".}

proc setBalance*(this: AudioSound) {.importcpp: "#->set_balance()".}

proc getBalance*(this: AudioSound): float {.importcpp: "#->get_balance()".}

proc setPlayRate*(this: AudioSound, playRate: float) {.importcpp: "#->set_play_rate(#)".}

proc setPlayRate*(this: AudioSound) {.importcpp: "#->set_play_rate()".}

proc getPlayRate*(this: AudioSound): float {.importcpp: "#->get_play_rate()".}

proc setActive*(this: AudioManager | AudioSound, flag: bool) {.importcpp: "#->set_active(#)".}

proc setActive*(this: AudioSound) {.importcpp: "#->set_active()".}

proc setFinishedEvent*(this: AudioSound, event: string) {.importcpp: "#->set_finished_event(nimStringToStdString(#))", header: stringConversionCode.}

proc getFinishedEvent*(this: AudioSound): string {.importcpp: "nimStringFromStdString(#->get_finished_event())", header: stringConversionCode.}

proc length*(this: AudioSound): float {.importcpp: "#->length()".}

proc set3dAttributes*(this: AudioSound, px: float, py: float, pz: float, vx: float, vy: float, vz: float) {.importcpp: "#->set_3d_attributes(#, #, #, #, #, #)".}

proc set3dMinDistance*(this: AudioSound, dist: float) {.importcpp: "#->set_3d_min_distance(#)".}

proc get3dMinDistance*(this: AudioSound): float {.importcpp: "#->get_3d_min_distance()".}

proc set3dMaxDistance*(this: AudioSound, dist: float) {.importcpp: "#->set_3d_max_distance(#)".}

proc get3dMaxDistance*(this: AudioSound): float {.importcpp: "#->get_3d_max_distance()".}

proc getSpeakerMix*(this: AudioSound, speaker: int): float {.importcpp: "#->get_speaker_mix(#)".}

proc setSpeakerMix*(this: AudioSound, frontleft: float, frontright: float, center: float, sub: float, backleft: float, backright: float, sideleft: float, sideright: float) {.importcpp: "#->set_speaker_mix(#, #, #, #, #, #, #, #)".}

proc getSpeakerLevel*(this: AudioSound, index: int): float {.importcpp: "#->get_speaker_level(#)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float, level4: float, level5: float, level6: float, level7: float, level8: float, level9: float) {.importcpp: "#->set_speaker_levels(#, #, #, #, #, #, #, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float, level4: float, level5: float, level6: float, level7: float, level8: float) {.importcpp: "#->set_speaker_levels(#, #, #, #, #, #, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float, level4: float, level5: float, level6: float, level7: float) {.importcpp: "#->set_speaker_levels(#, #, #, #, #, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float, level4: float, level5: float, level6: float) {.importcpp: "#->set_speaker_levels(#, #, #, #, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float, level4: float, level5: float) {.importcpp: "#->set_speaker_levels(#, #, #, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float, level4: float) {.importcpp: "#->set_speaker_levels(#, #, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float, level3: float) {.importcpp: "#->set_speaker_levels(#, #, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float, level2: float) {.importcpp: "#->set_speaker_levels(#, #)".}

proc setSpeakerLevels*(this: AudioSound, level1: float) {.importcpp: "#->set_speaker_levels(#)".}

proc configureFilters*(this: AudioManager | AudioSound, config: FilterProperties): bool {.importcpp: "#->configure_filters(#)".}

proc status*(this: AudioSound): AudioSound_SoundStatus {.importcpp: "#->status()".}

proc getSpeakerSetup*(this: AudioManager): int {.importcpp: "#->get_speaker_setup()".}

proc setSpeakerSetup*(this: AudioManager, cat: AudioManager_SpeakerModeCategory) {.importcpp: "#->set_speaker_setup(#)".}

proc shutdown*(this: AudioManager | ConnectionReader | DatagramGeneratorNet) {.importcpp: "#->shutdown()".}

proc getSound*(this: AudioManager, fileName: Filename, positional: bool, mode: int): AudioSound {.importcpp: "#->get_sound(#, #, #)".}

proc getSound*(this: AudioManager, fileName: Filename, positional: bool): AudioSound {.importcpp: "#->get_sound(#, #)".}

proc getSound*(this: AudioManager, fileName: Filename): AudioSound {.importcpp: "#->get_sound(#)".}

proc getSound*(this: AudioManager, source: MovieAudio, positional: bool, mode: int): AudioSound {.importcpp: "#->get_sound(#, #, #)".}

proc getSound*(this: AudioManager, source: MovieAudio, positional: bool): AudioSound {.importcpp: "#->get_sound(#, #)".}

proc getSound*(this: AudioManager, source: MovieAudio): AudioSound {.importcpp: "#->get_sound(#)".}

proc getNullSound*(this: AudioManager): AudioSound {.importcpp: "#->get_null_sound()".}

proc uncacheSound*(this: AudioManager, fileName: Filename) {.importcpp: "#->uncache_sound(#)".}

proc setCacheLimit*(this: AudioManager, count: int) {.importcpp: "#->set_cache_limit(#)".}

proc getCacheLimit*(this: AudioManager): int {.importcpp: "#->get_cache_limit()".}

proc setConcurrentSoundLimit*(this: AudioManager, limit: int) {.importcpp: "#->set_concurrent_sound_limit(#)".}

proc setConcurrentSoundLimit*(this: AudioManager) {.importcpp: "#->set_concurrent_sound_limit()".}

proc getConcurrentSoundLimit*(this: AudioManager): int {.importcpp: "#->get_concurrent_sound_limit()".}

proc reduceSoundsPlayingTo*(this: AudioManager, count: int) {.importcpp: "#->reduce_sounds_playing_to(#)".}

proc stopAllSounds*(this: AudioManager) {.importcpp: "#->stop_all_sounds()".}

proc audio3dSetListenerAttributes*(this: AudioManager, px: float, py: float, pz: float, vx: float, vy: float, vz: float, fx: float, fy: float, fz: float, ux: float, uy: float, uz: float) {.importcpp: "#->audio_3d_set_listener_attributes(#, #, #, #, #, #, #, #, #, #, #, #)".}

proc audio3dSetDistanceFactor*(this: AudioManager, factor: float) {.importcpp: "#->audio_3d_set_distance_factor(#)".}

proc audio3dGetDistanceFactor*(this: AudioManager): float {.importcpp: "#->audio_3d_get_distance_factor()".}

proc audio3dSetDopplerFactor*(this: AudioManager, factor: float) {.importcpp: "#->audio_3d_set_doppler_factor(#)".}

proc audio3dGetDopplerFactor*(this: AudioManager): float {.importcpp: "#->audio_3d_get_doppler_factor()".}

proc audio3dSetDropOffFactor*(this: AudioManager, factor: float) {.importcpp: "#->audio_3d_set_drop_off_factor(#)".}

proc audio3dGetDropOffFactor*(this: AudioManager): float {.importcpp: "#->audio_3d_get_drop_off_factor()".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3, speaker4: LVecBase3, speaker5: LVecBase3, speaker6: LVecBase3, speaker7: LVecBase3, speaker8: LVecBase3, speaker9: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3, speaker4: LVecBase3, speaker5: LVecBase3, speaker6: LVecBase3, speaker7: LVecBase3, speaker8: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3, speaker4: LVecBase3, speaker5: LVecBase3, speaker6: LVecBase3, speaker7: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3, speaker4: LVecBase3, speaker5: LVecBase3, speaker6: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3, speaker4: LVecBase3, speaker5: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3, speaker4: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3, speaker3: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3, speaker2: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#), (LVecBase3 &)(#))".}

proc setSpeakerConfiguration*(this: AudioManager, speaker1: LVecBase3) {.importcpp: "#->set_speaker_configuration((LVecBase3 &)(#))".}

proc getAudioManager*(this: AudioLoadRequest): AudioManager {.importcpp: "#->get_audio_manager()".}

proc getFilename*(this: AudioLoadRequest): string {.importcpp: "nimStringFromStdString(#->get_filename())", header: stringConversionCode.}

proc getPositional*(this: AudioLoadRequest): bool {.importcpp: "#->get_positional()".}

proc getSound*(this: AudioLoadRequest): AudioSound {.importcpp: "#->get_sound()".}

proc setType*(this: PGFrameStyle, `type`: PGFrameStyle_Type) {.importcpp: "#.set_type(#)".}

proc getType*(this: PGFrameStyle): PGFrameStyle_Type {.importcpp: "#.get_type()".}

proc setTexture*(this: PGFrameStyle, texture: Texture) {.importcpp: "#.set_texture(#)".}

proc setWidth*(this: PGFrameStyle, width: LVecBase2) {.importcpp: "#.set_width((LVecBase2 const &)(#))".}

proc setWidth*(this: PGFrameStyle, x: float, y: float) {.importcpp: "#.set_width(#, #)".}

proc getWidth*(this: PGFrameStyle): LVecBase2 {.importcpp: "#.get_width()".}

proc setUvWidth*(this: PGFrameStyle, uvWidth: LVecBase2) {.importcpp: "#.set_uv_width((LVecBase2 const &)(#))".}

proc setUvWidth*(this: PGFrameStyle, u: float, v: float) {.importcpp: "#.set_uv_width(#, #)".}

proc getUvWidth*(this: PGFrameStyle): LVecBase2 {.importcpp: "#.get_uv_width()".}

proc setVisibleScale*(this: PGFrameStyle, visibleScale: LVecBase2) {.importcpp: "#.set_visible_scale((LVecBase2 const &)(#))".}

proc setVisibleScale*(this: PGFrameStyle, x: float, y: float) {.importcpp: "#.set_visible_scale(#, #)".}

proc getVisibleScale*(this: PGFrameStyle): LVecBase2 {.importcpp: "#.get_visible_scale()".}

proc getInternalFrame*(this: PGFrameStyle, frame: LVecBase4): LVecBase4 {.importcpp: "#.get_internal_frame((LVecBase4 const &)(#))".}

proc setState*(this: PGItem, state: int) {.importcpp: "#->set_state(#)".}

proc getState*(this: PGItem): int {.importcpp: "#->get_state()".}

proc setFocus*(this: PGItem, focus: bool) {.importcpp: "#->set_focus(#)".}

proc getFocus*(this: PGItem): bool {.importcpp: "#->get_focus()".}

proc setBackgroundFocus*(this: PGItem, focus: bool) {.importcpp: "#->set_background_focus(#)".}

proc getBackgroundFocus*(this: PGItem): bool {.importcpp: "#->get_background_focus()".}

proc getNumStateDefs*(this: PGItem): int {.importcpp: "#->get_num_state_defs()".}

proc clearStateDef*(this: PGItem, state: int) {.importcpp: "#->clear_state_def(#)".}

proc hasStateDef*(this: PGItem, state: int): bool {.importcpp: "#->has_state_def(#)".}

proc getStateDef*(this: PGItem, state: int): NodePath {.importcpp: "#->get_state_def(#)".}

proc instanceToStateDef*(this: PGItem, state: int, path: NodePath): NodePath {.importcpp: "#->instance_to_state_def(#, #)".}

proc getFrameStyle*(this: PGItem, state: int): PGFrameStyle {.importcpp: "#->get_frame_style(#)".}

proc setFrameStyle*(this: PGItem, state: int, style: PGFrameStyle) {.importcpp: "#->set_frame_style(#, #)".}

proc getId*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_id())", header: stringConversionCode.}

proc setId*(this: PGItem, id: string) {.importcpp: "#->set_id(nimStringToStdString(#))", header: stringConversionCode.}

proc getEnterEvent*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_enter_event())", header: stringConversionCode.}

proc getExitEvent*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_exit_event())", header: stringConversionCode.}

proc getWithinEvent*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_within_event())", header: stringConversionCode.}

proc getWithoutEvent*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_without_event())", header: stringConversionCode.}

proc getFocusInEvent*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_focus_in_event())", header: stringConversionCode.}

proc getFocusOutEvent*(this: PGItem): string {.importcpp: "nimStringFromStdString(#->get_focus_out_event())", header: stringConversionCode.}

proc getPressEvent*(this: PGItem, button: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_press_event(#))", header: stringConversionCode.}

proc getRepeatEvent*(this: PGItem, button: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_repeat_event(#))", header: stringConversionCode.}

proc getReleaseEvent*(this: PGItem, button: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_release_event(#))", header: stringConversionCode.}

proc getFrameInvXform*(this: PGItem): LMatrix4 {.importcpp: "#->get_frame_inv_xform()".}

proc setSound*(this: PGItem, event: string, sound: AudioSound) {.importcpp: "#->set_sound(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clearSound*(this: PGItem, event: string) {.importcpp: "#->clear_sound(nimStringToStdString(#))", header: stringConversionCode.}

proc getSound*(this: PGItem, event: string): AudioSound {.importcpp: "#->get_sound(nimStringToStdString(#))", header: stringConversionCode.}

proc hasSound*(this: PGItem, event: string): bool {.importcpp: "#->has_sound(nimStringToStdString(#))", header: stringConversionCode.}

proc setup*(this: PGButton, ready: NodePath) {.importcpp: "#->setup(#)".}

proc setup*(this: PGButton, ready: NodePath, depressed: NodePath) {.importcpp: "#->setup(#, #)".}

proc setup*(this: PGButton, ready: NodePath, depressed: NodePath, rollover: NodePath) {.importcpp: "#->setup(#, #, #)".}

proc setup*(this: PGButton, ready: NodePath, depressed: NodePath, rollover: NodePath, inactive: NodePath) {.importcpp: "#->setup(#, #, #, #)".}

proc setup*(this: PGButton, label: string, bevel: float) {.importcpp: "#->setup(nimStringToStdString(#), #)", header: stringConversionCode.}

proc setup*(this: PGButton, label: string) {.importcpp: "#->setup(nimStringToStdString(#))", header: stringConversionCode.}

proc addClickButton*(this: PGButton, button: ButtonHandle): bool {.importcpp: "#->add_click_button(#)".}

proc removeClickButton*(this: PGButton, button: ButtonHandle): bool {.importcpp: "#->remove_click_button(#)".}

proc hasClickButton*(this: PGButton, button: ButtonHandle): bool {.importcpp: "#->has_click_button(#)".}

proc isButtonDown*(this: PGButton | PGSliderBar): bool {.importcpp: "#->is_button_down()".}

proc getClickEvent*(this: PGButton, button: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_click_event(#))", header: stringConversionCode.}

proc setMouseWatcher*(this: PGTop, watcher: MouseWatcher) {.importcpp: "#->set_mouse_watcher(#)".}

proc getMouseWatcher*(this: PGTop): MouseWatcher {.importcpp: "#->get_mouse_watcher()".}

proc getGroup*(this: PGTop): MouseWatcherGroup {.importcpp: "#->get_group()".}

proc setStartSort*(this: PGTop, startSort: int) {.importcpp: "#->set_start_sort(#)".}

proc getStartSort*(this: PGTop): int {.importcpp: "#->get_start_sort()".}

proc setup*(this: PGEntry, width: float, numLines: int) {.importcpp: "#->setup(#, #)".}

proc setupMinimal*(this: PGEntry, width: float, numLines: int) {.importcpp: "#->setup_minimal(#, #)".}

proc setText*(this: PGEntry, text: string): bool {.importcpp: "#->set_text(nimStringToStdString(#))", header: stringConversionCode.}

proc getPlainText*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_plain_text())", header: stringConversionCode.}

proc getNumCharacters*(this: PGEntry): int {.importcpp: "#->get_num_characters()".}

proc getCharacter*(this: PGEntry, n: int): int {.importcpp: "#->get_character(#)".}

proc getGraphic*(this: PGEntry, n: int): TextGraphic {.importcpp: "#->get_graphic(#)".}

proc getProperties*(this: PGEntry, n: int): TextProperties {.importcpp: "#->get_properties(#)".}

proc setCursorPosition*(this: PGEntry, position: int) {.importcpp: "#->set_cursor_position(#)".}

proc getCursorPosition*(this: PGEntry): int {.importcpp: "#->get_cursor_position()".}

proc getCursorX*(this: PGEntry): float {.importcpp: "#->get_cursor_X()".}

proc getCursorY*(this: PGEntry): float {.importcpp: "#->get_cursor_Y()".}

proc setMaxChars*(this: PGEntry, maxChars: int) {.importcpp: "#->set_max_chars(#)".}

proc getMaxChars*(this: PGEntry): int {.importcpp: "#->get_max_chars()".}

proc setMaxWidth*(this: PGEntry, maxWidth: float) {.importcpp: "#->set_max_width(#)".}

proc getMaxWidth*(this: PGEntry): float {.importcpp: "#->get_max_width()".}

proc setNumLines*(this: PGEntry, numLines: int) {.importcpp: "#->set_num_lines(#)".}

proc getNumLines*(this: PGEntry): int {.importcpp: "#->get_num_lines()".}

proc setBlinkRate*(this: PGEntry, blinkRate: float) {.importcpp: "#->set_blink_rate(#)".}

proc getBlinkRate*(this: PGEntry): float {.importcpp: "#->get_blink_rate()".}

proc getCursorDef*(this: PGEntry): NodePath {.importcpp: "#->get_cursor_def()".}

proc clearCursorDef*(this: PGEntry) {.importcpp: "#->clear_cursor_def()".}

proc setCursorKeysActive*(this: PGEntry, flag: bool) {.importcpp: "#->set_cursor_keys_active(#)".}

proc getCursorKeysActive*(this: PGEntry): bool {.importcpp: "#->get_cursor_keys_active()".}

proc setObscureMode*(this: PGEntry, flag: bool) {.importcpp: "#->set_obscure_mode(#)".}

proc getObscureMode*(this: PGEntry): bool {.importcpp: "#->get_obscure_mode()".}

proc setOverflowMode*(this: PGEntry, flag: bool) {.importcpp: "#->set_overflow_mode(#)".}

proc getOverflowMode*(this: PGEntry): bool {.importcpp: "#->get_overflow_mode()".}

proc setCandidateActive*(this: PGEntry, candidateActive: string) {.importcpp: "#->set_candidate_active(nimStringToStdString(#))", header: stringConversionCode.}

proc getCandidateActive*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_candidate_active())", header: stringConversionCode.}

proc setCandidateInactive*(this: PGEntry, candidateInactive: string) {.importcpp: "#->set_candidate_inactive(nimStringToStdString(#))", header: stringConversionCode.}

proc getCandidateInactive*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_candidate_inactive())", header: stringConversionCode.}

proc setTextDef*(this: PGEntry, state: int, node: TextNode) {.importcpp: "#->set_text_def(#, #)".}

proc getTextDef*(this: PGEntry, state: int): TextNode {.importcpp: "#->get_text_def(#)".}

proc getAcceptEvent*(this: PGEntry, button: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_accept_event(#))", header: stringConversionCode.}

proc getAcceptFailedEvent*(this: PGEntry, button: ButtonHandle): string {.importcpp: "nimStringFromStdString(#->get_accept_failed_event(#))", header: stringConversionCode.}

proc getOverflowEvent*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_overflow_event())", header: stringConversionCode.}

proc getTypeEvent*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_type_event())", header: stringConversionCode.}

proc getEraseEvent*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_erase_event())", header: stringConversionCode.}

proc getCursormoveEvent*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_cursormove_event())", header: stringConversionCode.}

proc setWtext*(this: PGEntry, wtext: string): bool {.importcpp: "#->set_wtext(nimStringToStdString(#))", header: stringConversionCode.}

proc getPlainWtext*(this: PGEntry): string {.importcpp: "nimStringFromStdString(#->get_plain_wtext())", header: stringConversionCode.}

proc setAcceptEnabled*(this: PGEntry, enabled: bool) {.importcpp: "#->set_accept_enabled(#)".}

proc upcastToMouseWatcherParameter*(this: PGMouseWatcherParameter): MouseWatcherParameter {.importcpp: "((MouseWatcherParameter *)(PGMouseWatcherParameter *)(#))".}

proc setup*(this: PGVirtualFrame, width: float, height: float) {.importcpp: "#->setup(#, #)".}

proc setClipFrame*(this: PGVirtualFrame, clipFrame: LVecBase4) {.importcpp: "#->set_clip_frame((LVecBase4 const &)(#))".}

proc setClipFrame*(this: PGVirtualFrame, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_clip_frame(#, #, #, #)".}

proc getClipFrame*(this: PGVirtualFrame): LVecBase4 {.importcpp: "#->get_clip_frame()".}

proc hasClipFrame*(this: PGVirtualFrame): bool {.importcpp: "#->has_clip_frame()".}

proc clearClipFrame*(this: PGVirtualFrame) {.importcpp: "#->clear_clip_frame()".}

proc setCanvasTransform*(this: PGVirtualFrame, transform: TransformState) {.importcpp: "#->set_canvas_transform(#)".}

proc getCanvasTransform*(this: PGVirtualFrame): TransformState {.importcpp: "deconstify(#->get_canvas_transform())", header: deconstifyCode.}

proc getCanvasNode*(this: PGVirtualFrame): PandaNode {.importcpp: "#->get_canvas_node()".}

proc getCanvasParent*(this: PGVirtualFrame): PandaNode {.importcpp: "#->get_canvas_parent()".}

proc upcastToPGItem*(this: PGSliderBar): PGItem {.importcpp: "(PT(PGItem)(#))".}

proc setupScrollBar*(this: PGSliderBar, vertical: bool, length: float, width: float, bevel: float) {.importcpp: "#->setup_scroll_bar(#, #, #, #)".}

proc setupSlider*(this: PGSliderBar, vertical: bool, length: float, width: float, bevel: float) {.importcpp: "#->setup_slider(#, #, #, #)".}

proc setAxis*(this: PGSliderBar, axis: LVector3) {.importcpp: "#->set_axis((LVector3 const &)(#))".}

proc getAxis*(this: PGSliderBar): LVector3 {.importcpp: "#->get_axis()".}

proc setRange*(this: PGSliderBar, minValue: float, maxValue: float) {.importcpp: "#->set_range(#, #)".}

proc setScrollSize*(this: PGSliderBar, scrollSize: float) {.importcpp: "#->set_scroll_size(#)".}

proc getScrollSize*(this: PGSliderBar): float {.importcpp: "#->get_scroll_size()".}

proc setPageSize*(this: PGSliderBar, pageSize: float) {.importcpp: "#->set_page_size(#)".}

proc getPageSize*(this: PGSliderBar): float {.importcpp: "#->get_page_size()".}

proc setRatio*(this: PGSliderBar, ratio: float) {.importcpp: "#->set_ratio(#)".}

proc getRatio*(this: PGSliderBar): float {.importcpp: "#->get_ratio()".}

proc setResizeThumb*(this: PGSliderBar, resizeThumb: bool) {.importcpp: "#->set_resize_thumb(#)".}

proc getResizeThumb*(this: PGSliderBar): bool {.importcpp: "#->get_resize_thumb()".}

proc setManagePieces*(this: PGScrollFrame | PGSliderBar, managePieces: bool) {.importcpp: "#->set_manage_pieces(#)".}

proc getManagePieces*(this: PGScrollFrame | PGSliderBar): bool {.importcpp: "#->get_manage_pieces()".}

proc setThumbButton*(this: PGSliderBar, thumbButton: PGButton) {.importcpp: "#->set_thumb_button(#)".}

proc clearThumbButton*(this: PGSliderBar) {.importcpp: "#->clear_thumb_button()".}

proc getThumbButton*(this: PGSliderBar): PGButton {.importcpp: "#->get_thumb_button()".}

proc setLeftButton*(this: PGSliderBar, leftButton: PGButton) {.importcpp: "#->set_left_button(#)".}

proc clearLeftButton*(this: PGSliderBar) {.importcpp: "#->clear_left_button()".}

proc getLeftButton*(this: PGSliderBar): PGButton {.importcpp: "#->get_left_button()".}

proc setRightButton*(this: PGSliderBar, rightButton: PGButton) {.importcpp: "#->set_right_button(#)".}

proc clearRightButton*(this: PGSliderBar) {.importcpp: "#->clear_right_button()".}

proc getRightButton*(this: PGSliderBar): PGButton {.importcpp: "#->get_right_button()".}

proc getAdjustEvent*(this: PGSliderBar): string {.importcpp: "nimStringFromStdString(#->get_adjust_event())", header: stringConversionCode.}

proc remanage*(this: PGScrollFrame | PGSliderBar) {.importcpp: "#->remanage()".}

proc recompute*(this: PGScrollFrame | PGSliderBar) {.importcpp: "#->recompute()".}

proc upcastToPGVirtualFrame*(this: PGScrollFrame): PGVirtualFrame {.importcpp: "(PT(PGVirtualFrame)(#))".}

proc setup*(this: PGScrollFrame, width: float, height: float, left: float, right: float, bottom: float, top: float, sliderWidth: float, bevel: float) {.importcpp: "#->setup(#, #, #, #, #, #, #, #)".}

proc setVirtualFrame*(this: PGScrollFrame, virtualFrame: LVecBase4) {.importcpp: "#->set_virtual_frame((LVecBase4 const &)(#))".}

proc setVirtualFrame*(this: PGScrollFrame, left: float, right: float, bottom: float, top: float) {.importcpp: "#->set_virtual_frame(#, #, #, #)".}

proc getVirtualFrame*(this: PGScrollFrame): LVecBase4 {.importcpp: "#->get_virtual_frame()".}

proc hasVirtualFrame*(this: PGScrollFrame): bool {.importcpp: "#->has_virtual_frame()".}

proc clearVirtualFrame*(this: PGScrollFrame) {.importcpp: "#->clear_virtual_frame()".}

proc setAutoHide*(this: PGScrollFrame, autoHide: bool) {.importcpp: "#->set_auto_hide(#)".}

proc getAutoHide*(this: PGScrollFrame): bool {.importcpp: "#->get_auto_hide()".}

proc setHorizontalSlider*(this: PGScrollFrame, horizontalSlider: PGSliderBar) {.importcpp: "#->set_horizontal_slider(#)".}

proc clearHorizontalSlider*(this: PGScrollFrame) {.importcpp: "#->clear_horizontal_slider()".}

proc getHorizontalSlider*(this: PGScrollFrame): PGSliderBar {.importcpp: "#->get_horizontal_slider()".}

proc setVerticalSlider*(this: PGScrollFrame, verticalSlider: PGSliderBar) {.importcpp: "#->set_vertical_slider(#)".}

proc clearVerticalSlider*(this: PGScrollFrame) {.importcpp: "#->clear_vertical_slider()".}

proc getVerticalSlider*(this: PGScrollFrame): PGSliderBar {.importcpp: "#->get_vertical_slider()".}

proc setup*(this: PGWaitBar, width: float, height: float, range: float) {.importcpp: "#->setup(#, #, #)".}

proc setRange*(this: PGWaitBar, range: float) {.importcpp: "#->set_range(#)".}

proc getRange*(this: PGWaitBar): float {.importcpp: "#->get_range()".}

proc getPercent*(this: PGWaitBar): float {.importcpp: "#->get_percent()".}

proc setBarStyle*(this: PGWaitBar, style: PGFrameStyle) {.importcpp: "#->set_bar_style(#)".}

proc getBarStyle*(this: PGWaitBar): PGFrameStyle {.importcpp: "#->get_bar_style()".}

proc setAny*(this: var NetAddress, port: int): bool {.importcpp: "#.set_any(#)".}

proc setLocalhost*(this: var NetAddress, port: int): bool {.importcpp: "#.set_localhost(#)".}

proc setBroadcast*(this: var NetAddress, port: int): bool {.importcpp: "#.set_broadcast(#)".}

proc setHost*(this: var NetAddress, hostname: string, port: int): bool {.importcpp: "#.set_host(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getIpString*(this: NetAddress): string {.importcpp: "nimStringFromStdString(#.get_ip_string())", header: stringConversionCode.}

proc isAny*(this: NetAddress): bool {.importcpp: "#.is_any()".}

proc getIp*(this: NetAddress): int {.importcpp: "#.get_ip()".}

proc getIpComponent*(this: NetAddress, n: int): char {.importcpp: "#.get_ip_component(#)".}

proc getAddr*(this: NetAddress): Socket_Address {.importcpp: "#.get_addr()".}

proc `==`*(this: NetAddress, other: NetAddress): bool {.importcpp: "#.operator ==(#)".}

proc `!=`*(this: NetAddress, other: NetAddress): bool {.importcpp: "#.operator !=(#)".}

proc getAddress*(this: Connection): NetAddress {.importcpp: "#->get_address()".}

proc getManager*(this: Connection | ConnectionReader | DatagramGeneratorNet): ConnectionManager {.importcpp: "#->get_manager()".}

proc getSocket*(this: Connection): Socket_IP {.importcpp: "#->get_socket()".}

proc setLinger*(this: Connection, flag: bool, time: float64) {.importcpp: "#->set_linger(#, #)".}

proc setReuseAddr*(this: Connection, flag: bool) {.importcpp: "#->set_reuse_addr(#)".}

proc setKeepAlive*(this: Connection, flag: bool) {.importcpp: "#->set_keep_alive(#)".}

proc setRecvBufferSize*(this: Connection, size: int) {.importcpp: "#->set_recv_buffer_size(#)".}

proc setSendBufferSize*(this: Connection, size: int) {.importcpp: "#->set_send_buffer_size(#)".}

proc setIpTimeToLive*(this: Connection, ttl: int) {.importcpp: "#->set_ip_time_to_live(#)".}

proc setIpTypeOfService*(this: Connection, tos: int) {.importcpp: "#->set_ip_type_of_service(#)".}

proc setNoDelay*(this: Connection, flag: bool) {.importcpp: "#->set_no_delay(#)".}

proc setMaxSegment*(this: Connection, size: int) {.importcpp: "#->set_max_segment(#)".}

proc addConnection*(this: ConnectionReader | DatagramGeneratorNet, connection: Connection): bool {.importcpp: "#->add_connection(#)".}

proc removeConnection*(this: ConnectionReader | DatagramGeneratorNet, connection: Connection): bool {.importcpp: "#->remove_connection(#)".}

proc isConnectionOk*(this: ConnectionReader | DatagramGeneratorNet, connection: Connection): bool {.importcpp: "#->is_connection_ok(#)".}

proc isPolling*(this: ConnectionReader | DatagramGeneratorNet): bool {.importcpp: "#->is_polling()".}

proc setRawMode*(this: ConnectionReader | DatagramGeneratorNet, mode: bool) {.importcpp: "#->set_raw_mode(#)".}

proc getRawMode*(this: ConnectionReader | DatagramGeneratorNet): bool {.importcpp: "#->get_raw_mode()".}

proc setConnection*(this: NetDatagram, connection: Connection) {.importcpp: "#.set_connection(#)".}

proc getConnection*(this: NetDatagram): Connection {.importcpp: "#.get_connection()".}

proc setAddress*(this: NetDatagram, address: NetAddress) {.importcpp: "#.set_address(#)".}

proc getAddress*(this: NetDatagram): NetAddress {.importcpp: "#.get_address()".}

proc openUDPConnection*(this: ConnectionManager, hostname: string, port: int, forBroadcast: bool): Connection {.importcpp: "#->open_UDP_connection(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc openUDPConnection*(this: ConnectionManager, hostname: string, port: int): Connection {.importcpp: "#->open_UDP_connection(nimStringToStdString(#), #)", header: stringConversionCode.}

proc openUDPConnection*(this: ConnectionManager, port: int): Connection {.importcpp: "#->open_UDP_connection(#)".}

proc openUDPConnection*(this: ConnectionManager): Connection {.importcpp: "#->open_UDP_connection()".}

proc openTCPServerRendezvous*(this: ConnectionManager, address: NetAddress, backlog: int): Connection {.importcpp: "#->open_TCP_server_rendezvous(#, #)".}

proc openTCPServerRendezvous*(this: ConnectionManager, hostname: string, port: int, backlog: int): Connection {.importcpp: "#->open_TCP_server_rendezvous(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc openTCPServerRendezvous*(this: ConnectionManager, port: int, backlog: int): Connection {.importcpp: "#->open_TCP_server_rendezvous(#, #)".}

proc openTCPClientConnection*(this: ConnectionManager, address: NetAddress, timeoutMs: int): Connection {.importcpp: "#->open_TCP_client_connection(#, #)".}

proc openTCPClientConnection*(this: ConnectionManager, hostname: string, port: int, timeoutMs: int): Connection {.importcpp: "#->open_TCP_client_connection(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc closeConnection*(this: ConnectionManager, connection: Connection): bool {.importcpp: "#->close_connection(#)".}

proc waitForReaders*(this: ConnectionManager, timeout: float64): bool {.importcpp: "#->wait_for_readers(#)".}

proc scanInterfaces*(this: ConnectionManager) {.importcpp: "#->scan_interfaces()".}

proc getNumInterfaces*(this: ConnectionManager): int {.importcpp: "#->get_num_interfaces()".}

proc setMaxQueueSize*(this: ConnectionWriter | DatagramSinkNet, maxSize: int) {.importcpp: "#.set_max_queue_size(#)".}

proc getMaxQueueSize*(this: ConnectionWriter | DatagramSinkNet): int {.importcpp: "#.get_max_queue_size()".}

proc getCurrentQueueSize*(this: ConnectionWriter | DatagramSinkNet): int {.importcpp: "#.get_current_queue_size()".}

proc send*(this: ConnectionWriter | DatagramSinkNet, datagram: Datagram, connection: Connection, address: NetAddress, `block`: bool): bool {.importcpp: "#.send(#, #, #, #)".}

proc send*(this: ConnectionWriter | DatagramSinkNet, datagram: Datagram, connection: Connection, address: NetAddress): bool {.importcpp: "#.send(#, #, #)".}

proc send*(this: ConnectionWriter | DatagramSinkNet, datagram: Datagram, connection: Connection, `block`: bool): bool {.importcpp: "#.send(#, #, #)".}

proc send*(this: ConnectionWriter | DatagramSinkNet, datagram: Datagram, connection: Connection): bool {.importcpp: "#.send(#, #)".}

proc isValidForUdp*(this: ConnectionWriter | DatagramSinkNet, datagram: Datagram): bool {.importcpp: "#.is_valid_for_udp(#)".}

proc getManager*(this: ConnectionWriter | DatagramSinkNet): ConnectionManager {.importcpp: "#.get_manager()".}

proc isImmediate*(this: ConnectionWriter | DatagramSinkNet): bool {.importcpp: "#.is_immediate()".}

proc setRawMode*(this: ConnectionWriter | DatagramSinkNet, mode: bool) {.importcpp: "#.set_raw_mode(#)".}

proc getRawMode*(this: ConnectionWriter | DatagramSinkNet): bool {.importcpp: "#.get_raw_mode()".}

proc shutdown*(this: ConnectionWriter | DatagramSinkNet) {.importcpp: "#.shutdown()".}

proc upcastToDatagramGenerator*(this: DatagramGeneratorNet): DatagramGenerator {.importcpp: "((DatagramGenerator *)(#))".}

proc upcastToConnectionReader*(this: DatagramGeneratorNet | QueuedConnectionReader): ConnectionReader {.importcpp: "((ConnectionReader *)(#))".}

proc upcastToConnectionWriter*(this: DatagramSinkNet): var ConnectionWriter {.importcpp: "((ConnectionWriter *)&(#))".}

proc setTarget*(this: DatagramSinkNet, connection: Connection) {.importcpp: "#.set_target(#)".}

proc getTarget*(this: DatagramSinkNet): Connection {.importcpp: "#.get_target()".}

proc putDatagram*(this: DatagramSinkNet, data: Datagram): bool {.importcpp: "#.put_datagram(#)".}

proc upcastToConnectionListener*(this: QueuedConnectionListener): ConnectionListener {.importcpp: "((ConnectionListener *)(#))".}

proc newConnectionAvailable*(this: QueuedConnectionListener): bool {.importcpp: "#->new_connection_available()".}

proc upcastToConnectionManager*(this: QueuedConnectionManager): ConnectionManager {.importcpp: "((ConnectionManager *)(#))".}

proc resetConnectionAvailable*(this: QueuedConnectionManager): bool {.importcpp: "#->reset_connection_available()".}

proc dataAvailable*(this: QueuedConnectionReader | RecentConnectionReader): bool {.importcpp: "#->data_available()".}

proc getData*(this: QueuedConnectionReader | RecentConnectionReader, result: Datagram): bool {.importcpp: "#->get_data(#)".}

proc getData*(this: QueuedConnectionReader | RecentConnectionReader, result: NetDatagram): bool {.importcpp: "#->get_data(#)".}

proc setAnyIP*(this: Socket_Address, port: int): bool {.importcpp: "#->set_any_IP(#)".}

proc setAnyIPv6*(this: Socket_Address, port: int): bool {.importcpp: "#->set_any_IPv6(#)".}

proc setPort*(this: Socket_Address, port: int): bool {.importcpp: "#->set_port(#)".}

proc setBroadcast*(this: Socket_Address, port: int): bool {.importcpp: "#->set_broadcast(#)".}

proc setHost*(this: Socket_Address, hostname: string): bool {.importcpp: "#->set_host(nimStringToStdString(#))", header: stringConversionCode.}

proc setHost*(this: Socket_Address, hostname: string, port: int): bool {.importcpp: "#->set_host(nimStringToStdString(#), #)", header: stringConversionCode.}

proc setHost*(this: Socket_Address, ip4addr: int, port: int): bool {.importcpp: "#->set_host(#, #)".}

proc getFamily*(this: Socket_Address): int {.importcpp: "#->get_family()".}

proc getPort*(this: Socket_Address): int {.importcpp: "#->get_port()".}

proc getIp*(this: Socket_Address): string {.importcpp: "nimStringFromStdString(#->get_ip())", header: stringConversionCode.}

proc getIpPort*(this: Socket_Address): string {.importcpp: "nimStringFromStdString(#->get_ip_port())", header: stringConversionCode.}

proc GetIPAddressRaw*(this: Socket_Address): int {.importcpp: "#->GetIPAddressRaw()".}

proc `==`*(this: Socket_Address, `in`: Socket_Address): bool {.importcpp: "#->operator ==(#)".}

proc `!=`*(this: Socket_Address, `in`: Socket_Address): bool {.importcpp: "#->operator !=(#)".}

proc `<`*(this: Socket_Address, `in`: Socket_Address): bool {.importcpp: "#->operator <(#)".}

proc isAny*(this: Socket_Address): bool {.importcpp: "#->is_any()".}

proc isMcastRange*(this: Socket_Address): bool {.importcpp: "#->is_mcast_range()".}

proc Close*(this: Socket_IP) {.importcpp: "#.Close()".}

proc SetNonBlocking*(this: Socket_IP): int {.importcpp: "#.SetNonBlocking()".}

proc SetBlocking*(this: Socket_IP): int {.importcpp: "#.SetBlocking()".}

proc SetReuseAddress*(this: Socket_IP, flag: bool): bool {.importcpp: "#.SetReuseAddress(#)".}

proc SetReuseAddress*(this: Socket_IP): bool {.importcpp: "#.SetReuseAddress()".}

proc SetV6Only*(this: Socket_IP, flag: bool): bool {.importcpp: "#.SetV6Only(#)".}

proc Active*(this: Socket_IP): bool {.importcpp: "#.Active()".}

proc SetRecvBufferSize*(this: Socket_IP, size: int): int {.importcpp: "#.SetRecvBufferSize(#)".}

proc SetSocket*(this: Socket_IP, ins: int) {.importcpp: "#.SetSocket(#)".}

proc GetSocket*(this: Socket_IP): int {.importcpp: "#.GetSocket()".}

proc GetPeerName*(this: Socket_IP): Socket_Address {.importcpp: "#.GetPeerName()".}

proc SetNoDelay*(this: Socket_TCP, flag: bool): int {.importcpp: "#.SetNoDelay(#)".}

proc SetNoDelay*(this: Socket_TCP): int {.importcpp: "#.SetNoDelay()".}

proc SetLinger*(this: Socket_TCP, intervalSeconds: int): int {.importcpp: "#.SetLinger(#)".}

proc SetLinger*(this: Socket_TCP): int {.importcpp: "#.SetLinger()".}

proc DontLinger*(this: Socket_TCP): int {.importcpp: "#.DontLinger()".}

proc SetSendBufferSize*(this: Socket_TCP, insize: int): int {.importcpp: "#.SetSendBufferSize(#)".}

proc ActiveOpen*(this: Socket_TCP, theaddress: Socket_Address, setdelay: bool): bool {.importcpp: "#.ActiveOpen(#, #)".}

proc ActiveOpenNonBlocking*(this: Socket_TCP, theaddress: Socket_Address): bool {.importcpp: "#.ActiveOpenNonBlocking(#)".}

proc ErrorIsWouldBlocking*(this: Socket_TCP, err: int): bool {.importcpp: "#.ErrorIs_WouldBlocking(#)".}

proc ShutdownSend*(this: Socket_TCP): bool {.importcpp: "#.ShutdownSend()".}

proc SendData*(this: Socket_TCP, str: string): int {.importcpp: "#.SendData(nimStringToStdString(#))", header: stringConversionCode.}

proc RecvData*(this: Socket_TCP, maxLen: int): string {.importcpp: "nimStringFromStdString(#.RecvData(#))", header: stringConversionCode.}

proc OpenForListen*(this: Socket_TCP_Listen, address: Socket_Address, backlogSize: int): bool {.importcpp: "#.OpenForListen(#, #)".}

proc OpenForListen*(this: Socket_TCP_Listen, address: Socket_Address): bool {.importcpp: "#.OpenForListen(#)".}

proc OpenForListen*(this: Socket_TCP_Listen, port: int, backlogSize: int): bool {.importcpp: "#.OpenForListen(#, #)".}

proc OpenForListen*(this: Socket_TCP_Listen, port: int): bool {.importcpp: "#.OpenForListen(#)".}

proc GetIncomingConnection*(this: Socket_TCP_Listen, newsession: Socket_TCP, address: Socket_Address): bool {.importcpp: "#.GetIncomingConnection(#, #)".}

proc OpenForInput*(this: Socket_UDP_Incoming, address: Socket_Address): bool {.importcpp: "#.OpenForInput(#)".}

proc OpenForInput*(this: Socket_UDP_Incoming, port: int): bool {.importcpp: "#.OpenForInput(#)".}

proc OpenForInputMCast*(this: Socket_UDP_Incoming, address: Socket_Address): bool {.importcpp: "#.OpenForInputMCast(#)".}

proc SendTo*(this: Socket_UDP_Incoming, data: string, len: int, address: Socket_Address): bool {.importcpp: "#.SendTo(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc InitNoAddress*(this: Socket_UDP_Incoming | Socket_UDP_Outgoing): bool {.importcpp: "#.InitNoAddress()".}

proc SetToBroadCast*(this: Socket_UDP | Socket_UDP_Incoming | Socket_UDP_Outgoing): bool {.importcpp: "#.SetToBroadCast()".}

proc InitToAddress*(this: Socket_UDP | Socket_UDP_Outgoing, address: Socket_Address): bool {.importcpp: "#.InitToAddress(#)".}

proc Send*(this: Socket_UDP | Socket_UDP_Outgoing, data: string): bool {.importcpp: "#.Send(nimStringToStdString(#))", header: stringConversionCode.}

proc SendTo*(this: Socket_UDP | Socket_UDP_Outgoing, data: string, address: Socket_Address): bool {.importcpp: "#.SendTo(nimStringToStdString(#), #)", header: stringConversionCode.}

proc setForSocket*(this: Socket_fdset, incon: Socket_IP) {.importcpp: "#.setForSocket(#)".}

proc IsSetFor*(this: Socket_fdset, incon: Socket_IP): bool {.importcpp: "#.IsSetFor(#)".}

proc WaitForRead*(this: Socket_fdset, zeroFds: bool, sleepTime: int): int {.importcpp: "#.WaitForRead(#, #)".}

proc WaitForRead*(this: Socket_fdset, zeroFds: bool): int {.importcpp: "#.WaitForRead(#)".}

proc WaitForWrite*(this: Socket_fdset, zeroFds: bool, sleepTime: int): int {.importcpp: "#.WaitForWrite(#, #)".}

proc WaitForWrite*(this: Socket_fdset, zeroFds: bool): int {.importcpp: "#.WaitForWrite(#)".}

proc WaitForError*(this: Socket_fdset, zeroFds: bool, sleepTime: int): int {.importcpp: "#.WaitForError(#, #)".}

proc WaitForError*(this: Socket_fdset, zeroFds: bool): int {.importcpp: "#.WaitForError(#)".}

proc GetMessage*(this: Buffered_DatagramConnection, val: Datagram): bool {.importcpp: "#.GetMessage(#)".}

proc DoConnect*(this: Buffered_DatagramConnection): bool {.importcpp: "#.DoConnect()".}

proc IsConnected*(this: Buffered_DatagramConnection): bool {.importcpp: "#.IsConnected()".}

proc SendMessage*(this: Buffered_DatagramConnection, msg: Datagram): bool {.importcpp: "#.SendMessage(#)".}

proc Flush*(this: Buffered_DatagramConnection): bool {.importcpp: "#.Flush()".}

proc Reset*(this: Buffered_DatagramConnection) {.importcpp: "#.Reset()".}

proc WaitForNetworkReadEvent*(this: Buffered_DatagramConnection, MaxTime: float) {.importcpp: "#.WaitForNetworkReadEvent(#)".}

proc AddressQueueSize*(this: Buffered_DatagramConnection): int {.importcpp: "#.AddressQueueSize()".}

proc AddAddress*(this: Buffered_DatagramConnection, inadr: Socket_Address) {.importcpp: "#.AddAddress(#)".}

proc ClearAddresses*(this: Buffered_DatagramConnection) {.importcpp: "#.ClearAddresses()".}

proc setPointSize*(this: DynamicTextFont | FreetypeFont, pointSize: float): bool {.importcpp: "#.set_point_size(#)".}

proc getPointSize*(this: DynamicTextFont | FreetypeFont): float {.importcpp: "#.get_point_size()".}

proc setPixelsPerUnit*(this: DynamicTextFont | FreetypeFont, pixelsPerUnit: float): bool {.importcpp: "#.set_pixels_per_unit(#)".}

proc getPixelsPerUnit*(this: DynamicTextFont | FreetypeFont): float {.importcpp: "#.get_pixels_per_unit()".}

proc setPixelSize*(this: DynamicTextFont | FreetypeFont, pixelSize: float): bool {.importcpp: "#.set_pixel_size(#)".}

proc getPixelSize*(this: DynamicTextFont | FreetypeFont): float {.importcpp: "#.get_pixel_size()".}

proc setScaleFactor*(this: DynamicTextFont | FreetypeFont, scaleFactor: float): bool {.importcpp: "#.set_scale_factor(#)".}

proc getScaleFactor*(this: DynamicTextFont | FreetypeFont): float {.importcpp: "#.get_scale_factor()".}

proc setNativeAntialias*(this: DynamicTextFont | FreetypeFont, nativeAntialias: bool) {.importcpp: "#.set_native_antialias(#)".}

proc getNativeAntialias*(this: DynamicTextFont | FreetypeFont): bool {.importcpp: "#.get_native_antialias()".}

proc getFontPixelSize*(this: DynamicTextFont | FreetypeFont): int {.importcpp: "#.get_font_pixel_size()".}

proc getLineHeight*(this: DynamicTextFont | FreetypeFont): float {.importcpp: "#.get_line_height()".}

proc getSpaceAdvance*(this: DynamicTextFont | FreetypeFont): float {.importcpp: "#.get_space_advance()".}

proc setWindingOrder*(this: DynamicTextFont | FreetypeFont, windingOrder: FreetypeFont_WindingOrder) {.importcpp: "#.set_winding_order(#)".}

proc getWindingOrder*(this: DynamicTextFont | FreetypeFont): FreetypeFont_WindingOrder {.importcpp: "#.get_winding_order()".}

proc getAdvance*(this: PNMTextGlyph): int {.importcpp: "#.get_advance()".}

proc place*(this: PNMTextGlyph, destImage: PNMImage, xp: int, yp: int, fg: LColor) {.importcpp: "#.place(#, #, #, #)".}

proc place*(this: PNMTextGlyph, destImage: PNMImage, xp: int, yp: int, fg: LColor, interior: LColor) {.importcpp: "#.place(#, #, #, #, #)".}

proc getLeft*(this: PNMTextGlyph): int {.importcpp: "#.get_left()".}

proc getRight*(this: PNMTextGlyph): int {.importcpp: "#.get_right()".}

proc getBottom*(this: PNMTextGlyph): int {.importcpp: "#.get_bottom()".}

proc getTop*(this: PNMTextGlyph): int {.importcpp: "#.get_top()".}

proc getHeight*(this: PNMTextGlyph): int {.importcpp: "#.get_height()".}

proc getWidth*(this: PNMTextGlyph): int {.importcpp: "#.get_width()".}

proc getValue*(this: PNMTextGlyph, x: int, y: int): float64 {.importcpp: "#.get_value(#, #)".}

proc getInteriorFlag*(this: PNMTextGlyph, x: int, y: int): bool {.importcpp: "#.get_interior_flag(#, #)".}

proc setAlign*(this: PNMTextMaker, alignType: PNMTextMaker_Alignment) {.importcpp: "#.set_align(#)".}

proc getAlign*(this: PNMTextMaker): PNMTextMaker_Alignment {.importcpp: "#.get_align()".}

proc setInteriorFlag*(this: PNMTextMaker, interiorFlag: bool) {.importcpp: "#.set_interior_flag(#)".}

proc getInteriorFlag*(this: PNMTextMaker): bool {.importcpp: "#.get_interior_flag()".}

proc setFg*(this: PNMTextMaker, fg: LColor) {.importcpp: "#.set_fg(#)".}

proc getFg*(this: PNMTextMaker): LColor {.importcpp: "#.get_fg()".}

proc setInterior*(this: PNMTextMaker, interior: LColor) {.importcpp: "#.set_interior(#)".}

proc getInterior*(this: PNMTextMaker): LColor {.importcpp: "#.get_interior()".}

proc setDistanceFieldRadius*(this: PNMTextMaker, radius: int) {.importcpp: "#.set_distance_field_radius(#)".}

proc getDistanceFieldRadius*(this: PNMTextMaker): int {.importcpp: "#.get_distance_field_radius()".}

proc generateInto*(this: PNMTextMaker, text: string, destImage: PNMImage, x: int, y: int): int {.importcpp: "#.generate_into(nimStringToStdString(#), #, #, #)", header: stringConversionCode.}

proc calcWidth*(this: PNMTextMaker, text: string): int {.importcpp: "#.calc_width(nimStringToStdString(#))", header: stringConversionCode.}

proc getGlyph*(this: PNMTextMaker, character: int): PNMTextGlyph {.importcpp: "#.get_glyph(#)".}

proc copySubgraph*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): PandaNode {.importcpp: "#->copy_subgraph(#)".}

proc getNumParents*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_num_parents(#)".}

proc getParent*(this: PandaNode, n: int, currentThread: Thread = Thread.getCurrentThread()): PandaNode {.importcpp: "#->get_parent(#, #)".}

proc findParent*(this: PandaNode, node: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->find_parent(#, #)".}

proc getNumChildren*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_num_children(#)".}

proc getChild*(this: PandaNode, n: int, currentThread: Thread = Thread.getCurrentThread()): PandaNode {.importcpp: "#->get_child(#, #)".}

proc getChildSort*(this: PandaNode, n: int, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_child_sort(#, #)".}

proc findChild*(this: PandaNode, node: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->find_child(#, #)".}

proc addChild*(this: PandaNode, childNode: PandaNode, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->add_child(#, #, #)".}

proc removeChild*(this: PandaNode, childNode: PandaNode, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->remove_child(#, #)".}

proc removeChild*(this: PandaNode, childIndex: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->remove_child(#, #)".}

proc replaceChild*(this: PandaNode, origChild: PandaNode, newChild: PandaNode, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->replace_child(#, #, #)".}

proc stashChild*(this: PandaNode, childNode: PandaNode, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->stash_child(#, #)".}

proc stashChild*(this: PandaNode, childIndex: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->stash_child(#, #)".}

proc unstashChild*(this: PandaNode, childNode: PandaNode, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->unstash_child(#, #)".}

proc unstashChild*(this: PandaNode, stashedIndex: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->unstash_child(#, #)".}

proc getNumStashed*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_num_stashed(#)".}

proc getStashed*(this: PandaNode, n: int, currentThread: Thread = Thread.getCurrentThread()): PandaNode {.importcpp: "#->get_stashed(#, #)".}

proc getStashedSort*(this: PandaNode, n: int, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_stashed_sort(#, #)".}

proc findStashed*(this: PandaNode, node: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->find_stashed(#, #)".}

proc addStashed*(this: PandaNode, childNode: PandaNode, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->add_stashed(#, #, #)".}

proc removeStashed*(this: PandaNode, childIndex: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->remove_stashed(#, #)".}

proc removeAllChildren*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->remove_all_children(#)".}

proc stealChildren*(this: PandaNode, other: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->steal_children(#, #)".}

proc copyChildren*(this: PandaNode, other: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->copy_children(#, #)".}

proc setState*(this: PandaNode, state: RenderState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_state(#, #)".}

proc getState*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): RenderState {.importcpp: "deconstify(#->get_state(#))", header: deconstifyCode.}

proc clearState*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->clear_state(#)".}

proc setEffects*(this: PandaNode, effects: RenderEffects, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_effects(#, #)".}

proc getEffects*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): RenderEffects {.importcpp: "deconstify(#->get_effects(#))", header: deconstifyCode.}

proc clearEffects*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->clear_effects(#)".}

proc setTransform*(this: PandaNode, transform: TransformState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_transform(#, #)".}

proc getTransform*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "deconstify(#->get_transform(#))", header: deconstifyCode.}

proc clearTransform*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->clear_transform(#)".}

proc setPrevTransform*(this: PandaNode, transform: TransformState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_prev_transform(#, #)".}

proc getPrevTransform*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "deconstify(#->get_prev_transform(#))", header: deconstifyCode.}

proc resetPrevTransform*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->reset_prev_transform(#)".}

proc setTag*(this: PandaNode, key: string, value: string, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_tag(nimStringToStdString(#), nimStringToStdString(#), #)", header: stringConversionCode.}

proc getTag*(this: PandaNode, key: string, currentThread: Thread = Thread.getCurrentThread()): string {.importcpp: "nimStringFromStdString(#->get_tag(nimStringToStdString(#), #))", header: stringConversionCode.}

proc hasTag*(this: PandaNode, key: string, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->has_tag(nimStringToStdString(#), #)", header: stringConversionCode.}

proc clearTag*(this: PandaNode, key: string, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->clear_tag(nimStringToStdString(#), #)", header: stringConversionCode.}

proc getNetCollideMask*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): CollideMask {.importcpp: "#->get_net_collide_mask(#)".}

proc getOffClipPlanes*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): RenderAttrib {.importcpp: "deconstify(#->get_off_clip_planes(#))", header: deconstifyCode.}

proc getBounds*(this: Geom | PandaNode, currentThread: Thread = Thread.getCurrentThread()): BoundingVolume {.importcpp: "deconstify(#->get_bounds(#))", header: deconstifyCode.}

proc getBounds*(this: PandaNode, seq: UpdateSeq, currentThread: Thread = Thread.getCurrentThread()): BoundingVolume {.importcpp: "deconstify(#->get_bounds(#, #))", header: deconstifyCode.}

proc getNestedVertices*(this: Geom | PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_nested_vertices(#)".}

proc getInternalBounds*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): BoundingVolume {.importcpp: "deconstify(#->get_internal_bounds(#))", header: deconstifyCode.}

proc getInternalVertices*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_internal_vertices(#)".}

proc markBoundsStale*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->mark_bounds_stale(#)".}

proc markInternalBoundsStale*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->mark_internal_bounds_stale(#)".}

proc isFinal*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->is_final(#)".}

proc getFancyBits*(this: PandaNode, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_fancy_bits(#)".}

proc isSingleton*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.is_singleton(#)".}

proc getNumNodes*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#.get_num_nodes(#)".}

proc getNode*(this: NodePath, index: int, currentThread: Thread = Thread.getCurrentThread()): PandaNode {.importcpp: "#.get_node(#, #)".}

proc getAncestor*(this: NodePath, index: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_ancestor(#, #)".}

proc getTopNode*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): PandaNode {.importcpp: "#.get_top_node(#)".}

proc getTop*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_top(#)".}

proc isSameGraph*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.is_same_graph(#, #)".}

proc isAncestorOf*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.is_ancestor_of(#, #)".}

proc getCommonAncestor*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_common_ancestor(#, #)".}

proc getChildren*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): NodePathCollection {.importcpp: "#.get_children(#)".}

proc getNumChildren*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#.get_num_children(#)".}

proc getChild*(this: NodePath, n: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_child(#, #)".}

proc getStashedChildren*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): NodePathCollection {.importcpp: "#.get_stashed_children(#)".}

proc hasParent*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.has_parent(#)".}

proc getParent*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_parent(#)".}

proc getSort*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#.get_sort(#)".}

proc reparentTo*(this: NodePath, other: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.reparent_to(#, #, #)".}

proc stashTo*(this: NodePath, other: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.stash_to(#, #, #)".}

proc wrtReparentTo*(this: NodePath, other: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.wrt_reparent_to(#, #, #)".}

proc instanceTo*(this: NodePath, other: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.instance_to(#, #, #)".}

proc instanceUnderNode*(this: NodePath, other: NodePath, name: string, sort: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.instance_under_node(#, nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc copyTo*(this: NodePath, other: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.copy_to(#, #, #)".}

proc attachNewNode*(this: NodePath, node: PandaNode, sort: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.attach_new_node(#, #, #)".}

proc attachNewNode*(this: NodePath, name: string, sort: int, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.attach_new_node(nimStringToStdString(#), #, #)", header: stringConversionCode.}

proc removeNode*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.remove_node(#)".}

proc detachNode*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.detach_node(#)".}

proc getState*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): RenderState {.importcpp: "#.get_state(#, #)".}

proc getState*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): RenderState {.importcpp: "#.get_state(#)".}

proc setState*(this: NodePath, other: NodePath, state: RenderState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.set_state(#, #, #)".}

proc setState*(this: NodePath, state: RenderState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.set_state(#, #)".}

proc getNetState*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): RenderState {.importcpp: "#.get_net_state(#)".}

proc getTransform*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "#.get_transform(#, #)".}

proc getTransform*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "#.get_transform(#)".}

proc clearTransform*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.clear_transform(#, #)".}

proc clearTransform*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.clear_transform(#)".}

proc setTransform*(this: NodePath, other: NodePath, transform: TransformState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.set_transform(#, #, #)".}

proc setTransform*(this: NodePath, transform: TransformState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.set_transform(#, #)".}

proc getNetTransform*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "#.get_net_transform(#)".}

proc getPrevTransform*(this: NodePath, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "#.get_prev_transform(#, #)".}

proc getPrevTransform*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "#.get_prev_transform(#)".}

proc setPrevTransform*(this: NodePath, other: NodePath, transform: TransformState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.set_prev_transform(#, #, #)".}

proc setPrevTransform*(this: NodePath, transform: TransformState, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.set_prev_transform(#, #)".}

proc getNetPrevTransform*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): TransformState {.importcpp: "#.get_net_prev_transform(#)".}

proc getHiddenAncestor*(this: NodePath, cameraMask: DrawMask, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_hidden_ancestor(#, #)".}

proc stash*(this: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.stash(#, #)".}

proc unstash*(this: NodePath, sort: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.unstash(#, #)".}

proc unstashAll*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.unstash_all(#)".}

proc getStashedAncestor*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#.get_stashed_ancestor(#)".}

proc verifyComplete*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.verify_complete(#)".}

proc getBounds*(this: NodePath, currentThread: Thread = Thread.getCurrentThread()): BoundingVolume {.importcpp: "#.get_bounds(#)".}

proc calcTightBounds*(this: NodePath, minPoint: LPoint3, maxPoint: LPoint3, other: NodePath, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.calc_tight_bounds((LPoint3 &)(#), (LPoint3 &)(#), #, #)".}

proc cleanupAuxSceneData*(this: Camera, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->cleanup_aux_scene_data(#)".}

proc getCamera*(this: DisplayRegion, currentThread: Thread = Thread.getCurrentThread()): NodePath {.importcpp: "#->get_camera(#)".}

proc acquire*(this: LightReMutexDirect | ReMutexDirect, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#.acquire(#)".}

proc tryAcquire*(this: ReMutexDirect, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#.try_acquire(#)".}

proc requestResident*(this: GeomPrimitive | GeomVertexArrayData, currentThread: Thread = Thread.getCurrentThread()): bool {.importcpp: "#->request_resident(#)".}

proc getHandle*(this: GeomVertexArrayData, currentThread: Thread = Thread.getCurrentThread()): GeomVertexArrayDataHandle {.importcpp: "deconstify(#->get_handle(#))", header: deconstifyCode.}

proc modifyHandle*(this: GeomVertexArrayData, currentThread: Thread = Thread.getCurrentThread()): GeomVertexArrayDataHandle {.importcpp: "#->modify_handle(#)".}

proc getModified*(this: Geom | GeomVertexData | SliderTable | TransformBlendTable | TransformTable | VertexSlider | VertexTransform, currentThread: Thread = Thread.getCurrentThread()): UpdateSeq {.importcpp: "#->get_modified(#)".}

proc getModified*(this: TransformBlend, currentThread: Thread = Thread.getCurrentThread()): UpdateSeq {.importcpp: "#.get_modified(#)".}

proc copyFrom*(this: GeomVertexData, source: GeomVertexData, keepDataObjects: bool, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->copy_from(#, #, #)".}

proc getVertexData*(this: Geom, currentThread: Thread = Thread.getCurrentThread()): GeomVertexData {.importcpp: "deconstify(#->get_vertex_data(#))", header: deconstifyCode.}

proc getAnimatedVertexData*(this: Geom, force: bool, currentThread: Thread = Thread.getCurrentThread()): GeomVertexData {.importcpp: "deconstify(#->get_animated_vertex_data(#, #))", header: deconstifyCode.}

proc getFrameTime*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): float64 {.importcpp: "#->get_frame_time(#)".}

proc setFrameTime*(this: ClockObject, time: float64, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_frame_time(#, #)".}

proc setFrameCount*(this: ClockObject, frameCount: int, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->set_frame_count(#, #)".}

proc getFrameCount*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): int {.importcpp: "#->get_frame_count(#)".}

proc getNetFrameRate*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): float64 {.importcpp: "#->get_net_frame_rate(#)".}

proc getDt*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): float64 {.importcpp: "#->get_dt(#)".}

proc getAverageFrameRate*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): float64 {.importcpp: "#->get_average_frame_rate(#)".}

proc getMaxFrameDuration*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): float64 {.importcpp: "#->get_max_frame_duration(#)".}

proc calcFrameRateDeviation*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()): float64 {.importcpp: "#->calc_frame_rate_deviation(#)".}

proc tick*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->tick(#)".}

proc syncFrameTime*(this: ClockObject, currentThread: Thread = Thread.getCurrentThread()) {.importcpp: "#->sync_frame_time(#)".}

proc getTypehandles*(this: TypeRegistry): seq[TypeHandle] =
  let count = this.getNumTypehandles()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTypehandle(i)

proc getRootClasses*(this: TypeRegistry): seq[TypeHandle] =
  let count = this.getNumRootClasses()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRootClass(i)

proc getSystems*(this: PandaSystem): seq[string] =
  let count = this.getNumSystems()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getSystem(i)

proc getDirectories*(this: DSearchPath): seq[Filename] =
  let count = this.getNumDirectories()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDirectory(i)

proc getDeclarations*(this: ConfigVariableCore): seq[ConfigDeclaration] =
  let count = this.getNumDeclarations()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDeclaration(i)

proc getReferences*(this: ConfigVariableCore): seq[ConfigDeclaration] =
  let count = this.getNumReferences()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getReference(i)

proc getTrustedReferences*(this: ConfigVariableCore): seq[ConfigDeclaration] =
  let count = this.getNumTrustedReferences()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTrustedReference(i)

proc getUniqueReferences*(this: ConfigVariableCore): seq[ConfigDeclaration] =
  let count = this.getNumUniqueReferences()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getUniqueReference(i)

proc getVariables*(this: ConfigVariableManager): seq[ConfigVariableCore] =
  let count = this.getNumVariables()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVariable(i)

proc getDirectories*(this: ConfigVariableSearchPath): seq[Filename] =
  let count = this.getNumDirectories()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDirectory(i)

proc getChildren*(this: NotifyCategory): seq[NotifyCategory] =
  let count = this.getNumChildren()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getChild(i)

proc getRedirectSteps*(this: HTTPChannel): seq[URLSpec] =
  let count = this.getNumRedirectSteps()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRedirectStep(i)

proc getPointers*(this: MemoryUsagePointers): seq[ReferenceCount] =
  let count = this.getNumPointers()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPointer(i)

proc getTypedPointers*(this: MemoryUsagePointers): seq[TypedObject] =
  let count = this.getNumPointers()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTypedPointer(i)

proc getSubfileNames*(this: Multifile): seq[string] =
  let count = this.getNumSubfiles()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getSubfileName(i)

proc getFiles*(this: VirtualFileList): seq[VirtualFile] =
  let count = this.getNumFiles()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getFile(i)

proc getMounts*(this: VirtualFileSystem): seq[VirtualFileMount] =
  let count = this.getNumMounts()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getMount(i)

proc getParents*(this: PandaNode): seq[PandaNode] =
  let count = this.getNumParents()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getParent(i)

proc getChildren*(this: PandaNode): seq[PandaNode] =
  let count = this.getNumChildren()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getChild(i)

proc getStashed*(this: PandaNode): seq[PandaNode] =
  let count = this.getNumStashed()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getStashed(i)

proc getDispatches*(this: ComputeNode): seq[LVecBase3i] =
  let count = this.getNumDispatches()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDispatch(i)

proc getDisplayRegions*(this: Camera): seq[DisplayRegion] =
  let count = this.getNumDisplayRegions()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDisplayRegion(i)

proc getIns*(this: LODNode): seq[float] =
  let count = this.getNumSwitches()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getIn(i)

proc getOuts*(this: LODNode): seq[float] =
  let count = this.getNumSwitches()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOut(i)

proc getStages*(this: TexMatrixAttrib): seq[TextureStage] =
  let count = this.getNumStages()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getStage(i)

proc getNames*(this: InternalNameCollection): seq[InternalName] =
  let count = this.getNumNames()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getName(i)

proc getTextureStages*(this: TextureStageCollection): seq[TextureStage] =
  let count = this.getNumTextureStages()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTextureStage(i)

proc getNodes*(this: NodePath): seq[PandaNode] =
  let count = this.getNumNodes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getNode(i)

proc getAncestors*(this: NodePath): seq[NodePath] =
  let count = this.getNumNodes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getAncestor(i)

proc getPaths*(this: NodePathCollection): seq[NodePath] =
  let count = this.getNumPaths()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPath(i)

proc getNodes*(this: AttribNodeRegistry): seq[NodePath] =
  let count = this.getNumNodes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getNode(i)

proc getOnPlanes*(this: ClipPlaneAttrib): seq[NodePath] =
  let count = this.getNumOnPlanes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOnPlane(i)

proc getOffPlanes*(this: ClipPlaneAttrib): seq[NodePath] =
  let count = this.getNumOffPlanes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOffPlane(i)

proc getGeoms*(this: GeomNode): seq[Geom] =
  let count = this.getNumGeoms()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getGeom(i)

proc modifyGeoms*(this: GeomNode): seq[Geom] =
  let count = this.getNumGeoms()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.modifyGeom(i)

proc getGeomStates*(this: GeomNode): seq[RenderState] =
  let count = this.getNumGeoms()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getGeomState(i)

proc getBins*(this: CullBinManager): seq[int] =
  let count = this.getNumBins()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getBin(i)

proc getOnLights*(this: LightAttrib): seq[NodePath] =
  let count = this.getNumOnLights()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOnLight(i)

proc getOffLights*(this: LightAttrib): seq[NodePath] =
  let count = this.getNumOffLights()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOffLight(i)

proc getTypes*(this: LoaderFileTypeRegistry): seq[LoaderFileType] =
  let count = this.getNumTypes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getType(i)

proc getOnStages*(this: TextureAttrib): seq[TextureStage] =
  let count = this.getNumOnStages()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOnStage(i)

proc getOnFfStages*(this: TextureAttrib): seq[TextureStage] =
  let count = this.getNumOnFfStages()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOnFfStage(i)

proc getOffStages*(this: TextureAttrib): seq[TextureStage] =
  let count = this.getNumOffStages()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOffStage(i)

proc getVertices*(this: OccluderNode): seq[LPoint3] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getOnOccluders*(this: OccluderEffect): seq[NodePath] =
  let count = this.getNumOnOccluders()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOnOccluder(i)

proc getPoints*(this: ScissorEffect): seq[LPoint3] =
  let count = this.getNumPoints()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPoint(i)

proc getNodes*(this: ScissorEffect): seq[NodePath] =
  let count = this.getNumPoints()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getNode(i)

proc getVertices*(this: PortalNode): seq[LPoint3] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getOptions*(this: MicrophoneAudio): seq[MicrophoneAudio] =
  let count = MicrophoneAudio.getNumOptions()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = MicrophoneAudio.getOption(i)

proc getVertices*(this: LineSegs): seq[LVertex] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getVertexColors*(this: LineSegs): seq[LColor] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertexColor(i)

proc getChildren*(this: AnimGroup): seq[AnimGroup] =
  let count = this.getNumChildren()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getChild(i)

proc getChildren*(this: PartGroup): seq[PartGroup] =
  let count = this.getNumChildren()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getChild(i)

proc getAnims*(this: AnimControlCollection): seq[AnimControl] =
  let count = this.getNumAnims()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getAnim(i)

proc getAnimNames*(this: AnimControlCollection): seq[string] =
  let count = this.getNumAnims()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getAnimName(i)

proc getNodes*(this: PartBundle): seq[PartBundleNode] =
  let count = this.getNumNodes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getNode(i)

proc getBundles*(this: PartBundleNode): seq[PartBundle] =
  let count = this.getNumBundles()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getBundle(i)

proc getBundleHandles*(this: PartBundleNode): seq[PartBundleHandle] =
  let count = this.getNumBundles()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getBundleHandle(i)

proc getCollectors*(this: PStatClient): seq[PStatCollector] =
  let count = this.getNumCollectors()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCollector(i)

proc getThreads*(this: PStatClient): seq[PStatThread] =
  let count = this.getNumThreads()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getThread(i)

proc getSolids*(this: CollisionNode): seq[CollisionSolid] =
  let count = this.getNumSolids()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getSolid(i)

proc getColliders*(this: CollisionTraverser): seq[NodePath] =
  let count = this.getNumColliders()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCollider(i)

proc getVertices*(this: CollisionFloorMesh): seq[LPoint3] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getTriangles*(this: CollisionFloorMesh): seq[LPoint3i] =
  let count = this.getNumTriangles()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTriangle(i)

proc getPoints*(this: CollisionPolygon): seq[LPoint3] =
  let count = this.getNumPoints()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPoint(i)

proc getInPatterns*(this: CollisionHandlerEvent): seq[string] =
  let count = this.getNumInPatterns()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getInPattern(i)

proc getAgainPatterns*(this: CollisionHandlerEvent): seq[string] =
  let count = this.getNumAgainPatterns()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getAgainPattern(i)

proc getOutPatterns*(this: CollisionHandlerEvent): seq[string] =
  let count = this.getNumOutPatterns()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getOutPattern(i)

proc getEntries*(this: CollisionHandlerQueue): seq[CollisionEntry] =
  let count = this.getNumEntries()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getEntry(i)

proc getDisplayModes*(this: DisplayInformation): seq[DisplayMode] =
  let count = this.getTotalDisplayModes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDisplayMode(i)

proc getDisplayRegions*(this: GraphicsOutput): seq[DisplayRegion] =
  let count = this.getNumDisplayRegions()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getDisplayRegion(i)

proc getActiveDisplayRegions*(this: GraphicsOutput): seq[DisplayRegion] =
  let count = this.getNumActiveDisplayRegions()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getActiveDisplayRegion(i)

proc getGsgs*(this: GraphicsStateGuardianBase): seq[GraphicsStateGuardianBase] =
  let count = GraphicsStateGuardianBase.getNumGsgs()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = GraphicsStateGuardianBase.getGsg(i)

proc getWindows*(this: GraphicsEngine): seq[GraphicsOutput] =
  let count = this.getNumWindows()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getWindow(i)

proc getInputDevices*(this: GraphicsWindow): seq[InputDevice] =
  let count = this.getNumInputDevices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getInputDevice(i)

proc getInputDeviceNames*(this: GraphicsWindow): seq[string] =
  let count = this.getNumInputDevices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getInputDeviceName(i)

proc getPipeTypes*(this: GraphicsPipeSelection): seq[TypeHandle] =
  let count = this.getNumPipeTypes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPipeType(i)

proc getTaskChains*(this: AsyncTaskManager): seq[AsyncTaskChain] =
  let count = this.getNumTaskChains()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTaskChain(i)

proc getTasks*(this: AsyncTaskCollection): seq[AsyncTask] =
  let count = this.getNumTasks()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTask(i)

proc getParameters*(this: Event): seq[EventParameter] =
  let count = this.getNumParameters()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getParameter(i)

proc getColumns*(this: GeomVertexArrayFormat): seq[GeomVertexColumn] =
  let count = this.getNumColumns()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getColumn(i)

proc getArrays*(this: GeomVertexFormat): seq[GeomVertexArrayFormat] =
  let count = this.getNumArrays()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getArray(i)

proc getColumns*(this: GeomVertexFormat): seq[GeomVertexColumn] =
  let count = this.getNumColumns()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getColumn(i)

proc getPoints*(this: GeomVertexFormat): seq[InternalName] =
  let count = this.getNumPoints()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPoint(i)

proc getVectors*(this: GeomVertexFormat): seq[InternalName] =
  let count = this.getNumVectors()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVector(i)

proc getTexcoords*(this: GeomVertexFormat): seq[InternalName] =
  let count = this.getNumTexcoords()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTexcoord(i)

proc getMorphSliders*(this: GeomVertexFormat): seq[InternalName] =
  let count = this.getNumMorphs()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getMorphSlider(i)

proc getMorphBases*(this: GeomVertexFormat): seq[InternalName] =
  let count = this.getNumMorphs()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getMorphBase(i)

proc getMorphDeltas*(this: GeomVertexFormat): seq[InternalName] =
  let count = this.getNumMorphs()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getMorphDelta(i)

proc getTransforms*(this: TransformTable): seq[VertexTransform] =
  let count = this.getNumTransforms()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTransform(i)

proc getTransforms*(this: TransformBlend): seq[VertexTransform] =
  let count = this.getNumTransforms()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTransform(i)

proc getBlends*(this: TransformBlendTable): seq[TransformBlend] =
  let count = this.getNumBlends()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getBlend(i)

proc getSliders*(this: SliderTable): seq[VertexSlider] =
  let count = this.getNumSliders()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getSlider(i)

proc getArrays*(this: GeomVertexData): seq[GeomVertexArrayData] =
  let count = this.getNumArrays()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getArray(i)

proc getVertexList*(this: GeomPrimitive): seq[int] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getPrimitives*(this: Geom): seq[GeomPrimitive] =
  let count = this.getNumPrimitives()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPrimitive(i)

proc getTextures*(this: TextureCollection): seq[Texture] =
  let count = this.getNumTextures()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTexture(i)

proc getRows*(this: LMatrix3f): seq[LVecBase3f] =
  let count = LMatrix3f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow(i)

proc getCols*(this: LMatrix3f): seq[LVecBase3f] =
  let count = LMatrix3f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCol(i)

proc getCol2s*(this: LMatrix3f): seq[LVecBase2f] =
  let count = LMatrix3f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCol2(i)

proc getRow2s*(this: LMatrix3f): seq[LVecBase2f] =
  let count = LMatrix3f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow2(i)

proc getRows*(this: LMatrix4f): seq[LVecBase4f] =
  let count = LMatrix4f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow(i)

proc getCols*(this: LMatrix4f): seq[LVecBase4f] =
  let count = LMatrix4f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCol(i)

proc getRow3s*(this: LMatrix4f): seq[LVecBase3f] =
  let count = LMatrix4f.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow3(i)

proc getRows*(this: LMatrix3d): seq[LVecBase3d] =
  let count = LMatrix3d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow(i)

proc getCols*(this: LMatrix3d): seq[LVecBase3d] =
  let count = LMatrix3d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCol(i)

proc getCol2s*(this: LMatrix3d): seq[LVecBase2d] =
  let count = LMatrix3d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCol2(i)

proc getRow2s*(this: LMatrix3d): seq[LVecBase2d] =
  let count = LMatrix3d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow2(i)

proc getRows*(this: LMatrix4d): seq[LVecBase4d] =
  let count = LMatrix4d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow(i)

proc getCols*(this: LMatrix4d): seq[LVecBase4d] =
  let count = LMatrix4d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCol(i)

proc getRow3s*(this: LMatrix4d): seq[LVecBase3d] =
  let count = LMatrix4d.len()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRow3(i)

proc getPoints*(this: BoundingBox): seq[LPoint3] =
  let count = this.getNumPoints()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPoint(i)

proc getPlanes*(this: BoundingBox): seq[LPlane] =
  let count = this.getNumPlanes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPlane(i)

proc getPoints*(this: BoundingHexahedron): seq[LPoint3] =
  let count = this.getNumPoints()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPoint(i)

proc getPlanes*(this: BoundingHexahedron): seq[LPlane] =
  let count = this.getNumPlanes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPlane(i)

proc getComponents*(this: IntersectionBoundingVolume): seq[GeometricBoundingVolume] =
  let count = this.getNumComponents()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getComponent(i)

proc getComponents*(this: UnionBoundingVolume): seq[GeometricBoundingVolume] =
  let count = this.getNumComponents()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getComponent(i)

proc getVertices*(this: Triangulator): seq[LPoint2d] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getVertices*(this: Triangulator3): seq[LPoint3d] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getCurves*(this: ParametricCurveCollection): seq[ParametricCurve] =
  let count = this.getNumCurves()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCurve(i)

proc getTimewarpCurves*(this: ParametricCurveCollection): seq[ParametricCurve] =
  let count = this.getNumTimewarps()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getTimewarpCurve(i)

proc getCvs*(this: NurbsCurveInterface): seq[LVecBase4] =
  let count = this.getNumCvs()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getCv(i)

proc getKnots*(this: NurbsCurveInterface): seq[float] =
  let count = this.getNumKnots()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getKnot(i)

proc getSampleTs*(this: NurbsCurveResult): seq[float] =
  let count = this.getNumSamples()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getSampleT(i)

proc getSamplePoints*(this: NurbsCurveResult): seq[LPoint3] =
  let count = this.getNumSamples()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getSamplePoint(i)

proc getVertices*(this: NurbsCurveEvaluator): seq[LVecBase4] =
  let count = this.getNumVertices()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVertex(i)

proc getKnots*(this: NurbsCurveEvaluator): seq[float] =
  let count = this.getNumKnots()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getKnot(i)

proc getUKnots*(this: NurbsSurfaceEvaluator): seq[float] =
  let count = this.getNumUKnots()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getUKnot(i)

proc getVKnots*(this: NurbsSurfaceEvaluator): seq[float] =
  let count = this.getNumVKnots()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getVKnot(i)

proc getExtensions*(this: PNMFileType): seq[string] =
  let count = this.getNumExtensions()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getExtension(i)

proc getTypes*(this: PNMFileTypeRegistry): seq[PNMFileType] =
  let count = this.getNumTypes()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getType(i)

proc getPages*(this: DynamicTextFont): seq[DynamicTextPage] =
  let count = this.getNumPages()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getPage(i)

proc getParameters*(this: ButtonThrower): seq[EventParameter] =
  let count = this.getNumParameters()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getParameter(i)

proc getRegions*(this: MouseWatcherBase): seq[MouseWatcherRegion] =
  let count = this.getNumRegions()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getRegion(i)

proc getGroups*(this: MouseWatcher): seq[MouseWatcherGroup] =
  let count = this.getNumGroups()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getGroup(i)

proc getButtons*(this: ModifierButtons): seq[ButtonHandle] =
  let count = this.getNumButtons()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getButton(i)

proc getStateDefs*(this: PGItem): seq[NodePath] =
  let count = this.getNumStateDefs()
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this.getStateDef(i)

func `$`*(this: AdaptiveLru | AdaptiveLruPage | AnimControl | AnimControlCollection | AnimGroup | AnimInterface | AnimPreloadTable | AsyncFuture | AsyncTask | AsyncTaskChain | AsyncTaskCollection | AsyncTaskManager | AttribNodeRegistry | AudioManager | AudioSound | AuxSceneData | BamCacheRecord | BitArray | BitMask[uint16, 16] | BitMask[uint32, 32] | BitMask[uint64, 64] | BoundingVolume | ButtonHandle | ButtonMap | CallbackData | CallbackObject | CollisionEntry | CollisionHandlerQueue | CollisionRecorder | CollisionSolid | CollisionTraverser | ConditionVarDirect | ConditionVarFullDirect | ConfigDeclaration | ConfigPage | ConfigPageManager | ConfigVariableBase | ConfigVariableCore | ConfigVariableList | ConfigVariableManager | ConfigVariableSearchPath | CurveFitter | DSearchPath | Datagram | DatagramIterator | DisplayMode | DisplayRegion | DocumentSpec | DownloadDb | Event | EventParameter | Filename | FrameBufferProperties | Geom | GeomPrimitive | GeomVertexAnimationSpec | GeomVertexArrayData | GeomVertexArrayFormat | GeomVertexColumn | GeomVertexData | GeomVertexFormat | GeomVertexReader | GeomVertexRewriter | GeomVertexWriter | GlobPattern | GraphicsThreadingModel | HTTPCookie | HTTPDate | HTTPEntityTag | HashVal | InputDevice | InputDeviceSet | InternalName | InternalNameCollection | LMatrix3d | LMatrix3f | LMatrix4d | LMatrix4f | LParabolad | LParabolaf | LPlaned | LPlanef | LQuaterniond | LQuaternionf | LVecBase2d | LVecBase2f | LVecBase2i | LVecBase3d | LVecBase3f | LVecBase3i | LVecBase4d | LVecBase4f | LVecBase4i | Lens | LightLensNode | LightMutexDirect | LightNode | LightReMutexDirect | Loader | LoaderOptions | Material | MaterialCollection | MemoryUsagePointers | ModifierButtons | MouseWatcherBase | MouseWatcherParameter | MouseWatcherRegion | Multifile | MutexDirect | Namable | NetAddress | NodePath | NodePathCollection | NurbsCurveEvaluator | NurbsSurfaceEvaluator | PGFrameStyle | PGMouseWatcherParameter | PNMImageHeader | PStatCollector | PandaNode | PandaSystem | ParamValueBase | ParametricCurveCollection | PartBundle | PartSubset | PfmFile | ReMutexDirect | RenderAttrib | RenderEffect | RenderEffects | RenderState | Semaphore | SimpleAllocator | SimpleAllocatorBlock | SimpleLru | SimpleLruPage | SparseArray | SubfileInfo | TextNode | TextureCollection | TextureStage | TextureStageCollection | Thread | TransformBlend | TransformState | TypeHandle | URLSpec | UniqueIdAllocator | UpdateSeq | VertexDataPage | VertexSlider | VertexTransform | VirtualFile | VirtualFileMount | WeakNodePath | WindowHandle | WindowProperties | pixel): string {.inline.} =
  var str : StringStream
  this.output(str)
  str.data

proc toBool*(this: AdaptiveLruPage | AlphaTestAttrib | AmbientLight | AnalogNode | AnimBundle | AnimBundleNode | AnimChannelBase | AnimChannelMatrixDynamic | AnimChannelMatrixXfmTable | AnimChannelScalarDynamic | AnimChannelScalarTable | AnimControl | AnimGroup | AnimInterface | AnimPreloadTable | AnimateVerticesRequest | AntialiasAttrib | AsyncFuture | AsyncTask | AsyncTaskChain | AsyncTaskManager | AsyncTaskPause | AsyncTaskSequence | AudioLoadRequest | AudioManager | AudioSound | AudioVolumeAttrib | AuxBitplaneAttrib | AuxSceneData | BamCacheRecord | BillboardEffect | BindAnimRequest | BoundingBox | BoundingHexahedron | BoundingLine | BoundingPlane | BoundingSphere | BoundingVolume | Buffer | BufferContext | ButtonEventList | ButtonMap | ButtonNode | ButtonThrower | CachedTypedWritableReferenceCount | CallbackData | CallbackGraphicsWindow | CallbackNode | CallbackObject | Camera | CardMaker | Character | CharacterJoint | CharacterJointBundle | CharacterJointEffect | CharacterSlider | CharacterVertexSlider | ClientBase | ClipPlaneAttrib | ClockObject | CollisionBox | CollisionCapsule | CollisionEntry | CollisionFloorMesh | CollisionHandler | CollisionHandlerEvent | CollisionHandlerFloor | CollisionHandlerFluidPusher | CollisionHandlerGravity | CollisionHandlerHighestEvent | CollisionHandlerPhysical | CollisionHandlerPusher | CollisionHandlerQueue | CollisionInvSphere | CollisionLine | CollisionNode | CollisionParabola | CollisionPlane | CollisionPolygon | CollisionRay | CollisionSegment | CollisionSolid | CollisionSphere | CollisionVisualizer | ColorAttrib | ColorBlendAttrib | ColorScaleAttrib | ColorWriteAttrib | CompassEffect | ComputeNode | Connection | ConnectionListener | ConnectionManager | ConnectionReader | CopyOnWriteObject | CubicCurveseg | CullBinAttrib | CullFaceAttrib | CullResult | CullTraverser | DataNode | DatagramGenerator | DatagramGeneratorNet | DatagramSink | DecalEffect | DepthOffsetAttrib | DepthTestAttrib | DepthWriteAttrib | DialNode | DirectionalLight | DisplayRegion | DrawableRegion | DriveInterface | DynamicTextFont | DynamicTextGlyph | DynamicTextPage | Event | EventQueue | ExternalThread | FadeLODNode | FileReference | FilterProperties | FiniteBoundingVolume | FisheyeMaker | FlacAudio | FlacAudioCursor | Fog | FogAttrib | FrameRateMeter | GeoMipTerrain | Geom | GeomLines | GeomLinesAdjacency | GeomLinestrips | GeomLinestripsAdjacency | GeomNode | GeomPatches | GeomPoints | GeomPrimitive | GeomTextGlyph | GeomTriangles | GeomTrianglesAdjacency | GeomTrifans | GeomTristrips | GeomTristripsAdjacency | GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexArrayFormat | GeomVertexData | GeomVertexFormat | GeometricBoundingVolume | GraphicsBuffer | GraphicsDevice | GraphicsEngine | GraphicsOutput | GraphicsOutputBase | GraphicsPipe | GraphicsPipeSelection | GraphicsStateGuardian | GraphicsStateGuardianBase | GraphicsWindow | GraphicsWindowInputDevice | HTTPChannel | HTTPClient | HermiteCurve | ISocketStream | InkblotVideo | InkblotVideoCursor | InputDevice | InputDeviceNode | InternalName | IntersectionBoundingVolume | JointVertexTransform | LODNode | Lens | LensNode | Light | LightAttrib | LightLensNode | LightNode | LightRampAttrib | LinuxJoystickDevice | Loader | LogicOpAttrib | MainThread | Material | MaterialAttrib | MatrixLens | MicrophoneAudio | ModelFlattenRequest | ModelLoadRequest | ModelNode | ModelRoot | ModelSaveRequest | MouseAndKeyboard | MouseInterfaceNode | MouseRecorder | MouseSubregion | MouseWatcher | MouseWatcherBase | MouseWatcherGroup | MouseWatcherRegion | MovieAudio | MovieAudioCursor | MovieTexture | MovieVideo | MovieVideoCursor | MovingPartBase | MovingPartMatrix | MovingPartScalar | Multifile | Namable | NativeWindowHandle | NodeCachedReferenceCount | NodeReferenceCount | NodeVertexTransform | NurbsCurve | NurbsCurveEvaluator | NurbsCurveInterface | NurbsCurveResult | NurbsSurfaceEvaluator | NurbsSurfaceResult | OccluderEffect | OccluderNode | OmniBoundingVolume | OpusAudio | OpusAudioCursor | OrthographicLens | PGButton | PGEntry | PGItem | PGMouseWatcherBackground | PGMouseWatcherParameter | PGScrollFrame | PGSliderBar | PGTop | PGVirtualFrame | PGWaitBar | PNMBrush | PStatCollectorForward | PStatCollectorForwardBase | PandaNode | PandaSystem | ParamTextureImage | ParamTextureSampler | ParamTypedRefCount | ParamValueBase | ParametricCurve | ParametricCurveCollection | ParasiteBuffer | PartBundle | PartBundleHandle | PartBundleNode | PartGroup | Patcher | PerspectiveLens | PiecewiseCurve | PipeOcclusionCullTraverser | PlaneNode | PointLight | PointerEventList | PolylightEffect | PolylightNode | PortalNode | PreparedGraphicsObjects | QueuedConnectionListener | QueuedConnectionManager | QueuedConnectionReader | RecentConnectionReader | RecorderBase | RecorderController | RectangleLight | ReferenceCount | RenderAttrib | RenderEffect | RenderEffects | RenderModeAttrib | RenderState | RescaleNormalAttrib | RigidBodyCombiner | RopeNode | SSReader | SSWriter | SavedContext | SceneGraphAnalyzerMeter | SceneSetup | ScissorAttrib | ScissorEffect | SelectiveChildNode | SequenceNode | ShadeModelAttrib | Shader | ShaderAttrib | ShaderBuffer | ShaderGenerator | ShaderTerrainMesh | SheetNode | ShowBoundsEffect | SimpleAllocator | SimpleAllocatorBlock | SimpleLruPage | SliderTable | SocketStreamRecorder | Socket_Address | SphereLight | Spotlight | StaticTextFont | StencilAttrib | StereoDisplayRegion | SwitchNode | TemporaryFile | TexGenAttrib | TexMatrixAttrib | TexProjectorEffect | TextEncoder | TextFont | TextGlyph | TextNode | TextProperties | Texture | TextureAttrib | TexturePeeker | TextureReloadRequest | TextureStage | Thread | Trackball | TrackerNode | Transform2SG | TransformBlendTable | TransformState | TransformTable | TransparencyAttrib | TypedObject | TypedReferenceCount | TypedWritable | TypedWritableReferenceCount | UnionBoundingVolume | UserDataAudio | UserDataAudioCursor | UserVertexSlider | UserVertexTransform | UvScrollNode | VertexDataBlock | VertexDataSaveFile | VertexSlider | VertexTransform | VideoTexture | VirtualFile | VirtualFileComposite | VirtualFileHTTP | VirtualFileList | VirtualFileMount | VirtualFileMountHTTP | VirtualFileMountMultifile | VirtualFileMountRamdisk | VirtualFileMountSystem | VirtualFileSimple | VirtualMouse | VorbisAudio | VorbisAudioCursor | WavAudio | WavAudioCursor | WindowHandle): bool {.importcpp: "(# != nullptr)".}
func `==`*(x: AdaptiveLruPage | AlphaTestAttrib | AmbientLight | AnalogNode | AnimBundle | AnimBundleNode | AnimChannelBase | AnimChannelMatrixDynamic | AnimChannelMatrixXfmTable | AnimChannelScalarDynamic | AnimChannelScalarTable | AnimControl | AnimGroup | AnimInterface | AnimPreloadTable | AnimateVerticesRequest | AntialiasAttrib | AsyncFuture | AsyncTask | AsyncTaskChain | AsyncTaskManager | AsyncTaskPause | AsyncTaskSequence | AudioLoadRequest | AudioManager | AudioSound | AudioVolumeAttrib | AuxBitplaneAttrib | AuxSceneData | BamCacheRecord | BillboardEffect | BindAnimRequest | BoundingBox | BoundingHexahedron | BoundingLine | BoundingPlane | BoundingSphere | BoundingVolume | Buffer | BufferContext | ButtonEventList | ButtonMap | ButtonNode | ButtonThrower | CachedTypedWritableReferenceCount | CallbackData | CallbackGraphicsWindow | CallbackNode | CallbackObject | Camera | CardMaker | Character | CharacterJoint | CharacterJointBundle | CharacterJointEffect | CharacterSlider | CharacterVertexSlider | ClientBase | ClipPlaneAttrib | ClockObject | CollisionBox | CollisionCapsule | CollisionEntry | CollisionFloorMesh | CollisionHandler | CollisionHandlerEvent | CollisionHandlerFloor | CollisionHandlerFluidPusher | CollisionHandlerGravity | CollisionHandlerHighestEvent | CollisionHandlerPhysical | CollisionHandlerPusher | CollisionHandlerQueue | CollisionInvSphere | CollisionLine | CollisionNode | CollisionParabola | CollisionPlane | CollisionPolygon | CollisionRay | CollisionSegment | CollisionSolid | CollisionSphere | CollisionVisualizer | ColorAttrib | ColorBlendAttrib | ColorScaleAttrib | ColorWriteAttrib | CompassEffect | ComputeNode | Connection | ConnectionListener | ConnectionManager | ConnectionReader | CopyOnWriteObject | CubicCurveseg | CullBinAttrib | CullFaceAttrib | CullResult | CullTraverser | DataNode | DatagramGenerator | DatagramGeneratorNet | DatagramSink | DecalEffect | DepthOffsetAttrib | DepthTestAttrib | DepthWriteAttrib | DialNode | DirectionalLight | DisplayRegion | DrawableRegion | DriveInterface | DynamicTextFont | DynamicTextGlyph | DynamicTextPage | Event | EventQueue | ExternalThread | FadeLODNode | FileReference | FilterProperties | FiniteBoundingVolume | FisheyeMaker | FlacAudio | FlacAudioCursor | Fog | FogAttrib | FrameRateMeter | GeoMipTerrain | Geom | GeomLines | GeomLinesAdjacency | GeomLinestrips | GeomLinestripsAdjacency | GeomNode | GeomPatches | GeomPoints | GeomPrimitive | GeomTextGlyph | GeomTriangles | GeomTrianglesAdjacency | GeomTrifans | GeomTristrips | GeomTristripsAdjacency | GeomVertexArrayData | GeomVertexArrayDataHandle | GeomVertexArrayFormat | GeomVertexData | GeomVertexFormat | GeometricBoundingVolume | GraphicsBuffer | GraphicsDevice | GraphicsEngine | GraphicsOutput | GraphicsOutputBase | GraphicsPipe | GraphicsPipeSelection | GraphicsStateGuardian | GraphicsStateGuardianBase | GraphicsWindow | GraphicsWindowInputDevice | HTTPChannel | HTTPClient | HermiteCurve | ISocketStream | InkblotVideo | InkblotVideoCursor | InputDevice | InputDeviceNode | InternalName | IntersectionBoundingVolume | JointVertexTransform | LODNode | Lens | LensNode | Light | LightAttrib | LightLensNode | LightNode | LightRampAttrib | LinuxJoystickDevice | Loader | LogicOpAttrib | MainThread | Material | MaterialAttrib | MatrixLens | MicrophoneAudio | ModelFlattenRequest | ModelLoadRequest | ModelNode | ModelRoot | ModelSaveRequest | MouseAndKeyboard | MouseInterfaceNode | MouseRecorder | MouseSubregion | MouseWatcher | MouseWatcherBase | MouseWatcherGroup | MouseWatcherRegion | MovieAudio | MovieAudioCursor | MovieTexture | MovieVideo | MovieVideoCursor | MovingPartBase | MovingPartMatrix | MovingPartScalar | Multifile | Namable | NativeWindowHandle | NodeCachedReferenceCount | NodeReferenceCount | NodeVertexTransform | NurbsCurve | NurbsCurveEvaluator | NurbsCurveInterface | NurbsCurveResult | NurbsSurfaceEvaluator | NurbsSurfaceResult | OccluderEffect | OccluderNode | OmniBoundingVolume | OpusAudio | OpusAudioCursor | OrthographicLens | PGButton | PGEntry | PGItem | PGMouseWatcherBackground | PGMouseWatcherParameter | PGScrollFrame | PGSliderBar | PGTop | PGVirtualFrame | PGWaitBar | PNMBrush | PStatCollectorForward | PStatCollectorForwardBase | PandaNode | PandaSystem | ParamTextureImage | ParamTextureSampler | ParamTypedRefCount | ParamValueBase | ParametricCurve | ParametricCurveCollection | ParasiteBuffer | PartBundle | PartBundleHandle | PartBundleNode | PartGroup | Patcher | PerspectiveLens | PiecewiseCurve | PipeOcclusionCullTraverser | PlaneNode | PointLight | PointerEventList | PolylightEffect | PolylightNode | PortalNode | PreparedGraphicsObjects | QueuedConnectionListener | QueuedConnectionManager | QueuedConnectionReader | RecentConnectionReader | RecorderBase | RecorderController | RectangleLight | ReferenceCount | RenderAttrib | RenderEffect | RenderEffects | RenderModeAttrib | RenderState | RescaleNormalAttrib | RigidBodyCombiner | RopeNode | SSReader | SSWriter | SavedContext | SceneGraphAnalyzerMeter | SceneSetup | ScissorAttrib | ScissorEffect | SelectiveChildNode | SequenceNode | ShadeModelAttrib | Shader | ShaderAttrib | ShaderBuffer | ShaderGenerator | ShaderTerrainMesh | SheetNode | ShowBoundsEffect | SimpleAllocator | SimpleAllocatorBlock | SimpleLruPage | SliderTable | SocketStreamRecorder | Socket_Address | SphereLight | Spotlight | StaticTextFont | StencilAttrib | StereoDisplayRegion | SwitchNode | TemporaryFile | TexGenAttrib | TexMatrixAttrib | TexProjectorEffect | TextEncoder | TextFont | TextGlyph | TextNode | TextProperties | Texture | TextureAttrib | TexturePeeker | TextureReloadRequest | TextureStage | Thread | Trackball | TrackerNode | Transform2SG | TransformBlendTable | TransformState | TransformTable | TransparencyAttrib | TypedObject | TypedReferenceCount | TypedWritable | TypedWritableReferenceCount | UnionBoundingVolume | UserDataAudio | UserDataAudioCursor | UserVertexSlider | UserVertexTransform | UvScrollNode | VertexDataBlock | VertexDataSaveFile | VertexSlider | VertexTransform | VideoTexture | VirtualFile | VirtualFileComposite | VirtualFileHTTP | VirtualFileList | VirtualFileMount | VirtualFileMountHTTP | VirtualFileMountMultifile | VirtualFileMountRamdisk | VirtualFileMountSystem | VirtualFileSimple | VirtualMouse | VorbisAudio | VorbisAudioCursor | WavAudio | WavAudioCursor | WindowHandle, y: type(nil)): bool {.importcpp: "(# == nullptr)".}

proc contains*(this: VirtualFileSystem_mounts, value: VirtualFileMount): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: Camera_displayRegions | GraphicsOutput_activeDisplayRegions | GraphicsOutput_displayRegions, value: DisplayRegion): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: NodePath_nodes, value: PandaNode): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: TextureAttrib_offStages | TextureAttrib_onStages, value: TextureStage): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: MicrophoneAudio_options, value: MicrophoneAudio): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: AnimGroup_children, value: AnimGroup): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: PartGroup_children, value: PartGroup): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: PartBundle_nodes, value: PartBundleNode): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: PartBundleNode_bundles, value: PartBundle): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: PartBundleNode_bundleHandles, value: PartBundleHandle): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: CollisionNode_solids, value: CollisionSolid): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: CollisionHandlerQueue_entries, value: CollisionEntry): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: GraphicsEngine_windows, value: GraphicsOutput): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: GeomVertexFormat_arrays, value: GeomVertexArrayFormat): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: GeomVertexFormat_points | GeomVertexFormat_vectors, value: InternalName): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: TransformBlend_transforms | TransformTable_transforms, value: VertexTransform): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: GeomVertexData_arrays, value: GeomVertexArrayData): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: Geom_primitives, value: GeomPrimitive): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: IntersectionBoundingVolume_components | UnionBoundingVolume_components, value: GeometricBoundingVolume): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: ParametricCurveCollection_curves | ParametricCurveCollection_timewarpCurves, value: ParametricCurve): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: DynamicTextFont_pages, value: DynamicTextPage): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc contains*(this: MouseWatcherBase_regions, value: MouseWatcherRegion): bool =
  for i in 0 ..< len(this):
    if value == this[i]:
      return true
  return false

proc `@`*(this: GraphicsPipeSelection_pipeTypes | TypeHandle_childClasses | TypeHandle_parentClasses | TypeRegistry_rootClasses | TypeRegistry_typehandles): seq[TypeHandle] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: CollisionHandlerEvent_againPatterns | CollisionHandlerEvent_inPatterns | CollisionHandlerEvent_outPatterns | ConfigPageManager_prcEncryptedPatterns | ConfigPageManager_prcExecutablePatterns | ConfigPageManager_prcPatterns | ExecutionEnvironment_args | PNMFileType_extensions | PandaSystem_systems): seq[string] {.inline.} =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ConfigVariableSearchPath_directories | DSearchPath_directories): seq[Filename] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ConfigPage_declarations | ConfigVariableCore_declarations | ConfigVariableCore_references | ConfigVariableCore_trustedReferences | ConfigVariableCore_uniqueReferences): seq[ConfigDeclaration] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ConfigPageManager_explicitPages | ConfigPageManager_implicitPages): seq[ConfigPage] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ConfigVariableManager_variables): seq[ConfigVariableCore] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: NotifyCategory_children): seq[NotifyCategory] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: VirtualFileSystem_mounts): seq[VirtualFileMount] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ComputeNode_dispatches): seq[LVecBase3i] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: Camera_displayRegions | GraphicsOutput_activeDisplayRegions | GraphicsOutput_displayRegions): seq[DisplayRegion] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: LODNode_ins | LODNode_outs | NurbsSurfaceEvaluator_uKnots | NurbsSurfaceEvaluator_vKnots): seq[float] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: NodePath_nodes): seq[PandaNode] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: CollisionTraverser_colliders | LightAttrib_offLights | LightAttrib_onLights | NodePath_ancestors): seq[NodePath] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: LoaderFileTypeRegistry_types): seq[LoaderFileType] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: TextureAttrib_offStages | TextureAttrib_onStages): seq[TextureStage] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: BoundingBox_points | BoundingHexahedron_points | CollisionFloorMesh_vertices | CollisionPolygon_points | OccluderNode_vertices | PortalNode_vertices): seq[LPoint3] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: MicrophoneAudio_options): seq[MicrophoneAudio] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: AnimGroup_children): seq[AnimGroup] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PartGroup_children): seq[PartGroup] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PartBundle_nodes): seq[PartBundleNode] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PartBundleNode_bundles): seq[PartBundle] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PartBundleNode_bundleHandles): seq[PartBundleHandle] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PStatClient_collectors): seq[PStatCollector] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PStatClient_threads): seq[PStatThread] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: CollisionNode_solids): seq[CollisionSolid] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: CollisionFloorMesh_triangles): seq[LPoint3i] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: CollisionHandlerQueue_entries): seq[CollisionEntry] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: GraphicsEngine_windows): seq[GraphicsOutput] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ButtonEventList_events): seq[ButtonEvent] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ButtonThrower_parameters | Event_parameters): seq[EventParameter] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: GeomVertexArrayFormat_columns): seq[GeomVertexColumn] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: GeomVertexFormat_arrays): seq[GeomVertexArrayFormat] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: GeomVertexFormat_points | GeomVertexFormat_vectors): seq[InternalName] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: TransformBlend_transforms | TransformTable_transforms): seq[VertexTransform] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: TransformBlendTable_blends): seq[TransformBlend] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: GeomVertexData_arrays): seq[GeomVertexArrayData] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: Geom_primitives): seq[GeomPrimitive] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: LMatrix3f_cols | LMatrix3f_rows): seq[LVecBase3f] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: LMatrix4f_cols | LMatrix4f_rows): seq[LVecBase4f] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: LMatrix3d_cols | LMatrix3d_rows): seq[LVecBase3d] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: LMatrix4d_cols | LMatrix4d_rows): seq[LVecBase4d] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: BoundingBox_planes | BoundingHexahedron_planes): seq[LPlane] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: IntersectionBoundingVolume_components | UnionBoundingVolume_components): seq[GeometricBoundingVolume] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: Triangulator_vertices): seq[LPoint2d] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: Triangulator3_vertices): seq[LPoint3d] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ParametricCurveCollection_curves | ParametricCurveCollection_timewarpCurves): seq[ParametricCurve] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: PNMFileTypeRegistry_types): seq[PNMFileType] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: DynamicTextFont_pages): seq[DynamicTextPage] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: MouseWatcherBase_regions): seq[MouseWatcherRegion] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

proc `@`*(this: ModifierButtons_buttons): seq[ButtonHandle] =
  let count = len(this)
  result.setLen(count)
  for i in 0 ..< count:
    result[i] = this[i]

iterator items*(this: ConfigVariableBool): bool =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigVariableDouble | LVecBase2d | LVecBase3d | LVecBase4d | UnalignedLVecBase4d): float64 =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigVariableInt | LVecBase2i | LVecBase3i | LVecBase4i | UnalignedLVecBase4i | pixel): int =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigVariableInt64): clonglong =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: CollisionHandlerEvent_againPatterns | CollisionHandlerEvent_inPatterns | CollisionHandlerEvent_outPatterns | ConfigPageManager_prcEncryptedPatterns | ConfigPageManager_prcExecutablePatterns | ConfigPageManager_prcPatterns | ConfigVariableList | ExecutionEnvironment_args | PNMFileType_extensions | PandaSystem_systems): string =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: URLSpec): char =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: VirtualFileList): VirtualFile =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: RenderEffects): RenderEffect =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: GeomVertexFormat_points | GeomVertexFormat_vectors | InternalNameCollection): InternalName =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: MaterialCollection): Material =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: TextureAttrib_offStages | TextureAttrib_onStages | TextureStageCollection): TextureStage =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: CollisionTraverser_colliders | LightAttrib_offLights | LightAttrib_onLights | NodePathCollection | NodePath_ancestors): NodePath =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: InputDeviceSet): InputDevice =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: AsyncTaskCollection): AsyncTask =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: TextureCollection): Texture =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LVecBase2f | LVecBase3f | LVecBase4f | UnalignedLVecBase4f): float32 =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: GraphicsPipeSelection_pipeTypes | TypeHandle_childClasses | TypeHandle_parentClasses | TypeRegistry_rootClasses | TypeRegistry_typehandles): TypeHandle =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigVariableSearchPath_directories | DSearchPath_directories): Filename =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigPage_declarations | ConfigVariableCore_declarations | ConfigVariableCore_references | ConfigVariableCore_trustedReferences | ConfigVariableCore_uniqueReferences): ConfigDeclaration =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigPageManager_explicitPages | ConfigPageManager_implicitPages): ConfigPage =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ConfigVariableManager_variables): ConfigVariableCore =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: NotifyCategory_children): NotifyCategory =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: VirtualFileSystem_mounts): VirtualFileMount =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ComputeNode_dispatches): LVecBase3i =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: Camera_displayRegions | GraphicsOutput_activeDisplayRegions | GraphicsOutput_displayRegions): DisplayRegion =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LODNode_ins | LODNode_outs | NurbsSurfaceEvaluator_uKnots | NurbsSurfaceEvaluator_vKnots): float =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: NodePath_nodes): PandaNode =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LoaderFileTypeRegistry_types): LoaderFileType =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: BoundingBox_points | BoundingHexahedron_points | CollisionFloorMesh_vertices | CollisionPolygon_points | OccluderNode_vertices | PortalNode_vertices): LPoint3 =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: MicrophoneAudio_options): MicrophoneAudio =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: AnimGroup_children): AnimGroup =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PartGroup_children): PartGroup =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PartBundle_nodes): PartBundleNode =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PartBundleNode_bundles): PartBundle =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PartBundleNode_bundleHandles): PartBundleHandle =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PStatClient_collectors): PStatCollector =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PStatClient_threads): PStatThread =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: CollisionNode_solids): CollisionSolid =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: CollisionFloorMesh_triangles): LPoint3i =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: CollisionHandlerQueue_entries): CollisionEntry =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: GraphicsEngine_windows): GraphicsOutput =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ButtonEventList_events): ButtonEvent =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ButtonThrower_parameters | Event_parameters): EventParameter =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: GeomVertexArrayFormat_columns): GeomVertexColumn =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: GeomVertexFormat_arrays): GeomVertexArrayFormat =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: TransformBlend_transforms | TransformTable_transforms): VertexTransform =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: TransformBlendTable_blends): TransformBlend =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: GeomVertexData_arrays): GeomVertexArrayData =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: Geom_primitives): GeomPrimitive =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LMatrix3f_cols | LMatrix3f_rows): LVecBase3f =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LMatrix4f_cols | LMatrix4f_rows): LVecBase4f =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LMatrix3d_cols | LMatrix3d_rows): LVecBase3d =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: LMatrix4d_cols | LMatrix4d_rows): LVecBase4d =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: BoundingBox_planes | BoundingHexahedron_planes): LPlane =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: IntersectionBoundingVolume_components | UnionBoundingVolume_components): GeometricBoundingVolume =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: Triangulator_vertices): LPoint2d =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: Triangulator3_vertices): LPoint3d =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ParametricCurveCollection_curves | ParametricCurveCollection_timewarpCurves): ParametricCurve =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: PNMFileTypeRegistry_types): PNMFileType =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: DynamicTextFont_pages): DynamicTextPage =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: MouseWatcherBase_regions): MouseWatcherRegion =
  for i in 0 ..< len(this):
    yield this[i]

iterator items*(this: ModifierButtons_buttons): ButtonHandle =
  for i in 0 ..< len(this):
    yield this[i]


proc initFilename*(fn: string): Filename {.importcpp: "Filename(nimStringToStdString(#))", header: stringConversionCode.}

proc toInternalName*(name: string): InternalName {.importcpp: "InternalName::make(nimStringToStdString(#))", header: "internalName.h".}

proc setText*(this: TextEncoder | TextNode, text: string) {.importcpp: "#->set_text(nimStringToStdString(#))", header: stringConversionCode.}
func text*(this: TextEncoder | TextNode) : string {.importcpp: "nimStringFromStdString(#->get_text())", header: stringConversionCode.}
func `text=`*(this: TextEncoder | TextNode, text: string) {.importcpp: "#->set_text(nimStringToStdString(#))", header: stringConversionCode.}

func time*(this: AsyncTask): float {.importcpp: "#->get_elapsed_time()".}

func newNimCallbackObject(procp: pointer, envp: pointer): CallbackObject {.importcpp: "new NimCallbackObject((NimCallbackObject::Function *)#, #)", header: nimCallbackObjectCode.}

proc newCallbackObject*(function: proc (cbdata: CallbackData)): CallbackObject =
  var procp = rawProc(function);
  var envp = rawEnv(function);
  if envp != nil:
    GC_ref(cast[RootRef](envp))

  newNimCallbackObject(procp, envp)

func initLVecBase2f*(): LVecBase2f = LVecBase2f(x: 0, y: 0)
func initLVecBase2f*(copy: LVecBase2f): LVecBase2f = LVecBase2f(x: copy.x, y: copy.y)
func initLVecBase2f*(fillValue: float32): LVecBase2f = LVecBase2f(x: fillValue, y: fillValue)
func initLVecBase2f*(x: float32, y: float32): LVecBase2f = LVecBase2f(x: x, y: y)
proc initLVecBase2f*[T0, T1: SomeNumber](args: tuple[x: T0, y: T1]): LVecBase2f {.inline, noSideEffect.} = LVecBase2f(x: (float32)args.x, y: (float32)args.y)

func initLVecBase2d*(): LVecBase2d = LVecBase2d(x: 0, y: 0)
func initLVecBase2d*(copy: LVecBase2d): LVecBase2d = LVecBase2d(x: copy.x, y: copy.y)
func initLVecBase2d*(fillValue: float64): LVecBase2d = LVecBase2d(x: fillValue, y: fillValue)
func initLVecBase2d*(x: float64, y: float64): LVecBase2d = LVecBase2d(x: x, y: y)
proc initLVecBase2d*[T0, T1: SomeNumber](args: tuple[x: T0, y: T1]): LVecBase2d {.inline, noSideEffect.} = LVecBase2d(x: (float64)args.x, y: (float64)args.y)

func initLVecBase2i*(): LVecBase2i = LVecBase2i(x: 0, y: 0)
func initLVecBase2i*(copy: LVecBase2i): LVecBase2i = LVecBase2i(x: copy.x, y: copy.y)
func initLVecBase2i*(fillValue: int32): LVecBase2i = LVecBase2i(x: fillValue, y: fillValue)
func initLVecBase2i*(x: int32, y: int32): LVecBase2i = LVecBase2i(x: x, y: y)
proc initLVecBase2i*[T0, T1: int | int32](args: tuple[x: T0, y: T1]): LVecBase2i {.inline, noSideEffect.} = LVecBase2i(x: (int32)args.x, y: (int32)args.y)

func initLVecBase3f*(): LVecBase3f = LVecBase3f(x: 0, y: 0, z: 0)
func initLVecBase3f*(copy: LVecBase2f, z: float32): LVecBase3f = LVecBase3f(x: copy.x, y: copy.y, z: z)
func initLVecBase3f*(copy: LVecBase3f): LVecBase3f = LVecBase3f(x: copy.x, y: copy.y, z: copy.z)
func initLVecBase3f*(fillValue: float32): LVecBase3f = LVecBase3f(x: fillValue, y: fillValue, z: fillValue)
func initLVecBase3f*(x: float32, y: float32, z: float32): LVecBase3f = LVecBase3f(x: x, y: y, z: z)
proc initLVecBase3f*[T0, T1, T2: SomeNumber](args: tuple[x: T0, y: T1, z: T2]): LVecBase3f {.inline, noSideEffect.} = LVecBase3f(x: (float32)args.x, y: (float32)args.y, z: (float32)args.z)

func initLVecBase3d*(): LVecBase3d = LVecBase3d(x: 0, y: 0, z: 0)
func initLVecBase3d*(copy: LVecBase2d, z: float64): LVecBase3d = LVecBase3d(x: copy.x, y: copy.y, z: z)
func initLVecBase3d*(copy: LVecBase3d): LVecBase3d = LVecBase3d(x: copy.x, y: copy.y, z: copy.z)
func initLVecBase3d*(fillValue: float64): LVecBase3d = LVecBase3d(x: fillValue, y: fillValue, z: fillValue)
func initLVecBase3d*(x: float64, y: float64, z: float64): LVecBase3d = LVecBase3d(x: x, y: y, z: z)
proc initLVecBase3d*[T0, T1, T2: SomeNumber](args: tuple[x: T0, y: T1, z: T2]): LVecBase3d {.inline, noSideEffect.} = LVecBase3d(x: (float64)args.x, y: (float64)args.y, z: (float64)args.z)

func initLVecBase3i*(): LVecBase3i = LVecBase3i(x: 0, y: 0, z: 0)
func initLVecBase3i*(copy: LVecBase2i, z: int32): LVecBase3i = LVecBase3i(x: copy.x, y: copy.y, z: z)
func initLVecBase3i*(copy: LVecBase3i): LVecBase3i = LVecBase3i(x: copy.x, y: copy.y, z: copy.z)
func initLVecBase3i*(fillValue: int32): LVecBase3i = LVecBase3i(x: fillValue, y: fillValue, z: fillValue)
func initLVecBase3i*(x: int32, y: int32, z: int32): LVecBase3i = LVecBase3i(x: x, y: y, z: z)
proc initLVecBase3i*[T0, T1, T2: int | int32](args: tuple[x: T0, y: T1, z: T2]): LVecBase3i {.inline, noSideEffect.} = LVecBase3i(x: (int32)args.x, y: (int32)args.y, z: (int32)args.z)

func initLVecBase4f*(): LVecBase4f = LVecBase4f(x: 0, y: 0, z: 0, w: 0)
func initLVecBase4f*(copy: LVecBase3f, w: float32): LVecBase4f = LVecBase4f(x: copy.x, y: copy.y, z: copy.z, w: w)
func initLVecBase4f*(copy: LVecBase4f): LVecBase4f = LVecBase4f(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
func initLVecBase4f*(fillValue: float32): LVecBase4f = LVecBase4f(x: fillValue, y: fillValue, z: fillValue, w: fillValue)
func initLVecBase4f*(x: float32, y: float32, z: float32, w: float32): LVecBase4f = LVecBase4f(x: x, y: y, z: z, w: w)
proc initLVecBase4f*[T0, T1, T2, T3: SomeNumber](args: tuple[x: T0, y: T1, z: T2, w: T3]): LVecBase4f {.inline, noSideEffect.} = LVecBase4f(x: (float32)args.x, y: (float32)args.y, z: (float32)args.z, w: (float32)args.w)
proc initLVecBase4f*(copy: UnalignedLVecBase4f): LVecBase4f = LVecBase4f(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
proc initLVecBase4f*(point: LPoint3f): LVecBase4f = LVecBase4f(x: point.x, y: point.y, z: point.z, w: 1)
proc initLVecBase4f*(vector: LVector3f): LVecBase4f = LVecBase4f(x: vector.x, y: vector.y, z: vector.z, w: 0)

func initLVecBase4d*(): LVecBase4d = LVecBase4d(x: 0, y: 0, z: 0, w: 0)
func initLVecBase4d*(copy: LVecBase3d, w: float64): LVecBase4d = LVecBase4d(x: copy.x, y: copy.y, z: copy.z, w: w)
func initLVecBase4d*(copy: LVecBase4d): LVecBase4d = LVecBase4d(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
func initLVecBase4d*(fillValue: float64): LVecBase4d = LVecBase4d(x: fillValue, y: fillValue, z: fillValue, w: fillValue)
func initLVecBase4d*(x: float64, y: float64, z: float64, w: float64): LVecBase4d = LVecBase4d(x: x, y: y, z: z, w: w)
proc initLVecBase4d*[T0, T1, T2, T3: SomeNumber](args: tuple[x: T0, y: T1, z: T2, w: T3]): LVecBase4d {.inline, noSideEffect.} = LVecBase4d(x: (float64)args.x, y: (float64)args.y, z: (float64)args.z, w: (float64)args.w)
proc initLVecBase4d*(copy: UnalignedLVecBase4d): LVecBase4d = LVecBase4d(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
proc initLVecBase4d*(point: LPoint3d): LVecBase4d = LVecBase4d(x: point.x, y: point.y, z: point.z, w: 1)
proc initLVecBase4d*(vector: LVector3d): LVecBase4d = LVecBase4d(x: vector.x, y: vector.y, z: vector.z, w: 0)

func initLVecBase4i*(): LVecBase4i = LVecBase4i(x: 0, y: 0, z: 0, w: 0)
func initLVecBase4i*(copy: LVecBase3i, w: int32): LVecBase4i = LVecBase4i(x: copy.x, y: copy.y, z: copy.z, w: w)
func initLVecBase4i*(copy: LVecBase4i): LVecBase4i = LVecBase4i(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
func initLVecBase4i*(fillValue: int32): LVecBase4i = LVecBase4i(x: fillValue, y: fillValue, z: fillValue, w: fillValue)
func initLVecBase4i*(x: int32, y: int32, z: int32, w: int32): LVecBase4i = LVecBase4i(x: x, y: y, z: z, w: w)
proc initLVecBase4i*[T0, T1, T2, T3: int | int32](args: tuple[x: T0, y: T1, z: T2, w: T3]): LVecBase4i {.inline, noSideEffect.} = LVecBase4i(x: (int32)args.x, y: (int32)args.y, z: (int32)args.z, w: (int32)args.w)
proc initLVecBase4i*(copy: UnalignedLVecBase4i): LVecBase4i = LVecBase4i(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
proc initLVecBase4i*(point: LPoint3i): LVecBase4i = LVecBase4i(x: point.x, y: point.y, z: point.z, w: 1)
proc initLVecBase4i*(vector: LVector3i): LVecBase4i = LVecBase4i(x: vector.x, y: vector.y, z: vector.z, w: 0)

func initUnalignedLVecBase4f*(): UnalignedLVecBase4f = UnalignedLVecBase4f(x: 0, y: 0, z: 0, w: 0)
func initUnalignedLVecBase4f*(copy: UnalignedLVecBase4f): UnalignedLVecBase4f = UnalignedLVecBase4f(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
func initUnalignedLVecBase4f*(fillValue: float32): UnalignedLVecBase4f = UnalignedLVecBase4f(x: fillValue, y: fillValue, z: fillValue, w: fillValue)
func initUnalignedLVecBase4f*(x: float32, y: float32, z: float32, w: float32): UnalignedLVecBase4f = UnalignedLVecBase4f(x: x, y: y, z: z, w: w)
proc initUnalignedLVecBase4f*[T0, T1, T2, T3: SomeNumber](args: tuple[x: T0, y: T1, z: T2, w: T3]): UnalignedLVecBase4f {.inline, noSideEffect.} = UnalignedLVecBase4f(x: (float32)args.x, y: (float32)args.y, z: (float32)args.z, w: (float32)args.w)
proc initUnalignedLVecBase4f*(copy: LVecBase4f): UnalignedLVecBase4f = UnalignedLVecBase4f(x: copy.x, y: copy.y, z: copy.z, w: copy.w)

func initUnalignedLVecBase4d*(): UnalignedLVecBase4d = UnalignedLVecBase4d(x: 0, y: 0, z: 0, w: 0)
func initUnalignedLVecBase4d*(copy: UnalignedLVecBase4d): UnalignedLVecBase4d = UnalignedLVecBase4d(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
func initUnalignedLVecBase4d*(fillValue: float64): UnalignedLVecBase4d = UnalignedLVecBase4d(x: fillValue, y: fillValue, z: fillValue, w: fillValue)
func initUnalignedLVecBase4d*(x: float64, y: float64, z: float64, w: float64): UnalignedLVecBase4d = UnalignedLVecBase4d(x: x, y: y, z: z, w: w)
proc initUnalignedLVecBase4d*[T0, T1, T2, T3: SomeNumber](args: tuple[x: T0, y: T1, z: T2, w: T3]): UnalignedLVecBase4d {.inline, noSideEffect.} = UnalignedLVecBase4d(x: (float64)args.x, y: (float64)args.y, z: (float64)args.z, w: (float64)args.w)
proc initUnalignedLVecBase4d*(copy: LVecBase4d): UnalignedLVecBase4d = UnalignedLVecBase4d(x: copy.x, y: copy.y, z: copy.z, w: copy.w)

func initUnalignedLVecBase4i*(): UnalignedLVecBase4i = UnalignedLVecBase4i(x: 0, y: 0, z: 0, w: 0)
func initUnalignedLVecBase4i*(copy: UnalignedLVecBase4i): UnalignedLVecBase4i = UnalignedLVecBase4i(x: copy.x, y: copy.y, z: copy.z, w: copy.w)
func initUnalignedLVecBase4i*(fillValue: int32): UnalignedLVecBase4i = UnalignedLVecBase4i(x: fillValue, y: fillValue, z: fillValue, w: fillValue)
func initUnalignedLVecBase4i*(x: int32, y: int32, z: int32, w: int32): UnalignedLVecBase4i = UnalignedLVecBase4i(x: x, y: y, z: z, w: w)
proc initUnalignedLVecBase4i*[T0, T1, T2, T3: int | int32](args: tuple[x: T0, y: T1, z: T2, w: T3]): UnalignedLVecBase4i {.inline, noSideEffect.} = UnalignedLVecBase4i(x: (int32)args.x, y: (int32)args.y, z: (int32)args.z, w: (int32)args.w)
proc initUnalignedLVecBase4i*(copy: LVecBase4i): UnalignedLVecBase4i = UnalignedLVecBase4i(x: copy.x, y: copy.y, z: copy.z, w: copy.w)

func xx*(this: LVecBase2f): LVecBase2f = LVecBase2f(x: this.x, y: this.x)
func xxx*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LVecBase2f): LVecBase2f = LVecBase2f(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase2f, other: LVecBase2f) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase2f, other: LVecBase3f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase2f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyy*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LVecBase2f): LVecBase2f = LVecBase2f(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase2f, other: LVecBase2f) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase2f, other: LVecBase3f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase2f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LVecBase2f): LVecBase2f = LVecBase2f(x: this.y, y: this.y)
func yyx*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LVecBase2f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase2f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.x, y: this.x)
func xxx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase3f, other: LVecBase2f) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.z)
func `xyxz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func xyy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.z)
func `xyz=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
func xyzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.x)
func `xyzx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func xyzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.y)
func `xyzy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func xyzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.x, y: this.z)
func `xz=`*(this: var LVecBase3f, other: LVecBase2f) =
  this.x = other.x
  this.z = other.y
func xzx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.x)
func `xzx=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
func xzxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.y)
func `xzxy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func xzxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.z)
func `xzxz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func xzy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.y)
func `xzy=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
func xzyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.x)
func `xzyx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func xzyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.z)
func `xzyz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func xzz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase3f, other: LVecBase2f) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.z)
func `yxyz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func yxz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.z)
func `yxz=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
func yxzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.x)
func `yxzx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func yxzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.y)
func `yxzy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func yxzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.y, y: this.y)
func yyx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.y, y: this.z)
func `yz=`*(this: var LVecBase3f, other: LVecBase2f) =
  this.y = other.x
  this.z = other.y
func yzx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.x)
func `yzx=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
func yzxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.y)
func `yzxy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func yzxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.z)
func `yzxz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func yzy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.y)
func `yzy=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
func yzyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.x)
func `yzyx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func yzyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.z)
func `yzyz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func yzz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.z, y: this.x)
func `zx=`*(this: var LVecBase3f, other: LVecBase2f) =
  this.z = other.x
  this.x = other.y
func zxx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.y)
func `zxy=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
func zxyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.x)
func `zxyx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func zxyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.z)
func `zxyz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func zxz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.z)
func `zxz=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
func zxzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.x)
func `zxzx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func zxzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.y)
func `zxzy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func zxzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.z, y: this.y)
func `zy=`*(this: var LVecBase3f, other: LVecBase2f) =
  this.z = other.x
  this.y = other.y
func zyx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.x)
func `zyx=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
func zyxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.y)
func `zyxy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func zyxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.z)
func `zyxz=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func zyy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.z)
func `zyz=`*(this: var LVecBase3f, other: LVecBase3f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
func zyzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.x)
func `zyzx=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func zyzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.y)
func `zyzy=`*(this: var LVecBase3f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func zyzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LVecBase3f): LVecBase2f = LVecBase2f(x: this.z, y: this.z)
func zzx*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LVecBase3f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVecBase3f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.x, y: this.x)
func xxx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.z)
func `xyxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func xyxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.x, w: this.w)
func `xyxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func xyy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.z)
func `xyz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
func xyzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.x)
func `xyzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func xyzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.y)
func `xyzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func xyzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.z, w: this.w)
func `xyzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func xyw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.y, z: this.w)
func `xyw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
func xywx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.w, w: this.x)
func `xywx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func xywy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.w, w: this.y)
func `xywy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func xywz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.w, w: this.z)
func `xywz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func xyww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.x, y: this.z)
func `xz=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.x = other.x
  this.z = other.y
func xzx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.x)
func `xzx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
func xzxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.y)
func `xzxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func xzxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.z)
func `xzxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func xzxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.x, w: this.w)
func `xzxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func xzy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.y)
func `xzy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
func xzyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.x)
func `xzyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func xzyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.z)
func `xzyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func xzyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.y, w: this.w)
func `xzyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func xzz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.z, z: this.w)
func `xzw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
func xzwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.w, w: this.x)
func `xzwx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func xzwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.w, w: this.y)
func `xzwy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func xzwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.w, w: this.z)
func `xzwz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func xzww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.x, y: this.w)
func `xw=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.x = other.x
  this.w = other.y
func xwx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.w, z: this.x)
func `xwx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
func xwxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.x, w: this.y)
func `xwxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func xwxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.x, w: this.z)
func `xwxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func xwxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.x, w: this.w)
func `xwxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func xwy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.w, z: this.y)
func `xwy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
func xwyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.y, w: this.x)
func `xwyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func xwyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.y, w: this.z)
func `xwyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func xwyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.y, w: this.w)
func `xwyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func xwz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.w, z: this.z)
func `xwz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
func xwzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.z, w: this.x)
func `xwzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func xwzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.z, w: this.y)
func `xwzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func xwzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.z, w: this.w)
func `xwzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func xww*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.z)
func `yxyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func yxyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.y, w: this.w)
func `yxyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func yxz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.z)
func `yxz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
func yxzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.x)
func `yxzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func yxzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.y)
func `yxzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func yxzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.z, w: this.w)
func `yxzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func yxw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.x, z: this.w)
func `yxw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
func yxwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.w, w: this.x)
func `yxwx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func yxwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.w, w: this.y)
func `yxwy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func yxwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.w, w: this.z)
func `yxwz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func yxww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.y, y: this.y)
func yyx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.y, z: this.w)
func yywx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.y, y: this.z)
func `yz=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.y = other.x
  this.z = other.y
func yzx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.x)
func `yzx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
func yzxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.y)
func `yzxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func yzxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.z)
func `yzxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func yzxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.x, w: this.w)
func `yzxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func yzy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.y)
func `yzy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
func yzyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.x)
func `yzyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func yzyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.z)
func `yzyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func yzyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.y, w: this.w)
func `yzyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func yzz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.z, z: this.w)
func `yzw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
func yzwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.w, w: this.x)
func `yzwx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func yzwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.w, w: this.y)
func `yzwy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func yzwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.w, w: this.z)
func `yzwz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func yzww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.y, y: this.w)
func `yw=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.y = other.x
  this.w = other.y
func ywx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.w, z: this.x)
func `ywx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
func ywxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.x, w: this.y)
func `ywxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func ywxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.x, w: this.z)
func `ywxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func ywxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.x, w: this.w)
func `ywxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func ywy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.w, z: this.y)
func `ywy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
func ywyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.y, w: this.x)
func `ywyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func ywyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.y, w: this.z)
func `ywyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func ywyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.y, w: this.w)
func `ywyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func ywz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.w, z: this.z)
func `ywz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
func ywzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.z, w: this.x)
func `ywzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func ywzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.z, w: this.y)
func `ywzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func ywzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.z, w: this.w)
func `ywzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func yww*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.z, y: this.x)
func `zx=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.z = other.x
  this.x = other.y
func zxx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.y)
func `zxy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
func zxyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.x)
func `zxyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func zxyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.z)
func `zxyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func zxyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.y, w: this.w)
func `zxyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func zxz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.z)
func `zxz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
func zxzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.x)
func `zxzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func zxzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.y)
func `zxzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func zxzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.z, w: this.w)
func `zxzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func zxw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.x, z: this.w)
func `zxw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
func zxwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.w, w: this.x)
func `zxwx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func zxwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.w, w: this.y)
func `zxwy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func zxwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.w, w: this.z)
func `zxwz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func zxww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.z, y: this.y)
func `zy=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.z = other.x
  this.y = other.y
func zyx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.x)
func `zyx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
func zyxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.y)
func `zyxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func zyxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.z)
func `zyxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func zyxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.x, w: this.w)
func `zyxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func zyy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.z)
func `zyz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
func zyzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.x)
func `zyzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func zyzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.y)
func `zyzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func zyzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.z, w: this.w)
func `zyzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func zyw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.y, z: this.w)
func `zyw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
func zywx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.w, w: this.x)
func `zywx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func zywy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.w, w: this.y)
func `zywy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func zywz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.w, w: this.z)
func `zywz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func zyww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.z, y: this.z)
func zzx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.z, y: this.w)
func `zw=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.z = other.x
  this.w = other.y
func zwx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.w, z: this.x)
func `zwx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
func zwxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.x, w: this.y)
func `zwxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func zwxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.x, w: this.z)
func `zwxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func zwxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.x, w: this.w)
func `zwxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func zwy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.w, z: this.y)
func `zwy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
func zwyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.y, w: this.x)
func `zwyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func zwyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.y, w: this.z)
func `zwyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func zwyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.y, w: this.w)
func `zwyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func zwz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.w, z: this.z)
func `zwz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
func zwzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.z, w: this.x)
func `zwzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func zwzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.z, w: this.y)
func `zwzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func zwzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.z, w: this.w)
func `zwzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func zww*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.w, y: this.x)
func `wx=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.w = other.x
  this.x = other.y
func wxx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.x, z: this.y)
func `wxy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
func wxyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.y, w: this.x)
func `wxyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func wxyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.y, w: this.z)
func `wxyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func wxyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.y, w: this.w)
func `wxyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func wxz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.x, z: this.z)
func `wxz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
func wxzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.z, w: this.x)
func `wxzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func wxzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.z, w: this.y)
func `wxzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func wxzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.z, w: this.w)
func `wxzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func wxw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.x, z: this.w)
func `wxw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
func wxwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.w, w: this.x)
func `wxwx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func wxwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.w, w: this.y)
func `wxwy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func wxwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.w, w: this.z)
func `wxwz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func wxww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.w, y: this.y)
func `wy=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.w = other.x
  this.y = other.y
func wyx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.y, z: this.x)
func `wyx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
func wyxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.x, w: this.y)
func `wyxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func wyxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.x, w: this.z)
func `wyxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func wyxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.x, w: this.w)
func `wyxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func wyy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.y, z: this.z)
func `wyz=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
func wyzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.z, w: this.x)
func `wyzx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func wyzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.z, w: this.y)
func `wyzy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func wyzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.z, w: this.w)
func `wyzw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func wyw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.y, z: this.w)
func `wyw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
func wywx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.w, w: this.x)
func `wywx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func wywy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.w, w: this.y)
func `wywy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func wywz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.w, w: this.z)
func `wywz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func wyww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.w, y: this.z)
func `wz=`*(this: var LVecBase4f, other: LVecBase2f) =
  this.w = other.x
  this.z = other.y
func wzx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.z, z: this.x)
func `wzx=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
func wzxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.x, w: this.y)
func `wzxy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func wzxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.x, w: this.z)
func `wzxz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func wzxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.x, w: this.w)
func `wzxw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func wzy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.z, z: this.y)
func `wzy=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
func wzyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.y, w: this.x)
func `wzyx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func wzyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.y, w: this.z)
func `wzyz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func wzyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.y, w: this.w)
func `wzyw=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func wzz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.z, z: this.w)
func `wzw=`*(this: var LVecBase4f, other: LVecBase3f) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
func wzwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.w, w: this.x)
func `wzwx=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func wzwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.w, w: this.y)
func `wzwy=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func wzwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.w, w: this.z)
func `wzwz=`*(this: var LVecBase4f, other: LVecBase4f) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func wzww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LVecBase4f): LVecBase2f = LVecBase2f(x: this.w, y: this.w)
func wwx*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LVecBase4f): LVecBase3f = LVecBase3f(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LVecBase4f): LVecBase4f = LVecBase4f(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LVecBase2d): LVecBase2d = LVecBase2d(x: this.x, y: this.x)
func xxx*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LVecBase2d): LVecBase2d = LVecBase2d(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase2d, other: LVecBase2d) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase2d, other: LVecBase3d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase2d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyy*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LVecBase2d): LVecBase2d = LVecBase2d(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase2d, other: LVecBase2d) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase2d, other: LVecBase3d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase2d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LVecBase2d): LVecBase2d = LVecBase2d(x: this.y, y: this.y)
func yyx*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LVecBase2d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase2d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.x, y: this.x)
func xxx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase3d, other: LVecBase2d) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.z)
func `xyxz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func xyy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.z)
func `xyz=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
func xyzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.x)
func `xyzx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func xyzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.y)
func `xyzy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func xyzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.x, y: this.z)
func `xz=`*(this: var LVecBase3d, other: LVecBase2d) =
  this.x = other.x
  this.z = other.y
func xzx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.x)
func `xzx=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
func xzxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.y)
func `xzxy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func xzxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.z)
func `xzxz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func xzy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.y)
func `xzy=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
func xzyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.x)
func `xzyx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func xzyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.z)
func `xzyz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func xzz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase3d, other: LVecBase2d) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.z)
func `yxyz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func yxz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.z)
func `yxz=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
func yxzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.x)
func `yxzx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func yxzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.y)
func `yxzy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func yxzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.y, y: this.y)
func yyx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.y, y: this.z)
func `yz=`*(this: var LVecBase3d, other: LVecBase2d) =
  this.y = other.x
  this.z = other.y
func yzx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.x)
func `yzx=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
func yzxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.y)
func `yzxy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func yzxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.z)
func `yzxz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func yzy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.y)
func `yzy=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
func yzyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.x)
func `yzyx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func yzyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.z)
func `yzyz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func yzz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.z, y: this.x)
func `zx=`*(this: var LVecBase3d, other: LVecBase2d) =
  this.z = other.x
  this.x = other.y
func zxx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.y)
func `zxy=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
func zxyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.x)
func `zxyx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func zxyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.z)
func `zxyz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func zxz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.z)
func `zxz=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
func zxzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.x)
func `zxzx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func zxzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.y)
func `zxzy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func zxzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.z, y: this.y)
func `zy=`*(this: var LVecBase3d, other: LVecBase2d) =
  this.z = other.x
  this.y = other.y
func zyx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.x)
func `zyx=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
func zyxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.y)
func `zyxy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func zyxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.z)
func `zyxz=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func zyy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.z)
func `zyz=`*(this: var LVecBase3d, other: LVecBase3d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
func zyzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.x)
func `zyzx=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func zyzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.y)
func `zyzy=`*(this: var LVecBase3d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func zyzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LVecBase3d): LVecBase2d = LVecBase2d(x: this.z, y: this.z)
func zzx*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LVecBase3d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVecBase3d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.x, y: this.x)
func xxx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.z)
func `xyxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func xyxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.x, w: this.w)
func `xyxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func xyy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.z)
func `xyz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
func xyzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.x)
func `xyzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func xyzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.y)
func `xyzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func xyzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.z, w: this.w)
func `xyzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func xyw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.y, z: this.w)
func `xyw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
func xywx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.w, w: this.x)
func `xywx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func xywy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.w, w: this.y)
func `xywy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func xywz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.w, w: this.z)
func `xywz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func xyww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.x, y: this.z)
func `xz=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.x = other.x
  this.z = other.y
func xzx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.x)
func `xzx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
func xzxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.y)
func `xzxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func xzxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.z)
func `xzxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func xzxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.x, w: this.w)
func `xzxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func xzy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.y)
func `xzy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
func xzyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.x)
func `xzyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func xzyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.z)
func `xzyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func xzyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.y, w: this.w)
func `xzyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func xzz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.z, z: this.w)
func `xzw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
func xzwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.w, w: this.x)
func `xzwx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func xzwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.w, w: this.y)
func `xzwy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func xzwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.w, w: this.z)
func `xzwz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func xzww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.x, y: this.w)
func `xw=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.x = other.x
  this.w = other.y
func xwx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.w, z: this.x)
func `xwx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
func xwxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.x, w: this.y)
func `xwxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func xwxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.x, w: this.z)
func `xwxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func xwxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.x, w: this.w)
func `xwxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func xwy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.w, z: this.y)
func `xwy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
func xwyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.y, w: this.x)
func `xwyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func xwyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.y, w: this.z)
func `xwyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func xwyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.y, w: this.w)
func `xwyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func xwz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.w, z: this.z)
func `xwz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
func xwzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.z, w: this.x)
func `xwzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func xwzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.z, w: this.y)
func `xwzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func xwzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.z, w: this.w)
func `xwzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func xww*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.z)
func `yxyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func yxyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.y, w: this.w)
func `yxyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func yxz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.z)
func `yxz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
func yxzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.x)
func `yxzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func yxzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.y)
func `yxzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func yxzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.z, w: this.w)
func `yxzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func yxw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.x, z: this.w)
func `yxw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
func yxwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.w, w: this.x)
func `yxwx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func yxwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.w, w: this.y)
func `yxwy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func yxwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.w, w: this.z)
func `yxwz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func yxww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.y, y: this.y)
func yyx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.y, z: this.w)
func yywx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.y, y: this.z)
func `yz=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.y = other.x
  this.z = other.y
func yzx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.x)
func `yzx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
func yzxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.y)
func `yzxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func yzxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.z)
func `yzxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func yzxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.x, w: this.w)
func `yzxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func yzy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.y)
func `yzy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
func yzyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.x)
func `yzyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func yzyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.z)
func `yzyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func yzyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.y, w: this.w)
func `yzyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func yzz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.z, z: this.w)
func `yzw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
func yzwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.w, w: this.x)
func `yzwx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func yzwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.w, w: this.y)
func `yzwy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func yzwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.w, w: this.z)
func `yzwz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func yzww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.y, y: this.w)
func `yw=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.y = other.x
  this.w = other.y
func ywx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.w, z: this.x)
func `ywx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
func ywxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.x, w: this.y)
func `ywxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func ywxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.x, w: this.z)
func `ywxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func ywxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.x, w: this.w)
func `ywxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func ywy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.w, z: this.y)
func `ywy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
func ywyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.y, w: this.x)
func `ywyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func ywyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.y, w: this.z)
func `ywyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func ywyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.y, w: this.w)
func `ywyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func ywz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.w, z: this.z)
func `ywz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
func ywzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.z, w: this.x)
func `ywzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func ywzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.z, w: this.y)
func `ywzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func ywzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.z, w: this.w)
func `ywzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func yww*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.z, y: this.x)
func `zx=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.z = other.x
  this.x = other.y
func zxx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.y)
func `zxy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
func zxyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.x)
func `zxyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func zxyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.z)
func `zxyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func zxyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.y, w: this.w)
func `zxyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func zxz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.z)
func `zxz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
func zxzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.x)
func `zxzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func zxzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.y)
func `zxzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func zxzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.z, w: this.w)
func `zxzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func zxw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.x, z: this.w)
func `zxw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
func zxwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.w, w: this.x)
func `zxwx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func zxwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.w, w: this.y)
func `zxwy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func zxwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.w, w: this.z)
func `zxwz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func zxww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.z, y: this.y)
func `zy=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.z = other.x
  this.y = other.y
func zyx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.x)
func `zyx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
func zyxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.y)
func `zyxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func zyxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.z)
func `zyxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func zyxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.x, w: this.w)
func `zyxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func zyy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.z)
func `zyz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
func zyzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.x)
func `zyzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func zyzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.y)
func `zyzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func zyzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.z, w: this.w)
func `zyzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func zyw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.y, z: this.w)
func `zyw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
func zywx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.w, w: this.x)
func `zywx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func zywy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.w, w: this.y)
func `zywy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func zywz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.w, w: this.z)
func `zywz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func zyww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.z, y: this.z)
func zzx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.z, y: this.w)
func `zw=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.z = other.x
  this.w = other.y
func zwx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.w, z: this.x)
func `zwx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
func zwxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.x, w: this.y)
func `zwxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func zwxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.x, w: this.z)
func `zwxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func zwxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.x, w: this.w)
func `zwxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func zwy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.w, z: this.y)
func `zwy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
func zwyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.y, w: this.x)
func `zwyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func zwyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.y, w: this.z)
func `zwyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func zwyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.y, w: this.w)
func `zwyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func zwz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.w, z: this.z)
func `zwz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
func zwzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.z, w: this.x)
func `zwzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func zwzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.z, w: this.y)
func `zwzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func zwzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.z, w: this.w)
func `zwzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func zww*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.w, y: this.x)
func `wx=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.w = other.x
  this.x = other.y
func wxx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.x, z: this.y)
func `wxy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
func wxyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.y, w: this.x)
func `wxyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func wxyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.y, w: this.z)
func `wxyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func wxyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.y, w: this.w)
func `wxyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func wxz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.x, z: this.z)
func `wxz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
func wxzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.z, w: this.x)
func `wxzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func wxzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.z, w: this.y)
func `wxzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func wxzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.z, w: this.w)
func `wxzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func wxw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.x, z: this.w)
func `wxw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
func wxwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.w, w: this.x)
func `wxwx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func wxwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.w, w: this.y)
func `wxwy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func wxwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.w, w: this.z)
func `wxwz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func wxww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.w, y: this.y)
func `wy=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.w = other.x
  this.y = other.y
func wyx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.y, z: this.x)
func `wyx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
func wyxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.x, w: this.y)
func `wyxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func wyxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.x, w: this.z)
func `wyxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func wyxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.x, w: this.w)
func `wyxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func wyy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.y, z: this.z)
func `wyz=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
func wyzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.z, w: this.x)
func `wyzx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func wyzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.z, w: this.y)
func `wyzy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func wyzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.z, w: this.w)
func `wyzw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func wyw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.y, z: this.w)
func `wyw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
func wywx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.w, w: this.x)
func `wywx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func wywy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.w, w: this.y)
func `wywy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func wywz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.w, w: this.z)
func `wywz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func wyww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.w, y: this.z)
func `wz=`*(this: var LVecBase4d, other: LVecBase2d) =
  this.w = other.x
  this.z = other.y
func wzx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.z, z: this.x)
func `wzx=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
func wzxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.x, w: this.y)
func `wzxy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func wzxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.x, w: this.z)
func `wzxz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func wzxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.x, w: this.w)
func `wzxw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func wzy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.z, z: this.y)
func `wzy=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
func wzyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.y, w: this.x)
func `wzyx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func wzyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.y, w: this.z)
func `wzyz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func wzyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.y, w: this.w)
func `wzyw=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func wzz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.z, z: this.w)
func `wzw=`*(this: var LVecBase4d, other: LVecBase3d) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
func wzwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.w, w: this.x)
func `wzwx=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func wzwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.w, w: this.y)
func `wzwy=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func wzwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.w, w: this.z)
func `wzwz=`*(this: var LVecBase4d, other: LVecBase4d) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func wzww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LVecBase4d): LVecBase2d = LVecBase2d(x: this.w, y: this.w)
func wwx*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LVecBase4d): LVecBase3d = LVecBase3d(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LVecBase4d): LVecBase4d = LVecBase4d(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LVecBase2i): LVecBase2i = LVecBase2i(x: this.x, y: this.x)
func xxx*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LVecBase2i): LVecBase2i = LVecBase2i(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase2i, other: LVecBase2i) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase2i, other: LVecBase3i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase2i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyy*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LVecBase2i): LVecBase2i = LVecBase2i(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase2i, other: LVecBase2i) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase2i, other: LVecBase3i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase2i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LVecBase2i): LVecBase2i = LVecBase2i(x: this.y, y: this.y)
func yyx*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LVecBase2i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase2i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.x, y: this.x)
func xxx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase3i, other: LVecBase2i) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.z)
func `xyxz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func xyy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.z)
func `xyz=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
func xyzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.x)
func `xyzx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func xyzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.y)
func `xyzy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func xyzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.x, y: this.z)
func `xz=`*(this: var LVecBase3i, other: LVecBase2i) =
  this.x = other.x
  this.z = other.y
func xzx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.x)
func `xzx=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
func xzxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.y)
func `xzxy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func xzxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.z)
func `xzxz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func xzy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.y)
func `xzy=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
func xzyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.x)
func `xzyx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func xzyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.z)
func `xzyz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func xzz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase3i, other: LVecBase2i) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.z)
func `yxyz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func yxz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.z)
func `yxz=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
func yxzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.x)
func `yxzx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func yxzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.y)
func `yxzy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func yxzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.y, y: this.y)
func yyx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.y, y: this.z)
func `yz=`*(this: var LVecBase3i, other: LVecBase2i) =
  this.y = other.x
  this.z = other.y
func yzx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.x)
func `yzx=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
func yzxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.y)
func `yzxy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func yzxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.z)
func `yzxz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func yzy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.y)
func `yzy=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
func yzyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.x)
func `yzyx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func yzyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.z)
func `yzyz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func yzz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.z, y: this.x)
func `zx=`*(this: var LVecBase3i, other: LVecBase2i) =
  this.z = other.x
  this.x = other.y
func zxx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.y)
func `zxy=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
func zxyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.x)
func `zxyx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func zxyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.z)
func `zxyz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func zxz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.z)
func `zxz=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
func zxzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.x)
func `zxzx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func zxzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.y)
func `zxzy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func zxzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.z, y: this.y)
func `zy=`*(this: var LVecBase3i, other: LVecBase2i) =
  this.z = other.x
  this.y = other.y
func zyx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.x)
func `zyx=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
func zyxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.y)
func `zyxy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func zyxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.z)
func `zyxz=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func zyy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.z)
func `zyz=`*(this: var LVecBase3i, other: LVecBase3i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
func zyzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.x)
func `zyzx=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func zyzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.y)
func `zyzy=`*(this: var LVecBase3i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func zyzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LVecBase3i): LVecBase2i = LVecBase2i(x: this.z, y: this.z)
func zzx*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LVecBase3i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVecBase3i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.x, y: this.x)
func xxx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.x, y: this.y)
func `xy=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.x = other.x
  this.y = other.y
func xyx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.x)
func `xyx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
func xyxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.y)
func `xyxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func xyxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.z)
func `xyxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func xyxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.x, w: this.w)
func `xyxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func xyy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.z)
func `xyz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
func xyzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.x)
func `xyzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func xyzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.y)
func `xyzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func xyzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.z, w: this.w)
func `xyzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func xyw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.y, z: this.w)
func `xyw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
func xywx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.w, w: this.x)
func `xywx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func xywy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.w, w: this.y)
func `xywy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func xywz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.w, w: this.z)
func `xywz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func xyww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.x, y: this.z)
func `xz=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.x = other.x
  this.z = other.y
func xzx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.x)
func `xzx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
func xzxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.y)
func `xzxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func xzxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.z)
func `xzxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func xzxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.x, w: this.w)
func `xzxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func xzy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.y)
func `xzy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
func xzyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.x)
func `xzyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func xzyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.z)
func `xzyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func xzyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.y, w: this.w)
func `xzyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func xzz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.z, z: this.w)
func `xzw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
func xzwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.w, w: this.x)
func `xzwx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func xzwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.w, w: this.y)
func `xzwy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func xzwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.w, w: this.z)
func `xzwz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func xzww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.x, y: this.w)
func `xw=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.x = other.x
  this.w = other.y
func xwx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.w, z: this.x)
func `xwx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
func xwxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.x, w: this.y)
func `xwxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func xwxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.x, w: this.z)
func `xwxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func xwxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.x, w: this.w)
func `xwxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func xwy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.w, z: this.y)
func `xwy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
func xwyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.y, w: this.x)
func `xwyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func xwyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.y, w: this.z)
func `xwyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func xwyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.y, w: this.w)
func `xwyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func xwz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.w, z: this.z)
func `xwz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
func xwzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.z, w: this.x)
func `xwzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func xwzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.z, w: this.y)
func `xwzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func xwzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.z, w: this.w)
func `xwzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.x = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func xww*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.y, y: this.x)
func `yx=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.y = other.x
  this.x = other.y
func yxx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.y)
func `yxy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
func yxyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.x)
func `yxyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func yxyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.z)
func `yxyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func yxyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.y, w: this.w)
func `yxyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func yxz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.z)
func `yxz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
func yxzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.x)
func `yxzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func yxzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.y)
func `yxzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func yxzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.z, w: this.w)
func `yxzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func yxw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.x, z: this.w)
func `yxw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
func yxwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.w, w: this.x)
func `yxwx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func yxwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.w, w: this.y)
func `yxwy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func yxwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.w, w: this.z)
func `yxwz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func yxww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.y, y: this.y)
func yyx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.y, z: this.w)
func yywx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.y, y: this.z)
func `yz=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.y = other.x
  this.z = other.y
func yzx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.x)
func `yzx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
func yzxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.y)
func `yzxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func yzxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.z)
func `yzxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func yzxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.x, w: this.w)
func `yzxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func yzy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.y)
func `yzy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
func yzyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.x)
func `yzyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func yzyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.z)
func `yzyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func yzyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.y, w: this.w)
func `yzyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func yzz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.z, z: this.w)
func `yzw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
func yzwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.w, w: this.x)
func `yzwx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func yzwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.w, w: this.y)
func `yzwy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func yzwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.w, w: this.z)
func `yzwz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func yzww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.y, y: this.w)
func `yw=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.y = other.x
  this.w = other.y
func ywx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.w, z: this.x)
func `ywx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
func ywxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.x, w: this.y)
func `ywxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func ywxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.x, w: this.z)
func `ywxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func ywxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.x, w: this.w)
func `ywxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func ywy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.w, z: this.y)
func `ywy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
func ywyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.y, w: this.x)
func `ywyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func ywyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.y, w: this.z)
func `ywyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func ywyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.y, w: this.w)
func `ywyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func ywz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.w, z: this.z)
func `ywz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
func ywzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.z, w: this.x)
func `ywzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func ywzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.z, w: this.y)
func `ywzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func ywzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.z, w: this.w)
func `ywzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.y = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func yww*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.z, y: this.x)
func `zx=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.z = other.x
  this.x = other.y
func zxx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.y)
func `zxy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
func zxyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.x)
func `zxyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func zxyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.z)
func `zxyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func zxyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.y, w: this.w)
func `zxyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func zxz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.z)
func `zxz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
func zxzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.x)
func `zxzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func zxzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.y)
func `zxzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func zxzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.z, w: this.w)
func `zxzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func zxw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.x, z: this.w)
func `zxw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
func zxwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.w, w: this.x)
func `zxwx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func zxwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.w, w: this.y)
func `zxwy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func zxwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.w, w: this.z)
func `zxwz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func zxww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.z, y: this.y)
func `zy=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.z = other.x
  this.y = other.y
func zyx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.x)
func `zyx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
func zyxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.y)
func `zyxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func zyxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.z)
func `zyxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func zyxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.x, w: this.w)
func `zyxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func zyy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.z)
func `zyz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
func zyzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.x)
func `zyzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func zyzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.y)
func `zyzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func zyzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.z, w: this.w)
func `zyzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func zyw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.y, z: this.w)
func `zyw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
func zywx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.w, w: this.x)
func `zywx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func zywy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.w, w: this.y)
func `zywy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func zywz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.w, w: this.z)
func `zywz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func zyww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.z, y: this.z)
func zzx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.z, y: this.w)
func `zw=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.z = other.x
  this.w = other.y
func zwx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.w, z: this.x)
func `zwx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
func zwxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.x, w: this.y)
func `zwxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.y = other.w
func zwxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.x, w: this.z)
func `zwxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.z = other.w
func zwxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.x, w: this.w)
func `zwxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.x = other.z
  this.w = other.w
func zwy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.w, z: this.y)
func `zwy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
func zwyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.y, w: this.x)
func `zwyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.x = other.w
func zwyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.y, w: this.z)
func `zwyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.z = other.w
func zwyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.y, w: this.w)
func `zwyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.y = other.z
  this.w = other.w
func zwz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.w, z: this.z)
func `zwz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
func zwzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.z, w: this.x)
func `zwzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.x = other.w
func zwzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.z, w: this.y)
func `zwzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.y = other.w
func zwzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.z, w: this.w)
func `zwzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.z = other.x
  this.w = other.y
  this.z = other.z
  this.w = other.w
func zww*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.w, y: this.x)
func `wx=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.w = other.x
  this.x = other.y
func wxx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.x, z: this.y)
func `wxy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
func wxyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.y, w: this.x)
func `wxyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.x = other.w
func wxyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.y, w: this.z)
func `wxyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.z = other.w
func wxyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.y, w: this.w)
func `wxyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.y = other.z
  this.w = other.w
func wxz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.x, z: this.z)
func `wxz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
func wxzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.z, w: this.x)
func `wxzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.x = other.w
func wxzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.z, w: this.y)
func `wxzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.y = other.w
func wxzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.z, w: this.w)
func `wxzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.z = other.z
  this.w = other.w
func wxw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.x, z: this.w)
func `wxw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
func wxwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.w, w: this.x)
func `wxwx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.x = other.w
func wxwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.w, w: this.y)
func `wxwy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.y = other.w
func wxwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.w, w: this.z)
func `wxwz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.x = other.y
  this.w = other.z
  this.z = other.w
func wxww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.w, y: this.y)
func `wy=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.w = other.x
  this.y = other.y
func wyx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.y, z: this.x)
func `wyx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
func wyxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.x, w: this.y)
func `wyxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.y = other.w
func wyxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.x, w: this.z)
func `wyxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.z = other.w
func wyxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.x, w: this.w)
func `wyxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.x = other.z
  this.w = other.w
func wyy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.y, z: this.z)
func `wyz=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
func wyzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.z, w: this.x)
func `wyzx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.x = other.w
func wyzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.z, w: this.y)
func `wyzy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.y = other.w
func wyzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.z, w: this.w)
func `wyzw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.z = other.z
  this.w = other.w
func wyw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.y, z: this.w)
func `wyw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
func wywx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.w, w: this.x)
func `wywx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.x = other.w
func wywy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.w, w: this.y)
func `wywy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.y = other.w
func wywz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.w, w: this.z)
func `wywz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.y = other.y
  this.w = other.z
  this.z = other.w
func wyww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.w, y: this.z)
func `wz=`*(this: var LVecBase4i, other: LVecBase2i) =
  this.w = other.x
  this.z = other.y
func wzx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.z, z: this.x)
func `wzx=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
func wzxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.x, w: this.y)
func `wzxy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.y = other.w
func wzxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.x, w: this.z)
func `wzxz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.z = other.w
func wzxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.x, w: this.w)
func `wzxw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.x = other.z
  this.w = other.w
func wzy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.z, z: this.y)
func `wzy=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
func wzyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.y, w: this.x)
func `wzyx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.x = other.w
func wzyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.y, w: this.z)
func `wzyz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.z = other.w
func wzyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.y, w: this.w)
func `wzyw=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.y = other.z
  this.w = other.w
func wzz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.z, z: this.w)
func `wzw=`*(this: var LVecBase4i, other: LVecBase3i) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
func wzwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.w, w: this.x)
func `wzwx=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.x = other.w
func wzwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.w, w: this.y)
func `wzwy=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.y = other.w
func wzwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.w, w: this.z)
func `wzwz=`*(this: var LVecBase4i, other: LVecBase4i) =
  this.w = other.x
  this.z = other.y
  this.w = other.z
  this.z = other.w
func wzww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LVecBase4i): LVecBase2i = LVecBase2i(x: this.w, y: this.w)
func wwx*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LVecBase4i): LVecBase3i = LVecBase3i(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LVecBase4i): LVecBase4i = LVecBase4i(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LVector2f): LVector2f = LVector2f(x: this.x, y: this.x)
func xxx*(this: LVector2f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LVector2f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LVector2f): LVector2f = LVector2f(x: this.x, y: this.y)
func xyx*(this: LVector2f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.y)
func xyy*(this: LVector2f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector2f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LVector2f): LVector2f = LVector2f(x: this.y, y: this.x)
func yxx*(this: LVector2f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LVector2f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LVector2f): LVector2f = LVector2f(x: this.y, y: this.y)
func yyx*(this: LVector2f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LVector2f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector2f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LVector3f): LVector2f = LVector2f(x: this.x, y: this.x)
func xxx*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LVector3f): LVector2f = LVector2f(x: this.x, y: this.y)
func xyx*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.z)
func xyy*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LVector3f): LVector2f = LVector2f(x: this.x, y: this.z)
func xzx*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.z)
func xzy*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.z)
func xzz*(this: LVector3f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVector3f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LVector3f): LVector2f = LVector2f(x: this.y, y: this.x)
func yxx*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.z)
func yxz*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LVector3f): LVector2f = LVector2f(x: this.y, y: this.y)
func yyx*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LVector3f): LVector2f = LVector2f(x: this.y, y: this.z)
func yzx*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.z)
func yzy*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.z)
func yzz*(this: LVector3f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVector3f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LVector3f): LVector2f = LVector2f(x: this.z, y: this.x)
func zxx*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.z)
func zxz*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LVector3f): LVector2f = LVector2f(x: this.z, y: this.y)
func zyx*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.z)
func zyy*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LVector3f): LVector2f = LVector2f(x: this.z, y: this.z)
func zzx*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LVector3f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVector3f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LVector4f): LVector2f = LVector2f(x: this.x, y: this.x)
func xxx*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LVector4f): LVector2f = LVector2f(x: this.x, y: this.y)
func xyx*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.z)
func xyxw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.x, w: this.w)
func xyy*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.z, w: this.w)
func xyw*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.y, z: this.w)
func xywx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.w, w: this.x)
func xywy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.w, w: this.y)
func xywz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.w, w: this.z)
func xyww*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LVector4f): LVector2f = LVector2f(x: this.x, y: this.z)
func xzx*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.z)
func xzxw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.x, w: this.w)
func xzy*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.z)
func xzyw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.y, w: this.w)
func xzz*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.z, z: this.w)
func xzwx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.w, w: this.x)
func xzwy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.w, w: this.y)
func xzwz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.w, w: this.z)
func xzww*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LVector4f): LVector2f = LVector2f(x: this.x, y: this.w)
func xwx*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.w, z: this.x)
func xwxx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.x, w: this.y)
func xwxz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.x, w: this.z)
func xwxw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.x, w: this.w)
func xwy*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.w, z: this.y)
func xwyx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.y, w: this.x)
func xwyy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.y, w: this.z)
func xwyw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.y, w: this.w)
func xwz*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.w, z: this.z)
func xwzx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.z, w: this.x)
func xwzy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.z, w: this.y)
func xwzz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.z, w: this.w)
func xww*(this: LVector4f): LVector3f = LVector3f(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LVector4f): LVector4f = LVector4f(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LVector4f): LVector2f = LVector2f(x: this.y, y: this.x)
func yxx*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.z)
func yxyw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.y, w: this.w)
func yxz*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.z, w: this.w)
func yxw*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.x, z: this.w)
func yxwx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.w, w: this.x)
func yxwy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.w, w: this.y)
func yxwz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.w, w: this.z)
func yxww*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LVector4f): LVector2f = LVector2f(x: this.y, y: this.y)
func yyx*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.y, z: this.w)
func yywx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LVector4f): LVector2f = LVector2f(x: this.y, y: this.z)
func yzx*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.z)
func yzxw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.x, w: this.w)
func yzy*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.z)
func yzyw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.y, w: this.w)
func yzz*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.z, z: this.w)
func yzwx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.w, w: this.x)
func yzwy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.w, w: this.y)
func yzwz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.w, w: this.z)
func yzww*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LVector4f): LVector2f = LVector2f(x: this.y, y: this.w)
func ywx*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.w, z: this.x)
func ywxx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.x, w: this.y)
func ywxz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.x, w: this.z)
func ywxw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.x, w: this.w)
func ywy*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.w, z: this.y)
func ywyx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.y, w: this.x)
func ywyy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.y, w: this.z)
func ywyw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.y, w: this.w)
func ywz*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.w, z: this.z)
func ywzx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.z, w: this.x)
func ywzy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.z, w: this.y)
func ywzz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.z, w: this.w)
func yww*(this: LVector4f): LVector3f = LVector3f(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LVector4f): LVector4f = LVector4f(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LVector4f): LVector2f = LVector2f(x: this.z, y: this.x)
func zxx*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.z)
func zxyw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.y, w: this.w)
func zxz*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.z, w: this.w)
func zxw*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.x, z: this.w)
func zxwx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.w, w: this.x)
func zxwy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.w, w: this.y)
func zxwz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.w, w: this.z)
func zxww*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LVector4f): LVector2f = LVector2f(x: this.z, y: this.y)
func zyx*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.z)
func zyxw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.x, w: this.w)
func zyy*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.z, w: this.w)
func zyw*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.y, z: this.w)
func zywx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.w, w: this.x)
func zywy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.w, w: this.y)
func zywz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.w, w: this.z)
func zyww*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LVector4f): LVector2f = LVector2f(x: this.z, y: this.z)
func zzx*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LVector4f): LVector2f = LVector2f(x: this.z, y: this.w)
func zwx*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.w, z: this.x)
func zwxx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.x, w: this.y)
func zwxz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.x, w: this.z)
func zwxw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.x, w: this.w)
func zwy*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.w, z: this.y)
func zwyx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.y, w: this.x)
func zwyy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.y, w: this.z)
func zwyw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.y, w: this.w)
func zwz*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.w, z: this.z)
func zwzx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.z, w: this.x)
func zwzy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.z, w: this.y)
func zwzz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.z, w: this.w)
func zww*(this: LVector4f): LVector3f = LVector3f(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LVector4f): LVector4f = LVector4f(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LVector4f): LVector2f = LVector2f(x: this.w, y: this.x)
func wxx*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.x, z: this.y)
func wxyx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.y, w: this.x)
func wxyy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.y, w: this.z)
func wxyw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.y, w: this.w)
func wxz*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.x, z: this.z)
func wxzx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.z, w: this.x)
func wxzy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.z, w: this.y)
func wxzz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.z, w: this.w)
func wxw*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.x, z: this.w)
func wxwx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.w, w: this.x)
func wxwy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.w, w: this.y)
func wxwz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.w, w: this.z)
func wxww*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LVector4f): LVector2f = LVector2f(x: this.w, y: this.y)
func wyx*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.y, z: this.x)
func wyxx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.x, w: this.y)
func wyxz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.x, w: this.z)
func wyxw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.x, w: this.w)
func wyy*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.y, z: this.z)
func wyzx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.z, w: this.x)
func wyzy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.z, w: this.y)
func wyzz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.z, w: this.w)
func wyw*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.y, z: this.w)
func wywx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.w, w: this.x)
func wywy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.w, w: this.y)
func wywz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.w, w: this.z)
func wyww*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LVector4f): LVector2f = LVector2f(x: this.w, y: this.z)
func wzx*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.z, z: this.x)
func wzxx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.x, w: this.y)
func wzxz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.x, w: this.z)
func wzxw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.x, w: this.w)
func wzy*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.z, z: this.y)
func wzyx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.y, w: this.x)
func wzyy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.y, w: this.z)
func wzyw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.y, w: this.w)
func wzz*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.z, z: this.w)
func wzwx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.w, w: this.x)
func wzwy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.w, w: this.y)
func wzwz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.w, w: this.z)
func wzww*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LVector4f): LVector2f = LVector2f(x: this.w, y: this.w)
func wwx*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LVector4f): LVector3f = LVector3f(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LVector4f): LVector4f = LVector4f(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LVector2d): LVector2d = LVector2d(x: this.x, y: this.x)
func xxx*(this: LVector2d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LVector2d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LVector2d): LVector2d = LVector2d(x: this.x, y: this.y)
func xyx*(this: LVector2d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.y)
func xyy*(this: LVector2d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector2d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LVector2d): LVector2d = LVector2d(x: this.y, y: this.x)
func yxx*(this: LVector2d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LVector2d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LVector2d): LVector2d = LVector2d(x: this.y, y: this.y)
func yyx*(this: LVector2d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LVector2d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector2d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LVector3d): LVector2d = LVector2d(x: this.x, y: this.x)
func xxx*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LVector3d): LVector2d = LVector2d(x: this.x, y: this.y)
func xyx*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.z)
func xyy*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LVector3d): LVector2d = LVector2d(x: this.x, y: this.z)
func xzx*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.z)
func xzy*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.z)
func xzz*(this: LVector3d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVector3d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LVector3d): LVector2d = LVector2d(x: this.y, y: this.x)
func yxx*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.z)
func yxz*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LVector3d): LVector2d = LVector2d(x: this.y, y: this.y)
func yyx*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LVector3d): LVector2d = LVector2d(x: this.y, y: this.z)
func yzx*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.z)
func yzy*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.z)
func yzz*(this: LVector3d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVector3d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LVector3d): LVector2d = LVector2d(x: this.z, y: this.x)
func zxx*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.z)
func zxz*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LVector3d): LVector2d = LVector2d(x: this.z, y: this.y)
func zyx*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.z)
func zyy*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LVector3d): LVector2d = LVector2d(x: this.z, y: this.z)
func zzx*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LVector3d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVector3d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LVector4d): LVector2d = LVector2d(x: this.x, y: this.x)
func xxx*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LVector4d): LVector2d = LVector2d(x: this.x, y: this.y)
func xyx*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.z)
func xyxw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.x, w: this.w)
func xyy*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.z, w: this.w)
func xyw*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.y, z: this.w)
func xywx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.w, w: this.x)
func xywy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.w, w: this.y)
func xywz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.w, w: this.z)
func xyww*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LVector4d): LVector2d = LVector2d(x: this.x, y: this.z)
func xzx*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.z)
func xzxw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.x, w: this.w)
func xzy*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.z)
func xzyw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.y, w: this.w)
func xzz*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.z, z: this.w)
func xzwx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.w, w: this.x)
func xzwy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.w, w: this.y)
func xzwz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.w, w: this.z)
func xzww*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LVector4d): LVector2d = LVector2d(x: this.x, y: this.w)
func xwx*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.w, z: this.x)
func xwxx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.x, w: this.y)
func xwxz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.x, w: this.z)
func xwxw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.x, w: this.w)
func xwy*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.w, z: this.y)
func xwyx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.y, w: this.x)
func xwyy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.y, w: this.z)
func xwyw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.y, w: this.w)
func xwz*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.w, z: this.z)
func xwzx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.z, w: this.x)
func xwzy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.z, w: this.y)
func xwzz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.z, w: this.w)
func xww*(this: LVector4d): LVector3d = LVector3d(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LVector4d): LVector4d = LVector4d(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LVector4d): LVector2d = LVector2d(x: this.y, y: this.x)
func yxx*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.z)
func yxyw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.y, w: this.w)
func yxz*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.z, w: this.w)
func yxw*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.x, z: this.w)
func yxwx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.w, w: this.x)
func yxwy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.w, w: this.y)
func yxwz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.w, w: this.z)
func yxww*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LVector4d): LVector2d = LVector2d(x: this.y, y: this.y)
func yyx*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.y, z: this.w)
func yywx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LVector4d): LVector2d = LVector2d(x: this.y, y: this.z)
func yzx*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.z)
func yzxw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.x, w: this.w)
func yzy*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.z)
func yzyw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.y, w: this.w)
func yzz*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.z, z: this.w)
func yzwx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.w, w: this.x)
func yzwy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.w, w: this.y)
func yzwz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.w, w: this.z)
func yzww*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LVector4d): LVector2d = LVector2d(x: this.y, y: this.w)
func ywx*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.w, z: this.x)
func ywxx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.x, w: this.y)
func ywxz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.x, w: this.z)
func ywxw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.x, w: this.w)
func ywy*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.w, z: this.y)
func ywyx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.y, w: this.x)
func ywyy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.y, w: this.z)
func ywyw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.y, w: this.w)
func ywz*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.w, z: this.z)
func ywzx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.z, w: this.x)
func ywzy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.z, w: this.y)
func ywzz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.z, w: this.w)
func yww*(this: LVector4d): LVector3d = LVector3d(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LVector4d): LVector4d = LVector4d(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LVector4d): LVector2d = LVector2d(x: this.z, y: this.x)
func zxx*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.z)
func zxyw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.y, w: this.w)
func zxz*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.z, w: this.w)
func zxw*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.x, z: this.w)
func zxwx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.w, w: this.x)
func zxwy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.w, w: this.y)
func zxwz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.w, w: this.z)
func zxww*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LVector4d): LVector2d = LVector2d(x: this.z, y: this.y)
func zyx*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.z)
func zyxw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.x, w: this.w)
func zyy*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.z, w: this.w)
func zyw*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.y, z: this.w)
func zywx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.w, w: this.x)
func zywy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.w, w: this.y)
func zywz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.w, w: this.z)
func zyww*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LVector4d): LVector2d = LVector2d(x: this.z, y: this.z)
func zzx*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LVector4d): LVector2d = LVector2d(x: this.z, y: this.w)
func zwx*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.w, z: this.x)
func zwxx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.x, w: this.y)
func zwxz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.x, w: this.z)
func zwxw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.x, w: this.w)
func zwy*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.w, z: this.y)
func zwyx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.y, w: this.x)
func zwyy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.y, w: this.z)
func zwyw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.y, w: this.w)
func zwz*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.w, z: this.z)
func zwzx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.z, w: this.x)
func zwzy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.z, w: this.y)
func zwzz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.z, w: this.w)
func zww*(this: LVector4d): LVector3d = LVector3d(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LVector4d): LVector4d = LVector4d(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LVector4d): LVector2d = LVector2d(x: this.w, y: this.x)
func wxx*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.x, z: this.y)
func wxyx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.y, w: this.x)
func wxyy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.y, w: this.z)
func wxyw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.y, w: this.w)
func wxz*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.x, z: this.z)
func wxzx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.z, w: this.x)
func wxzy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.z, w: this.y)
func wxzz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.z, w: this.w)
func wxw*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.x, z: this.w)
func wxwx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.w, w: this.x)
func wxwy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.w, w: this.y)
func wxwz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.w, w: this.z)
func wxww*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LVector4d): LVector2d = LVector2d(x: this.w, y: this.y)
func wyx*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.y, z: this.x)
func wyxx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.x, w: this.y)
func wyxz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.x, w: this.z)
func wyxw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.x, w: this.w)
func wyy*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.y, z: this.z)
func wyzx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.z, w: this.x)
func wyzy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.z, w: this.y)
func wyzz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.z, w: this.w)
func wyw*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.y, z: this.w)
func wywx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.w, w: this.x)
func wywy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.w, w: this.y)
func wywz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.w, w: this.z)
func wyww*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LVector4d): LVector2d = LVector2d(x: this.w, y: this.z)
func wzx*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.z, z: this.x)
func wzxx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.x, w: this.y)
func wzxz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.x, w: this.z)
func wzxw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.x, w: this.w)
func wzy*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.z, z: this.y)
func wzyx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.y, w: this.x)
func wzyy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.y, w: this.z)
func wzyw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.y, w: this.w)
func wzz*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.z, z: this.w)
func wzwx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.w, w: this.x)
func wzwy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.w, w: this.y)
func wzwz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.w, w: this.z)
func wzww*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LVector4d): LVector2d = LVector2d(x: this.w, y: this.w)
func wwx*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LVector4d): LVector3d = LVector3d(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LVector4d): LVector4d = LVector4d(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LVector2i): LVector2i = LVector2i(x: this.x, y: this.x)
func xxx*(this: LVector2i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LVector2i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LVector2i): LVector2i = LVector2i(x: this.x, y: this.y)
func xyx*(this: LVector2i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.y)
func xyy*(this: LVector2i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector2i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LVector2i): LVector2i = LVector2i(x: this.y, y: this.x)
func yxx*(this: LVector2i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LVector2i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LVector2i): LVector2i = LVector2i(x: this.y, y: this.y)
func yyx*(this: LVector2i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LVector2i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector2i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LVector3i): LVector2i = LVector2i(x: this.x, y: this.x)
func xxx*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LVector3i): LVector2i = LVector2i(x: this.x, y: this.y)
func xyx*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.z)
func xyy*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LVector3i): LVector2i = LVector2i(x: this.x, y: this.z)
func xzx*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.z)
func xzy*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.z)
func xzz*(this: LVector3i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVector3i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LVector3i): LVector2i = LVector2i(x: this.y, y: this.x)
func yxx*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.z)
func yxz*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LVector3i): LVector2i = LVector2i(x: this.y, y: this.y)
func yyx*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LVector3i): LVector2i = LVector2i(x: this.y, y: this.z)
func yzx*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.z)
func yzy*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.z)
func yzz*(this: LVector3i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVector3i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LVector3i): LVector2i = LVector2i(x: this.z, y: this.x)
func zxx*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.z)
func zxz*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LVector3i): LVector2i = LVector2i(x: this.z, y: this.y)
func zyx*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.z)
func zyy*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LVector3i): LVector2i = LVector2i(x: this.z, y: this.z)
func zzx*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LVector3i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVector3i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LVector4i): LVector2i = LVector2i(x: this.x, y: this.x)
func xxx*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LVector4i): LVector2i = LVector2i(x: this.x, y: this.y)
func xyx*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.z)
func xyxw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.x, w: this.w)
func xyy*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.z, w: this.w)
func xyw*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.y, z: this.w)
func xywx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.w, w: this.x)
func xywy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.w, w: this.y)
func xywz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.w, w: this.z)
func xyww*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LVector4i): LVector2i = LVector2i(x: this.x, y: this.z)
func xzx*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.z)
func xzxw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.x, w: this.w)
func xzy*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.z)
func xzyw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.y, w: this.w)
func xzz*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.z, z: this.w)
func xzwx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.w, w: this.x)
func xzwy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.w, w: this.y)
func xzwz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.w, w: this.z)
func xzww*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LVector4i): LVector2i = LVector2i(x: this.x, y: this.w)
func xwx*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.w, z: this.x)
func xwxx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.x, w: this.y)
func xwxz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.x, w: this.z)
func xwxw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.x, w: this.w)
func xwy*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.w, z: this.y)
func xwyx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.y, w: this.x)
func xwyy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.y, w: this.z)
func xwyw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.y, w: this.w)
func xwz*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.w, z: this.z)
func xwzx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.z, w: this.x)
func xwzy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.z, w: this.y)
func xwzz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.z, w: this.w)
func xww*(this: LVector4i): LVector3i = LVector3i(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LVector4i): LVector4i = LVector4i(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LVector4i): LVector2i = LVector2i(x: this.y, y: this.x)
func yxx*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.z)
func yxyw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.y, w: this.w)
func yxz*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.z, w: this.w)
func yxw*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.x, z: this.w)
func yxwx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.w, w: this.x)
func yxwy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.w, w: this.y)
func yxwz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.w, w: this.z)
func yxww*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LVector4i): LVector2i = LVector2i(x: this.y, y: this.y)
func yyx*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.y, z: this.w)
func yywx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LVector4i): LVector2i = LVector2i(x: this.y, y: this.z)
func yzx*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.z)
func yzxw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.x, w: this.w)
func yzy*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.z)
func yzyw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.y, w: this.w)
func yzz*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.z, z: this.w)
func yzwx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.w, w: this.x)
func yzwy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.w, w: this.y)
func yzwz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.w, w: this.z)
func yzww*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LVector4i): LVector2i = LVector2i(x: this.y, y: this.w)
func ywx*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.w, z: this.x)
func ywxx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.x, w: this.y)
func ywxz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.x, w: this.z)
func ywxw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.x, w: this.w)
func ywy*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.w, z: this.y)
func ywyx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.y, w: this.x)
func ywyy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.y, w: this.z)
func ywyw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.y, w: this.w)
func ywz*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.w, z: this.z)
func ywzx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.z, w: this.x)
func ywzy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.z, w: this.y)
func ywzz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.z, w: this.w)
func yww*(this: LVector4i): LVector3i = LVector3i(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LVector4i): LVector4i = LVector4i(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LVector4i): LVector2i = LVector2i(x: this.z, y: this.x)
func zxx*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.z)
func zxyw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.y, w: this.w)
func zxz*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.z, w: this.w)
func zxw*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.x, z: this.w)
func zxwx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.w, w: this.x)
func zxwy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.w, w: this.y)
func zxwz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.w, w: this.z)
func zxww*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LVector4i): LVector2i = LVector2i(x: this.z, y: this.y)
func zyx*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.z)
func zyxw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.x, w: this.w)
func zyy*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.z, w: this.w)
func zyw*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.y, z: this.w)
func zywx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.w, w: this.x)
func zywy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.w, w: this.y)
func zywz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.w, w: this.z)
func zyww*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LVector4i): LVector2i = LVector2i(x: this.z, y: this.z)
func zzx*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LVector4i): LVector2i = LVector2i(x: this.z, y: this.w)
func zwx*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.w, z: this.x)
func zwxx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.x, w: this.y)
func zwxz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.x, w: this.z)
func zwxw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.x, w: this.w)
func zwy*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.w, z: this.y)
func zwyx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.y, w: this.x)
func zwyy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.y, w: this.z)
func zwyw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.y, w: this.w)
func zwz*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.w, z: this.z)
func zwzx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.z, w: this.x)
func zwzy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.z, w: this.y)
func zwzz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.z, w: this.w)
func zww*(this: LVector4i): LVector3i = LVector3i(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LVector4i): LVector4i = LVector4i(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LVector4i): LVector2i = LVector2i(x: this.w, y: this.x)
func wxx*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.x, z: this.y)
func wxyx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.y, w: this.x)
func wxyy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.y, w: this.z)
func wxyw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.y, w: this.w)
func wxz*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.x, z: this.z)
func wxzx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.z, w: this.x)
func wxzy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.z, w: this.y)
func wxzz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.z, w: this.w)
func wxw*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.x, z: this.w)
func wxwx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.w, w: this.x)
func wxwy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.w, w: this.y)
func wxwz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.w, w: this.z)
func wxww*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LVector4i): LVector2i = LVector2i(x: this.w, y: this.y)
func wyx*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.y, z: this.x)
func wyxx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.x, w: this.y)
func wyxz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.x, w: this.z)
func wyxw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.x, w: this.w)
func wyy*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.y, z: this.z)
func wyzx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.z, w: this.x)
func wyzy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.z, w: this.y)
func wyzz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.z, w: this.w)
func wyw*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.y, z: this.w)
func wywx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.w, w: this.x)
func wywy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.w, w: this.y)
func wywz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.w, w: this.z)
func wyww*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LVector4i): LVector2i = LVector2i(x: this.w, y: this.z)
func wzx*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.z, z: this.x)
func wzxx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.x, w: this.y)
func wzxz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.x, w: this.z)
func wzxw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.x, w: this.w)
func wzy*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.z, z: this.y)
func wzyx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.y, w: this.x)
func wzyy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.y, w: this.z)
func wzyw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.y, w: this.w)
func wzz*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.z, z: this.w)
func wzwx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.w, w: this.x)
func wzwy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.w, w: this.y)
func wzwz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.w, w: this.z)
func wzww*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LVector4i): LVector2i = LVector2i(x: this.w, y: this.w)
func wwx*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LVector4i): LVector3i = LVector3i(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LVector4i): LVector4i = LVector4i(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LPoint2f): LPoint2f = LPoint2f(x: this.x, y: this.x)
func xxx*(this: LPoint2f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LPoint2f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LPoint2f): LPoint2f = LPoint2f(x: this.x, y: this.y)
func xyx*(this: LPoint2f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.y)
func xyy*(this: LPoint2f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LPoint2f): LPoint2f = LPoint2f(x: this.y, y: this.x)
func yxx*(this: LPoint2f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LPoint2f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LPoint2f): LPoint2f = LPoint2f(x: this.y, y: this.y)
func yyx*(this: LPoint2f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LPoint2f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint2f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LPoint3f): LPoint2f = LPoint2f(x: this.x, y: this.x)
func xxx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LPoint3f): LPoint2f = LPoint2f(x: this.x, y: this.y)
func xyx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.z)
func xyy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LPoint3f): LPoint2f = LPoint2f(x: this.x, y: this.z)
func xzx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.z)
func xzy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.z)
func xzz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LPoint3f): LPoint2f = LPoint2f(x: this.y, y: this.x)
func yxx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.z)
func yxz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LPoint3f): LPoint2f = LPoint2f(x: this.y, y: this.y)
func yyx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LPoint3f): LPoint2f = LPoint2f(x: this.y, y: this.z)
func yzx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.z)
func yzy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.z)
func yzz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LPoint3f): LPoint2f = LPoint2f(x: this.z, y: this.x)
func zxx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.z)
func zxz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LPoint3f): LPoint2f = LPoint2f(x: this.z, y: this.y)
func zyx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.z)
func zyy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LPoint3f): LPoint2f = LPoint2f(x: this.z, y: this.z)
func zzx*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LPoint3f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LPoint3f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LPoint4f): LPoint2f = LPoint2f(x: this.x, y: this.x)
func xxx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LPoint4f): LPoint2f = LPoint2f(x: this.x, y: this.y)
func xyx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.z)
func xyxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.x, w: this.w)
func xyy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.z, w: this.w)
func xyw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.y, z: this.w)
func xywx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.w, w: this.x)
func xywy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.w, w: this.y)
func xywz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.w, w: this.z)
func xyww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LPoint4f): LPoint2f = LPoint2f(x: this.x, y: this.z)
func xzx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.z)
func xzxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.x, w: this.w)
func xzy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.z)
func xzyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.y, w: this.w)
func xzz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.z, z: this.w)
func xzwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.w, w: this.x)
func xzwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.w, w: this.y)
func xzwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.w, w: this.z)
func xzww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LPoint4f): LPoint2f = LPoint2f(x: this.x, y: this.w)
func xwx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.w, z: this.x)
func xwxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.x, w: this.y)
func xwxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.x, w: this.z)
func xwxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.x, w: this.w)
func xwy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.w, z: this.y)
func xwyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.y, w: this.x)
func xwyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.y, w: this.z)
func xwyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.y, w: this.w)
func xwz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.w, z: this.z)
func xwzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.z, w: this.x)
func xwzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.z, w: this.y)
func xwzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.z, w: this.w)
func xww*(this: LPoint4f): LPoint3f = LPoint3f(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LPoint4f): LPoint2f = LPoint2f(x: this.y, y: this.x)
func yxx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.z)
func yxyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.y, w: this.w)
func yxz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.z, w: this.w)
func yxw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.x, z: this.w)
func yxwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.w, w: this.x)
func yxwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.w, w: this.y)
func yxwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.w, w: this.z)
func yxww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LPoint4f): LPoint2f = LPoint2f(x: this.y, y: this.y)
func yyx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.y, z: this.w)
func yywx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LPoint4f): LPoint2f = LPoint2f(x: this.y, y: this.z)
func yzx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.z)
func yzxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.x, w: this.w)
func yzy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.z)
func yzyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.y, w: this.w)
func yzz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.z, z: this.w)
func yzwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.w, w: this.x)
func yzwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.w, w: this.y)
func yzwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.w, w: this.z)
func yzww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LPoint4f): LPoint2f = LPoint2f(x: this.y, y: this.w)
func ywx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.w, z: this.x)
func ywxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.x, w: this.y)
func ywxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.x, w: this.z)
func ywxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.x, w: this.w)
func ywy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.w, z: this.y)
func ywyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.y, w: this.x)
func ywyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.y, w: this.z)
func ywyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.y, w: this.w)
func ywz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.w, z: this.z)
func ywzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.z, w: this.x)
func ywzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.z, w: this.y)
func ywzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.z, w: this.w)
func yww*(this: LPoint4f): LPoint3f = LPoint3f(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LPoint4f): LPoint2f = LPoint2f(x: this.z, y: this.x)
func zxx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.z)
func zxyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.y, w: this.w)
func zxz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.z, w: this.w)
func zxw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.x, z: this.w)
func zxwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.w, w: this.x)
func zxwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.w, w: this.y)
func zxwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.w, w: this.z)
func zxww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LPoint4f): LPoint2f = LPoint2f(x: this.z, y: this.y)
func zyx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.z)
func zyxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.x, w: this.w)
func zyy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.z, w: this.w)
func zyw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.y, z: this.w)
func zywx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.w, w: this.x)
func zywy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.w, w: this.y)
func zywz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.w, w: this.z)
func zyww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LPoint4f): LPoint2f = LPoint2f(x: this.z, y: this.z)
func zzx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LPoint4f): LPoint2f = LPoint2f(x: this.z, y: this.w)
func zwx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.w, z: this.x)
func zwxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.x, w: this.y)
func zwxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.x, w: this.z)
func zwxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.x, w: this.w)
func zwy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.w, z: this.y)
func zwyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.y, w: this.x)
func zwyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.y, w: this.z)
func zwyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.y, w: this.w)
func zwz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.w, z: this.z)
func zwzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.z, w: this.x)
func zwzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.z, w: this.y)
func zwzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.z, w: this.w)
func zww*(this: LPoint4f): LPoint3f = LPoint3f(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LPoint4f): LPoint2f = LPoint2f(x: this.w, y: this.x)
func wxx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.x, z: this.y)
func wxyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.y, w: this.x)
func wxyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.y, w: this.z)
func wxyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.y, w: this.w)
func wxz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.x, z: this.z)
func wxzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.z, w: this.x)
func wxzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.z, w: this.y)
func wxzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.z, w: this.w)
func wxw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.x, z: this.w)
func wxwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.w, w: this.x)
func wxwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.w, w: this.y)
func wxwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.w, w: this.z)
func wxww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LPoint4f): LPoint2f = LPoint2f(x: this.w, y: this.y)
func wyx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.y, z: this.x)
func wyxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.x, w: this.y)
func wyxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.x, w: this.z)
func wyxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.x, w: this.w)
func wyy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.y, z: this.z)
func wyzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.z, w: this.x)
func wyzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.z, w: this.y)
func wyzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.z, w: this.w)
func wyw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.y, z: this.w)
func wywx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.w, w: this.x)
func wywy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.w, w: this.y)
func wywz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.w, w: this.z)
func wyww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LPoint4f): LPoint2f = LPoint2f(x: this.w, y: this.z)
func wzx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.z, z: this.x)
func wzxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.x, w: this.y)
func wzxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.x, w: this.z)
func wzxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.x, w: this.w)
func wzy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.z, z: this.y)
func wzyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.y, w: this.x)
func wzyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.y, w: this.z)
func wzyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.y, w: this.w)
func wzz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.z, z: this.w)
func wzwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.w, w: this.x)
func wzwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.w, w: this.y)
func wzwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.w, w: this.z)
func wzww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LPoint4f): LPoint2f = LPoint2f(x: this.w, y: this.w)
func wwx*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LPoint4f): LPoint3f = LPoint3f(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LPoint4f): LPoint4f = LPoint4f(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LPoint2d): LPoint2d = LPoint2d(x: this.x, y: this.x)
func xxx*(this: LPoint2d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LPoint2d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LPoint2d): LPoint2d = LPoint2d(x: this.x, y: this.y)
func xyx*(this: LPoint2d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.y)
func xyy*(this: LPoint2d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LPoint2d): LPoint2d = LPoint2d(x: this.y, y: this.x)
func yxx*(this: LPoint2d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LPoint2d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LPoint2d): LPoint2d = LPoint2d(x: this.y, y: this.y)
func yyx*(this: LPoint2d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LPoint2d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint2d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LPoint3d): LPoint2d = LPoint2d(x: this.x, y: this.x)
func xxx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LPoint3d): LPoint2d = LPoint2d(x: this.x, y: this.y)
func xyx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.z)
func xyy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LPoint3d): LPoint2d = LPoint2d(x: this.x, y: this.z)
func xzx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.z)
func xzy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.z)
func xzz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LPoint3d): LPoint2d = LPoint2d(x: this.y, y: this.x)
func yxx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.z)
func yxz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LPoint3d): LPoint2d = LPoint2d(x: this.y, y: this.y)
func yyx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LPoint3d): LPoint2d = LPoint2d(x: this.y, y: this.z)
func yzx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.z)
func yzy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.z)
func yzz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LPoint3d): LPoint2d = LPoint2d(x: this.z, y: this.x)
func zxx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.z)
func zxz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LPoint3d): LPoint2d = LPoint2d(x: this.z, y: this.y)
func zyx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.z)
func zyy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LPoint3d): LPoint2d = LPoint2d(x: this.z, y: this.z)
func zzx*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LPoint3d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LPoint3d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LPoint4d): LPoint2d = LPoint2d(x: this.x, y: this.x)
func xxx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LPoint4d): LPoint2d = LPoint2d(x: this.x, y: this.y)
func xyx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.z)
func xyxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.x, w: this.w)
func xyy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.z, w: this.w)
func xyw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.y, z: this.w)
func xywx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.w, w: this.x)
func xywy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.w, w: this.y)
func xywz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.w, w: this.z)
func xyww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LPoint4d): LPoint2d = LPoint2d(x: this.x, y: this.z)
func xzx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.z)
func xzxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.x, w: this.w)
func xzy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.z)
func xzyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.y, w: this.w)
func xzz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.z, z: this.w)
func xzwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.w, w: this.x)
func xzwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.w, w: this.y)
func xzwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.w, w: this.z)
func xzww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LPoint4d): LPoint2d = LPoint2d(x: this.x, y: this.w)
func xwx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.w, z: this.x)
func xwxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.x, w: this.y)
func xwxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.x, w: this.z)
func xwxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.x, w: this.w)
func xwy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.w, z: this.y)
func xwyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.y, w: this.x)
func xwyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.y, w: this.z)
func xwyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.y, w: this.w)
func xwz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.w, z: this.z)
func xwzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.z, w: this.x)
func xwzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.z, w: this.y)
func xwzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.z, w: this.w)
func xww*(this: LPoint4d): LPoint3d = LPoint3d(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LPoint4d): LPoint2d = LPoint2d(x: this.y, y: this.x)
func yxx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.z)
func yxyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.y, w: this.w)
func yxz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.z, w: this.w)
func yxw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.x, z: this.w)
func yxwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.w, w: this.x)
func yxwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.w, w: this.y)
func yxwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.w, w: this.z)
func yxww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LPoint4d): LPoint2d = LPoint2d(x: this.y, y: this.y)
func yyx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.y, z: this.w)
func yywx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LPoint4d): LPoint2d = LPoint2d(x: this.y, y: this.z)
func yzx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.z)
func yzxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.x, w: this.w)
func yzy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.z)
func yzyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.y, w: this.w)
func yzz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.z, z: this.w)
func yzwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.w, w: this.x)
func yzwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.w, w: this.y)
func yzwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.w, w: this.z)
func yzww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LPoint4d): LPoint2d = LPoint2d(x: this.y, y: this.w)
func ywx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.w, z: this.x)
func ywxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.x, w: this.y)
func ywxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.x, w: this.z)
func ywxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.x, w: this.w)
func ywy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.w, z: this.y)
func ywyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.y, w: this.x)
func ywyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.y, w: this.z)
func ywyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.y, w: this.w)
func ywz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.w, z: this.z)
func ywzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.z, w: this.x)
func ywzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.z, w: this.y)
func ywzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.z, w: this.w)
func yww*(this: LPoint4d): LPoint3d = LPoint3d(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LPoint4d): LPoint2d = LPoint2d(x: this.z, y: this.x)
func zxx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.z)
func zxyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.y, w: this.w)
func zxz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.z, w: this.w)
func zxw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.x, z: this.w)
func zxwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.w, w: this.x)
func zxwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.w, w: this.y)
func zxwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.w, w: this.z)
func zxww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LPoint4d): LPoint2d = LPoint2d(x: this.z, y: this.y)
func zyx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.z)
func zyxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.x, w: this.w)
func zyy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.z, w: this.w)
func zyw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.y, z: this.w)
func zywx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.w, w: this.x)
func zywy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.w, w: this.y)
func zywz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.w, w: this.z)
func zyww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LPoint4d): LPoint2d = LPoint2d(x: this.z, y: this.z)
func zzx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LPoint4d): LPoint2d = LPoint2d(x: this.z, y: this.w)
func zwx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.w, z: this.x)
func zwxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.x, w: this.y)
func zwxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.x, w: this.z)
func zwxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.x, w: this.w)
func zwy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.w, z: this.y)
func zwyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.y, w: this.x)
func zwyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.y, w: this.z)
func zwyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.y, w: this.w)
func zwz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.w, z: this.z)
func zwzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.z, w: this.x)
func zwzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.z, w: this.y)
func zwzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.z, w: this.w)
func zww*(this: LPoint4d): LPoint3d = LPoint3d(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LPoint4d): LPoint2d = LPoint2d(x: this.w, y: this.x)
func wxx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.x, z: this.y)
func wxyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.y, w: this.x)
func wxyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.y, w: this.z)
func wxyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.y, w: this.w)
func wxz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.x, z: this.z)
func wxzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.z, w: this.x)
func wxzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.z, w: this.y)
func wxzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.z, w: this.w)
func wxw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.x, z: this.w)
func wxwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.w, w: this.x)
func wxwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.w, w: this.y)
func wxwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.w, w: this.z)
func wxww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LPoint4d): LPoint2d = LPoint2d(x: this.w, y: this.y)
func wyx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.y, z: this.x)
func wyxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.x, w: this.y)
func wyxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.x, w: this.z)
func wyxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.x, w: this.w)
func wyy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.y, z: this.z)
func wyzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.z, w: this.x)
func wyzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.z, w: this.y)
func wyzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.z, w: this.w)
func wyw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.y, z: this.w)
func wywx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.w, w: this.x)
func wywy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.w, w: this.y)
func wywz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.w, w: this.z)
func wyww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LPoint4d): LPoint2d = LPoint2d(x: this.w, y: this.z)
func wzx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.z, z: this.x)
func wzxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.x, w: this.y)
func wzxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.x, w: this.z)
func wzxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.x, w: this.w)
func wzy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.z, z: this.y)
func wzyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.y, w: this.x)
func wzyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.y, w: this.z)
func wzyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.y, w: this.w)
func wzz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.z, z: this.w)
func wzwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.w, w: this.x)
func wzwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.w, w: this.y)
func wzwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.w, w: this.z)
func wzww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LPoint4d): LPoint2d = LPoint2d(x: this.w, y: this.w)
func wwx*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LPoint4d): LPoint3d = LPoint3d(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LPoint4d): LPoint4d = LPoint4d(x: this.w, y: this.w, z: this.w, w: this.w)

func xx*(this: LPoint2i): LPoint2i = LPoint2i(x: this.x, y: this.x)
func xxx*(this: LPoint2i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxy*(this: LPoint2i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xy*(this: LPoint2i): LPoint2i = LPoint2i(x: this.x, y: this.y)
func xyx*(this: LPoint2i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.y)
func xyy*(this: LPoint2i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.y)
func yx*(this: LPoint2i): LPoint2i = LPoint2i(x: this.y, y: this.x)
func yxx*(this: LPoint2i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxy*(this: LPoint2i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yy*(this: LPoint2i): LPoint2i = LPoint2i(x: this.y, y: this.y)
func yyx*(this: LPoint2i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyy*(this: LPoint2i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint2i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.y)

func xx*(this: LPoint3i): LPoint2i = LPoint2i(x: this.x, y: this.x)
func xxx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.z)
func xxy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.z)
func xxz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.z)
func xy*(this: LPoint3i): LPoint2i = LPoint2i(x: this.x, y: this.y)
func xyx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.z)
func xyy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.z)
func xyz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.z)
func xz*(this: LPoint3i): LPoint2i = LPoint2i(x: this.x, y: this.z)
func xzx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.z)
func xzy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.z)
func xzz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.z)
func yx*(this: LPoint3i): LPoint2i = LPoint2i(x: this.y, y: this.x)
func yxx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.z)
func yxy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.z)
func yxz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.z)
func yy*(this: LPoint3i): LPoint2i = LPoint2i(x: this.y, y: this.y)
func yyx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.z)
func yyy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.z)
func yyz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.z)
func yz*(this: LPoint3i): LPoint2i = LPoint2i(x: this.y, y: this.z)
func yzx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.z)
func yzy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.z)
func yzz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.z)
func zx*(this: LPoint3i): LPoint2i = LPoint2i(x: this.z, y: this.x)
func zxx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.z)
func zxy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.z)
func zxz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.z)
func zy*(this: LPoint3i): LPoint2i = LPoint2i(x: this.z, y: this.y)
func zyx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.z)
func zyy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.z)
func zyz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.z)
func zz*(this: LPoint3i): LPoint2i = LPoint2i(x: this.z, y: this.z)
func zzx*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.z)
func zzy*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.z)
func zzz*(this: LPoint3i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LPoint3i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.z)

func xx*(this: LPoint4i): LPoint2i = LPoint2i(x: this.x, y: this.x)
func xxx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.x)
func xxxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.x)
func xxxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.y)
func xxxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.z)
func xxxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.x, w: this.w)
func xxy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.y)
func xxyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.x)
func xxyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.y)
func xxyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.z)
func xxyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.y, w: this.w)
func xxz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.z)
func xxzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.x)
func xxzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.y)
func xxzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.z)
func xxzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.z, w: this.w)
func xxw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.x, z: this.w)
func xxwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.w, w: this.x)
func xxwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.w, w: this.y)
func xxwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.w, w: this.z)
func xxww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.x, z: this.w, w: this.w)
func xy*(this: LPoint4i): LPoint2i = LPoint2i(x: this.x, y: this.y)
func xyx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.x)
func xyxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.x)
func xyxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.y)
func xyxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.z)
func xyxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.x, w: this.w)
func xyy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.y)
func xyyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.x)
func xyyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.y)
func xyyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.z)
func xyyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.y, w: this.w)
func xyz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.z)
func xyzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.x)
func xyzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.y)
func xyzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.z)
func xyzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.z, w: this.w)
func xyw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.y, z: this.w)
func xywx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.w, w: this.x)
func xywy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.w, w: this.y)
func xywz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.w, w: this.z)
func xyww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.y, z: this.w, w: this.w)
func xz*(this: LPoint4i): LPoint2i = LPoint2i(x: this.x, y: this.z)
func xzx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.x)
func xzxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.x)
func xzxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.y)
func xzxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.z)
func xzxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.x, w: this.w)
func xzy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.y)
func xzyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.x)
func xzyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.y)
func xzyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.z)
func xzyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.y, w: this.w)
func xzz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.z)
func xzzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.x)
func xzzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.y)
func xzzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.z)
func xzzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.z, w: this.w)
func xzw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.z, z: this.w)
func xzwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.w, w: this.x)
func xzwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.w, w: this.y)
func xzwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.w, w: this.z)
func xzww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.z, z: this.w, w: this.w)
func xw*(this: LPoint4i): LPoint2i = LPoint2i(x: this.x, y: this.w)
func xwx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.w, z: this.x)
func xwxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.x, w: this.x)
func xwxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.x, w: this.y)
func xwxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.x, w: this.z)
func xwxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.x, w: this.w)
func xwy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.w, z: this.y)
func xwyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.y, w: this.x)
func xwyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.y, w: this.y)
func xwyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.y, w: this.z)
func xwyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.y, w: this.w)
func xwz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.w, z: this.z)
func xwzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.z, w: this.x)
func xwzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.z, w: this.y)
func xwzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.z, w: this.z)
func xwzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.z, w: this.w)
func xww*(this: LPoint4i): LPoint3i = LPoint3i(x: this.x, y: this.w, z: this.w)
func xwwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.w, w: this.x)
func xwwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.w, w: this.y)
func xwwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.w, w: this.z)
func xwww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.x, y: this.w, z: this.w, w: this.w)
func yx*(this: LPoint4i): LPoint2i = LPoint2i(x: this.y, y: this.x)
func yxx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.x)
func yxxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.x)
func yxxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.y)
func yxxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.z)
func yxxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.x, w: this.w)
func yxy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.y)
func yxyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.x)
func yxyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.y)
func yxyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.z)
func yxyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.y, w: this.w)
func yxz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.z)
func yxzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.x)
func yxzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.y)
func yxzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.z)
func yxzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.z, w: this.w)
func yxw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.x, z: this.w)
func yxwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.w, w: this.x)
func yxwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.w, w: this.y)
func yxwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.w, w: this.z)
func yxww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.x, z: this.w, w: this.w)
func yy*(this: LPoint4i): LPoint2i = LPoint2i(x: this.y, y: this.y)
func yyx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.x)
func yyxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.x)
func yyxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.y)
func yyxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.z)
func yyxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.x, w: this.w)
func yyy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.y)
func yyyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.x)
func yyyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.y)
func yyyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.z)
func yyyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.y, w: this.w)
func yyz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.z)
func yyzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.x)
func yyzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.y)
func yyzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.z)
func yyzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.z, w: this.w)
func yyw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.y, z: this.w)
func yywx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.w, w: this.x)
func yywy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.w, w: this.y)
func yywz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.w, w: this.z)
func yyww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.y, z: this.w, w: this.w)
func yz*(this: LPoint4i): LPoint2i = LPoint2i(x: this.y, y: this.z)
func yzx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.x)
func yzxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.x)
func yzxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.y)
func yzxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.z)
func yzxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.x, w: this.w)
func yzy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.y)
func yzyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.x)
func yzyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.y)
func yzyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.z)
func yzyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.y, w: this.w)
func yzz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.z)
func yzzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.x)
func yzzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.y)
func yzzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.z)
func yzzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.z, w: this.w)
func yzw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.z, z: this.w)
func yzwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.w, w: this.x)
func yzwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.w, w: this.y)
func yzwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.w, w: this.z)
func yzww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.z, z: this.w, w: this.w)
func yw*(this: LPoint4i): LPoint2i = LPoint2i(x: this.y, y: this.w)
func ywx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.w, z: this.x)
func ywxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.x, w: this.x)
func ywxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.x, w: this.y)
func ywxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.x, w: this.z)
func ywxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.x, w: this.w)
func ywy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.w, z: this.y)
func ywyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.y, w: this.x)
func ywyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.y, w: this.y)
func ywyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.y, w: this.z)
func ywyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.y, w: this.w)
func ywz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.w, z: this.z)
func ywzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.z, w: this.x)
func ywzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.z, w: this.y)
func ywzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.z, w: this.z)
func ywzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.z, w: this.w)
func yww*(this: LPoint4i): LPoint3i = LPoint3i(x: this.y, y: this.w, z: this.w)
func ywwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.w, w: this.x)
func ywwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.w, w: this.y)
func ywwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.w, w: this.z)
func ywww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.y, y: this.w, z: this.w, w: this.w)
func zx*(this: LPoint4i): LPoint2i = LPoint2i(x: this.z, y: this.x)
func zxx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.x)
func zxxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.x)
func zxxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.y)
func zxxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.z)
func zxxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.x, w: this.w)
func zxy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.y)
func zxyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.x)
func zxyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.y)
func zxyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.z)
func zxyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.y, w: this.w)
func zxz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.z)
func zxzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.x)
func zxzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.y)
func zxzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.z)
func zxzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.z, w: this.w)
func zxw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.x, z: this.w)
func zxwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.w, w: this.x)
func zxwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.w, w: this.y)
func zxwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.w, w: this.z)
func zxww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.x, z: this.w, w: this.w)
func zy*(this: LPoint4i): LPoint2i = LPoint2i(x: this.z, y: this.y)
func zyx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.x)
func zyxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.x)
func zyxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.y)
func zyxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.z)
func zyxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.x, w: this.w)
func zyy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.y)
func zyyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.x)
func zyyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.y)
func zyyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.z)
func zyyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.y, w: this.w)
func zyz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.z)
func zyzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.x)
func zyzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.y)
func zyzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.z)
func zyzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.z, w: this.w)
func zyw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.y, z: this.w)
func zywx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.w, w: this.x)
func zywy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.w, w: this.y)
func zywz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.w, w: this.z)
func zyww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.y, z: this.w, w: this.w)
func zz*(this: LPoint4i): LPoint2i = LPoint2i(x: this.z, y: this.z)
func zzx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.x)
func zzxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.x)
func zzxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.y)
func zzxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.z)
func zzxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.x, w: this.w)
func zzy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.y)
func zzyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.x)
func zzyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.y)
func zzyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.z)
func zzyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.y, w: this.w)
func zzz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.z)
func zzzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.x)
func zzzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.y)
func zzzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.z)
func zzzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.z, w: this.w)
func zzw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.z, z: this.w)
func zzwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.w, w: this.x)
func zzwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.w, w: this.y)
func zzwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.w, w: this.z)
func zzww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.z, z: this.w, w: this.w)
func zw*(this: LPoint4i): LPoint2i = LPoint2i(x: this.z, y: this.w)
func zwx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.w, z: this.x)
func zwxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.x, w: this.x)
func zwxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.x, w: this.y)
func zwxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.x, w: this.z)
func zwxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.x, w: this.w)
func zwy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.w, z: this.y)
func zwyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.y, w: this.x)
func zwyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.y, w: this.y)
func zwyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.y, w: this.z)
func zwyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.y, w: this.w)
func zwz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.w, z: this.z)
func zwzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.z, w: this.x)
func zwzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.z, w: this.y)
func zwzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.z, w: this.z)
func zwzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.z, w: this.w)
func zww*(this: LPoint4i): LPoint3i = LPoint3i(x: this.z, y: this.w, z: this.w)
func zwwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.w, w: this.x)
func zwwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.w, w: this.y)
func zwwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.w, w: this.z)
func zwww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.z, y: this.w, z: this.w, w: this.w)
func wx*(this: LPoint4i): LPoint2i = LPoint2i(x: this.w, y: this.x)
func wxx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.x, z: this.x)
func wxxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.x, w: this.x)
func wxxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.x, w: this.y)
func wxxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.x, w: this.z)
func wxxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.x, w: this.w)
func wxy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.x, z: this.y)
func wxyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.y, w: this.x)
func wxyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.y, w: this.y)
func wxyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.y, w: this.z)
func wxyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.y, w: this.w)
func wxz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.x, z: this.z)
func wxzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.z, w: this.x)
func wxzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.z, w: this.y)
func wxzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.z, w: this.z)
func wxzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.z, w: this.w)
func wxw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.x, z: this.w)
func wxwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.w, w: this.x)
func wxwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.w, w: this.y)
func wxwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.w, w: this.z)
func wxww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.x, z: this.w, w: this.w)
func wy*(this: LPoint4i): LPoint2i = LPoint2i(x: this.w, y: this.y)
func wyx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.y, z: this.x)
func wyxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.x, w: this.x)
func wyxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.x, w: this.y)
func wyxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.x, w: this.z)
func wyxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.x, w: this.w)
func wyy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.y, z: this.y)
func wyyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.y, w: this.x)
func wyyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.y, w: this.y)
func wyyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.y, w: this.z)
func wyyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.y, w: this.w)
func wyz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.y, z: this.z)
func wyzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.z, w: this.x)
func wyzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.z, w: this.y)
func wyzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.z, w: this.z)
func wyzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.z, w: this.w)
func wyw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.y, z: this.w)
func wywx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.w, w: this.x)
func wywy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.w, w: this.y)
func wywz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.w, w: this.z)
func wyww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.y, z: this.w, w: this.w)
func wz*(this: LPoint4i): LPoint2i = LPoint2i(x: this.w, y: this.z)
func wzx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.z, z: this.x)
func wzxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.x, w: this.x)
func wzxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.x, w: this.y)
func wzxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.x, w: this.z)
func wzxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.x, w: this.w)
func wzy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.z, z: this.y)
func wzyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.y, w: this.x)
func wzyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.y, w: this.y)
func wzyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.y, w: this.z)
func wzyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.y, w: this.w)
func wzz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.z, z: this.z)
func wzzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.z, w: this.x)
func wzzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.z, w: this.y)
func wzzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.z, w: this.z)
func wzzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.z, w: this.w)
func wzw*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.z, z: this.w)
func wzwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.w, w: this.x)
func wzwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.w, w: this.y)
func wzwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.w, w: this.z)
func wzww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.z, z: this.w, w: this.w)
func ww*(this: LPoint4i): LPoint2i = LPoint2i(x: this.w, y: this.w)
func wwx*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.w, z: this.x)
func wwxx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.x, w: this.x)
func wwxy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.x, w: this.y)
func wwxz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.x, w: this.z)
func wwxw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.x, w: this.w)
func wwy*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.w, z: this.y)
func wwyx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.y, w: this.x)
func wwyy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.y, w: this.y)
func wwyz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.y, w: this.z)
func wwyw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.y, w: this.w)
func wwz*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.w, z: this.z)
func wwzx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.z, w: this.x)
func wwzy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.z, w: this.y)
func wwzz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.z, w: this.z)
func wwzw*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.z, w: this.w)
func www*(this: LPoint4i): LPoint3i = LPoint3i(x: this.w, y: this.w, z: this.w)
func wwwx*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.w, w: this.x)
func wwwy*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.w, w: this.y)
func wwwz*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.w, w: this.z)
func wwww*(this: LPoint4i): LPoint4i = LPoint4i(x: this.w, y: this.w, z: this.w, w: this.w)
